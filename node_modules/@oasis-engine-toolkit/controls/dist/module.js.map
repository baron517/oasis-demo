{"version":3,"file":"module.js","sources":["../src/Spherical.ts","../src/FreeControl.ts","../src/enums/ControlHandlerType.ts","../src/inputDevice/StaticInterfaceImplement.ts","../src/inputDevice/ControlKeyboard.ts","../src/inputDevice/ControlPointer.ts","../src/inputDevice/ControlWheel.ts","../src/OrbitControl.ts","../src/OrthoControl.ts"],"sourcesContent":["import { MathUtil, Vector3 } from \"oasis-engine\";\n\n// Prevent gimbal lock.\nconst ESP = MathUtil.zeroTolerance;\n\n// Spherical.\nexport class Spherical {\n  constructor(public radius?: number, public phi?: number, public theta?: number) {\n    this.radius = radius !== undefined ? radius : 1.0;\n    this.phi = phi !== undefined ? phi : 0;\n    this.theta = theta !== undefined ? theta : 0;\n  }\n\n  set(radius: number, phi: number, theta: number) {\n    this.radius = radius;\n    this.phi = phi;\n    this.theta = theta;\n    return this;\n  }\n\n  makeSafe() {\n    this.phi = MathUtil.clamp(this.phi, ESP, Math.PI - ESP);\n    return this;\n  }\n\n  setFromVec3(value: Vector3) {\n    this.radius = value.length();\n    if (this.radius === 0) {\n      this.theta = 0;\n      this.phi = 0;\n    } else {\n      this.theta = Math.atan2(value.x, value.z);\n      this.phi = Math.acos(MathUtil.clamp(value.y / this.radius, -1, 1));\n    }\n    return this;\n  }\n\n  setToVec3(value: Vector3) {\n    const { radius, phi, theta } = this;\n    const sinPhiRadius = Math.sin(phi) * radius;\n    value.set(sinPhiRadius * Math.sin(theta), radius * Math.cos(phi), sinPhiRadius * Math.cos(theta));\n    return this;\n  }\n}\n","import { Entity, MathUtil, Script, Vector3 } from \"oasis-engine\";\nimport { Spherical } from \"./Spherical\";\n\n// Prevent universal lock.\nconst ESP = MathUtil.zeroTolerance;\n\nfunction includes(array, ...filterArray) {\n  return filterArray.some((e) => array.indexOf(e) !== -1);\n}\n\n/**\n * The camera's roaming controller, can move up and down, left and right, and rotate the viewing angle.\n */\nexport class FreeControl extends Script {\n  _forward = new Vector3();\n  _right = new Vector3();\n  camera: Entity;\n  mainElement: any;\n  domElement: any;\n\n  /**\n   * Movement distance per second, the unit is the unit before MVP conversion.\n   */\n  movementSpeed: number;\n\n  /**\n   * Rotate speed.\n   */\n  rotateSpeed: number;\n\n  /**\n   * Simulate a ground.\n   */\n  floorMock: boolean;\n\n  /**\n   * Simulated ground height.\n   */\n  floorY: number;\n\n  /**\n   * Only rotate when press=true\n   */\n  press: boolean;\n  keysForward: Array<string | number>;\n  keysBackward: Array<string | number>;\n  keysLeft: Array<string | number>;\n  keysRight: Array<string | number>;\n\n  /**\n   * Radian of spherical.theta.\n   */\n  private _theta: number;\n\n  /**\n   * Radian of spherical.phi.\n   */\n  private _phi: number;\n\n  private _moveForward: boolean;\n  private _moveBackward: boolean;\n  private _moveLeft: boolean;\n  private _moveRight: boolean;\n\n  private _v3Cache: Vector3;\n  private _spherical: Spherical;\n  private _rotateOri: Array<number>;\n  private _events: Array<{ type: string; listener: () => {}; element?: any }>;\n\n  constructor(entity: Entity) {\n    super(entity);\n    this.camera = entity;\n    // @ts-ignore\n    // @todo In the future, the dependence on html elements will be removed and realized through the input of the packaging engine.\n    this.mainElement = this.engine.canvas._webCanvas;\n    this.domElement = document;\n\n    this.movementSpeed = 1.0;\n    this.rotateSpeed = 1.0;\n\n    this.floorMock = true;\n    this.floorY = 0;\n\n    this.press = false;\n\n    this.keysForward = [\"KeyW\", \"ArrowUp\"];\n    this.keysBackward = [\"KeyS\", \"ArrowDown\"];\n    this.keysLeft = [\"KeyA\", \"ArrowLeft\"];\n    this.keysRight = [\"KeyD\", \"ArrowRight\"];\n\n    this._theta = 0;\n    this._phi = 0;\n\n    // private variables\n    this._moveForward = false;\n    this._moveBackward = false;\n    this._moveLeft = false;\n    this._moveRight = false;\n\n    this._v3Cache = new Vector3();\n    this._spherical = new Spherical();\n    this._rotateOri = [0, 0];\n\n    this._events = [\n      { type: \"mousemove\", listener: this.onMouseMove.bind(this) },\n      { type: \"touchmove\", listener: this.onMouseMove.bind(this) },\n      { type: \"mousedown\", listener: this.onMouseDown.bind(this) },\n      { type: \"touchstart\", listener: this.onMouseDown.bind(this) },\n      { type: \"mouseup\", listener: this.onMouseUp.bind(this) },\n      { type: \"touchend\", listener: this.onMouseUp.bind(this) },\n      { type: \"keydown\", listener: this.onKeyDown.bind(this), element: window },\n      { type: \"keyup\", listener: this.onKeyUp.bind(this), element: window },\n      { type: \"contextmenu\", listener: this.onContextMenu.bind(this) }\n    ];\n\n    this.initEvents();\n\n    // init spherical\n    this.updateSpherical();\n  }\n\n  /**\n   * Browser right click event.\n   */\n  onContextMenu(event): void {\n    event.preventDefault();\n  }\n\n  /**\n   * Keyboard press event.\n   */\n  onKeyDown(event): void {\n    const { code, key, keyCode } = event;\n    if (includes(this.keysForward, code, key, keyCode)) {\n      this._moveForward = true;\n    } else if (includes(this.keysBackward, code, key, keyCode)) {\n      this._moveBackward = true;\n    } else if (includes(this.keysLeft, code, key, keyCode)) {\n      this._moveLeft = true;\n    } else if (includes(this.keysRight, code, key, keyCode)) {\n      this._moveRight = true;\n    }\n  }\n\n  /**\n   * Keyboard up event.\n   */\n  onKeyUp(event): void {\n    const { code, key, keyCode } = event;\n    if (includes(this.keysForward, code, key, keyCode)) {\n      this._moveForward = false;\n    } else if (includes(this.keysBackward, code, key, keyCode)) {\n      this._moveBackward = false;\n    } else if (includes(this.keysLeft, code, key, keyCode)) {\n      this._moveLeft = false;\n    } else if (includes(this.keysRight, code, key, keyCode)) {\n      this._moveRight = false;\n    }\n  }\n\n  /**\n   * Mouse press event.\n   */\n  onMouseDown(event): void {\n    event.stopPropagation();\n    event = (event.changedTouches && event.changedTouches[0]) || event;\n\n    if (this.domElement !== document) {\n      this.domElement.focus();\n    }\n\n    this.press = true;\n    this._rotateOri = [event.clientX, event.clientY];\n  }\n\n  /**\n   * Mouse up event.\n   */\n  onMouseUp(event): void {\n    event.preventDefault();\n    event.stopPropagation();\n\n    this.press = false;\n  }\n\n  /**\n   * Mouse movement event.\n   */\n  onMouseMove(event): void {\n    if (this.press === false) return;\n    if (this.enabled === false) return;\n\n    event.preventDefault();\n    event.stopPropagation();\n    event = (event.changedTouches && event.changedTouches[0]) || event;\n\n    const movementX = event.clientX - this._rotateOri[0];\n    const movementY = event.clientY - this._rotateOri[1];\n    this._rotateOri[0] = event.clientX;\n    this._rotateOri[1] = event.clientY;\n    const factorX = 180 / this.mainElement.width;\n    const factorY = 180 / this.mainElement.height;\n    const actualX = movementX * factorX;\n    const actualY = movementY * factorY;\n\n    this.rotate(-actualX, actualY);\n  }\n\n  /**\n   * The angle of rotation around the y axis and the x axis respectively.\n   * @param alpha - Radian to rotate around the y axis\n   * @param beta - Radian to rotate around the x axis\n   */\n  rotate(alpha: number = 0, beta: number = 0): void {\n    this._theta += MathUtil.degreeToRadian(alpha);\n    this._phi += MathUtil.degreeToRadian(beta);\n    this._phi = MathUtil.clamp(this._phi, ESP, Math.PI - ESP);\n    this._spherical.theta = this._theta;\n    this._spherical.phi = this._phi;\n    this._spherical.setToVec3(this._v3Cache);\n    Vector3.add(this.camera.transform.position, this._v3Cache, this._v3Cache);\n    this.camera.transform.lookAt(this._v3Cache, new Vector3(0, 1, 0));\n  }\n\n  onUpdate(delta: number): void {\n    if (this.enabled === false) return;\n\n    const actualMoveSpeed = (delta / 1000) * this.movementSpeed;\n    this.camera.transform.getWorldForward(this._forward);\n    this.camera.transform.getWorldRight(this._right);\n\n    if (this._moveForward) {\n      this.camera.transform.translate(this._forward.scale(actualMoveSpeed), false);\n    }\n    if (this._moveBackward) {\n      this.camera.transform.translate(this._forward.scale(-actualMoveSpeed), false);\n    }\n    if (this._moveLeft) {\n      this.camera.transform.translate(this._right.scale(-actualMoveSpeed), false);\n    }\n    if (this._moveRight) {\n      this.camera.transform.translate(this._right.scale(actualMoveSpeed), false);\n    }\n\n    if (this.floorMock) {\n      const position = this.camera.transform.position;\n      if (position.y !== this.floorY) {\n        this.camera.transform.setPosition(position.x, this.floorY, position.z);\n      }\n    }\n  }\n\n  /**\n   * Register browser events.\n   */\n  initEvents(): void {\n    this._events.forEach((ele) => {\n      if (ele.element) {\n        ele.element.addEventListener(ele.type, ele.listener, false);\n      } else {\n        this.mainElement.addEventListener(ele.type, ele.listener, false);\n      }\n    });\n  }\n\n  onDestroy(): void {\n    this._events.forEach((ele) => {\n      if (ele.element) {\n        ele.element.removeEventListener(ele.type, ele.listener, false);\n      } else {\n        this.mainElement.removeEventListener(ele.type, ele.listener, false);\n      }\n    });\n  }\n\n  /**\n   * must updateSpherical after quaternion has been changed\n   * @example\n   * Entity#lookAt([0,1,0],[0,1,0]);\n   * AFreeControls#updateSpherical();\n   */\n  updateSpherical(): void {\n    this._v3Cache.set(0, 0, -1);\n    Vector3.transformByQuat(this._v3Cache, this.camera.transform.rotationQuaternion, this._v3Cache);\n    this._spherical.setFromVec3(this._v3Cache);\n    this._theta = this._spherical.theta;\n    this._phi = this._spherical.phi;\n  }\n}\n","export enum ControlHandlerType {\n  None = 0,\n  ROTATE = 1,\n  ZOOM = 2,\n  PAN = 4,\n  All = 7\n}\n","/**\n *  Static interface implement decorator.\n *  https://stackoverflow.com/questions/13955157/how-to-define-static-property-in-typescript-interface\n */\n export function StaticInterfaceImplement<T>() {\n    return <U extends T>(constructor: U) => {\n      constructor;\n    };\n  }\n  ","import { InputManager, Keys, Vector3 } from \"oasis-engine\";\nimport { ControlHandlerType } from \"../enums/ControlHandlerType\";\nimport { OrbitControl } from \"../OrbitControl\";\nimport { IControlInput } from \"./IControlInput\";\nimport { StaticInterfaceImplement } from \"./StaticInterfaceImplement\";\n\n@StaticInterfaceImplement<IControlInput>()\nexport class ControlKeyboard {\n  static onUpdateHandler(input: InputManager): ControlHandlerType {\n    if (\n      input.isKeyHeldDown(Keys.ArrowLeft) ||\n      input.isKeyHeldDown(Keys.ArrowRight) ||\n      input.isKeyHeldDown(Keys.ArrowUp) ||\n      input.isKeyHeldDown(Keys.ArrowDown)\n    ) {\n      return ControlHandlerType.PAN;\n    } else {\n      return ControlHandlerType.None;\n    }\n  }\n\n  static onUpdateDelta(control: OrbitControl, outDelta: Vector3): void {\n    const { keyPanSpeed, input } = control;\n    outDelta.x = outDelta.y = 0;\n    if (input.isKeyHeldDown(Keys.ArrowLeft)) {\n      outDelta.x += keyPanSpeed;\n    }\n    if (input.isKeyHeldDown(Keys.ArrowRight)) {\n      outDelta.x -= keyPanSpeed;\n    }\n    if (input.isKeyHeldDown(Keys.ArrowUp)) {\n      outDelta.y += keyPanSpeed;\n    }\n    if (input.isKeyHeldDown(Keys.ArrowDown)) {\n      outDelta.y -= keyPanSpeed;\n    }\n  }\n}\n","import { InputManager, PointerButton, Vector3, Vector2 } from \"oasis-engine\";\nimport { ControlHandlerType } from \"../enums/ControlHandlerType\";\nimport { OrbitControl } from \"../OrbitControl\";\nimport { IControlInput } from \"./IControlInput\";\nimport { StaticInterfaceImplement } from \"./StaticInterfaceImplement\";\n\nenum DeltaType {\n  Moving,\n  Distance\n}\n@StaticInterfaceImplement<IControlInput>()\nexport class ControlPointer {\n  private static _deltaType: DeltaType = DeltaType.Moving;\n  private static _handlerType: ControlHandlerType = ControlHandlerType.None;\n  private static _frameIndex: number = 0;\n  private static _lastUsefulFrameIndex: number = -1;\n  private static _distanceOfPointers: number = 0;\n  static onUpdateHandler(input: InputManager): ControlHandlerType {\n    ++this._frameIndex;\n    const { pointers } = input;\n    switch (pointers.length) {\n      case 1:\n        if (input.isPointerHeldDown(PointerButton.Secondary)) {\n          this._updateType(ControlHandlerType.PAN, DeltaType.Moving);\n        } else if (input.isPointerHeldDown(PointerButton.Auxiliary)) {\n          this._updateType(ControlHandlerType.ZOOM, DeltaType.Moving);\n        } else if (input.isPointerHeldDown(PointerButton.Primary)) {\n          this._updateType(ControlHandlerType.ROTATE, DeltaType.Moving);\n        } else {\n          // When `onPointerMove` happens on the same frame as `onPointerUp`\n          // Need to record the movement of this frame\n          if (input.pointerMovingDelta.x !== 0 && input.pointerMovingDelta.y !== 0) {\n            if (input.isPointerUp(PointerButton.Secondary)) {\n              this._updateType(ControlHandlerType.PAN, DeltaType.Moving);\n            } else if (input.isPointerUp(PointerButton.Auxiliary)) {\n              this._updateType(ControlHandlerType.ZOOM, DeltaType.Moving);\n            } else if (input.isPointerUp(PointerButton.Primary)) {\n              this._updateType(ControlHandlerType.ROTATE, DeltaType.Moving);\n            } else {\n              this._updateType(ControlHandlerType.None, DeltaType.Moving);\n            }\n          } else {\n            this._updateType(ControlHandlerType.None, DeltaType.Moving);\n          }\n        }\n        break;\n      case 2:\n        this._updateType(ControlHandlerType.ZOOM, DeltaType.Distance);\n        break;\n      case 3:\n        this._updateType(ControlHandlerType.PAN, DeltaType.Moving);\n        break;\n      default:\n        this._updateType(ControlHandlerType.None, DeltaType.Moving);\n        break;\n    }\n    return this._handlerType;\n  }\n\n  static onUpdateDelta(control: OrbitControl, outDelta: Vector3): void {\n    const { _frameIndex: frameIndex } = this;\n    switch (this._deltaType) {\n      case DeltaType.Moving:\n        if (this._lastUsefulFrameIndex === frameIndex - 1) {\n          const { pointerMovingDelta } = control.input;\n          outDelta.x = pointerMovingDelta.x;\n          outDelta.y = pointerMovingDelta.y;\n        } else {\n          outDelta.x = 0;\n          outDelta.y = 0;\n        }\n        break;\n      case DeltaType.Distance:\n        const { pointers } = control.input;\n        const pointer1 = pointers[0];\n        const pointer2 = pointers[1];\n        const curDistance = Vector2.distance(pointer1.position, pointer2.position);\n        if (this._lastUsefulFrameIndex === frameIndex - 1) {\n          outDelta.set(0, this._distanceOfPointers - curDistance, 0);\n        } else {\n          outDelta.set(0, 0, 0);\n        }\n        this._distanceOfPointers = curDistance;\n        break;\n      default:\n        break;\n    }\n    this._lastUsefulFrameIndex = frameIndex;\n  }\n\n  private static _updateType(handlerType: ControlHandlerType, deltaType: DeltaType) {\n    if (this._handlerType !== handlerType || this._deltaType !== deltaType) {\n      this._handlerType = handlerType;\n      this._deltaType = deltaType;\n      this._lastUsefulFrameIndex = -1;\n    }\n  }\n}\n","import { InputManager, Vector3 } from \"oasis-engine\";\nimport { ControlHandlerType } from \"../enums/ControlHandlerType\";\nimport { OrbitControl } from \"../OrbitControl\";\nimport { IControlInput } from \"./IControlInput\";\nimport { StaticInterfaceImplement } from \"./StaticInterfaceImplement\";\n\n@StaticInterfaceImplement<IControlInput>()\nexport class ControlWheel {\n  static onUpdateHandler(input: InputManager): ControlHandlerType {\n    const { wheelDelta } = input;\n    if (wheelDelta.x === 0 && wheelDelta.y === 0 && wheelDelta.z === 0) {\n      return ControlHandlerType.None;\n    } else {\n      return ControlHandlerType.ZOOM;\n    }\n  }\n\n  static onUpdateDelta(control: OrbitControl, outDelta: Vector3): void {\n    outDelta.copyFrom(control.input.wheelDelta);\n  }\n}\n","import { Camera, Canvas, InputManager, Script, Transform, Vector3 } from \"oasis-engine\";\nimport { ControlHandlerType } from \"./enums/ControlHandlerType\";\nimport { IControlInput } from \"./inputDevice/IControlInput\";\nimport { ControlKeyboard } from \"./inputDevice/ControlKeyboard\";\nimport { ControlPointer } from \"./inputDevice/ControlPointer\";\nimport { ControlWheel } from \"./inputDevice/ControlWheel\";\nimport { Spherical } from \"./Spherical\";\n\n/**\n * The camera's track controller, can rotate, zoom, pan, support mouse and touch events.\n */\nexport class OrbitControl extends Script {\n  canvas: Canvas;\n  input: InputManager;\n  inputDevices: IControlInput[] = [ControlKeyboard, ControlPointer, ControlWheel];\n  camera: Camera;\n  cameraTransform: Transform;\n\n  /** Target position. */\n  target: Vector3 = new Vector3();\n  /** Up vector */\n  up: Vector3 = new Vector3(0, 1, 0);\n  /** Whether to automatically rotate the camera, the default is false. */\n  autoRotate: boolean = false;\n  /** The radian of automatic rotation per second. */\n  autoRotateSpeed: number = Math.PI;\n  /** Whether to enable camera damping, the default is true. */\n  enableDamping: boolean = true;\n  /** Rotation speed, default is 1.0 . */\n  rotateSpeed: number = 1.0;\n  /** Camera zoom speed, the default is 1.0. */\n  zoomSpeed: number = 1.0;\n  /** Keyboard translation speed, the default is 7.0 . */\n  keyPanSpeed: number = 7.0;\n  /** Rotation damping parameter, default is 0.1 . */\n  dampingFactor: number = 0.1;\n  /** Zoom damping parameter, default is 0.2 . */\n  zoomFactor: number = 0.2;\n  /**  The minimum distance, the default is 0.1, should be greater than 0. */\n  minDistance: number = 0.1;\n  /** The maximum distance, the default is infinite, should be greater than the minimum distance. */\n  maxDistance: number = Infinity;\n  /** Minimum zoom speed, the default is 0.0. */\n  minZoom: number = 0.0;\n  /** Maximum zoom speed, the default is positive infinity. */\n  maxZoom: number = Infinity;\n  /** The minimum radian in the vertical direction, the default is 0 radian, the value range is 0 - Math.PI. */\n  minPolarAngle: number = 0.0;\n  /** The maximum radian in the vertical direction, the default is Math.PI, and the value range is 0 - Math.PI. */\n  maxPolarAngle: number = Math.PI;\n  /** The minimum radian in the horizontal direction, the default is negative infinity. */\n  minAzimuthAngle: number = -Infinity;\n  /** The maximum radian in the horizontal direction, the default is positive infinity.  */\n  maxAzimuthAngle: number = Infinity;\n\n  private _enableKeys: boolean = true;\n  private _spherical: Spherical = new Spherical();\n  private _sphericalDelta: Spherical = new Spherical();\n  private _sphericalDump: Spherical = new Spherical();\n  private _zoomFrag: number = 0;\n  private _scale: number = 1;\n  private _panOffset: Vector3 = new Vector3();\n  private _tempVec3: Vector3 = new Vector3();\n  private _enableHandler: number = ControlHandlerType.All;\n\n  /**\n   * Return whether to enable keyboard.\n   */\n  get enableKeys(): boolean {\n    return this._enableKeys;\n  }\n\n  set enableKeys(value: boolean) {\n    if (this._enableKeys !== value) {\n      this._enableKeys = value;\n      const { inputDevices } = this;\n      if (value) {\n        inputDevices.push(ControlKeyboard);\n      } else {\n        for (let i = inputDevices.length - 1; i >= 0; i--) {\n          if (inputDevices[i] === ControlKeyboard) {\n            inputDevices.splice(i, 1);\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   *  Return Whether to enable rotation, the default is true.\n   */\n  get enableRotate(): boolean {\n    return (this._enableHandler & ControlHandlerType.ROTATE) !== 0;\n  }\n\n  set enableRotate(value: boolean) {\n    if (value) {\n      this._enableHandler |= ControlHandlerType.ROTATE;\n    } else {\n      this._enableHandler &= ~ControlHandlerType.ROTATE;\n    }\n  }\n\n  /**\n   *  Whether to enable camera damping, the default is true.\n   */\n  get enableZoom(): boolean {\n    return (this._enableHandler & ControlHandlerType.ZOOM) !== 0;\n  }\n\n  set enableZoom(value: boolean) {\n    if (value) {\n      this._enableHandler |= ControlHandlerType.ZOOM;\n    } else {\n      this._enableHandler &= ~ControlHandlerType.ZOOM;\n    }\n  }\n\n  /**\n   *  Whether to enable translation, the default is true.\n   */\n  get enablePan(): boolean {\n    return (this._enableHandler & ControlHandlerType.PAN) !== 0;\n  }\n\n  set enablePan(value: boolean) {\n    if (value) {\n      this._enableHandler |= ControlHandlerType.PAN;\n    } else {\n      this._enableHandler &= ~ControlHandlerType.PAN;\n    }\n  }\n\n  onAwake(): void {\n    const { engine, entity } = this;\n    this.canvas = engine.canvas;\n    this.input = engine.inputManager;\n    this.camera = entity.getComponent(Camera);\n    this.cameraTransform = entity.transform;\n  }\n\n  onUpdate(deltaTime: number): void {\n    /** Update this._sphericalDelta, this._scale and this._panOffset. */\n    this._updateInputDelta(deltaTime);\n    /** Update camera's transform. */\n    this._updateTransform();\n  }\n\n  private _updateInputDelta(deltaTime: number): void {\n    let curHandlerType = ControlHandlerType.None;\n    const { _tempVec3: delta, _enableHandler: enableHandler } = this;\n    const { inputDevices, input } = this;\n    for (let i = inputDevices.length - 1; i >= 0; i--) {\n      const handler = inputDevices[i];\n      const handlerType = handler.onUpdateHandler(input);\n      if (handlerType & enableHandler) {\n        curHandlerType |= handlerType;\n        handler.onUpdateDelta(this, delta);\n        switch (handlerType) {\n          case ControlHandlerType.ROTATE:\n            this._rotate(delta);\n            break;\n          case ControlHandlerType.ZOOM:\n            this._zoom(delta);\n            break;\n          case ControlHandlerType.PAN:\n            this._pan(delta);\n            break;\n          default:\n            break;\n        }\n      }\n    }\n    const { _sphericalDump, _sphericalDelta } = this;\n    if (this.enableDamping) {\n      if (enableHandler & ControlHandlerType.ZOOM && curHandlerType ^ ControlHandlerType.ZOOM) {\n        this._zoomFrag *= 1 - this.zoomFactor;\n      }\n      if (enableHandler & ControlHandlerType.ROTATE && curHandlerType ^ ControlHandlerType.ROTATE) {\n        _sphericalDelta.theta = _sphericalDump.theta *= 1 - this.dampingFactor;\n        _sphericalDelta.phi = _sphericalDump.phi *= 1 - this.dampingFactor;\n      }\n    }\n    if (curHandlerType === ControlHandlerType.None && this.autoRotate) {\n      const rotateAngle = (this.autoRotateSpeed / 1000) * deltaTime;\n      _sphericalDelta.theta -= rotateAngle;\n    }\n  }\n\n  private _rotate(delta: Vector3): void {\n    const radianLeft = ((2 * Math.PI * delta.x) / this.canvas.width) * this.rotateSpeed;\n    this._sphericalDelta.theta -= radianLeft;\n    const radianUp = ((2 * Math.PI * delta.y) / this.canvas.height) * this.rotateSpeed;\n    this._sphericalDelta.phi -= radianUp;\n    if (this.enableDamping) {\n      this._sphericalDump.theta = -radianLeft;\n      this._sphericalDump.phi = -radianUp;\n    }\n  }\n\n  private _zoom(delta: Vector3): void {\n    if (delta.y > 0) {\n      this._scale /= Math.pow(0.95, this.zoomSpeed);\n    } else if (delta.y < 0) {\n      this._scale *= Math.pow(0.95, this.zoomSpeed);\n    }\n  }\n\n  private _pan(delta: Vector3): void {\n    const { cameraTransform } = this;\n    const { elements } = cameraTransform.worldMatrix;\n    const { height } = this.canvas;\n    const targetDistance =\n      Vector3.distance(cameraTransform.position, this.target) * (this.camera.fieldOfView / 2) * (Math.PI / 180);\n    const distanceLeft = -2 * delta.x * (targetDistance / height);\n    const distanceUp = 2 * delta.y * (targetDistance / height);\n    this._panOffset.x += elements[0] * distanceLeft + elements[4] * distanceUp;\n    this._panOffset.y += elements[1] * distanceLeft + elements[5] * distanceUp;\n    this._panOffset.z += elements[2] * distanceLeft + elements[6] * distanceUp;\n  }\n\n  private _updateTransform(): void {\n    const { cameraTransform, target, _tempVec3, _spherical, _sphericalDelta, _panOffset } = this;\n    Vector3.subtract(cameraTransform.position, target, _tempVec3);\n    _spherical.setFromVec3(_tempVec3);\n    _spherical.theta += _sphericalDelta.theta;\n    _spherical.phi += _sphericalDelta.phi;\n    _spherical.theta = Math.max(this.minAzimuthAngle, Math.min(this.maxAzimuthAngle, _spherical.theta));\n    _spherical.phi = Math.max(this.minPolarAngle, Math.min(this.maxPolarAngle, _spherical.phi));\n    _spherical.makeSafe();\n\n    if (this._scale !== 1) {\n      this._zoomFrag = _spherical.radius * (this._scale - 1);\n    }\n    _spherical.radius += this._zoomFrag;\n    _spherical.radius = Math.max(this.minDistance, Math.min(this.maxDistance, _spherical.radius));\n    _spherical.setToVec3(_tempVec3);\n    Vector3.add(target.add(_panOffset), _tempVec3, cameraTransform.position);\n    cameraTransform.lookAt(target, this.up);\n    /** Reset cache value. */\n    this._zoomFrag = 0;\n    this._scale = 1;\n    _sphericalDelta.set(0, 0, 0);\n    _panOffset.set(0, 0, 0);\n  }\n}\n","import { Camera, Canvas, Entity, InputManager, Script, Transform, Vector3 } from \"oasis-engine\";\nimport { ControlHandlerType } from \"./enums/ControlHandlerType\";\nimport { IControlInput } from \"./inputDevice/IControlInput\";\nimport { ControlKeyboard } from \"./inputDevice/ControlKeyboard\";\nimport { ControlPointer } from \"./inputDevice/ControlPointer\";\nimport { ControlWheel } from \"./inputDevice/ControlWheel\";\n\n/**\n * The camera's track controller, can rotate, zoom, pan, support mouse and touch events.\n */\nexport class OrthoControl extends Script {\n  canvas: Canvas;\n  input: InputManager;\n  inputDevices: IControlInput[] = [ControlKeyboard, ControlPointer, ControlWheel];\n  camera: Camera;\n  cameraTransform: Transform;\n\n  /** Target position. */\n  target: Vector3 = new Vector3();\n  /** Up vector */\n  up: Vector3 = new Vector3(0, 1, 0);\n  /** Whether to automatically rotate the camera, the default is false. */\n  autoRotate: boolean = false;\n  /** The radian of automatic rotation per second. */\n  autoRotateSpeed: number = Math.PI;\n  /** Whether to enable keyboard. */\n  enableKeys: boolean = false;\n  /** Whether to enable camera damping, the default is true. */\n  enableDamping: boolean = true;\n  /** Rotation speed, default is 1.0 . */\n  rotateSpeed: number = 1.0;\n  /** Camera zoom speed, the default is 1.0. */\n  zoomSpeed: number = 1.0;\n  /** Keyboard translation speed, the default is 7.0 . */\n  keyPanSpeed: number = 7.0;\n  /** Rotation damping parameter, default is 0.1 . */\n  dampingFactor: number = 0.1;\n  /** Zoom damping parameter, default is 0.2 . */\n  zoomFactor: number = 0.2;\n  /**  The minimum distance, the default is 0.1, should be greater than 0. */\n  minDistance: number = 0.1;\n  /** The maximum distance, the default is infinite, should be greater than the minimum distance. */\n  maxDistance: number = Infinity;\n  /** Minimum zoom speed, the default is 0.0. */\n  minZoom: number = 0.0;\n  /** Maximum zoom speed, the default is positive infinity. */\n  maxZoom: number = Infinity;\n  /** The minimum radian in the vertical direction, the default is 0 radian, the value range is 0 - Math.PI. */\n  minPolarAngle: number = 0.0;\n  /** The maximum radian in the vertical direction, the default is Math.PI, and the value range is 0 - Math.PI. */\n  maxPolarAngle: number = Math.PI;\n  /** The minimum radian in the horizontal direction, the default is negative infinity. */\n  minAzimuthAngle: number = -Infinity;\n  /** The maximum radian in the horizontal direction, the default is positive infinity.  */\n  maxAzimuthAngle: number = Infinity;\n\n  private _zoomScaleUnit: number = 25;\n  private _scale: number = 1;\n  private _panOffset: Vector3 = new Vector3();\n  private _tempVec3: Vector3 = new Vector3();\n  private _enableHandler: number = ControlHandlerType.All;\n\n  /**\n   *  Return Whether to enable rotation, the default is true.\n   */\n  get enableRotate(): boolean {\n    return (this._enableHandler & ControlHandlerType.ROTATE) !== 0;\n  }\n\n  set enableRotate(value: boolean) {\n    if (value) {\n      this._enableHandler |= ControlHandlerType.ROTATE;\n    } else {\n      this._enableHandler &= ~ControlHandlerType.ROTATE;\n    }\n  }\n\n  /**\n   *  Whether to enable camera damping, the default is true.\n   */\n  get enableZoom(): boolean {\n    return (this._enableHandler & ControlHandlerType.ZOOM) !== 0;\n  }\n\n  set enableZoom(value: boolean) {\n    if (value) {\n      this._enableHandler |= ControlHandlerType.ZOOM;\n    } else {\n      this._enableHandler &= ~ControlHandlerType.ZOOM;\n    }\n  }\n\n  /**\n   *  Whether to enable translation, the default is true.\n   */\n  get enablePan(): boolean {\n    return (this._enableHandler & ControlHandlerType.PAN) !== 0;\n  }\n\n  set enablePan(value: boolean) {\n    if (value) {\n      this._enableHandler |= ControlHandlerType.PAN;\n    } else {\n      this._enableHandler &= ~ControlHandlerType.PAN;\n    }\n  }\n\n  constructor(entity: Entity) {\n    super(entity);\n    this.enableRotate = false;\n  }\n\n  onAwake(): void {\n    const { engine, entity } = this;\n    this.canvas = engine.canvas;\n    this.input = engine.inputManager;\n    this.camera = entity.getComponent(Camera);\n    this.cameraTransform = entity.transform;\n  }\n\n  onUpdate(deltaTime: number): void {\n    /** Update this._sphericalDelta, this._scale and this._panOffset. */\n    this._updateInputDelta(deltaTime);\n    /** Update camera's transform. */\n    this._updateCamera();\n  }\n\n  private _updateInputDelta(deltaTime: number): void {\n    let curHandlerType = ControlHandlerType.None;\n    const { _tempVec3: delta, _enableHandler: enableHandler } = this;\n    const { inputDevices, input } = this;\n    for (let i = inputDevices.length - 1; i >= 0; i--) {\n      const handler = inputDevices[i];\n      const handlerType = handler.onUpdateHandler(input);\n      if (handlerType & enableHandler) {\n        curHandlerType |= handlerType;\n        handler.onUpdateDelta(this, delta);\n        switch (handlerType) {\n          case ControlHandlerType.ZOOM:\n            this._zoom(delta);\n            break;\n          case ControlHandlerType.PAN:\n            this._pan(delta);\n            break;\n          default:\n            break;\n        }\n      }\n    }\n  }\n\n  private _zoom(delta: Vector3): void {\n    if (delta.y > 0) {\n      this._scale /= Math.pow(0.95, this.zoomSpeed);\n    } else if (delta.y < 0) {\n      this._scale *= Math.pow(0.95, this.zoomSpeed);\n    }\n  }\n\n  private _pan(delta: Vector3): void {\n    this._panOffset.copyFrom(delta);\n  }\n\n  private _updateCamera(): void {\n    const { cameraTransform, camera, _panOffset } = this;\n\n    // Update Zoom\n    const sizeDiff = this._zoomScaleUnit * (this._scale - 1);\n    const size = camera.orthographicSize + sizeDiff;\n    camera.orthographicSize = Math.max(this.minZoom, Math.min(this.maxZoom, size));\n    \n    // Update X and Y\n    const { width, height } = this.canvas;\n    const { x, y } = _panOffset;\n    const doubleOrthographicSize = camera.orthographicSize * 2;\n    const width3D = doubleOrthographicSize * camera.aspectRatio;\n    const height3D = doubleOrthographicSize;\n    const cameraPosition = cameraTransform.position;\n    const curPosition = this._tempVec3;\n    curPosition.x = cameraPosition.x - (x * width3D) / width;\n    curPosition.y = cameraPosition.y + (y * height3D) / height;\n    curPosition.z = cameraPosition.z;\n    \n    // Update camera transform\n    cameraTransform.position = curPosition;\n    /** Reset cache value. */\n    this._scale = 1;\n    _panOffset.set(0, 0, 0);\n  }\n}\n"],"names":["ESP","MathUtil","zeroTolerance","Spherical","radius","phi","theta","undefined","set","makeSafe","clamp","Math","PI","setFromVec3","value","length","atan2","x","z","acos","y","setToVec3","sinPhiRadius","sin","cos","includes","array","filterArray","some","e","indexOf","FreeControl","entity","_forward","Vector3","_right","camera","mainElement","domElement","movementSpeed","rotateSpeed","floorMock","floorY","press","keysForward","keysBackward","keysLeft","keysRight","_theta","_phi","_moveForward","_moveBackward","_moveLeft","_moveRight","_v3Cache","_spherical","_rotateOri","_events","engine","canvas","_webCanvas","document","type","listener","onMouseMove","bind","onMouseDown","onMouseUp","onKeyDown","element","window","onKeyUp","onContextMenu","initEvents","updateSpherical","event","preventDefault","code","key","keyCode","stopPropagation","changedTouches","focus","clientX","clientY","enabled","movementX","movementY","factorX","width","factorY","height","actualX","actualY","rotate","alpha","beta","degreeToRadian","add","transform","position","lookAt","onUpdate","delta","actualMoveSpeed","getWorldForward","getWorldRight","translate","scale","setPosition","forEach","ele","addEventListener","onDestroy","removeEventListener","transformByQuat","rotationQuaternion","Script","ControlHandlerType","StaticInterfaceImplement","constructor","ControlKeyboard","_dec","_class","onUpdateHandler","input","isKeyHeldDown","Keys","ArrowLeft","ArrowRight","ArrowUp","ArrowDown","PAN","None","onUpdateDelta","control","outDelta","keyPanSpeed","DeltaType","ControlPointer","_frameIndex","pointers","isPointerHeldDown","PointerButton","Secondary","_updateType","Moving","Auxiliary","ZOOM","Primary","ROTATE","pointerMovingDelta","isPointerUp","Distance","_handlerType","frameIndex","_deltaType","_lastUsefulFrameIndex","pointer1","pointer2","curDistance","Vector2","distance","_distanceOfPointers","handlerType","deltaType","ControlWheel","wheelDelta","copyFrom","OrbitControl","inputDevices","cameraTransform","target","up","autoRotate","autoRotateSpeed","enableDamping","zoomSpeed","dampingFactor","zoomFactor","minDistance","maxDistance","Infinity","minZoom","maxZoom","minPolarAngle","maxPolarAngle","minAzimuthAngle","maxAzimuthAngle","_enableKeys","_sphericalDelta","_sphericalDump","_zoomFrag","_scale","_panOffset","_tempVec3","_enableHandler","All","onAwake","inputManager","getComponent","Camera","deltaTime","_updateInputDelta","_updateTransform","curHandlerType","enableHandler","i","handler","_rotate","_zoom","_pan","rotateAngle","radianLeft","radianUp","pow","elements","worldMatrix","targetDistance","fieldOfView","distanceLeft","distanceUp","subtract","max","min","push","splice","OrthoControl","enableKeys","_zoomScaleUnit","enableRotate","_updateCamera","sizeDiff","size","orthographicSize","doubleOrthographicSize","width3D","aspectRatio","height3D","cameraPosition","curPosition"],"mappings":"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"}