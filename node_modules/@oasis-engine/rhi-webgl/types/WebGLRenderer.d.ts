import { Camera, CameraClearFlags, Canvas, Engine, GLCapabilityType, IHardwareRenderer, IPlatformRenderTarget, IPlatformTexture2D, IPlatformTextureCube, Mesh, RenderTarget, SubMesh, Texture2D, Texture2DArray, TextureCube } from "@oasis-engine/core";
import { IPlatformPrimitive } from "@oasis-engine/design";
import { Color } from "@oasis-engine/math";
import { GLCapability } from "./GLCapability";
import { GLRenderStates } from "./GLRenderStates";
import { GLTexture } from "./GLTexture";
import { GLTexture2DArray } from "./GLTexture2DArray";
import { WebGLExtension } from "./type";
/**
 * WebGL mode.
 */
export declare enum WebGLMode {
    /** Auto, use WebGL2.0 if support, or will fallback to WebGL1.0. */
    Auto = 0,
    /** WebGL2.0. */
    WebGL2 = 1,
    /** WebGL1.0, */
    WebGL1 = 2
}
/**
 * WebGL renderer options.
 */
export interface WebGLRendererOptions extends WebGLContextAttributes {
    /** WebGL mode.*/
    webGLMode?: WebGLMode;
}
/**
 * WebGL renderer, including WebGL1.0 and WebGL2.0.
 */
export declare class WebGLRenderer implements IHardwareRenderer {
    _currentBind: any;
    private _options;
    private _gl;
    private _renderStates;
    private _extensions;
    private _capability;
    private _isWebGL2;
    private _webCanvas;
    private _activeTextureID;
    private _activeTextures;
    private _lastViewport;
    private _lastClearColor;
    private _scissorEnable;
    get isWebGL2(): boolean;
    /**
     * GL Context
     * @member {WebGLRenderingContext}
     */
    get gl(): (WebGLRenderingContext & WebGLExtension) | WebGL2RenderingContext;
    get renderStates(): GLRenderStates;
    get capability(): GLCapability;
    get canIUseMoreJoints(): boolean;
    constructor(options?: WebGLRendererOptions);
    init(canvas: Canvas): void;
    createPlatformPrimitive(primitive: Mesh): IPlatformPrimitive;
    createPlatformTexture2D(texture2D: Texture2D): IPlatformTexture2D;
    createPlatformTexture2DArray(texture2D: Texture2DArray): GLTexture2DArray;
    createPlatformTextureCube(textureCube: TextureCube): IPlatformTextureCube;
    createPlatformRenderTarget(target: RenderTarget): IPlatformRenderTarget;
    requireExtension(ext: any): any;
    canIUse(capabilityType: GLCapabilityType): boolean;
    canIUseCompressedTextureInternalFormat(type: number): boolean;
    viewport(x: number, y: number, width: number, height: number): void;
    colorMask(r: any, g: any, b: any, a: any): void;
    clearRenderTarget(engine: Engine, clearFlags: CameraClearFlags, clearColor: Color): void;
    drawPrimitive(primitive: Mesh, subPrimitive: SubMesh, shaderProgram: any): void;
    activeRenderTarget(renderTarget: RenderTarget, camera: Camera, mipLevel: number): void;
    destroy(): void;
    activeTexture(textureID: number): void;
    bindTexture(texture: GLTexture): void;
}
