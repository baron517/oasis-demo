{"version":3,"file":"module.js","sources":["../src/enums/ContainmentType.ts","../src/enums/PlaneIntersectionType.ts","../src/MathUtil.ts","../src/Vector3.ts","../src/BoundingSphere.ts","../src/BoundingBox.ts","../src/CollisionUtil.ts","../src/Plane.ts","../src/BoundingFrustum.ts","../src/Matrix3x3.ts","../src/Quaternion.ts","../src/Matrix.ts","../src/Ray.ts","../src/Vector2.ts","../src/Vector4.ts","../src/Color.ts","../src/Rect.ts","../src/SphericalHarmonics3.ts"],"sourcesContent":["/**\n * Defines how the bounding volumes intersects or contain one another.\n */\nexport enum ContainmentType {\n  /** Indicates that there is no overlap between two bounding volumes. */\n  Disjoint,\n  /** Indicates that one bounding volume completely contains another volume. */\n  Contains,\n  /** Indicates that bounding volumes partially overlap one another. */\n  Intersects\n}\n","/**\n * Defines the intersection between a plane and a bounding volume.\n */\nexport enum PlaneIntersectionType {\n  /** There is no intersection, the bounding volume is in the back of the plane. */\n  Back,\n  /** There is no intersection, the bounding volume is in the front of the plane. */\n  Front,\n  /** The plane is intersected. */\n  Intersecting\n}\n","/**\n * Common utility methods for math operations.\n */\nexport class MathUtil {\n  /** The value for which all absolute numbers smaller than are considered equal to zero. */\n  static readonly zeroTolerance: number = 1e-6;\n  /** The conversion factor that radian to degree. */\n  static readonly radToDegreeFactor: number = 180 / Math.PI;\n  /** The conversion factor that degree to radian. */\n  static readonly degreeToRadFactor: number = Math.PI / 180;\n\n  /**\n   * Clamps the specified value.\n   * @param v - The specified value\n   * @param min - The min value\n   * @param max - The max value\n   * @returns The result of clamping a value between min and max\n   */\n  static clamp(v: number, min: number, max: number): number {\n    return Math.max(min, Math.min(max, v));\n  }\n\n  /**\n   * Checks if a and b are almost equals.\n   * The absolute value of the difference between a and b is close to zero.\n   * @param a - The left value to compare\n   * @param b - The right value to compare\n   * @returns True if a almost equal to b, false otherwise\n   */\n  static equals(a: number, b: number): boolean {\n    return Math.abs(a - b) <= MathUtil.zeroTolerance;\n  }\n\n  /**\n   * Determines whether the specified v is pow2.\n   * @param v - The specified v\n   * @returns True if the specified v is pow2, false otherwise\n   */\n  static isPowerOf2(v: number): boolean {\n    return (v & (v - 1)) === 0;\n  }\n\n  /**\n   * Modify the specified r from radian to degree.\n   * @param r - The specified r\n   * @returns The degree value\n   */\n  static radianToDegree(r: number): number {\n    return r * MathUtil.radToDegreeFactor;\n  }\n\n  /**\n   * Modify the specified d from degree to radian.\n   * @param d - The specified d\n   * @returns The radian value\n   */\n  static degreeToRadian(d: number): number {\n    return d * MathUtil.degreeToRadFactor;\n  }\n}\n","import { IClone } from \"./IClone\";\nimport { ICopy } from \"./ICopy\";\nimport { MathUtil } from \"./MathUtil\";\nimport { Matrix } from \"./Matrix\";\nimport { Quaternion } from \"./Quaternion\";\nimport { Vector4 } from \"./Vector4\";\n\n/**\n * Describes a 3D-vector.\n */\nexport class Vector3 implements IClone<Vector3>, ICopy<Vector3Like, Vector3> {\n  /** @internal */\n  static readonly _zero = new Vector3(0.0, 0.0, 0.0);\n  /** @internal */\n  static readonly _one = new Vector3(1.0, 1.0, 1.0);\n\n  /**\n   * Determines the sum of two vectors.\n   * @param left - The first vector to add\n   * @param right - The second vector to add\n   * @param out - The sum of two vectors\n   */\n  static add(left: Vector3, right: Vector3, out: Vector3): void {\n    out._x = left._x + right._x;\n    out._y = left._y + right._y;\n    out._z = left._z + right._z;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Determines the difference between two vectors.\n   * @param left - The first vector to subtract\n   * @param right - The second vector to subtract\n   * @param out - The difference between two vectors\n   */\n  static subtract(left: Vector3, right: Vector3, out: Vector3): void {\n    out._x = left._x - right._x;\n    out._y = left._y - right._y;\n    out._z = left._z - right._z;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Determines the product of two vectors.\n   * @param left - The first vector to multiply\n   * @param right - The second vector to multiply\n   * @param out - The product of two vectors\n   */\n  static multiply(left: Vector3, right: Vector3, out: Vector3): void {\n    out._x = left._x * right._x;\n    out._y = left._y * right._y;\n    out._z = left._z * right._z;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Determines the divisor of two vectors.\n   * @param left - The first vector to divide\n   * @param right - The second vector to divide\n   * @param out - The divisor of two vectors\n   */\n  static divide(left: Vector3, right: Vector3, out: Vector3): void {\n    out._x = left._x / right._x;\n    out._y = left._y / right._y;\n    out._z = left._z / right._z;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Determines the dot product of two vectors.\n   * @param left - The first vector to dot\n   * @param right - The second vector to dot\n   * @returns The dot product of two vectors\n   */\n  static dot(left: Vector3, right: Vector3): number {\n    return left._x * right._x + left._y * right._y + left._z * right._z;\n  }\n\n  /**\n   * Determines the cross product of two vectors.\n   * @param left - The first vector to cross\n   * @param right - The second vector to cross\n   * @param out - The cross product of two vectors\n   */\n  static cross(left: Vector3, right: Vector3, out: Vector3): void {\n    const ax = left._x;\n    const ay = left._y;\n    const az = left._z;\n    const bx = right._x;\n    const by = right._y;\n    const bz = right._z;\n\n    out.set(ay * bz - az * by, az * bx - ax * bz, ax * by - ay * bx);\n  }\n\n  /**\n   * Determines the distance of two vectors.\n   * @param a - The first vector\n   * @param b - The second vector\n   * @returns The distance of two vectors\n   */\n  static distance(a: Vector3, b: Vector3): number {\n    const x = b._x - a._x;\n    const y = b._y - a._y;\n    const z = b._z - a._z;\n    return Math.sqrt(x * x + y * y + z * z);\n  }\n\n  /**\n   * Determines the squared distance of two vectors.\n   * @param a - The first vector\n   * @param b - The second vector\n   * @returns The squared distance of two vectors\n   */\n  static distanceSquared(a: Vector3, b: Vector3): number {\n    const x = b._x - a._x;\n    const y = b._y - a._y;\n    const z = b._z - a._z;\n    return x * x + y * y + z * z;\n  }\n\n  /**\n   * Determines whether the specified vectors are equals.\n   * @param left - The first vector to compare\n   * @param right - The second vector to compare\n   * @returns True if the specified vectors are equals, false otherwise\n   */\n  static equals(left: Vector3, right: Vector3): boolean {\n    return (\n      MathUtil.equals(left._x, right._x) && MathUtil.equals(left._y, right._y) && MathUtil.equals(left._z, right._z)\n    );\n  }\n\n  /**\n   * Performs a linear interpolation between two vectors.\n   * @param start - The first vector\n   * @param end - The second vector\n   * @param t - The blend amount where 0 returns start and 1 end\n   * @param out - The result of linear blending between two vectors\n   */\n  static lerp(start: Vector3, end: Vector3, t: number, out: Vector3): void {\n    const { _x, _y, _z } = start;\n    out._x = _x + (end._x - _x) * t;\n    out._y = _y + (end._y - _y) * t;\n    out._z = _z + (end._z - _z) * t;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Calculate a vector containing the largest components of the specified vectors.\n   * @param left - The first vector\n   * @param right - The second vector\n   * @param out - The vector containing the largest components of the specified vectors\n   */\n  static max(left: Vector3, right: Vector3, out: Vector3): void {\n    out._x = Math.max(left._x, right._x);\n    out._y = Math.max(left._y, right._y);\n    out._z = Math.max(left._z, right._z);\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Calculate a vector containing the smallest components of the specified vectors.\n   * @param left - The first vector\n   * @param right - The second vector\n   * @param out - The vector containing the smallest components of the specified vectors\n   */\n  static min(left: Vector3, right: Vector3, out: Vector3): void {\n    out._x = Math.min(left._x, right._x);\n    out._y = Math.min(left._y, right._y);\n    out._z = Math.min(left._z, right._z);\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Reverses the direction of a given vector.\n   * @param a - The vector to negate\n   * @param out - The vector facing in the opposite direction\n   */\n  static negate(a: Vector3, out: Vector3): void {\n    out._x = -a._x;\n    out._y = -a._y;\n    out._z = -a._z;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Converts the vector into a unit vector.\n   * @param a - The vector to normalize\n   * @param out - The normalized vector\n   */\n  static normalize(a: Vector3, out: Vector3): void {\n    const { _x, _y, _z } = a;\n    let len = Math.sqrt(_x * _x + _y * _y + _z * _z);\n    if (len > MathUtil.zeroTolerance) {\n      len = 1 / len;\n      out.set(_x * len, _y * len, _z * len);\n    }\n  }\n\n  /**\n   * Scale a vector by the given value.\n   * @param a - The vector to scale\n   * @param s - The amount by which to scale the vector\n   * @param out - The scaled vector\n   */\n  static scale(a: Vector3, s: number, out: Vector3): void {\n    out._x = a._x * s;\n    out._y = a._y * s;\n    out._z = a._z * s;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Performs a normal transformation using the given 4x4 matrix.\n   * @remarks\n   * A normal transform performs the transformation with the assumption that the w component\n   * is zero. This causes the fourth row and fourth column of the matrix to be unused. The\n   * end result is a vector that is not translated, but all other transformation properties\n   * apply. This is often preferred for normal vectors as normals purely represent direction\n   * rather than location because normal vectors should not be translated.\n   * @param v - The normal vector to transform\n   * @param m - The transform matrix\n   * @param out - The transformed normal\n   */\n  static transformNormal(v: Vector3, m: Matrix, out: Vector3): void {\n    const { _x, _y, _z } = v;\n    const e = m.elements;\n    out._x = _x * e[0] + _y * e[4] + _z * e[8];\n    out._y = _x * e[1] + _y * e[5] + _z * e[9];\n    out._z = _x * e[2] + _y * e[6] + _z * e[10];\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Performs a transformation using the given 4x4 matrix.\n   * @param v - The vector to transform\n   * @param m - The transform matrix\n   * @param out - The transformed vector3\n   */\n  static transformToVec3(v: Vector3, m: Matrix, out: Vector3): void {\n    const { _x, _y, _z } = v;\n    const e = m.elements;\n\n    out._x = _x * e[0] + _y * e[4] + _z * e[8] + e[12];\n    out._y = _x * e[1] + _y * e[5] + _z * e[9] + e[13];\n    out._z = _x * e[2] + _y * e[6] + _z * e[10] + e[14];\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Performs a transformation from vector3 to vector4 using the given 4x4 matrix.\n   * @param v - The vector to transform\n   * @param m - The transform matrix\n   * @param out - The transformed vector4\n   */\n  static transformToVec4(v: Vector3, m: Matrix, out: Vector4): void {\n    const { _x, _y, _z } = v;\n    const e = m.elements;\n    out._x = _x * e[0] + _y * e[4] + _z * e[8] + e[12];\n    out._y = _x * e[1] + _y * e[5] + _z * e[9] + e[13];\n    out._z = _x * e[2] + _y * e[6] + _z * e[10] + e[14];\n    out._w = _x * e[3] + _y * e[7] + _z * e[11] + e[15];\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Performs a coordinate transformation using the given 4x4 matrix.\n   *\n   * @remarks\n   * A coordinate transform performs the transformation with the assumption that the w component\n   * is one. The four dimensional vector obtained from the transformation operation has each\n   * component in the vector divided by the w component. This forces the w-component to be one and\n   * therefore makes the vector homogeneous. The homogeneous vector is often preferred when working\n   * with coordinates as the w component can safely be ignored.\n   * @param v - The coordinate vector to transform\n   * @param m - The transform matrix\n   * @param out - The transformed coordinates\n   */\n  static transformCoordinate(v: Vector3, m: Matrix, out: Vector3): void {\n    const { _x, _y, _z } = v;\n    const e = m.elements;\n    let w = _x * e[3] + _y * e[7] + _z * e[11] + e[15];\n    w = 1.0 / w;\n\n    out._x = (_x * e[0] + _y * e[4] + _z * e[8] + e[12]) * w;\n    out._y = (_x * e[1] + _y * e[5] + _z * e[9] + e[13]) * w;\n    out._z = (_x * e[2] + _y * e[6] + _z * e[10] + e[14]) * w;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Performs a transformation using the given quaternion.\n   * @param v - The vector to transform\n   * @param quaternion - The transform quaternion\n   * @param out - The transformed vector\n   */\n  static transformByQuat(v: Vector3, quaternion: Quaternion, out: Vector3): void {\n    const { _x, _y, _z } = v;\n    const { _x: qx, _y: qy, _z: qz, _w: qw } = quaternion;\n\n    // calculate quat * vec\n    const ix = qw * _x + qy * _z - qz * _y;\n    const iy = qw * _y + qz * _x - qx * _z;\n    const iz = qw * _z + qx * _y - qy * _x;\n    const iw = -qx * _x - qy * _y - qz * _z;\n\n    // calculate result * inverse quat\n    out._x = ix * qw - iw * qx - iy * qz + iz * qy;\n    out._y = iy * qw - iw * qy - iz * qx + ix * qz;\n    out._z = iz * qw - iw * qz - ix * qy + iy * qx;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /** @internal */\n  _x: number;\n  /** @internal */\n  _y: number;\n  /** @internal */\n  _z: number;\n  /** @internal */\n  _onValueChanged: () => void = null;\n\n  /**\n   * The x component of the vector.\n   */\n  public get x(): number {\n    return this._x;\n  }\n\n  public set x(value: number) {\n    this._x = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * The y component of the vector.\n   */\n  public get y(): number {\n    return this._y;\n  }\n\n  public set y(value: number) {\n    this._y = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * The z component of the vector.\n   */\n  public get z(): number {\n    return this._z;\n  }\n\n  public set z(value: number) {\n    this._z = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * Constructor of Vector3.\n   * @param x - The x component of the vector, default 0\n   * @param y - The y component of the vector, default 0\n   * @param z - The z component of the vector, default 0\n   */\n  constructor(x: number = 0, y: number = 0, z: number = 0) {\n    this._x = x;\n    this._y = y;\n    this._z = z;\n  }\n\n  /**\n   * Set the value of this vector.\n   * @param x - The x component of the vector\n   * @param y - The y component of the vector\n   * @param z - The z component of the vector\n   * @returns This vector\n   */\n  set(x: number, y: number, z: number): Vector3 {\n    this._x = x;\n    this._y = y;\n    this._z = z;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Determines the sum of this vector and the specified vector.\n   * @param right - The specified vector\n   * @returns This vector\n   */\n  add(right: Vector3): Vector3 {\n    this._x += right._x;\n    this._y += right._y;\n    this._z += right._z;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Determines the difference of this vector and the specified vector.\n   * @param right - The specified vector\n   * @returns This vector\n   */\n  subtract(right: Vector3): Vector3 {\n    this._x -= right._x;\n    this._y -= right._y;\n    this._z -= right._z;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Determines the product of this vector and the specified vector.\n   * @param right - The specified vector\n   * @returns This vector\n   */\n  multiply(right: Vector3): Vector3 {\n    this._x *= right._x;\n    this._y *= right._y;\n    this._z *= right._z;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Determines the divisor of this vector and the specified vector.\n   * @param right - The specified vector\n   * @returns This vector\n   */\n  divide(right: Vector3): Vector3 {\n    this._x /= right._x;\n    this._y /= right._y;\n    this._z /= right._z;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Calculate the length of this vector.\n   * @returns The length of this vector\n   */\n  length(): number {\n    const { _x, _y, _z } = this;\n    return Math.sqrt(_x * _x + _y * _y + _z * _z);\n  }\n\n  /**\n   * Calculate the squared length of this vector.\n   * @returns The squared length of this vector\n   */\n  lengthSquared(): number {\n    const { _x, _y, _z } = this;\n    return _x * _x + _y * _y + _z * _z;\n  }\n\n  /**\n   * Reverses the direction of this vector.\n   * @returns This vector\n   */\n  negate(): Vector3 {\n    this._x = -this._x;\n    this._y = -this._y;\n    this._z = -this._z;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Converts this vector into a unit vector.\n   * @returns This vector\n   */\n  normalize(): Vector3 {\n    Vector3.normalize(this, this);\n    return this;\n  }\n\n  /**\n   * Scale this vector by the given value.\n   * @param s - The amount by which to scale the vector\n   * @returns This vector\n   */\n  scale(s: number): Vector3 {\n    this._x *= s;\n    this._y *= s;\n    this._z *= s;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * This vector performs a normal transformation using the given 4x4 matrix.\n   * @remarks\n   * A normal transform performs the transformation with the assumption that the w component\n   * is zero. This causes the fourth row and fourth column of the matrix to be unused. The\n   * end result is a vector that is not translated, but all other transformation properties\n   * apply. This is often preferred for normal vectors as normals purely represent direction\n   * rather than location because normal vectors should not be translated.\n   * @param m - The transform matrix\n   * @returns This vector\n   */\n  transformNormal(m: Matrix): Vector3 {\n    Vector3.transformNormal(this, m, this);\n    return this;\n  }\n\n  /**\n   * This vector performs a transformation using the given 4x4 matrix.\n   * @param m - The transform matrix\n   * @returns This vector\n   */\n  transformToVec3(m: Matrix): Vector3 {\n    Vector3.transformToVec3(this, m, this);\n    return this;\n  }\n\n  /**\n   * This vector performs a coordinate transformation using the given 4x4 matrix.\n   * @remarks\n   * A coordinate transform performs the transformation with the assumption that the w component\n   * is one. The four dimensional vector obtained from the transformation operation has each\n   * component in the vector divided by the w component. This forces the w-component to be one and\n   * therefore makes the vector homogeneous. The homogeneous vector is often preferred when working\n   * with coordinates as the w component can safely be ignored.\n   * @param m - The transform matrix\n   * @returns This vector\n   */\n  transformCoordinate(m: Matrix): Vector3 {\n    Vector3.transformCoordinate(this, m, this);\n    return this;\n  }\n\n  /**\n   * This vector performs a transformation using the given quaternion.\n   * @param quaternion - The transform quaternion\n   * @returns This vector\n   */\n  transformByQuat(quaternion: Quaternion): Vector3 {\n    Vector3.transformByQuat(this, quaternion, this);\n    return this;\n  }\n\n  /**\n   * Creates a clone of this vector.\n   * @returns A clone of this vector\n   */\n  clone(): Vector3 {\n    return new Vector3(this._x, this._y, this._z);\n  }\n\n  /**\n   * Copy from vector3 like object.\n   * @param source - Vector3 like object.\n   * @returns This vector\n   */\n  copyFrom(source: Vector3Like): Vector3 {\n    this._x = source.x;\n    this._y = source.y;\n    this._z = source.z;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Copy the value of this vector from an array.\n   * @param array - The array\n   * @param offset - The start offset of the array\n   * @returns This vector\n   */\n  copyFromArray(array: ArrayLike<number>, offset: number = 0): Vector3 {\n    this._x = array[offset];\n    this._y = array[offset + 1];\n    this._z = array[offset + 2];\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Copy the value of this vector to an array.\n   * @param out - The array\n   * @param outOffset - The start offset of the array\n   */\n  copyToArray(out: number[] | Float32Array | Float64Array, outOffset: number = 0) {\n    out[outOffset] = this._x;\n    out[outOffset + 1] = this._y;\n    out[outOffset + 2] = this._z;\n  }\n}\n\ninterface Vector3Like {\n  /** {@inheritDoc Vector3.x} */\n  x: number;\n  /** {@inheritDoc Vector3.y} */\n  y: number;\n  /** {@inheritDoc Vector3.z} */\n  z: number;\n}\n","import { BoundingBox } from \"./BoundingBox\";\nimport { IClone } from \"./IClone\";\nimport { ICopy } from \"./ICopy\";\nimport { Vector3 } from \"./Vector3\";\n\n/**\n * A bounding sphere.\n * */\nexport class BoundingSphere implements IClone<BoundingSphere>, ICopy<BoundingSphere, BoundingSphere> {\n  private static _tempVec30: Vector3 = new Vector3();\n\n  /**\n   * Calculate a bounding sphere that fully contains the given points.\n   * @param points - The given points\n   * @param out - The calculated bounding sphere\n   */\n  static fromPoints(points: Vector3[], out: BoundingSphere): void {\n    if (!points || points.length === 0) {\n      throw new Error(\"points must be array and length must > 0\");\n    }\n\n    const len = points.length;\n    const center = BoundingSphere._tempVec30;\n    center.x = center.y = center.z = 0;\n\n    // Calculate the center of the sphere.\n    for (let i = 0; i < len; ++i) {\n      Vector3.add(points[i], center, center);\n    }\n\n    // The center of the sphere.\n    Vector3.scale(center, 1 / len, out.center);\n\n    // Calculate the radius of the sphere.\n    let radius = 0.0;\n    for (let i = 0; i < len; ++i) {\n      const distance = Vector3.distanceSquared(center, points[i]);\n      distance > radius && (radius = distance);\n    }\n    // The radius of the sphere.\n    out.radius = Math.sqrt(radius);\n  }\n\n  /**\n   * Calculate a bounding sphere from a given box.\n   * @param box - The given box\n   * @param out - The calculated bounding sphere\n   */\n  static fromBox(box: BoundingBox, out: BoundingSphere): void {\n    const { center } = out;\n    const { min, max } = box;\n\n    center.x = (min.x + max.x) * 0.5;\n    center.y = (min.y + max.y) * 0.5;\n    center.z = (min.z + max.z) * 0.5;\n    out.radius = Vector3.distance(center, max);\n  }\n\n  /** The center point of the sphere. */\n  public readonly center: Vector3 = new Vector3();\n  /** The radius of the sphere. */\n  public radius: number = 0;\n\n  /**\n   * Constructor of BoundingSphere.\n   * @param center - The center point of the sphere\n   * @param radius - The radius of the sphere\n   */\n  constructor(center: Vector3 = null, radius: number = 0) {\n    center && this.center.copyFrom(center);\n    this.radius = radius;\n  }\n\n  /**\n   * Creates a clone of this sphere.\n   * @returns A clone of this sphere\n   */\n  clone(): BoundingSphere {\n    return new BoundingSphere(this.center, this.radius);\n  }\n\n  /**\n   * Copy this sphere from the specified sphere.\n   * @param source - The specified sphere\n   * @returns This sphere\n   */\n  copyFrom(source: BoundingSphere): BoundingSphere {\n    this.center.copyFrom(source.center);\n    this.radius = source.radius;\n    return this;\n  }\n}\n","import { BoundingSphere } from \"./BoundingSphere\";\nimport { IClone } from \"./IClone\";\nimport { ICopy } from \"./ICopy\";\nimport { Matrix } from \"./Matrix\";\nimport { Vector3 } from \"./Vector3\";\n\n/**\n * Axis Aligned Bound Box (AABB).\n */\nexport class BoundingBox implements IClone<BoundingBox>, ICopy<BoundingBox, BoundingBox> {\n  private static _tempVec30: Vector3 = new Vector3();\n  private static _tempVec31: Vector3 = new Vector3();\n\n  /**\n   * Calculate a bounding box from the center point and the extent of the bounding box.\n   * @param center - The center point\n   * @param extent - The extent of the bounding box\n   * @param out - The calculated bounding box\n   */\n  static fromCenterAndExtent(center: Vector3, extent: Vector3, out: BoundingBox): void {\n    Vector3.subtract(center, extent, out.min);\n    Vector3.add(center, extent, out.max);\n  }\n\n  /**\n   * Calculate a bounding box that fully contains the given points.\n   * @param points - The given points\n   * @param out - The calculated bounding box\n   */\n  static fromPoints(points: Vector3[], out: BoundingBox): void {\n    if (!points || points.length === 0) {\n      throw new Error(\"points must be array and length must > 0\");\n    }\n\n    const { min, max } = out;\n    min.x = min.y = min.z = Number.MAX_VALUE;\n    max.x = max.y = max.z = -Number.MAX_VALUE;\n\n    for (let i = 0, l = points.length; i < l; ++i) {\n      const point = points[i];\n      Vector3.min(min, point, min);\n      Vector3.max(max, point, max);\n    }\n  }\n\n  /**\n   * Calculate a bounding box from a given sphere.\n   * @param sphere - The given sphere\n   * @param out - The calculated bounding box\n   */\n  static fromSphere(sphere: BoundingSphere, out: BoundingBox): void {\n    const { center, radius } = sphere;\n    const { min, max } = out;\n\n    min.x = center.x - radius;\n    min.y = center.y - radius;\n    min.z = center.z - radius;\n    max.x = center.x + radius;\n    max.y = center.y + radius;\n    max.z = center.z + radius;\n  }\n\n  /**\n   * Transform a bounding box.\n   * @param source - The original bounding box\n   * @param matrix - The transform to apply to the bounding box\n   * @param out - The transformed bounding box\n   */\n  static transform(source: BoundingBox, matrix: Matrix, out: BoundingBox): void {\n    // https://zeux.io/2010/10/17/aabb-from-obb-with-component-wise-abs/\n    const center = BoundingBox._tempVec30;\n    const extent = BoundingBox._tempVec31;\n    source.getCenter(center);\n    source.getExtent(extent);\n    Vector3.transformCoordinate(center, matrix, center);\n\n    const { x, y, z } = extent;\n    const e = matrix.elements;\n    extent.x = Math.abs(x * e[0]) + Math.abs(y * e[4]) + Math.abs(z * e[8]);\n    extent.y = Math.abs(x * e[1]) + Math.abs(y * e[5]) + Math.abs(z * e[9]);\n    extent.z = Math.abs(x * e[2]) + Math.abs(y * e[6]) + Math.abs(z * e[10]);\n\n    // set min、max\n    Vector3.subtract(center, extent, out.min);\n    Vector3.add(center, extent, out.max);\n  }\n\n  /**\n   * Calculate a bounding box that is as large as the total combined area of the two specified boxes.\n   * @param box1 - The first box to merge\n   * @param box2 - The second box to merge\n   * @param out - The merged bounding box\n   * @returns The merged bounding box\n   */\n  static merge(box1: BoundingBox, box2: BoundingBox, out: BoundingBox): BoundingBox {\n    Vector3.min(box1.min, box2.min, out.min);\n    Vector3.max(box1.max, box2.max, out.max);\n    return out;\n  }\n\n  /** The minimum point of the box. */\n  public readonly min: Vector3 = new Vector3();\n  /** The maximum point of the box. */\n  public readonly max: Vector3 = new Vector3();\n\n  /**\n   * Constructor of BoundingBox.\n   * @param min - The minimum point of the box\n   * @param max - The maximum point of the box\n   */\n  constructor(min: Vector3 = null, max: Vector3 = null) {\n    min && this.min.copyFrom(min);\n    max && this.max.copyFrom(max);\n  }\n\n  /**\n   * Get the center point of this bounding box.\n   * @param out - The center point of this bounding box\n   * @returns The center point of this bounding box\n   */\n  getCenter(out: Vector3): Vector3 {\n    Vector3.add(this.min, this.max, out);\n    Vector3.scale(out, 0.5, out);\n    return out;\n  }\n\n  /**\n   * Get the extent of this bounding box.\n   * @param out - The extent of this bounding box\n   * @returns The extent of this bounding box\n   */\n  getExtent(out: Vector3): Vector3 {\n    Vector3.subtract(this.max, this.min, out);\n    Vector3.scale(out, 0.5, out);\n    return out;\n  }\n\n  /**\n   * Get the eight corners of this bounding box.\n   * @param out - An array of points representing the eight corners of this bounding box\n   * @returns An array of points representing the eight corners of this bounding box\n   */\n  getCorners(out: Vector3[] = []): Vector3[] {\n    const { min, max } = this;\n    const minX = min.x;\n    const minY = min.y;\n    const minZ = min.z;\n    const maxX = max.x;\n    const maxY = max.y;\n    const maxZ = max.z;\n    const len = out.length;\n\n    // The array length is less than 8 to make up\n    if (len < 8) {\n      for (let i = 0, l = 8 - len; i < l; ++i) {\n        out[len + i] = new Vector3();\n      }\n    }\n\n    out[0].set(minX, maxY, maxZ);\n    out[1].set(maxX, maxY, maxZ);\n    out[2].set(maxX, minY, maxZ);\n    out[3].set(minX, minY, maxZ);\n    out[4].set(minX, maxY, minZ);\n    out[5].set(maxX, maxY, minZ);\n    out[6].set(maxX, minY, minZ);\n    out[7].set(minX, minY, minZ);\n\n    return out;\n  }\n\n  /**\n   * Transform a bounding box.\n   * @param matrix - The transform to apply to the bounding box\n   * @returns The transformed bounding box\n   */\n  public transform(matrix: Matrix): BoundingBox {\n    BoundingBox.transform(this, matrix, this);\n    return this;\n  }\n\n  /**\n   * Creates a clone of this box.\n   * @returns A clone of this box\n   */\n  clone(): BoundingBox {\n    return new BoundingBox(this.min, this.max);\n  }\n\n  /**\n   * Copy this bounding box from the specified box.\n   * @param source - The specified box\n   * @returns This bounding box\n   */\n  copyFrom(source: BoundingBox): BoundingBox {\n    this.min.copyFrom(source.min);\n    this.max.copyFrom(source.max);\n    return this;\n  }\n}\n","import { BoundingBox } from \"./BoundingBox\";\nimport { BoundingFrustum } from \"./BoundingFrustum\";\nimport { BoundingSphere } from \"./BoundingSphere\";\nimport { ContainmentType } from \"./enums/ContainmentType\";\nimport { PlaneIntersectionType } from \"./enums/PlaneIntersectionType\";\nimport { MathUtil } from \"./MathUtil\";\nimport { Plane } from \"./Plane\";\nimport { Ray } from \"./Ray\";\nimport { Vector3 } from \"./Vector3\";\n\n/**\n * Contains static methods to help in determining intersections, containment, etc.\n */\nexport class CollisionUtil {\n  private static _tempVec30: Vector3 = new Vector3();\n  private static _tempVec31: Vector3 = new Vector3();\n\n  /**\n   * Calculate the distance from a point to a plane.\n   * @param plane - The plane\n   * @param point - The point\n   * @returns The distance from a point to a plane\n   */\n  static distancePlaneAndPoint(plane: Plane, point: Vector3): number {\n    return Vector3.dot(plane.normal, point) + plane.distance;\n  }\n\n  /**\n   * Get the intersection type between a plane and a point.\n   * @param plane - The plane\n   * @param point - The point\n   * @returns The intersection type\n   */\n  static intersectsPlaneAndPoint(plane: Plane, point: Vector3): PlaneIntersectionType {\n    const distance = CollisionUtil.distancePlaneAndPoint(plane, point);\n    if (distance > 0) {\n      return PlaneIntersectionType.Front;\n    }\n    if (distance < 0) {\n      return PlaneIntersectionType.Back;\n    }\n    return PlaneIntersectionType.Intersecting;\n  }\n\n  /**\n   * Get the intersection type between a plane and a box (AABB).\n   * @param plane - The plane\n   * @param box - The box\n   * @returns The intersection type\n   */\n  static intersectsPlaneAndBox(plane: Plane, box: BoundingBox): PlaneIntersectionType {\n    const { min, max } = box;\n    const { normal } = plane;\n    const front = CollisionUtil._tempVec30;\n    const back = CollisionUtil._tempVec31;\n\n    if (normal.x >= 0) {\n      front.x = max.x;\n      back.x = min.x;\n    } else {\n      front.x = min.x;\n      back.x = max.x;\n    }\n    if (normal.y >= 0) {\n      front.y = max.y;\n      back.y = min.y;\n    } else {\n      front.y = min.y;\n      back.y = max.y;\n    }\n    if (normal.z >= 0) {\n      front.z = max.z;\n      back.z = min.z;\n    } else {\n      front.z = min.z;\n      back.z = max.z;\n    }\n\n    if (CollisionUtil.distancePlaneAndPoint(plane, front) < 0) {\n      return PlaneIntersectionType.Back;\n    }\n\n    if (CollisionUtil.distancePlaneAndPoint(plane, back) > 0) {\n      return PlaneIntersectionType.Front;\n    }\n\n    return PlaneIntersectionType.Intersecting;\n  }\n\n  /**\n   * Get the intersection type between a plane and a sphere.\n   * @param plane - The plane\n   * @param sphere - The sphere\n   * @returns The intersection type\n   */\n  static intersectsPlaneAndSphere(plane: Plane, sphere: BoundingSphere): PlaneIntersectionType {\n    const { center, radius } = sphere;\n    const distance = CollisionUtil.distancePlaneAndPoint(plane, center);\n    if (distance > radius) {\n      return PlaneIntersectionType.Front;\n    }\n    if (distance < -radius) {\n      return PlaneIntersectionType.Back;\n    }\n    return PlaneIntersectionType.Intersecting;\n  }\n\n  /**\n   * Get the intersection type between a ray and a plane.\n   * @param ray - The ray\n   * @param plane - The plane\n   * @returns The distance from ray to plane if intersecting, -1 otherwise\n   */\n  static intersectsRayAndPlane(ray: Ray, plane: Plane): number {\n    const { normal } = plane;\n    const { zeroTolerance } = MathUtil;\n\n    const dir = Vector3.dot(normal, ray.direction);\n    // Parallel\n    if (Math.abs(dir) < zeroTolerance) {\n      return -1;\n    }\n\n    const position = Vector3.dot(normal, ray.origin);\n    let distance = (-plane.distance - position) / dir;\n\n    if (distance < 0) {\n      if (distance < -zeroTolerance) {\n        return -1;\n      }\n\n      distance = 0;\n    }\n\n    return distance;\n  }\n\n  /**\n   * Get the intersection type between a ray and a box (AABB).\n   * @param ray - The ray\n   * @param box - The box\n   * @returns The distance from ray to box if intersecting, -1 otherwise\n   */\n  static intersectsRayAndBox(ray: Ray, box: BoundingBox): number {\n    const { zeroTolerance } = MathUtil;\n    const { origin, direction } = ray;\n    const { min, max } = box;\n    const dirX = direction.x;\n    const dirY = direction.y;\n    const dirZ = direction.z;\n    const oriX = origin.x;\n    const oriY = origin.y;\n    const oriZ = origin.z;\n    let distance = 0;\n    let tmax = Number.MAX_VALUE;\n\n    if (Math.abs(dirX) < zeroTolerance) {\n      if (oriX < min.x || oriX > max.x) {\n        return -1;\n      }\n    } else {\n      const inverse = 1.0 / dirX;\n      let t1 = (min.x - oriX) * inverse;\n      let t2 = (max.x - oriX) * inverse;\n\n      if (t1 > t2) {\n        const temp = t1;\n        t1 = t2;\n        t2 = temp;\n      }\n\n      distance = Math.max(t1, distance);\n      tmax = Math.min(t2, tmax);\n\n      if (distance > tmax) {\n        return -1;\n      }\n    }\n\n    if (Math.abs(dirY) < zeroTolerance) {\n      if (oriY < min.y || oriY > max.y) {\n        return -1;\n      }\n    } else {\n      const inverse = 1.0 / dirY;\n      let t1 = (min.y - oriY) * inverse;\n      let t2 = (max.y - oriY) * inverse;\n\n      if (t1 > t2) {\n        const temp = t1;\n        t1 = t2;\n        t2 = temp;\n      }\n\n      distance = Math.max(t1, distance);\n      tmax = Math.min(t2, tmax);\n\n      if (distance > tmax) {\n        return -1;\n      }\n    }\n\n    if (Math.abs(dirZ) < zeroTolerance) {\n      if (oriZ < min.z || oriZ > max.z) {\n        return -1;\n      }\n    } else {\n      const inverse = 1.0 / dirZ;\n      let t1 = (min.z - oriZ) * inverse;\n      let t2 = (max.z - oriZ) * inverse;\n\n      if (t1 > t2) {\n        const temp = t1;\n        t1 = t2;\n        t2 = temp;\n      }\n\n      distance = Math.max(t1, distance);\n      tmax = Math.min(t2, tmax);\n\n      if (distance > tmax) {\n        return -1;\n      }\n    }\n\n    return distance;\n  }\n\n  /**\n   * Get the intersection type between a ray and a sphere.\n   * @param ray - The ray\n   * @param sphere - The sphere\n   * @returns The distance from ray to sphere if intersecting, -1 otherwise\n   */\n  static intersectsRayAndSphere(ray: Ray, sphere: BoundingSphere): number {\n    const { origin, direction } = ray;\n    const { center, radius } = sphere;\n\n    const m = CollisionUtil._tempVec30;\n    Vector3.subtract(origin, center, m);\n    const b = Vector3.dot(m, direction);\n    const c = Vector3.dot(m, m) - radius * radius;\n\n    if (b > 0 && c > 0) {\n      return -1;\n    }\n\n    let discriminant = b * b - c;\n    if (discriminant < 0) {\n      return -1;\n    }\n\n    let distance = -b - Math.sqrt(discriminant);\n    if (distance < 0) {\n      distance = 0;\n    }\n\n    return distance;\n  }\n\n  /**\n   * Check whether the boxes intersect.\n   * @param boxA - The first box to check\n   * @param boxB - The second box to check\n   * @returns True if the boxes intersect, false otherwise\n   */\n  static intersectsBoxAndBox(boxA: BoundingBox, boxB: BoundingBox): boolean {\n    if (boxA.min.x > boxB.max.x || boxB.min.x > boxA.max.x) {\n      return false;\n    }\n\n    if (boxA.min.y > boxB.max.y || boxB.min.y > boxA.max.y) {\n      return false;\n    }\n\n    return !(boxA.min.z > boxB.max.z || boxB.min.z > boxA.max.z);\n  }\n\n  /**\n   * Check whether the spheres intersect.\n   * @param sphereA - The first sphere to check\n   * @param sphereB - The second sphere to check\n   * @returns True if the spheres intersect, false otherwise\n   */\n  static intersectsSphereAndSphere(sphereA: BoundingSphere, sphereB: BoundingSphere): boolean {\n    const radiisum = sphereA.radius + sphereB.radius;\n    return Vector3.distanceSquared(sphereA.center, sphereB.center) < radiisum * radiisum;\n  }\n\n  /**\n   * Check whether the sphere and the box intersect.\n   * @param sphere - The sphere to check\n   * @param box - The box to check\n   * @returns True if the sphere and the box intersect, false otherwise\n   */\n  static intersectsSphereAndBox(sphere: BoundingSphere, box: BoundingBox): boolean {\n    const center = sphere.center;\n    const max = box.max;\n    const min = box.min;\n\n    const closestPoint = CollisionUtil._tempVec30;\n    closestPoint.set(\n      Math.max(min.x, Math.min(center.x, max.x)),\n      Math.max(min.y, Math.min(center.y, max.y)),\n      Math.max(min.z, Math.min(center.z, max.z))\n    );\n\n    const distance = Vector3.distanceSquared(center, closestPoint);\n    return distance <= sphere.radius * sphere.radius;\n  }\n\n  /**\n   * Get whether or not a specified bounding box intersects with this frustum (Contains or Intersects).\n   * @param frustum - The frustum\n   * @param box - The box\n   * @returns True if bounding box intersects with this frustum, false otherwise\n   */\n  static intersectsFrustumAndBox(frustum: BoundingFrustum, box: BoundingBox): boolean {\n    const { min, max } = box;\n    const back = CollisionUtil._tempVec30;\n\n    for (let i = 0; i < 6; ++i) {\n      const plane = frustum.getPlane(i);\n      const normal = plane.normal;\n\n      back.set(normal.x >= 0 ? min.x : max.x, normal.y >= 0 ? min.y : max.y, normal.z >= 0 ? min.z : max.z);\n      if (Vector3.dot(normal, back) > -plane.distance) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Get the containment type between a frustum and a box (AABB).\n   * @param frustum - The frustum\n   * @param box - The box\n   * @returns The containment type\n   */\n  static frustumContainsBox(frustum: BoundingFrustum, box: BoundingBox): ContainmentType {\n    const { min, max } = box;\n    const front = CollisionUtil._tempVec30;\n    const back = CollisionUtil._tempVec31;\n    let result = ContainmentType.Contains;\n\n    for (let i = 0; i < 6; ++i) {\n      const plane = frustum.getPlane(i);\n      const normal = plane.normal;\n\n      if (normal.x >= 0) {\n        front.x = max.x;\n        back.x = min.x;\n      } else {\n        front.x = min.x;\n        back.x = max.x;\n      }\n      if (normal.y >= 0) {\n        front.y = max.y;\n        back.y = min.y;\n      } else {\n        front.y = min.y;\n        back.y = max.y;\n      }\n      if (normal.z >= 0) {\n        front.z = max.z;\n        back.z = min.z;\n      } else {\n        front.z = min.z;\n        back.z = max.z;\n      }\n\n      if (CollisionUtil.intersectsPlaneAndPoint(plane, back) === PlaneIntersectionType.Front) {\n        return ContainmentType.Disjoint;\n      }\n\n      if (CollisionUtil.intersectsPlaneAndPoint(plane, front) === PlaneIntersectionType.Front) {\n        result = ContainmentType.Intersects;\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Get the containment type between a frustum and a sphere.\n   * @param frustum - The frustum\n   * @param sphere - The sphere\n   * @returns The containment type\n   */\n  static frustumContainsSphere(frustum: BoundingFrustum, sphere: BoundingSphere): ContainmentType {\n    let result = ContainmentType.Contains;\n\n    for (let i = 0; i < 6; ++i) {\n      const plane = frustum.getPlane(i);\n      const intersectionType = CollisionUtil.intersectsPlaneAndSphere(plane, sphere);\n      if (intersectionType === PlaneIntersectionType.Front) {\n        return ContainmentType.Disjoint;\n      } else if (intersectionType === PlaneIntersectionType.Intersecting) {\n        result = ContainmentType.Intersects;\n        break;\n      }\n    }\n\n    return result;\n  }\n}\n","import { IClone } from \"./IClone\";\nimport { ICopy } from \"./ICopy\";\nimport { Vector3 } from \"./Vector3\";\n\n/**\n * Represents a plane in three dimensional space.\n */\nexport class Plane implements IClone<Plane>, ICopy<Plane, Plane> {\n  /**\n   * Normalize the normal vector of the specified plane.\n   * @param p - The specified plane\n   * @param out - A normalized version of the specified plane\n   */\n  static normalize(p: Plane, out: Plane): void {\n    const { normal } = p;\n\n    const factor = 1.0 / normal.length();\n    Vector3.scale(normal, factor, out.normal);\n    out.distance = p.distance * factor;\n  }\n\n  /**\n   * Calculate the plane that contains the three specified points.\n   * @param point0 - The first point\n   * @param point1 - The second point\n   * @param point2 - The third point\n   * @param out - The calculated plane\n   */\n  static fromPoints(point0: Vector3, point1: Vector3, point2: Vector3, out: Plane): void {\n    const x0 = point0.x;\n    const y0 = point0.y;\n    const z0 = point0.z;\n    const x1 = point1.x - x0;\n    const y1 = point1.y - y0;\n    const z1 = point1.z - z0;\n    const x2 = point2.x - x0;\n    const y2 = point2.y - y0;\n    const z2 = point2.z - z0;\n    const yz = y1 * z2 - z1 * y2;\n    const xz = z1 * x2 - x1 * z2;\n    const xy = x1 * y2 - y1 * x2;\n    const invPyth = 1.0 / Math.sqrt(yz * yz + xz * xz + xy * xy);\n\n    const x = yz * invPyth;\n    const y = xz * invPyth;\n    const z = xy * invPyth;\n\n    const { normal } = out;\n    normal.x = x;\n    normal.y = y;\n    normal.z = z;\n\n    out.distance = -(x * x0 + y * y0 + z * z0);\n  }\n\n  /** The normal of the plane. */\n  public readonly normal: Vector3 = new Vector3();\n  /** The distance of the plane along its normal to the origin. */\n  public distance: number = 0;\n\n  /**\n   * Constructor of Plane.\n   * @param normal - The normal vector\n   * @param distance - The distance of the plane along its normal to the origin\n   */\n  constructor(normal: Vector3 = null, distance: number = 0) {\n    normal && this.normal.copyFrom(normal);\n    this.distance = distance;\n  }\n\n  /**\n   * Normalize the normal vector of this plane.\n   * @returns The plane after normalize\n   */\n  normalize(): Plane {\n    Plane.normalize(this, this);\n    return this;\n  }\n\n  /**\n   * Creates a clone of this plane.\n   * @returns A clone of this plane\n   */\n  clone(): Plane {\n    const out = new Plane();\n    out.copyFrom(this);\n    return out;\n  }\n\n  /**\n   * Copy this plane from the specified plane.\n   * @param source - The specified plane\n   * @returns This plane\n   */\n  copyFrom(source: Plane): Plane {\n    this.normal.copyFrom(source.normal);\n    this.distance = source.distance;\n    return this;\n  }\n}\n","import { BoundingBox } from \"./BoundingBox\";\nimport { BoundingSphere } from \"./BoundingSphere\";\nimport { CollisionUtil } from \"./CollisionUtil\";\nimport { ContainmentType } from \"./enums/ContainmentType\";\nimport { IClone } from \"./IClone\";\nimport { ICopy } from \"./ICopy\";\nimport { Matrix } from \"./Matrix\";\nimport { Plane } from \"./Plane\";\n\n/**\n * A bounding frustum.\n */\nexport class BoundingFrustum implements IClone<BoundingFrustum>, ICopy<BoundingFrustum, BoundingFrustum> {\n  /** The near plane of this frustum. */\n  public near: Plane;\n  /** The far plane of this frustum. */\n  public far: Plane;\n  /** The left plane of this frustum. */\n  public left: Plane;\n  /** The right plane of this frustum. */\n  public right: Plane;\n  /** The top plane of this frustum. */\n  public top: Plane;\n  /** The bottom plane of this frustum. */\n  public bottom: Plane;\n\n  /**\n   * Constructor of BoundingFrustum.\n   * @param matrix - The view-projection matrix\n   */\n  constructor(matrix: Matrix = null) {\n    this.near = new Plane();\n    this.far = new Plane();\n    this.left = new Plane();\n    this.right = new Plane();\n    this.top = new Plane();\n    this.bottom = new Plane();\n\n    matrix && this.calculateFromMatrix(matrix);\n  }\n\n  /**\n   * Get the plane by the given index.\n   * 0: near\n   * 1: far\n   * 2: left\n   * 3: right\n   * 4: top\n   * 5: bottom\n   * @param index - The index\n   * @returns The plane get\n   */\n  getPlane(index: number): Plane {\n    switch (index) {\n      case 0:\n        return this.near;\n      case 1:\n        return this.far;\n      case 2:\n        return this.left;\n      case 3:\n        return this.right;\n      case 4:\n        return this.top;\n      case 5:\n        return this.bottom;\n      default:\n        return null;\n    }\n  }\n\n  /**\n   * Update all planes from the given matrix.\n   * @param matrix - The given view-projection matrix\n   */\n  public calculateFromMatrix(matrix: Matrix): void {\n    const me = matrix.elements;\n    const m11 = me[0];\n    const m12 = me[1];\n    const m13 = me[2];\n    const m14 = me[3];\n    const m21 = me[4];\n    const m22 = me[5];\n    const m23 = me[6];\n    const m24 = me[7];\n    const m31 = me[8];\n    const m32 = me[9];\n    const m33 = me[10];\n    const m34 = me[11];\n    const m41 = me[12];\n    const m42 = me[13];\n    const m43 = me[14];\n    const m44 = me[15];\n\n    // near\n    const nearNormal = this.near.normal;\n    nearNormal.set(-m14 - m13, -m24 - m23, -m34 - m33);\n    this.near.distance = -m44 - m43;\n    this.near.normalize();\n\n    // far\n    const farNormal = this.far.normal;\n    farNormal.set(m13 - m14, m23 - m24, m33 - m34);\n    this.far.distance = m43 - m44;\n\n    this.far.normalize();\n\n    // left\n    const leftNormal = this.left.normal;\n    leftNormal.set(-m14 - m11, -m24 - m21, -m34 - m31);\n    this.left.distance = -m44 - m41;\n    this.left.normalize();\n\n    // right\n    const rightNormal = this.right.normal;\n    rightNormal.set(m11 - m14, m21 - m24, m31 - m34);\n    this.right.distance = m41 - m44;\n    this.right.normalize();\n\n    // top\n    const topNormal = this.top.normal;\n    topNormal.set(m12 - m14, m22 - m24, m32 - m34);\n    this.top.distance = m42 - m44;\n    this.top.normalize();\n\n    // bottom\n    const bottomNormal = this.bottom.normal;\n    bottomNormal.set(-m14 - m12, -m24 - m22, -m34 - m32);\n    this.bottom.distance = -m44 - m42;\n    this.bottom.normalize();\n  }\n\n  /**\n   * Get whether or not a specified bounding box intersects with this frustum (Contains or Intersects).\n   * @param box - The box for testing\n   * @returns True if bounding box intersects with this frustum, false otherwise\n   */\n  public intersectsBox(box: BoundingBox): boolean {\n    return CollisionUtil.intersectsFrustumAndBox(this, box);\n  }\n\n  /**\n   * Get whether or not a specified bounding sphere intersects with this frustum (Contains or Intersects).\n   * @param sphere - The sphere for testing\n   * @returns True if bounding sphere intersects with this frustum, false otherwise\n   */\n  public intersectsSphere(sphere: BoundingSphere): boolean {\n    return CollisionUtil.frustumContainsSphere(this, sphere) !== ContainmentType.Disjoint;\n  }\n\n  /**\n   * Creates a clone of this frustum.\n   * @returns A clone of this frustum\n   */\n  clone(): BoundingFrustum {\n    const out = new BoundingFrustum();\n    out.copyFrom(this);\n    return out;\n  }\n\n  /**\n   * Copy this frustum from the specified frustum.\n   * @param source - The specified frustum\n   * @returns This frustum\n   */\n  copyFrom(source: BoundingFrustum): BoundingFrustum {\n    this.near.copyFrom(source.near);\n    this.far.copyFrom(source.far);\n    this.left.copyFrom(source.left);\n    this.right.copyFrom(source.right);\n    this.top.copyFrom(source.top);\n    this.bottom.copyFrom(source.bottom);\n    return this;\n  }\n}\n","import { IClone } from \"./IClone\";\nimport { ICopy } from \"./ICopy\";\nimport { MathUtil } from \"./MathUtil\";\nimport { Matrix } from \"./Matrix\";\nimport { Quaternion } from \"./Quaternion\";\nimport { Vector2 } from \"./Vector2\";\n\n/**\n * Represents a 3x3 mathematical matrix.\n */\nexport class Matrix3x3 implements IClone<Matrix3x3>, ICopy<Matrix3x3, Matrix3x3> {\n  /**\n   * Determines the sum of two matrices.\n   * @param left - The first matrix to add\n   * @param right - The second matrix to add\n   * @param out - The sum of two matrices\n   */\n  static add(left: Matrix3x3, right: Matrix3x3, out: Matrix3x3): void {\n    const le = left.elements;\n    const re = right.elements;\n    const oe = out.elements;\n\n    oe[0] = le[0] + re[0];\n    oe[1] = le[1] + re[1];\n    oe[2] = le[2] + re[2];\n\n    oe[3] = le[3] + re[3];\n    oe[4] = le[4] + re[4];\n    oe[5] = le[5] + re[5];\n\n    oe[6] = le[6] + re[6];\n    oe[7] = le[7] + re[7];\n    oe[8] = le[8] + re[8];\n  }\n\n  /**\n   * Determines the difference between two matrices.\n   * @param left - The first matrix to subtract\n   * @param right - The second matrix to subtract\n   * @param out - The difference between two matrices\n   */\n  static subtract(left: Matrix3x3, right: Matrix3x3, out: Matrix3x3): void {\n    const le = left.elements;\n    const re = right.elements;\n    const oe = out.elements;\n\n    oe[0] = le[0] - re[0];\n    oe[1] = le[1] - re[1];\n    oe[2] = le[2] - re[2];\n\n    oe[3] = le[3] - re[3];\n    oe[4] = le[4] - re[4];\n    oe[5] = le[5] - re[5];\n\n    oe[6] = le[6] - re[6];\n    oe[7] = le[7] - re[7];\n    oe[8] = le[8] - re[8];\n  }\n\n  /**\n   * Determines the product of two matrices.\n   * @param left - The first matrix to multiply\n   * @param right - The second matrix to multiply\n   * @param out - The product of two matrices\n   */\n  static multiply(left: Matrix3x3, right: Matrix3x3, out: Matrix3x3): void {\n    const le = left.elements;\n    const re = right.elements;\n    const oe = out.elements;\n\n    const l11 = le[0],\n      l12 = le[1],\n      l13 = le[2];\n    const l21 = le[3],\n      l22 = le[4],\n      l23 = le[5];\n    const l31 = le[6],\n      l32 = le[7],\n      l33 = le[8];\n\n    const r11 = re[0],\n      r12 = re[1],\n      r13 = re[2];\n    const r21 = re[3],\n      r22 = re[4],\n      r23 = re[5];\n    const r31 = re[6],\n      r32 = re[7],\n      r33 = re[8];\n\n    oe[0] = l11 * r11 + l21 * r12 + l31 * r13;\n    oe[1] = l12 * r11 + l22 * r12 + l32 * r13;\n    oe[2] = l13 * r11 + l23 * r12 + l33 * r13;\n\n    oe[3] = l11 * r21 + l21 * r22 + l31 * r23;\n    oe[4] = l12 * r21 + l22 * r22 + l32 * r23;\n    oe[5] = l13 * r21 + l23 * r22 + l33 * r23;\n\n    oe[6] = l11 * r31 + l21 * r32 + l31 * r33;\n    oe[7] = l12 * r31 + l22 * r32 + l32 * r33;\n    oe[8] = l13 * r31 + l23 * r32 + l33 * r33;\n  }\n\n  /**\n   * Determines whether the specified matrices are equals.\n   * @param left - The first matrix to compare\n   * @param right - The second matrix to compare\n   * @returns True if the specified matrices are equals, false otherwise\n   */\n  static equals(left: Matrix3x3, right: Matrix3x3): boolean {\n    const le = left.elements;\n    const re = right.elements;\n\n    return (\n      MathUtil.equals(le[0], re[0]) &&\n      MathUtil.equals(le[1], re[1]) &&\n      MathUtil.equals(le[2], re[2]) &&\n      MathUtil.equals(le[3], re[3]) &&\n      MathUtil.equals(le[4], re[4]) &&\n      MathUtil.equals(le[5], re[5]) &&\n      MathUtil.equals(le[6], re[6]) &&\n      MathUtil.equals(le[7], re[7]) &&\n      MathUtil.equals(le[8], re[8])\n    );\n  }\n\n  /**\n   * Performs a linear interpolation between two matrices.\n   * @param start - The first matrix\n   * @param end - The second matrix\n   * @param t - The blend amount where 0 returns start and 1 end\n   * @param out - The result of linear blending between two matrices\n   */\n  static lerp(start: Matrix3x3, end: Matrix3x3, t: number, out: Matrix3x3): void {\n    const se = start.elements;\n    const ee = end.elements;\n    const oe = out.elements;\n    const inv = 1.0 - t;\n\n    oe[0] = se[0] * inv + ee[0] * t;\n    oe[1] = se[1] * inv + ee[1] * t;\n    oe[2] = se[2] * inv + ee[2] * t;\n\n    oe[3] = se[3] * inv + ee[3] * t;\n    oe[4] = se[4] * inv + ee[4] * t;\n    oe[5] = se[5] * inv + ee[5] * t;\n\n    oe[6] = se[6] * inv + ee[6] * t;\n    oe[7] = se[7] * inv + ee[7] * t;\n    oe[8] = se[8] * inv + ee[8] * t;\n  }\n\n  /**\n   * Calculate a rotation matrix from a quaternion.\n   * @param quaternion - The quaternion used to calculate the matrix\n   * @param out - The calculated rotation matrix\n   */\n  static rotationQuaternion(quaternion: Quaternion, out: Matrix3x3): void {\n    const oe = out.elements;\n    const { _x: x, _y: y, _z: z, _w: w } = quaternion;\n    const x2 = x + x;\n    const y2 = y + y;\n    const z2 = z + z;\n    const xx = x * x2;\n    const yx = y * x2;\n    const yy = y * y2;\n    const zx = z * x2;\n    const zy = z * y2;\n    const zz = z * z2;\n    const wx = w * x2;\n    const wy = w * y2;\n    const wz = w * z2;\n\n    oe[0] = 1 - yy - zz;\n    oe[3] = yx - wz;\n    oe[6] = zx + wy;\n\n    oe[1] = yx + wz;\n    oe[4] = 1 - xx - zz;\n    oe[7] = zy - wx;\n\n    oe[2] = zx - wy;\n    oe[5] = zy + wx;\n    oe[8] = 1 - xx - yy;\n  }\n\n  /**\n   * Calculate a matrix from scale vector.\n   * @param s - The scale vector\n   * @param out - The calculated matrix\n   */\n  static scaling(s: Vector2, out: Matrix3x3): void {\n    const oe = out.elements;\n\n    oe[0] = s._x;\n    oe[1] = 0;\n    oe[2] = 0;\n\n    oe[3] = 0;\n    oe[4] = s._y;\n    oe[5] = 0;\n\n    oe[6] = 0;\n    oe[7] = 0;\n    oe[8] = 1;\n  }\n\n  /**\n   * Calculate a matrix from translation vector.\n   * @param translation - The translation vector\n   * @param out - The calculated matrix\n   */\n  static translation(translation: Vector2, out: Matrix3x3): void {\n    const oe = out.elements;\n\n    oe[0] = 1;\n    oe[1] = 0;\n    oe[2] = 0;\n\n    oe[3] = 0;\n    oe[4] = 1;\n    oe[5] = 0;\n\n    oe[6] = translation._x;\n    oe[7] = translation._y;\n    oe[8] = 1;\n  }\n\n  /**\n   * Calculate the inverse of the specified matrix.\n   * @param a - The matrix whose inverse is to be calculated\n   * @param out - The inverse of the specified matrix\n   */\n  static invert(a: Matrix3x3, out: Matrix3x3): void {\n    const ae = a.elements;\n    const oe = out.elements;\n\n    const a11 = ae[0],\n      a12 = ae[1],\n      a13 = ae[2];\n    const a21 = ae[3],\n      a22 = ae[4],\n      a23 = ae[5];\n    const a31 = ae[6],\n      a32 = ae[7],\n      a33 = ae[8];\n\n    const b12 = a33 * a22 - a23 * a32;\n    const b22 = -a33 * a21 + a23 * a31;\n    const b32 = a32 * a21 - a22 * a31;\n\n    let det = a11 * b12 + a12 * b22 + a13 * b32;\n    if (!det) {\n      return;\n    }\n    det = 1.0 / det;\n\n    oe[0] = b12 * det;\n    oe[1] = (-a33 * a12 + a13 * a32) * det;\n    oe[2] = (a23 * a12 - a13 * a22) * det;\n\n    oe[3] = b22 * det;\n    oe[4] = (a33 * a11 - a13 * a31) * det;\n    oe[5] = (-a23 * a11 + a13 * a21) * det;\n\n    oe[6] = b32 * det;\n    oe[7] = (-a32 * a11 + a12 * a31) * det;\n    oe[8] = (a22 * a11 - a12 * a21) * det;\n  }\n\n  /**\n   * Calculate a 3x3 normal matrix from a 4x4 matrix.\n   * @remarks The calculation process is the transpose matrix of the inverse matrix.\n   * @param mat4 - The 4x4 matrix\n   * @param out - THe 3x3 normal matrix\n   */\n  static normalMatrix(mat4: Matrix, out: Matrix3x3): void {\n    const ae = mat4.elements;\n    const oe = out.elements;\n\n    const a11 = ae[0],\n      a12 = ae[1],\n      a13 = ae[2],\n      a14 = ae[3];\n    const a21 = ae[4],\n      a22 = ae[5],\n      a23 = ae[6],\n      a24 = ae[7];\n    const a31 = ae[8],\n      a32 = ae[9],\n      a33 = ae[10],\n      a34 = ae[11];\n    const a41 = ae[12],\n      a42 = ae[13],\n      a43 = ae[14],\n      a44 = ae[15];\n\n    const b00 = a11 * a22 - a12 * a21;\n    const b01 = a11 * a23 - a13 * a21;\n    const b02 = a11 * a24 - a14 * a21;\n    const b03 = a12 * a23 - a13 * a22;\n    const b04 = a12 * a24 - a14 * a22;\n    const b05 = a13 * a24 - a14 * a23;\n    const b06 = a31 * a42 - a32 * a41;\n    const b07 = a31 * a43 - a33 * a41;\n    const b08 = a31 * a44 - a34 * a41;\n    const b09 = a32 * a43 - a33 * a42;\n    const b10 = a32 * a44 - a34 * a42;\n    const b11 = a33 * a44 - a34 * a43;\n\n    let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n    if (!det) {\n      return null;\n    }\n    det = 1.0 / det;\n\n    oe[0] = (a22 * b11 - a23 * b10 + a24 * b09) * det;\n    oe[1] = (a23 * b08 - a21 * b11 - a24 * b07) * det;\n    oe[2] = (a21 * b10 - a22 * b08 + a24 * b06) * det;\n\n    oe[3] = (a13 * b10 - a12 * b11 - a14 * b09) * det;\n    oe[4] = (a11 * b11 - a13 * b08 + a14 * b07) * det;\n    oe[5] = (a12 * b08 - a11 * b10 - a14 * b06) * det;\n\n    oe[6] = (a42 * b05 - a43 * b04 + a44 * b03) * det;\n    oe[7] = (a43 * b02 - a41 * b05 - a44 * b01) * det;\n    oe[8] = (a41 * b04 - a42 * b02 + a44 * b00) * det;\n  }\n\n  /**\n   * The specified matrix rotates around an angle.\n   * @param a - The specified matrix\n   * @param r - The rotation angle in radians\n   * @param out - The rotated matrix\n   */\n  static rotate(a: Matrix3x3, r: number, out: Matrix3x3): void {\n    const ae = a.elements;\n    const oe = out.elements;\n    const s = Math.sin(r);\n    const c = Math.cos(r);\n\n    const a11 = ae[0],\n      a12 = ae[1],\n      a13 = ae[2];\n    const a21 = ae[3],\n      a22 = ae[4],\n      a23 = ae[5];\n    const a31 = ae[6],\n      a32 = ae[7],\n      a33 = ae[8];\n\n    oe[0] = c * a11 + s * a21;\n    oe[1] = c * a12 + s * a22;\n    oe[2] = c * a13 + s * a23;\n\n    oe[3] = c * a21 - s * a11;\n    oe[4] = c * a22 - s * a12;\n    oe[5] = c * a23 - s * a13;\n\n    oe[6] = a31;\n    oe[7] = a32;\n    oe[8] = a33;\n  }\n\n  /**\n   * Scale a matrix by a given vector.\n   * @param m - The matrix\n   * @param s - The given vector\n   * @param out - The scaled matrix\n   */\n  static scale(m: Matrix3x3, s: Vector2, out: Matrix3x3): void {\n    const { _x: x, _y: y } = s;\n    const ae = m.elements;\n    const oe = out.elements;\n\n    oe[0] = x * ae[0];\n    oe[1] = x * ae[1];\n    oe[2] = x * ae[2];\n\n    oe[3] = y * ae[3];\n    oe[4] = y * ae[4];\n    oe[5] = y * ae[5];\n\n    oe[6] = ae[6];\n    oe[7] = ae[7];\n    oe[8] = ae[8];\n  }\n\n  /**\n   * Translate a matrix by a given vector.\n   * @param m - The matrix\n   * @param translation - The given vector\n   * @param out - The translated matrix\n   */\n  static translate(m: Matrix3x3, translation: Vector2, out: Matrix3x3): void {\n    const { _x: x, _y: y } = translation;\n    const ae = m.elements;\n    const oe = out.elements;\n\n    const a11 = ae[0],\n      a12 = ae[1],\n      a13 = ae[2];\n    const a21 = ae[3],\n      a22 = ae[4],\n      a23 = ae[5];\n    const a31 = ae[6],\n      a32 = ae[7],\n      a33 = ae[8];\n\n    oe[0] = a11;\n    oe[1] = a12;\n    oe[2] = a13;\n\n    oe[3] = a21;\n    oe[4] = a22;\n    oe[5] = a23;\n\n    oe[6] = x * a11 + y * a21 + a31;\n    oe[7] = x * a12 + y * a22 + a32;\n    oe[8] = x * a13 + y * a23 + a33;\n  }\n\n  /**\n   * Calculate the transpose of the specified matrix.\n   * @param a - The specified matrix\n   * @param out - The transpose of the specified matrix\n   */\n  static transpose(a: Matrix3x3, out: Matrix3x3): void {\n    const ae = a.elements;\n    const oe = out.elements;\n\n    if (out === a) {\n      const a12 = ae[1];\n      const a13 = ae[2];\n      const a23 = ae[5];\n      oe[1] = ae[3];\n      oe[2] = ae[6];\n      oe[3] = a12;\n      oe[5] = ae[7];\n      oe[6] = a13;\n      oe[7] = a23;\n    } else {\n      oe[0] = ae[0];\n      oe[1] = ae[3];\n      oe[2] = ae[6];\n\n      oe[3] = ae[1];\n      oe[4] = ae[4];\n      oe[5] = ae[7];\n\n      oe[6] = ae[2];\n      oe[7] = ae[5];\n      oe[8] = ae[8];\n    }\n  }\n\n  /**\n   * An array containing the elements of the matrix (column matrix).\n   * @remarks\n   * elements[0] first column and first row value m11\n   * elements[1] first column and second row value m12\n   * elements[2] first column and third row value m13\n   * elements[3] second column and first row value m21\n   * and so on\n   */\n  elements: Float32Array = new Float32Array(9);\n\n  /**\n   * Constructor of 3*3 matrix.\n   * @param m11 - Default 1 column 1, row 1\n   * @param m12 - Default 0 column 1, row 2\n   * @param m13 - Default 0 column 1, row 3\n   * @param m21 - Default 0 column 2, row 1\n   * @param m22 - Default 1 column 2, row 2\n   * @param m23 - Default 0 column 2, row 3\n   * @param m31 - Default 0 column 3, row 1\n   * @param m32 - Default 0 column 3, row 2\n   * @param m33 - Default 1 column 3, row 3\n   */\n  constructor(\n    m11: number = 1,\n    m12: number = 0,\n    m13: number = 0,\n    m21: number = 0,\n    m22: number = 1,\n    m23: number = 0,\n    m31: number = 0,\n    m32: number = 0,\n    m33: number = 1\n  ) {\n    const e: Float32Array = this.elements;\n\n    e[0] = m11;\n    e[1] = m12;\n    e[2] = m13;\n\n    e[3] = m21;\n    e[4] = m22;\n    e[5] = m23;\n\n    e[6] = m31;\n    e[7] = m32;\n    e[8] = m33;\n  }\n\n  /**\n   * Set the value of this matrix, and return this matrix.\n   * @param m11\n   * @param m12\n   * @param m13\n   * @param m21\n   * @param m22\n   * @param m23\n   * @param m31\n   * @param m32\n   * @param m33\n   * @returns This matrix\n   */\n  set(\n    m11: number,\n    m12: number,\n    m13: number,\n    m21: number,\n    m22: number,\n    m23: number,\n    m31: number,\n    m32: number,\n    m33: number\n  ): Matrix3x3 {\n    const e: Float32Array = this.elements;\n\n    e[0] = m11;\n    e[1] = m12;\n    e[2] = m13;\n\n    e[3] = m21;\n    e[4] = m22;\n    e[5] = m23;\n\n    e[6] = m31;\n    e[7] = m32;\n    e[8] = m33;\n\n    return this;\n  }\n\n  /**\n   * Determines the sum of this matrix and the specified matrix.\n   * @param right - The specified matrix\n   * @returns This matrix that store the sum of the two matrices\n   */\n  add(right: Matrix3x3): Matrix3x3 {\n    Matrix3x3.add(this, right, this);\n    return this;\n  }\n\n  /**\n   * Determines the difference between this matrix and the specified matrix.\n   * @param right - The specified matrix\n   * @returns This matrix that store the difference between the two matrices\n   */\n  subtract(right: Matrix3x3): Matrix3x3 {\n    Matrix3x3.subtract(this, right, this);\n    return this;\n  }\n\n  /**\n   * Determines the product of this matrix and the specified matrix.\n   * @param right - The specified matrix\n   * @returns This matrix that store the product of the two matrices\n   */\n  multiply(right: Matrix3x3): Matrix3x3 {\n    Matrix3x3.multiply(this, right, this);\n    return this;\n  }\n\n  /**\n   * Calculate a determinant of this matrix.\n   * @returns The determinant of this matrix\n   */\n  determinant(): number {\n    const e = this.elements;\n\n    const a11 = e[0],\n      a12 = e[1],\n      a13 = e[2];\n    const a21 = e[3],\n      a22 = e[4],\n      a23 = e[5];\n    const a31 = e[6],\n      a32 = e[7],\n      a33 = e[8];\n\n    const b12 = a33 * a22 - a23 * a32;\n    const b22 = -a33 * a21 + a23 * a31;\n    const b32 = a32 * a21 - a22 * a31;\n\n    return a11 * b12 + a12 * b22 + a13 * b32;\n  }\n\n  /**\n   * Identity this matrix.\n   * @returns This matrix after identity\n   */\n  identity(): Matrix3x3 {\n    const e = this.elements;\n\n    e[0] = 1;\n    e[1] = 0;\n    e[2] = 0;\n\n    e[3] = 0;\n    e[4] = 1;\n    e[5] = 0;\n\n    e[6] = 0;\n    e[7] = 0;\n    e[8] = 1;\n\n    return this;\n  }\n\n  /**\n   * Invert the matrix.\n   * @returns The matrix after invert\n   */\n  invert(): Matrix3x3 {\n    Matrix3x3.invert(this, this);\n    return this;\n  }\n\n  /**\n   * This matrix rotates around an angle.\n   * @param r - The rotation angle in radians\n   * @returns This matrix after rotate\n   */\n  rotate(r: number): Matrix3x3 {\n    Matrix3x3.rotate(this, r, this);\n    return this;\n  }\n\n  /**\n   * Scale this matrix by a given vector.\n   * @param s - The given vector\n   * @returns This matrix after scale\n   */\n  scale(s: Vector2): Matrix3x3 {\n    Matrix3x3.scale(this, s, this);\n    return this;\n  }\n\n  /**\n   * Translate this matrix by a given vector.\n   * @param translation - The given vector\n   * @returns This matrix after translate\n   */\n  translate(translation: Vector2): Matrix3x3 {\n    Matrix3x3.translate(this, translation, this);\n    return this;\n  }\n\n  /**\n   * Calculate the transpose of this matrix.\n   * @returns This matrix after transpose\n   */\n  transpose(): Matrix3x3 {\n    Matrix3x3.transpose(this, this);\n    return this;\n  }\n\n  /**\n   * Creates a clone of this matrix.\n   * @returns A clone of this matrix\n   */\n  clone(): Matrix3x3 {\n    const e = this.elements;\n    let ret = new Matrix3x3(e[0], e[1], e[2], e[3], e[4], e[5], e[6], e[7], e[8]);\n    return ret;\n  }\n\n  /**\n   * Copy this matrix from the specified matrix.\n   * @param source - The specified matrix\n   * @returns This matrix\n   */\n  copyFrom(source: Matrix3x3): Matrix3x3 {\n    const e = this.elements;\n    const se = source.elements;\n\n    e[0] = se[0];\n    e[1] = se[1];\n    e[2] = se[2];\n\n    e[3] = se[3];\n    e[4] = se[4];\n    e[5] = se[5];\n\n    e[6] = se[6];\n    e[7] = se[7];\n    e[8] = se[8];\n\n    return this;\n  }\n\n  /**\n   * Copy the value of this matrix from an array.\n   * @param array - The array\n   * @param offset - The start offset of the array\n   * @returns This matrix\n   */\n  copyFromArray(array: ArrayLike<number>, offset: number = 0): Matrix3x3 {\n    const srce = this.elements;\n    for (let i = 0; i < 12; i++) {\n      srce[i] = array[i + offset];\n    }\n    return this;\n  }\n\n  /**\n   * Copy the value of this matrix to an array.\n   * @param out - The array\n   * @param outOffset - The start offset of the array\n   */\n  copyToArray(out: number[] | Float32Array | Float64Array, outOffset: number = 0): void {\n    const e = this.elements;\n\n    out[outOffset] = e[0];\n    out[outOffset + 1] = e[1];\n    out[outOffset + 2] = e[2];\n    out[outOffset + 3] = e[3];\n    out[outOffset + 4] = e[4];\n    out[outOffset + 5] = e[5];\n    out[outOffset + 6] = e[6];\n    out[outOffset + 7] = e[7];\n    out[outOffset + 8] = e[8];\n  }\n\n  /**\n   * Copy the value of this 3x3 matrix from the specified 4x4 matrix.\n   * upper-left principle\n   * @param source - The specified 4x4 matrix\n   * @returns This 3x3 matrix\n   */\n  copyFromMatrix(source: Matrix): Matrix3x3 {\n    const ae = source.elements;\n    const e = this.elements;\n\n    e[0] = ae[0];\n    e[1] = ae[1];\n    e[2] = ae[2];\n\n    e[3] = ae[4];\n    e[4] = ae[5];\n    e[5] = ae[6];\n\n    e[6] = ae[8];\n    e[7] = ae[9];\n    e[8] = ae[10];\n\n    return this;\n  }\n}\n","import { IClone } from \"./IClone\";\nimport { ICopy } from \"./ICopy\";\nimport { MathUtil } from \"./MathUtil\";\nimport { Matrix3x3 } from \"./Matrix3x3\";\nimport { Vector3 } from \"./Vector3\";\n\n/**\n * Represents a four dimensional mathematical quaternion.\n */\nexport class Quaternion implements IClone<Quaternion>, ICopy<QuaternionLike, Quaternion> {\n  /** @internal */\n  static readonly _tempVector3 = new Vector3();\n  /** @internal */\n  static readonly _tempQuat1 = new Quaternion();\n\n  /**\n   * Determines the sum of two quaternions.\n   * @param left - The first quaternion to add\n   * @param right - The second quaternion to add\n   * @param out - The sum of two quaternions\n   */\n  static add(left: Quaternion, right: Quaternion, out: Quaternion): void {\n    out._x = left._x + right._x;\n    out._y = left._y + right._y;\n    out._z = left._z + right._z;\n    out._w = left._w + right._w;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Determines the product of two quaternions.\n   * @param left - The first quaternion to multiply\n   * @param right - The second quaternion to multiply\n   * @param out - The product of two quaternions\n   */\n  static multiply(left: Quaternion, right: Quaternion, out: Quaternion): void {\n    const ax = left._x,\n      ay = left._y,\n      az = left._z,\n      aw = left._w;\n    const bx = right._x,\n      by = right._y,\n      bz = right._z,\n      bw = right._w;\n\n    out._x = ax * bw + aw * bx + ay * bz - az * by;\n    out._y = ay * bw + aw * by + az * bx - ax * bz;\n    out._z = az * bw + aw * bz + ax * by - ay * bx;\n    out._w = aw * bw - ax * bx - ay * by - az * bz;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Calculate quaternion that contains conjugated version of the specified quaternion.\n   * @param a - The specified quaternion\n   * @param out - The conjugate version of the specified quaternion\n   */\n  static conjugate(a: Quaternion, out: Quaternion): void {\n    out._x = -a._x;\n    out._y = -a._y;\n    out._z = -a._z;\n    out._w = a._w;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Determines the dot product of two quaternions.\n   * @param left - The first quaternion to dot\n   * @param right - The second quaternion to dot\n   * @returns The dot product of two quaternions\n   */\n  static dot(left: Quaternion, right: Quaternion): number {\n    return left._x * right._x + left._y * right._y + left._z * right._z + left._w * right._w;\n  }\n\n  /**\n   * Determines whether the specified quaternions are equals.\n   * @param left - The first quaternion to compare\n   * @param right - The second quaternion to compare\n   * @returns True if the specified quaternions are equals, false otherwise\n   */\n  static equals(left: Quaternion, right: Quaternion): boolean {\n    return (\n      MathUtil.equals(left._x, right._x) &&\n      MathUtil.equals(left._y, right._y) &&\n      MathUtil.equals(left._z, right._z) &&\n      MathUtil.equals(left._w, right._w)\n    );\n  }\n\n  /**\n   * Calculate a quaternion rotates around an arbitrary axis.\n   * @param axis - The axis\n   * @param rad - The rotation angle in radians\n   * @param out - The quaternion after rotate\n   */\n  static rotationAxisAngle(axis: Vector3, rad: number, out: Quaternion): void {\n    const normalAxis = Quaternion._tempVector3;\n    Vector3.normalize(axis, normalAxis);\n    rad *= 0.5;\n    const s = Math.sin(rad);\n    out._x = normalAxis._x * s;\n    out._y = normalAxis._y * s;\n    out._z = normalAxis._z * s;\n    out._w = Math.cos(rad);\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Calculate a quaternion rotates around x, y, z axis (pitch/yaw/roll).\n   * @param x - The radian of rotation around X (pitch)\n   * @param y - The radian of rotation around Y (yaw)\n   * @param z - The radian of rotation around Z (roll)\n   * @param out - The calculated quaternion\n   */\n  static rotationEuler(x: number, y: number, z: number, out: Quaternion): void {\n    Quaternion.rotationYawPitchRoll(y, x, z, out);\n  }\n\n  /**\n   * Calculate a quaternion from the specified yaw, pitch and roll angles.\n   * @param yaw - Yaw around the y axis in radians\n   * @param pitch - Pitch around the x axis in radians\n   * @param roll - Roll around the z axis in radians\n   * @param out - The calculated quaternion\n   */\n  static rotationYawPitchRoll(yaw: number, pitch: number, roll: number, out: Quaternion): void {\n    const halfRoll = roll * 0.5;\n    const halfPitch = pitch * 0.5;\n    const halfYaw = yaw * 0.5;\n\n    const sinRoll = Math.sin(halfRoll);\n    const cosRoll = Math.cos(halfRoll);\n    const sinPitch = Math.sin(halfPitch);\n    const cosPitch = Math.cos(halfPitch);\n    const sinYaw = Math.sin(halfYaw);\n    const cosYaw = Math.cos(halfYaw);\n\n    const cosYawPitch = cosYaw * cosPitch;\n    const sinYawPitch = sinYaw * sinPitch;\n\n    out._x = cosYaw * sinPitch * cosRoll + sinYaw * cosPitch * sinRoll;\n    out._y = sinYaw * cosPitch * cosRoll - cosYaw * sinPitch * sinRoll;\n    out._z = cosYawPitch * sinRoll - sinYawPitch * cosRoll;\n    out._w = cosYawPitch * cosRoll + sinYawPitch * sinRoll;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Calculate a quaternion from the specified 3x3 matrix.\n   * @param m - The specified 3x3 matrix\n   * @param out - The calculated quaternion\n   */\n  static rotationMatrix3x3(m: Matrix3x3, out: Quaternion): void {\n    const me = m.elements;\n    const m11 = me[0],\n      m12 = me[1],\n      m13 = me[2];\n    const m21 = me[3],\n      m22 = me[4],\n      m23 = me[5];\n    const m31 = me[6],\n      m32 = me[7],\n      m33 = me[8];\n    const scale = m11 + m22 + m33;\n    let sqrt, half;\n\n    if (scale > 0) {\n      sqrt = Math.sqrt(scale + 1.0);\n      out._w = sqrt * 0.5;\n      sqrt = 0.5 / sqrt;\n\n      out._x = (m23 - m32) * sqrt;\n      out._y = (m31 - m13) * sqrt;\n      out._z = (m12 - m21) * sqrt;\n    } else if (m11 >= m22 && m11 >= m33) {\n      sqrt = Math.sqrt(1.0 + m11 - m22 - m33);\n      half = 0.5 / sqrt;\n\n      out._x = 0.5 * sqrt;\n      out._y = (m12 + m21) * half;\n      out._z = (m13 + m31) * half;\n      out._w = (m23 - m32) * half;\n    } else if (m22 > m33) {\n      sqrt = Math.sqrt(1.0 + m22 - m11 - m33);\n      half = 0.5 / sqrt;\n\n      out._x = (m21 + m12) * half;\n      out._y = 0.5 * sqrt;\n      out._z = (m32 + m23) * half;\n      out._w = (m31 - m13) * half;\n    } else {\n      sqrt = Math.sqrt(1.0 + m33 - m11 - m22);\n      half = 0.5 / sqrt;\n\n      out._x = (m13 + m31) * half;\n      out._y = (m23 + m32) * half;\n      out._z = 0.5 * sqrt;\n      out._w = (m12 - m21) * half;\n    }\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Calculate the inverse of the specified quaternion.\n   * @param a - The quaternion whose inverse is to be calculated\n   * @param out - The inverse of the specified quaternion\n   */\n  static invert(a: Quaternion, out: Quaternion): void {\n    const { _x: x, _y: y, _z: z, _w: w } = a;\n    const dot = x * x + y * y + z * z + w * w;\n    if (dot > MathUtil.zeroTolerance) {\n      const invDot = 1.0 / dot;\n      out._x = -x * invDot;\n      out._y = -y * invDot;\n      out._z = -z * invDot;\n      out._w = w * invDot;\n      out._onValueChanged && out._onValueChanged();\n    }\n  }\n\n  /**\n   * Performs a linear blend between two quaternions.\n   * @param start - The first quaternion\n   * @param end - The second quaternion\n   * @param t - The blend amount where 0 returns start and 1 end\n   * @param out - The result of linear blending between two quaternions\n   */\n  static lerp(start: Quaternion, end: Quaternion, t: number, out: Quaternion): void {\n    const inv = 1.0 - t;\n    if (Quaternion.dot(start, end) >= 0) {\n      out._x = start._x * inv + end._x * t;\n      out._y = start._y * inv + end._y * t;\n      out._z = start._z * inv + end._z * t;\n      out._w = start._w * inv + end._w * t;\n    } else {\n      out._x = start._x * inv - end._x * t;\n      out._y = start._y * inv - end._y * t;\n      out._z = start._z * inv - end._z * t;\n      out._w = start._w * inv - end._w * t;\n    }\n\n    out.normalize();\n  }\n\n  /**\n   * Performs a spherical linear blend between two quaternions.\n   * @param start - The first quaternion\n   * @param end - The second quaternion\n   * @param t - The blend amount where 0 returns start and 1 end\n   * @param out - The result of spherical linear blending between two quaternions\n   */\n  static slerp(start: Quaternion, end: Quaternion, t: number, out: Quaternion): void {\n    const ax = start._x;\n    const ay = start._y;\n    const az = start._z;\n    const aw = start._w;\n    let bx = end._x;\n    let by = end._y;\n    let bz = end._z;\n    let bw = end._w;\n\n    let scale0: number, scale1: number;\n    // calc cosine\n    let cosom = ax * bx + ay * by + az * bz + aw * bw;\n    // adjust signs (if necessary)\n    if (cosom < 0.0) {\n      cosom = -cosom;\n      bx = -bx;\n      by = -by;\n      bz = -bz;\n      bw = -bw;\n    }\n    // calculate coefficients\n    if (1.0 - cosom > MathUtil.zeroTolerance) {\n      // standard case (slerp)\n      const omega = Math.acos(cosom);\n      const sinom = Math.sin(omega);\n      scale0 = Math.sin((1.0 - t) * omega) / sinom;\n      scale1 = Math.sin(t * omega) / sinom;\n    } else {\n      // \"from\" and \"to\" quaternions are very close\n      //  ... so we can do a linear interpolation\n      scale0 = 1.0 - t;\n      scale1 = t;\n    }\n    // calculate final values\n    out._x = scale0 * ax + scale1 * bx;\n    out._y = scale0 * ay + scale1 * by;\n    out._z = scale0 * az + scale1 * bz;\n    out._w = scale0 * aw + scale1 * bw;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Scales the specified quaternion magnitude to unit length.\n   * @param a - The specified quaternion\n   * @param out - The normalized quaternion\n   */\n  static normalize(a: Quaternion, out: Quaternion): void {\n    const { _x, _y, _z, _w } = a;\n    let len = Math.sqrt(_x * _x + _y * _y + _z * _z + _w * _w);\n    if (len > MathUtil.zeroTolerance) {\n      len = 1 / len;\n      out._x = _x * len;\n      out._y = _y * len;\n      out._z = _z * len;\n      out._w = _w * len;\n      out._onValueChanged && out._onValueChanged();\n    }\n  }\n\n  /**\n   * Calculate a quaternion rotate around X axis.\n   * @param rad - The rotation angle in radians\n   * @param out - The calculated quaternion\n   */\n  static rotationX(rad: number, out: Quaternion): void {\n    rad *= 0.5;\n    const s = Math.sin(rad);\n    const c = Math.cos(rad);\n\n    out._x = s;\n    out._y = 0;\n    out._z = 0;\n    out._w = c;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Calculate a quaternion rotate around Y axis.\n   * @param rad - The rotation angle in radians\n   * @param out - The calculated quaternion\n   */\n  static rotationY(rad: number, out: Quaternion): void {\n    rad *= 0.5;\n    const s = Math.sin(rad);\n    const c = Math.cos(rad);\n\n    out._x = 0;\n    out._y = s;\n    out._z = 0;\n    out._w = c;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Calculate a quaternion rotate around Z axis.\n   * @param rad - The rotation angle in radians\n   * @param out - The calculated quaternion\n   */\n  static rotationZ(rad: number, out: Quaternion): void {\n    rad *= 0.5;\n    const s = Math.sin(rad);\n    const c = Math.cos(rad);\n\n    out._x = 0;\n    out._y = 0;\n    out._z = s;\n    out._w = c;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Calculate a quaternion that the specified quaternion rotate around X axis.\n   * @param quaternion - The specified quaternion\n   * @param rad - The rotation angle in radians\n   * @param out - The calculated quaternion\n   */\n  static rotateX(quaternion: Quaternion, rad: number, out: Quaternion): void {\n    const { _x, _y, _z, _w } = quaternion;\n    rad *= 0.5;\n    const bx = Math.sin(rad);\n    const bw = Math.cos(rad);\n\n    out._x = _x * bw + _w * bx;\n    out._y = _y * bw + _z * bx;\n    out._z = _z * bw - _y * bx;\n    out._w = _w * bw - _x * bx;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Calculate a quaternion that the specified quaternion rotate around Y axis.\n   * @param quaternion - The specified quaternion\n   * @param rad - The rotation angle in radians\n   * @param out - The calculated quaternion\n   */\n  static rotateY(quaternion: Quaternion, rad: number, out: Quaternion): void {\n    const { _x, _y, _z, _w } = quaternion;\n    rad *= 0.5;\n    const by = Math.sin(rad);\n    const bw = Math.cos(rad);\n\n    out._x = _x * bw - _z * by;\n    out._y = _y * bw + _w * by;\n    out._z = _z * bw + _x * by;\n    out._w = _w * bw - _y * by;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Calculate a quaternion that the specified quaternion rotate around Z axis.\n   * @param quaternion - The specified quaternion\n   * @param rad - The rotation angle in radians\n   * @param out - The calculated quaternion\n   */\n  static rotateZ(quaternion: Quaternion, rad: number, out: Quaternion): void {\n    const { _x, _y, _z, _w } = quaternion;\n    rad *= 0.5;\n    const bz = Math.sin(rad);\n    const bw = Math.cos(rad);\n\n    out._x = _x * bw + _y * bz;\n    out._y = _y * bw - _x * bz;\n    out._z = _z * bw + _w * bz;\n    out._w = _w * bw - _z * bz;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Scale a quaternion by a given number.\n   * @param a - The quaternion\n   * @param s - The given number\n   * @param out - The scaled quaternion\n   */\n  static scale(a: Quaternion, s: number, out: Quaternion): void {\n    out._x = a._x * s;\n    out._y = a._y * s;\n    out._z = a._z * s;\n    out._w = a._w * s;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /** @internal */\n  _x: number;\n  /** @internal */\n  _y: number;\n  /** @internal */\n  _z: number;\n  /** @internal */\n  _w: number;\n  /** @internal */\n  _onValueChanged: () => void = null;\n\n  /**\n   * The x component of the quaternion.\n   */\n  public get x(): number {\n    return this._x;\n  }\n\n  public set x(value: number) {\n    this._x = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * The y component of the quaternion.\n   */\n  public get y(): number {\n    return this._y;\n  }\n\n  public set y(value: number) {\n    this._y = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * The z component of the quaternion.\n   */\n  public get z(): number {\n    return this._z;\n  }\n\n  public set z(value: number) {\n    this._z = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * Indicting whether this instance is normalized.\n   */\n  public get normalized(): boolean {\n    return (\n      Math.abs(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w - 1) <\n      MathUtil.zeroTolerance\n    );\n  }\n\n  /**\n   * The w component of the quaternion.\n   */\n  public get w() {\n    return this._w;\n  }\n\n  public set w(value: number) {\n    this._w = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * Constructor of Quaternion.\n   * @param x - The x component of the quaternion, default 0\n   * @param y - The y component of the quaternion, default 0\n   * @param z - The z component of the quaternion, default 0\n   * @param w - The w component of the quaternion, default 1\n   */\n  constructor(x: number = 0, y: number = 0, z: number = 0, w: number = 1) {\n    this._x = x;\n    this._y = y;\n    this._z = z;\n    this._w = w;\n  }\n\n  /**\n   * Set the value of this quaternion, and return this quaternion.\n   * @param x - The x component of the quaternion\n   * @param y - The y component of the quaternion\n   * @param z - The z component of the quaternion\n   * @param w - The w component of the quaternion\n   * @returns This quaternion\n   */\n  set(x: number, y: number, z: number, w: number): Quaternion {\n    this._x = x;\n    this._y = y;\n    this._z = z;\n    this._w = w;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Transforms this quaternion into its conjugated version.\n   * @returns This quaternion\n   */\n  conjugate(): Quaternion {\n    this._x *= -1;\n    this._y *= -1;\n    this._z *= -1;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Get the rotation axis and rotation angle of the quaternion (unit: radians).\n   * @param out - The axis as an output parameter\n   * @returns The rotation angle (unit: radians)\n   */\n  getAxisAngle(out: Vector3): number {\n    const { _x, _y, _z } = this;\n    const length = _x * _x + _y * _y + _z * _z;\n\n    if (length < MathUtil.zeroTolerance) {\n      out._x = 1;\n      out._y = 0;\n      out._z = 0;\n\n      return 0;\n    } else {\n      const inv = 1.0 / length;\n      out._x = this._x * inv;\n      out._y = this._y * inv;\n      out._z = this._z * inv;\n\n      return Math.acos(this._w) * 2.0;\n    }\n  }\n\n  /**\n   * Identity this quaternion.\n   * @returns This quaternion after identity\n   */\n  identity(): Quaternion {\n    this._x = 0;\n    this._y = 0;\n    this._z = 0;\n    this._w = 1;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Calculate the length of this quaternion.\n   * @returns The length of this quaternion\n   */\n  length(): number {\n    const { _x, _y, _z, _w } = this;\n    return Math.sqrt(_x * _x + _y * _y + _z * _z + _w * _w);\n  }\n\n  /**\n   * Calculates the squared length of this quaternion.\n   * @returns The squared length of this quaternion\n   */\n  lengthSquared(): number {\n    const { _x, _y, _z, _w } = this;\n    return _x * _x + _y * _y + _z * _z + _w * _w;\n  }\n\n  /**\n   * Converts this quaternion into a unit quaternion.\n   * @returns This quaternion\n   */\n  normalize(): Quaternion {\n    Quaternion.normalize(this, this);\n    return this;\n  }\n\n  /**\n   * Get the euler of this quaternion.\n   * @param out - The euler (in radians) as an output parameter\n   * @returns Euler x->pitch y->yaw z->roll\n   */\n  toEuler(out: Vector3): Vector3 {\n    this._toYawPitchRoll(out);\n\n    const t = out._x;\n    out._x = out._y;\n    out._y = t;\n    out._onValueChanged && out._onValueChanged();\n    return out;\n  }\n\n  /**\n   * Get the euler of this quaternion.\n   * @param out - The euler (in radians) as an output parameter\n   * @returns Euler x->yaw y->pitch z->roll\n   */\n  toYawPitchRoll(out: Vector3): Vector3 {\n    this._toYawPitchRoll(out);\n    out._onValueChanged && out._onValueChanged();\n    return out;\n  }\n\n  /**\n   * Calculate this quaternion rotate around X axis.\n   * @param rad - The rotation angle in radians\n   * @returns This quaternion\n   */\n  rotateX(rad: number): Quaternion {\n    Quaternion.rotateX(this, rad, this);\n    return this;\n  }\n\n  /**\n   * Calculate this quaternion rotate around Y axis.\n   * @param rad - The rotation angle in radians\n   * @returns This quaternion\n   */\n  rotateY(rad: number): Quaternion {\n    Quaternion.rotateY(this, rad, this);\n    return this;\n  }\n\n  /**\n   * Calculate this quaternion rotate around Z axis.\n   * @param rad - The rotation angle in radians\n   * @returns This quaternion\n   */\n  rotateZ(rad: number): Quaternion {\n    Quaternion.rotateZ(this, rad, this);\n    return this;\n  }\n\n  /**\n   * Calculate this quaternion rotates around an arbitrary axis.\n   * @param axis - The axis\n   * @param rad - The rotation angle in radians\n   * @returns This quaternion\n   */\n  rotationAxisAngle(axis: Vector3, rad: number): Quaternion {\n    Quaternion.rotationAxisAngle(axis, rad, this);\n    return this;\n  }\n\n  /**\n   * Determines the product of this quaternion and the specified quaternion.\n   * @param quat - The specified quaternion\n   * @returns The product of the two quaternions\n   */\n  multiply(quat: Quaternion): Quaternion {\n    Quaternion.multiply(this, quat, this);\n    return this;\n  }\n\n  /**\n   * Invert this quaternion.\n   * @returns This quaternion after invert\n   */\n  invert(): Quaternion {\n    Quaternion.invert(this, this);\n    return this;\n  }\n\n  /**\n   * Determines the dot product of this quaternion and the specified quaternion.\n   * @param quat - The specified quaternion\n   * @returns The dot product of two quaternions\n   */\n  dot(quat: Quaternion): number {\n    return Quaternion.dot(this, quat);\n  }\n\n  /**\n   * Performs a linear blend between this quaternion and the specified quaternion.\n   * @param quat - The specified quaternion\n   * @param t - The blend amount where 0 returns this and 1 quat\n   * @returns - The result of linear blending between two quaternions\n   */\n  lerp(quat: Quaternion, t: number): Quaternion {\n    Quaternion.lerp(this, quat, t, this);\n    return this;\n  }\n\n  /**\n   * Calculate this quaternion rotation around an arbitrary axis.\n   * @param axis - The axis\n   * @param rad - The rotation angle in radians\n   * @returns This quaternion\n   */\n  rotateAxisAngle(axis: Vector3, rad: number): Quaternion {\n    Quaternion._tempQuat1.rotationAxisAngle(axis, rad);\n    this.multiply(Quaternion._tempQuat1);\n    return this;\n  }\n\n  /**\n   * Creates a clone of this quaternion.\n   * @returns A clone of this quaternion\n   */\n  clone(): Quaternion {\n    return new Quaternion(this._x, this._y, this._z, this._w);\n  }\n\n  /**\n   * Copy this quaternion from the specified quaternion.\n   * @param source - The specified quaternion\n   * @returns This quaternion\n   */\n  copyFrom(source: QuaternionLike): Quaternion {\n    this._x = source.x;\n    this._y = source.y;\n    this._z = source.z;\n    this._w = source.w;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Copy the value of this quaternion from an array.\n   * @param array - The array\n   * @param offset - The start offset of the array\n   * @returns This quaternion\n   */\n  copyFromArray(array: ArrayLike<number>, offset: number = 0): Quaternion {\n    this._x = array[offset];\n    this._y = array[offset + 1];\n    this._z = array[offset + 2];\n    this._w = array[offset + 3];\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Copy the value of this quaternion to an array.\n   * @param out - The array\n   * @param outOffset - The start offset of the array\n   */\n  copyToArray(out: number[] | Float32Array | Float64Array, outOffset: number = 0) {\n    out[outOffset] = this._x;\n    out[outOffset + 1] = this._y;\n    out[outOffset + 2] = this._z;\n    out[outOffset + 3] = this._w;\n  }\n\n  private _toYawPitchRoll(out: Vector3): Vector3 {\n    const { _x, _y, _z, _w } = this;\n    const xx = _x * _x;\n    const yy = _y * _y;\n    const zz = _z * _z;\n    const xy = _x * _y;\n    const zw = _z * _w;\n    const zx = _z * _x;\n    const yw = _y * _w;\n    const yz = _y * _z;\n    const xw = _x * _w;\n\n    out._y = Math.asin(2.0 * (xw - yz));\n    if (Math.cos(out.y) > MathUtil.zeroTolerance) {\n      out._z = Math.atan2(2.0 * (xy + zw), 1.0 - 2.0 * (zz + xx));\n      out._x = Math.atan2(2.0 * (zx + yw), 1.0 - 2.0 * (yy + xx));\n    } else {\n      out._z = Math.atan2(-2.0 * (xy - zw), 1.0 - 2.0 * (yy + zz));\n      out._x = 0.0;\n    }\n    return out;\n  }\n}\n\ninterface QuaternionLike {\n  /** {@inheritDoc Quaternion.x} */\n  x: number;\n  /** {@inheritDoc Quaternion.y} */\n  y: number;\n  /** {@inheritDoc Quaternion.z} */\n  z: number;\n  /** {@inheritDoc Quaternion.w} */\n  w: number;\n}\n","import { IClone } from \"./IClone\";\nimport { ICopy } from \"./ICopy\";\nimport { MathUtil } from \"./MathUtil\";\nimport { Matrix3x3 } from \"./Matrix3x3\";\nimport { Quaternion } from \"./Quaternion\";\nimport { Vector3 } from \"./Vector3\";\n\n/**\n * Represents a 4x4 mathematical matrix.\n */\nexport class Matrix implements IClone<Matrix>, ICopy<Matrix, Matrix> {\n  private static readonly _tempVec30: Vector3 = new Vector3();\n  private static readonly _tempVec31: Vector3 = new Vector3();\n  private static readonly _tempVec32: Vector3 = new Vector3();\n  private static readonly _tempMat30: Matrix3x3 = new Matrix3x3();\n\n  /** @internal Identity matrix. */\n  static readonly _identity: Matrix = new Matrix(\n    1.0,\n    0.0,\n    0.0,\n    0.0,\n    0.0,\n    1.0,\n    0.0,\n    0.0,\n    0.0,\n    0.0,\n    1.0,\n    0.0,\n    0.0,\n    0.0,\n    0.0,\n    1.0\n  );\n\n  /**\n   * Determines the product of two matrices.\n   * @param left - The first matrix to multiply\n   * @param right - The second matrix to multiply\n   * @param out - The product of the two matrices\n   */\n  static multiply(left: Matrix, right: Matrix, out: Matrix): void {\n    const le = left.elements;\n    const re = right.elements;\n    const oe = out.elements;\n\n    const l11 = le[0],\n      l12 = le[1],\n      l13 = le[2],\n      l14 = le[3];\n    const l21 = le[4],\n      l22 = le[5],\n      l23 = le[6],\n      l24 = le[7];\n    const l31 = le[8],\n      l32 = le[9],\n      l33 = le[10],\n      l34 = le[11];\n    const l41 = le[12],\n      l42 = le[13],\n      l43 = le[14],\n      l44 = le[15];\n\n    const r11 = re[0],\n      r12 = re[1],\n      r13 = re[2],\n      r14 = re[3];\n    const r21 = re[4],\n      r22 = re[5],\n      r23 = re[6],\n      r24 = re[7];\n    const r31 = re[8],\n      r32 = re[9],\n      r33 = re[10],\n      r34 = re[11];\n    const r41 = re[12],\n      r42 = re[13],\n      r43 = re[14],\n      r44 = re[15];\n\n    oe[0] = l11 * r11 + l21 * r12 + l31 * r13 + l41 * r14;\n    oe[1] = l12 * r11 + l22 * r12 + l32 * r13 + l42 * r14;\n    oe[2] = l13 * r11 + l23 * r12 + l33 * r13 + l43 * r14;\n    oe[3] = l14 * r11 + l24 * r12 + l34 * r13 + l44 * r14;\n\n    oe[4] = l11 * r21 + l21 * r22 + l31 * r23 + l41 * r24;\n    oe[5] = l12 * r21 + l22 * r22 + l32 * r23 + l42 * r24;\n    oe[6] = l13 * r21 + l23 * r22 + l33 * r23 + l43 * r24;\n    oe[7] = l14 * r21 + l24 * r22 + l34 * r23 + l44 * r24;\n\n    oe[8] = l11 * r31 + l21 * r32 + l31 * r33 + l41 * r34;\n    oe[9] = l12 * r31 + l22 * r32 + l32 * r33 + l42 * r34;\n    oe[10] = l13 * r31 + l23 * r32 + l33 * r33 + l43 * r34;\n    oe[11] = l14 * r31 + l24 * r32 + l34 * r33 + l44 * r34;\n\n    oe[12] = l11 * r41 + l21 * r42 + l31 * r43 + l41 * r44;\n    oe[13] = l12 * r41 + l22 * r42 + l32 * r43 + l42 * r44;\n    oe[14] = l13 * r41 + l23 * r42 + l33 * r43 + l43 * r44;\n    oe[15] = l14 * r41 + l24 * r42 + l34 * r43 + l44 * r44;\n  }\n\n  /**\n   * Determines whether the specified matrices are equals.\n   * @param left - The first matrix to compare\n   * @param right - The second matrix to compare\n   * @returns True if the specified matrices are equals, false otherwise\n   */\n  static equals(left: Matrix, right: Matrix): boolean {\n    const le = left.elements;\n    const re = right.elements;\n\n    return (\n      MathUtil.equals(le[0], re[0]) &&\n      MathUtil.equals(le[1], re[1]) &&\n      MathUtil.equals(le[2], re[2]) &&\n      MathUtil.equals(le[3], re[3]) &&\n      MathUtil.equals(le[4], re[4]) &&\n      MathUtil.equals(le[5], re[5]) &&\n      MathUtil.equals(le[6], re[6]) &&\n      MathUtil.equals(le[7], re[7]) &&\n      MathUtil.equals(le[8], re[8]) &&\n      MathUtil.equals(le[9], re[9]) &&\n      MathUtil.equals(le[10], re[10]) &&\n      MathUtil.equals(le[11], re[11]) &&\n      MathUtil.equals(le[12], re[12]) &&\n      MathUtil.equals(le[13], re[13]) &&\n      MathUtil.equals(le[14], re[14]) &&\n      MathUtil.equals(le[15], re[15])\n    );\n  }\n\n  /**\n   * Performs a linear interpolation between two matrices.\n   * @param start - The first matrix\n   * @param end - The second matrix\n   * @param t - The blend amount where 0 returns start and 1 end\n   * @param out - The result of linear blending between two matrices\n   */\n  static lerp(start: Matrix, end: Matrix, t: number, out: Matrix): void {\n    const se = start.elements;\n    const ee = end.elements;\n    const oe = out.elements;\n    const inv = 1.0 - t;\n\n    oe[0] = se[0] * inv + ee[0] * t;\n    oe[1] = se[1] * inv + ee[1] * t;\n    oe[2] = se[2] * inv + ee[2] * t;\n    oe[3] = se[3] * inv + ee[3] * t;\n\n    oe[4] = se[4] * inv + ee[4] * t;\n    oe[5] = se[5] * inv + ee[5] * t;\n    oe[6] = se[6] * inv + ee[6] * t;\n    oe[7] = se[7] * inv + ee[7] * t;\n\n    oe[8] = se[8] * inv + ee[8] * t;\n    oe[9] = se[9] * inv + ee[9] * t;\n    oe[10] = se[10] * inv + ee[10] * t;\n    oe[11] = se[11] * inv + ee[11] * t;\n\n    oe[12] = se[12] * inv + ee[12] * t;\n    oe[13] = se[13] * inv + ee[13] * t;\n    oe[14] = se[14] * inv + ee[14] * t;\n    oe[15] = se[15] * inv + ee[15] * t;\n  }\n\n  /**\n   * Calculate a rotation matrix from a quaternion.\n   * @param quaternion - The quaternion used to calculate the matrix\n   * @param out - The calculated rotation matrix\n   */\n  static rotationQuaternion(quaternion: Quaternion, out: Matrix): void {\n    const oe = out.elements;\n    const { _x: x, _y: y, _z: z, _w: w } = quaternion;\n    let x2 = x + x;\n    let y2 = y + y;\n    let z2 = z + z;\n\n    let xx = x * x2;\n    let yx = y * x2;\n    let yy = y * y2;\n    let zx = z * x2;\n    let zy = z * y2;\n    let zz = z * z2;\n    let wx = w * x2;\n    let wy = w * y2;\n    let wz = w * z2;\n\n    oe[0] = 1 - yy - zz;\n    oe[1] = yx + wz;\n    oe[2] = zx - wy;\n    oe[3] = 0;\n\n    oe[4] = yx - wz;\n    oe[5] = 1 - xx - zz;\n    oe[6] = zy + wx;\n    oe[7] = 0;\n\n    oe[8] = zx + wy;\n    oe[9] = zy - wx;\n    oe[10] = 1 - xx - yy;\n    oe[11] = 0;\n\n    oe[12] = 0;\n    oe[13] = 0;\n    oe[14] = 0;\n    oe[15] = 1;\n  }\n\n  /**\n   * Calculate a matrix rotates around an arbitrary axis.\n   * @param axis - The axis\n   * @param r - The rotation angle in radians\n   * @param out - The matrix after rotate\n   */\n  static rotationAxisAngle(axis: Vector3, r: number, out: Matrix): void {\n    const oe = out.elements;\n    let { _x: x, _y: y, _z: z } = axis;\n    let len = Math.sqrt(x * x + y * y + z * z);\n    let s, c, t;\n\n    if (Math.abs(len) < MathUtil.zeroTolerance) {\n      return;\n    }\n\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n\n    s = Math.sin(r);\n    c = Math.cos(r);\n    t = 1 - c;\n\n    // Perform rotation-specific matrix multiplication\n    oe[0] = x * x * t + c;\n    oe[1] = y * x * t + z * s;\n    oe[2] = z * x * t - y * s;\n    oe[3] = 0;\n\n    oe[4] = x * y * t - z * s;\n    oe[5] = y * y * t + c;\n    oe[6] = z * y * t + x * s;\n    oe[7] = 0;\n\n    oe[8] = x * z * t + y * s;\n    oe[9] = y * z * t - x * s;\n    oe[10] = z * z * t + c;\n    oe[11] = 0;\n\n    oe[12] = 0;\n    oe[13] = 0;\n    oe[14] = 0;\n    oe[15] = 1;\n  }\n\n  /**\n   * Calculate a matrix from a quaternion and a translation.\n   * @param quaternion - The quaternion used to calculate the matrix\n   * @param translation - The translation used to calculate the matrix\n   * @param out - The calculated matrix\n   */\n  static rotationTranslation(quaternion: Quaternion, translation: Vector3, out: Matrix): void {\n    Matrix.rotationQuaternion(quaternion, out);\n\n    const oe = out.elements;\n    oe[12] = translation._x;\n    oe[13] = translation._y;\n    oe[14] = translation._z;\n  }\n\n  /**\n   * Calculate an affine matrix.\n   * @param scale - The scale used to calculate matrix\n   * @param rotation - The rotation used to calculate matrix\n   * @param translation - The translation used to calculate matrix\n   * @param out - The calculated matrix\n   */\n  static affineTransformation(scale: Vector3, rotation: Quaternion, translation: Vector3, out: Matrix): void {\n    const oe = out.elements;\n    const { _x: x, _y: y, _z: z, _w: w } = rotation;\n    let x2 = x + x;\n    let y2 = y + y;\n    let z2 = z + z;\n\n    let xx = x * x2;\n    let xy = x * y2;\n    let xz = x * z2;\n    let yy = y * y2;\n    let yz = y * z2;\n    let zz = z * z2;\n    let wx = w * x2;\n    let wy = w * y2;\n    let wz = w * z2;\n    let sx = scale._x;\n    let sy = scale._y;\n    let sz = scale._z;\n\n    oe[0] = (1 - (yy + zz)) * sx;\n    oe[1] = (xy + wz) * sx;\n    oe[2] = (xz - wy) * sx;\n    oe[3] = 0;\n\n    oe[4] = (xy - wz) * sy;\n    oe[5] = (1 - (xx + zz)) * sy;\n    oe[6] = (yz + wx) * sy;\n    oe[7] = 0;\n\n    oe[8] = (xz + wy) * sz;\n    oe[9] = (yz - wx) * sz;\n    oe[10] = (1 - (xx + yy)) * sz;\n    oe[11] = 0;\n\n    oe[12] = translation._x;\n    oe[13] = translation._y;\n    oe[14] = translation._z;\n    oe[15] = 1;\n  }\n\n  /**\n   * Calculate a matrix from scale vector.\n   * @param s - The scale vector\n   * @param out - The calculated matrix\n   */\n  static scaling(s: Vector3, out: Matrix): void {\n    const oe = out.elements;\n    oe[0] = s._x;\n    oe[1] = 0;\n    oe[2] = 0;\n    oe[3] = 0;\n\n    oe[4] = 0;\n    oe[5] = s._y;\n    oe[6] = 0;\n    oe[7] = 0;\n\n    oe[8] = 0;\n    oe[9] = 0;\n    oe[10] = s._z;\n    oe[11] = 0;\n\n    oe[12] = 0;\n    oe[13] = 0;\n    oe[14] = 0;\n    oe[15] = 1;\n  }\n\n  /**\n   * Calculate a matrix from translation vector.\n   * @param translation - The translation vector\n   * @param out - The calculated matrix\n   */\n  static translation(translation: Vector3, out: Matrix): void {\n    const oe = out.elements;\n    oe[0] = 1;\n    oe[1] = 0;\n    oe[2] = 0;\n    oe[3] = 0;\n\n    oe[4] = 0;\n    oe[5] = 1;\n    oe[6] = 0;\n    oe[7] = 0;\n\n    oe[8] = 0;\n    oe[9] = 0;\n    oe[10] = 1;\n    oe[11] = 0;\n\n    oe[12] = translation._x;\n    oe[13] = translation._y;\n    oe[14] = translation._z;\n    oe[15] = 1;\n  }\n\n  /**\n   * Calculate the inverse of the specified matrix.\n   * @param a - The matrix whose inverse is to be calculated\n   * @param out - The inverse of the specified matrix\n   */\n  static invert(a: Matrix, out: Matrix): void {\n    const ae = a.elements;\n    const oe = out.elements;\n\n    const a11 = ae[0],\n      a12 = ae[1],\n      a13 = ae[2],\n      a14 = ae[3];\n    const a21 = ae[4],\n      a22 = ae[5],\n      a23 = ae[6],\n      a24 = ae[7];\n    const a31 = ae[8],\n      a32 = ae[9],\n      a33 = ae[10],\n      a34 = ae[11];\n    const a41 = ae[12],\n      a42 = ae[13],\n      a43 = ae[14],\n      a44 = ae[15];\n\n    const b00 = a11 * a22 - a12 * a21;\n    const b01 = a11 * a23 - a13 * a21;\n    const b02 = a11 * a24 - a14 * a21;\n    const b03 = a12 * a23 - a13 * a22;\n    const b04 = a12 * a24 - a14 * a22;\n    const b05 = a13 * a24 - a14 * a23;\n    const b06 = a31 * a42 - a32 * a41;\n    const b07 = a31 * a43 - a33 * a41;\n    const b08 = a31 * a44 - a34 * a41;\n    const b09 = a32 * a43 - a33 * a42;\n    const b10 = a32 * a44 - a34 * a42;\n    const b11 = a33 * a44 - a34 * a43;\n\n    let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n    if (!det) {\n      return null;\n    }\n    det = 1.0 / det;\n\n    oe[0] = (a22 * b11 - a23 * b10 + a24 * b09) * det;\n    oe[1] = (a13 * b10 - a12 * b11 - a14 * b09) * det;\n    oe[2] = (a42 * b05 - a43 * b04 + a44 * b03) * det;\n    oe[3] = (a33 * b04 - a32 * b05 - a34 * b03) * det;\n\n    oe[4] = (a23 * b08 - a21 * b11 - a24 * b07) * det;\n    oe[5] = (a11 * b11 - a13 * b08 + a14 * b07) * det;\n    oe[6] = (a43 * b02 - a41 * b05 - a44 * b01) * det;\n    oe[7] = (a31 * b05 - a33 * b02 + a34 * b01) * det;\n\n    oe[8] = (a21 * b10 - a22 * b08 + a24 * b06) * det;\n    oe[9] = (a12 * b08 - a11 * b10 - a14 * b06) * det;\n    oe[10] = (a41 * b04 - a42 * b02 + a44 * b00) * det;\n    oe[11] = (a32 * b02 - a31 * b04 - a34 * b00) * det;\n\n    oe[12] = (a22 * b07 - a21 * b09 - a23 * b06) * det;\n    oe[13] = (a11 * b09 - a12 * b07 + a13 * b06) * det;\n    oe[14] = (a42 * b01 - a41 * b03 - a43 * b00) * det;\n    oe[15] = (a31 * b03 - a32 * b01 + a33 * b00) * det;\n  }\n\n  /**\n   * Calculate a right-handed look-at matrix.\n   * @param eye - The position of the viewer's eye\n   * @param target - The camera look-at target\n   * @param up - The camera's up vector\n   * @param out - The calculated look-at matrix\n   */\n  static lookAt(eye: Vector3, target: Vector3, up: Vector3, out: Matrix): void {\n    const oe = out.elements;\n    const xAxis: Vector3 = Matrix._tempVec30;\n    const yAxis: Vector3 = Matrix._tempVec31;\n    const zAxis: Vector3 = Matrix._tempVec32;\n\n    Vector3.subtract(eye, target, zAxis);\n    zAxis.normalize();\n    Vector3.cross(up, zAxis, xAxis);\n    xAxis.normalize();\n    Vector3.cross(zAxis, xAxis, yAxis);\n\n    oe[0] = xAxis._x;\n    oe[1] = yAxis._x;\n    oe[2] = zAxis._x;\n    oe[3] = 0;\n\n    oe[4] = xAxis._y;\n    oe[5] = yAxis._y;\n    oe[6] = zAxis._y;\n    oe[7] = 0;\n\n    oe[8] = xAxis._z;\n    oe[9] = yAxis._z;\n    oe[10] = zAxis._z;\n    oe[11] = 0;\n\n    oe[12] = -Vector3.dot(xAxis, eye);\n    oe[13] = -Vector3.dot(yAxis, eye);\n    oe[14] = -Vector3.dot(zAxis, eye);\n    oe[15] = 1;\n  }\n\n  /**\n   * Calculate an orthographic projection matrix.\n   * @param left - The left edge of the viewing\n   * @param right - The right edge of the viewing\n   * @param bottom - The bottom edge of the viewing\n   * @param top - The top edge of the viewing\n   * @param near - The depth of the near plane\n   * @param far - The depth of the far plane\n   * @param out - The calculated orthographic projection matrix\n   */\n  static ortho(left: number, right: number, bottom: number, top: number, near: number, far: number, out: Matrix): void {\n    const oe = out.elements;\n    const lr = 1 / (left - right);\n    const bt = 1 / (bottom - top);\n    const nf = 1 / (near - far);\n\n    oe[0] = -2 * lr;\n    oe[1] = 0;\n    oe[2] = 0;\n    oe[3] = 0;\n\n    oe[4] = 0;\n    oe[5] = -2 * bt;\n    oe[6] = 0;\n    oe[7] = 0;\n\n    oe[8] = 0;\n    oe[9] = 0;\n    oe[10] = 2 * nf;\n    oe[11] = 0;\n\n    oe[12] = (left + right) * lr;\n    oe[13] = (top + bottom) * bt;\n    oe[14] = (far + near) * nf;\n    oe[15] = 1;\n  }\n\n  /**\n   * Calculate a perspective projection matrix.\n   * @param fovY - Field of view in the y direction, in radians\n   * @param aspect - Aspect ratio, defined as view space width divided by height\n   * @param near - The depth of the near plane\n   * @param far - The depth of the far plane\n   * @param out - The calculated perspective projection matrix\n   */\n  static perspective(fovY: number, aspect: number, near: number, far: number, out: Matrix): void {\n    const oe = out.elements;\n    const f = 1.0 / Math.tan(fovY / 2);\n    const nf = 1 / (near - far);\n\n    oe[0] = f / aspect;\n    oe[1] = 0;\n    oe[2] = 0;\n    oe[3] = 0;\n\n    oe[4] = 0;\n    oe[5] = f;\n    oe[6] = 0;\n    oe[7] = 0;\n\n    oe[8] = 0;\n    oe[9] = 0;\n    oe[10] = (far + near) * nf;\n    oe[11] = -1;\n\n    oe[12] = 0;\n    oe[13] = 0;\n    oe[14] = 2 * far * near * nf;\n    oe[15] = 0;\n  }\n\n  /**\n   * The specified matrix rotates around an arbitrary axis.\n   * @param m - The specified matrix\n   * @param axis - The axis\n   * @param r - The rotation angle in radians\n   * @param out - The rotated matrix\n   */\n  static rotateAxisAngle(m: Matrix, axis: Vector3, r: number, out: Matrix): void {\n    let { _x: x, _y: y, _z: z } = axis;\n    let len = Math.sqrt(x * x + y * y + z * z);\n\n    if (Math.abs(len) < MathUtil.zeroTolerance) {\n      return;\n    }\n\n    const me = m.elements;\n    const oe = out.elements;\n    let s, c, t;\n\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n\n    s = Math.sin(r);\n    c = Math.cos(r);\n    t = 1 - c;\n\n    let a11 = me[0],\n      a12 = me[1],\n      a13 = me[2],\n      a14 = me[3];\n    let a21 = me[4],\n      a22 = me[5],\n      a23 = me[6],\n      a24 = me[7];\n    let a31 = me[8],\n      a32 = me[9],\n      a33 = me[10],\n      a34 = me[11];\n\n    // Construct the elements of the rotation matrix\n    let b11 = x * x * t + c;\n    let b12 = y * x * t + z * s;\n    let b13 = z * x * t - y * s;\n    let b21 = x * y * t - z * s;\n    let b22 = y * y * t + c;\n    let b23 = z * y * t + x * s;\n    let b31 = x * z * t + y * s;\n    let b32 = y * z * t - x * s;\n    let b33 = z * z * t + c;\n\n    // Perform rotation-specific matrix multiplication\n    oe[0] = a11 * b11 + a21 * b12 + a31 * b13;\n    oe[1] = a12 * b11 + a22 * b12 + a32 * b13;\n    oe[2] = a13 * b11 + a23 * b12 + a33 * b13;\n    oe[3] = a14 * b11 + a24 * b12 + a34 * b13;\n\n    oe[4] = a11 * b21 + a21 * b22 + a31 * b23;\n    oe[5] = a12 * b21 + a22 * b22 + a32 * b23;\n    oe[6] = a13 * b21 + a23 * b22 + a33 * b23;\n    oe[7] = a14 * b21 + a24 * b22 + a34 * b23;\n\n    oe[8] = a11 * b31 + a21 * b32 + a31 * b33;\n    oe[9] = a12 * b31 + a22 * b32 + a32 * b33;\n    oe[10] = a13 * b31 + a23 * b32 + a33 * b33;\n    oe[11] = a14 * b31 + a24 * b32 + a34 * b33;\n\n    if (m !== out) {\n      // If the source and destination differ, copy the unchanged last row\n      oe[12] = me[12];\n      oe[13] = me[13];\n      oe[14] = me[14];\n      oe[15] = me[15];\n    }\n  }\n\n  /**\n   * Scale a matrix by a given vector.\n   * @param m - The matrix\n   * @param s - The given vector\n   * @param out - The scaled matrix\n   */\n  static scale(m: Matrix, s: Vector3, out: Matrix): void {\n    const me = m.elements;\n    const oe = out.elements;\n    const { _x: x, _y: y, _z: z } = s;\n\n    oe[0] = me[0] * x;\n    oe[1] = me[1] * x;\n    oe[2] = me[2] * x;\n    oe[3] = me[3] * x;\n\n    oe[4] = me[4] * y;\n    oe[5] = me[5] * y;\n    oe[6] = me[6] * y;\n    oe[7] = me[7] * y;\n\n    oe[8] = me[8] * z;\n    oe[9] = me[9] * z;\n    oe[10] = me[10] * z;\n    oe[11] = me[11] * z;\n\n    oe[12] = me[12];\n    oe[13] = me[13];\n    oe[14] = me[14];\n    oe[15] = me[15];\n  }\n\n  /**\n   * Translate a matrix by a given vector.\n   * @param m - The matrix\n   * @param v - The given vector\n   * @param out - The translated matrix\n   */\n  static translate(m: Matrix, v: Vector3, out: Matrix): void {\n    const me = m.elements;\n    const oe = out.elements;\n    const { _x: x, _y: y, _z: z } = v;\n\n    if (m === out) {\n      oe[12] = me[0] * x + me[4] * y + me[8] * z + me[12];\n      oe[13] = me[1] * x + me[5] * y + me[9] * z + me[13];\n      oe[14] = me[2] * x + me[6] * y + me[10] * z + me[14];\n      oe[15] = me[3] * x + me[7] * y + me[11] * z + me[15];\n    } else {\n      const a11 = me[0],\n        a12 = me[1],\n        a13 = me[2],\n        a14 = me[3];\n      const a21 = me[4],\n        a22 = me[5],\n        a23 = me[6],\n        a24 = me[7];\n      const a31 = me[8],\n        a32 = me[9],\n        a33 = me[10],\n        a34 = me[11];\n\n      (oe[0] = a11), (oe[1] = a12), (oe[2] = a13), (oe[3] = a14);\n      (oe[4] = a21), (oe[5] = a22), (oe[6] = a23), (oe[7] = a24);\n      (oe[8] = a31), (oe[9] = a32), (oe[10] = a33), (oe[11] = a34);\n\n      oe[12] = a11 * x + a21 * y + a31 * z + me[12];\n      oe[13] = a12 * x + a22 * y + a32 * z + me[13];\n      oe[14] = a13 * x + a23 * y + a33 * z + me[14];\n      oe[15] = a14 * x + a24 * y + a34 * z + me[15];\n    }\n  }\n\n  /**\n   * Calculate the transpose of the specified matrix.\n   * @param a - The specified matrix\n   * @param out - The transpose of the specified matrix\n   */\n  static transpose(a: Matrix, out: Matrix): void {\n    const ae = a.elements;\n    const oe = out.elements;\n\n    if (out === a) {\n      const a12 = ae[1];\n      const a13 = ae[2];\n      const a14 = ae[3];\n      const a23 = ae[6];\n      const a24 = ae[7];\n      const a34 = ae[11];\n\n      oe[1] = ae[4];\n      oe[2] = ae[8];\n      oe[3] = ae[12];\n\n      oe[4] = a12;\n      oe[6] = ae[9];\n      oe[7] = ae[13];\n\n      oe[8] = a13;\n      oe[9] = a23;\n      oe[11] = ae[14];\n\n      oe[12] = a14;\n      oe[13] = a24;\n      oe[14] = a34;\n    } else {\n      oe[0] = ae[0];\n      oe[1] = ae[4];\n      oe[2] = ae[8];\n      oe[3] = ae[12];\n\n      oe[4] = ae[1];\n      oe[5] = ae[5];\n      oe[6] = ae[9];\n      oe[7] = ae[13];\n\n      oe[8] = ae[2];\n      oe[9] = ae[6];\n      oe[10] = ae[10];\n      oe[11] = ae[14];\n\n      oe[12] = ae[3];\n      oe[13] = ae[7];\n      oe[14] = ae[11];\n      oe[15] = ae[15];\n    }\n  }\n\n  /**\n   * An array containing the elements of the matrix (column matrix).\n   * @remarks\n   * elements[0] first column and first row value m11\n   * elements[1] first column and second row value m12\n   * elements[2] first column and third row value m13\n   * elements[3] first column and fourth row value m14\n   * elements[4] second column and first row value m21\n   * and so on\n   */\n  elements: Float32Array = new Float32Array(16);\n\n  /**\n   * Constructor of 4x4 Matrix.\n   * @param m11 - default 1, column 1, row 1\n   * @param m12 - default 0, column 1, row 2\n   * @param m13 - default 0, column 1, row 3\n   * @param m14 - default 0, column 1, row 4\n   * @param m21 - default 0, column 2, row 1\n   * @param m22 - default 1, column 2, row 2\n   * @param m23 - default 0, column 2, row 3\n   * @param m24 - default 0, column 2, row 4\n   * @param m31 - default 0, column 3, row 1\n   * @param m32 - default 0, column 3, row 2\n   * @param m33 - default 1, column 3, row 3\n   * @param m34 - default 0, column 3, row 4\n   * @param m41 - default 0, column 4, row 1\n   * @param m42 - default 0, column 4, row 2\n   * @param m43 - default 0, column 4, row 3\n   * @param m44 - default 1, column 4, row 4\n   */\n  constructor(\n    m11: number = 1,\n    m12: number = 0,\n    m13: number = 0,\n    m14: number = 0,\n    m21: number = 0,\n    m22: number = 1,\n    m23: number = 0,\n    m24: number = 0,\n    m31: number = 0,\n    m32: number = 0,\n    m33: number = 1,\n    m34: number = 0,\n    m41: number = 0,\n    m42: number = 0,\n    m43: number = 0,\n    m44: number = 1\n  ) {\n    const e: Float32Array = this.elements;\n\n    e[0] = m11;\n    e[1] = m12;\n    e[2] = m13;\n    e[3] = m14;\n\n    e[4] = m21;\n    e[5] = m22;\n    e[6] = m23;\n    e[7] = m24;\n\n    e[8] = m31;\n    e[9] = m32;\n    e[10] = m33;\n    e[11] = m34;\n\n    e[12] = m41;\n    e[13] = m42;\n    e[14] = m43;\n    e[15] = m44;\n  }\n\n  /**\n   * Set the value of this matrix, and return this matrix.\n   * @param m11 - column 1, row 1\n   * @param m12 - column 1, row 2\n   * @param m13 - column 1, row 3\n   * @param m14 - column 1, row 4\n   * @param m21 - column 2, row 1\n   * @param m22 - column 2, row 2\n   * @param m23 - column 2, row 3\n   * @param m24 - column 2, row 4\n   * @param m31 - column 3, row 1\n   * @param m32 - column 3, row 2\n   * @param m33 - column 3, row 3\n   * @param m34 - column 3, row 4\n   * @param m41 - column 4, row 1\n   * @param m42 - column 4, row 2\n   * @param m43 - column 4, row 3\n   * @param m44 - column 4, row 4\n   * @returns This matrix\n   */\n  set(\n    m11: number,\n    m12: number,\n    m13: number,\n    m14: number,\n    m21: number,\n    m22: number,\n    m23: number,\n    m24: number,\n    m31: number,\n    m32: number,\n    m33: number,\n    m34: number,\n    m41: number,\n    m42: number,\n    m43: number,\n    m44: number\n  ): Matrix {\n    const e = this.elements;\n\n    e[0] = m11;\n    e[1] = m12;\n    e[2] = m13;\n    e[3] = m14;\n\n    e[4] = m21;\n    e[5] = m22;\n    e[6] = m23;\n    e[7] = m24;\n\n    e[8] = m31;\n    e[9] = m32;\n    e[10] = m33;\n    e[11] = m34;\n\n    e[12] = m41;\n    e[13] = m42;\n    e[14] = m43;\n    e[15] = m44;\n\n    return this;\n  }\n\n  /**\n   * Determines the product of this matrix and the specified matrix.\n   * @param right - The specified matrix\n   * @returns This matrix that store the product of the two matrices\n   */\n  multiply(right: Matrix): Matrix {\n    Matrix.multiply(this, right, this);\n    return this;\n  }\n\n  /**\n   * Calculate a determinant of this matrix.\n   * @returns The determinant of this matrix\n   */\n  determinant(): number {\n    const e = this.elements;\n\n    const a11 = e[0],\n      a12 = e[1],\n      a13 = e[2],\n      a14 = e[3];\n    const a21 = e[4],\n      a22 = e[5],\n      a23 = e[6],\n      a24 = e[7];\n    const a31 = e[8],\n      a32 = e[9],\n      a33 = e[10],\n      a34 = e[11];\n    const a41 = e[12],\n      a42 = e[13],\n      a43 = e[14],\n      a44 = e[15];\n\n    const b00 = a11 * a22 - a12 * a21;\n    const b01 = a11 * a23 - a13 * a21;\n    const b02 = a11 * a24 - a14 * a21;\n    const b03 = a12 * a23 - a13 * a22;\n    const b04 = a12 * a24 - a14 * a22;\n    const b05 = a13 * a24 - a14 * a23;\n    const b06 = a31 * a42 - a32 * a41;\n    const b07 = a31 * a43 - a33 * a41;\n    const b08 = a31 * a44 - a34 * a41;\n    const b09 = a32 * a43 - a33 * a42;\n    const b10 = a32 * a44 - a34 * a42;\n    const b11 = a33 * a44 - a34 * a43;\n\n    // Calculate the determinant\n    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n  }\n\n  /**\n   * Decompose this matrix to translation, rotation and scale elements.\n   * @param translation - Translation vector as an output parameter\n   * @param rotation - Rotation quaternion as an output parameter\n   * @param scale - Scale vector as an output parameter\n   * @returns True if this matrix can be decomposed, false otherwise\n   */\n  decompose(translation: Vector3, rotation: Quaternion, scale: Vector3): boolean {\n    const rm: Matrix3x3 = Matrix._tempMat30;\n\n    const e = this.elements;\n    const rme = rm.elements;\n\n    const m11 = e[0];\n    const m12 = e[1];\n    const m13 = e[2];\n    const m14 = e[3];\n    const m21 = e[4];\n    const m22 = e[5];\n    const m23 = e[6];\n    const m24 = e[7];\n    const m31 = e[8];\n    const m32 = e[9];\n    const m33 = e[10];\n    const m34 = e[11];\n    translation.set(e[12], e[13], e[14]);\n\n    const xs = Math.sign(m11 * m12 * m13 * m14) < 0 ? -1 : 1;\n    const ys = Math.sign(m21 * m22 * m23 * m24) < 0 ? -1 : 1;\n    const zs = Math.sign(m31 * m32 * m33 * m34) < 0 ? -1 : 1;\n\n    const sx = xs * Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n    const sy = ys * Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n    const sz = zs * Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n    scale.set(sx, sy, sz);\n\n    if (\n      Math.abs(sx) < MathUtil.zeroTolerance ||\n      Math.abs(sy) < MathUtil.zeroTolerance ||\n      Math.abs(sz) < MathUtil.zeroTolerance\n    ) {\n      rotation.identity();\n      return false;\n    } else {\n      const invSX = 1 / sx;\n      const invSY = 1 / sy;\n      const invSZ = 1 / sz;\n\n      rme[0] = m11 * invSX;\n      rme[1] = m12 * invSX;\n      rme[2] = m13 * invSX;\n      rme[3] = m21 * invSY;\n      rme[4] = m22 * invSY;\n      rme[5] = m23 * invSY;\n      rme[6] = m31 * invSZ;\n      rme[7] = m32 * invSZ;\n      rme[8] = m33 * invSZ;\n      Quaternion.rotationMatrix3x3(rm, rotation);\n      return true;\n    }\n  }\n\n  /**\n   * Get rotation from this matrix.\n   * @param out - Rotation quaternion as an output parameter\n   * @returns The out\n   */\n  getRotation(out: Quaternion): Quaternion {\n    const e = this.elements;\n    let trace = e[0] + e[5] + e[10];\n\n    if (trace > MathUtil.zeroTolerance) {\n      let s = Math.sqrt(trace + 1.0) * 2;\n      out._w = 0.25 * s;\n      out._x = (e[6] - e[9]) / s;\n      out._y = (e[8] - e[2]) / s;\n      out._z = (e[1] - e[4]) / s;\n    } else if (e[0] > e[5] && e[0] > e[10]) {\n      let s = Math.sqrt(1.0 + e[0] - e[5] - e[10]) * 2;\n      out._w = (e[6] - e[9]) / s;\n      out._x = 0.25 * s;\n      out._y = (e[1] + e[4]) / s;\n      out._z = (e[8] + e[2]) / s;\n    } else if (e[5] > e[10]) {\n      let s = Math.sqrt(1.0 + e[5] - e[0] - e[10]) * 2;\n      out._w = (e[8] - e[2]) / s;\n      out._x = (e[1] + e[4]) / s;\n      out._y = 0.25 * s;\n      out._z = (e[6] + e[9]) / s;\n    } else {\n      let s = Math.sqrt(1.0 + e[10] - e[0] - e[5]) * 2;\n      out._w = (e[1] - e[4]) / s;\n      out._x = (e[8] + e[2]) / s;\n      out._y = (e[6] + e[9]) / s;\n      out._z = 0.25 * s;\n    }\n\n    out._onValueChanged && out._onValueChanged();\n    return out;\n  }\n\n  /**\n   * Get scale from this matrix.\n   * @param out - Scale vector as an output parameter\n   * @returns The out\n   */\n  getScaling(out: Vector3): Vector3 {\n    //getScale()\n    const e = this.elements;\n    const m11 = e[0],\n      m12 = e[1],\n      m13 = e[2];\n    const m21 = e[4],\n      m22 = e[5],\n      m23 = e[6];\n    const m31 = e[8],\n      m32 = e[9],\n      m33 = e[10];\n\n    out.set(\n      Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13),\n      Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23),\n      Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33)\n    );\n\n    return out;\n  }\n\n  /**\n   * Get translation from this matrix.\n   * @param out - Translation vector as an output parameter\n   * @returns The out\n   */\n  getTranslation(out: Vector3): Vector3 {\n    const e = this.elements;\n    out.set(e[12], e[13], e[14]);\n    return out;\n  }\n\n  /**\n   * Identity this matrix.\n   * @returns This matrix after identity\n   */\n  identity(): Matrix {\n    const e = this.elements;\n\n    e[0] = 1;\n    e[1] = 0;\n    e[2] = 0;\n    e[3] = 0;\n\n    e[4] = 0;\n    e[5] = 1;\n    e[6] = 0;\n    e[7] = 0;\n\n    e[8] = 0;\n    e[9] = 0;\n    e[10] = 1;\n    e[11] = 0;\n\n    e[12] = 0;\n    e[13] = 0;\n    e[14] = 0;\n    e[15] = 1;\n\n    return this;\n  }\n\n  /**\n   * Invert the matrix.\n   * @returns The matrix after invert\n   */\n  invert(): Matrix {\n    Matrix.invert(this, this);\n    return this;\n  }\n\n  /**\n   * This matrix rotates around an arbitrary axis.\n   * @param axis - The axis\n   * @param r - The rotation angle in radians\n   * @returns This matrix after rotate\n   */\n  rotateAxisAngle(axis: Vector3, r: number): Matrix {\n    Matrix.rotateAxisAngle(this, axis, r, this);\n    return this;\n  }\n\n  /**\n   * Scale this matrix by a given vector.\n   * @param s - The given vector\n   * @returns This matrix after scale\n   */\n  scale(s: Vector3): Matrix {\n    Matrix.scale(this, s, this);\n    return this;\n  }\n\n  /**\n   * Translate this matrix by a given vector.\n   * @param v - The given vector\n   * @returns This matrix after translate\n   */\n  translate(v: Vector3): Matrix {\n    Matrix.translate(this, v, this);\n    return this;\n  }\n\n  /**\n   * Calculate the transpose of this matrix.\n   * @returns This matrix after transpose\n   */\n  transpose(): Matrix {\n    Matrix.transpose(this, this);\n    return this;\n  }\n\n  /**\n   * Creates a clone of this matrix.\n   * @returns A clone of this matrix\n   */\n  clone(): Matrix {\n    const e = this.elements;\n    let ret = new Matrix(\n      e[0],\n      e[1],\n      e[2],\n      e[3],\n      e[4],\n      e[5],\n      e[6],\n      e[7],\n      e[8],\n      e[9],\n      e[10],\n      e[11],\n      e[12],\n      e[13],\n      e[14],\n      e[15]\n    );\n    return ret;\n  }\n\n  /**\n   * Copy this matrix from the specified matrix.\n   * @param source - The specified matrix\n   * @returns This matrix\n   */\n  copyFrom(source: Matrix): Matrix {\n    const e = this.elements;\n    const se = source.elements;\n\n    e[0] = se[0];\n    e[1] = se[1];\n    e[2] = se[2];\n    e[3] = se[3];\n\n    e[4] = se[4];\n    e[5] = se[5];\n    e[6] = se[6];\n    e[7] = se[7];\n\n    e[8] = se[8];\n    e[9] = se[9];\n    e[10] = se[10];\n    e[11] = se[11];\n\n    e[12] = se[12];\n    e[13] = se[13];\n    e[14] = se[14];\n    e[15] = se[15];\n\n    return this;\n  }\n\n  /**\n   * Copy the value of this matrix from an array.\n   * @param array - The array\n   * @param offset - The start offset of the array\n   * @returns This matrix\n   */\n  copyFromArray(array: ArrayLike<number>, offset: number = 0): Matrix {\n    const srce = this.elements;\n    for (let i = 0; i < 16; i++) {\n      srce[i] = array[i + offset];\n    }\n    return this;\n  }\n\n  /**\n   * Copy the value of this matrix to an array.\n   * @param out - The array\n   * @param outOffset - The start offset of the array\n   */\n  copyToArray(out: number[] | Float32Array | Float64Array, outOffset: number = 0): void {\n    const e = this.elements;\n\n    out[outOffset] = e[0];\n    out[outOffset + 1] = e[1];\n    out[outOffset + 2] = e[2];\n    out[outOffset + 3] = e[3];\n    out[outOffset + 4] = e[4];\n    out[outOffset + 5] = e[5];\n    out[outOffset + 6] = e[6];\n    out[outOffset + 7] = e[7];\n    out[outOffset + 8] = e[8];\n    out[outOffset + 9] = e[9];\n    out[outOffset + 10] = e[10];\n    out[outOffset + 11] = e[11];\n    out[outOffset + 12] = e[12];\n    out[outOffset + 13] = e[13];\n    out[outOffset + 14] = e[14];\n    out[outOffset + 15] = e[15];\n  }\n}\n","import { BoundingBox } from \"./BoundingBox\";\nimport { BoundingSphere } from \"./BoundingSphere\";\nimport { CollisionUtil } from \"./CollisionUtil\";\nimport { Plane } from \"./Plane\";\nimport { Vector3 } from \"./Vector3\";\n\n/**\n * Represents a ray with an origin and a direction in 3D space.\n */\nexport class Ray {\n  /** The origin of the ray. */\n  readonly origin: Vector3 = new Vector3();\n  /** The normalized direction of the ray. */\n  readonly direction: Vector3 = new Vector3();\n\n  /**\n   * Constructor of Ray.\n   * @param origin - The origin vector\n   * @param direction - The direction vector\n   */\n  constructor(origin: Vector3 = null, direction: Vector3 = null) {\n    origin && this.origin.copyFrom(origin);\n    direction && this.direction.copyFrom(direction);\n  }\n\n  /**\n   * Check if this ray intersects the specified plane.\n   * @param plane - The specified plane\n   * @returns The distance from this ray to the specified plane if intersecting, -1 otherwise\n   */\n  intersectPlane(plane: Plane): number {\n    return CollisionUtil.intersectsRayAndPlane(this, plane);\n  }\n\n  /**\n   * Check if this ray intersects the specified sphere.\n   * @param sphere - The specified sphere\n   * @returns The distance from this ray to the specified sphere if intersecting, -1 otherwise\n   */\n  intersectSphere(sphere: BoundingSphere): number {\n    return CollisionUtil.intersectsRayAndSphere(this, sphere);\n  }\n\n  /**\n   * Check if this ray intersects the specified box (AABB).\n   * @param box - The specified box\n   * @returns The distance from this ray to the specified box if intersecting, -1 otherwise\n   */\n  intersectBox(box: BoundingBox): number {\n    return CollisionUtil.intersectsRayAndBox(this, box);\n  }\n\n  /**\n   * The coordinates of the specified distance from the origin in the ray direction.\n   * @param distance - The specified distance\n   * @param out - The coordinates as an output parameter\n   * @returns The out\n   */\n  getPoint(distance: number, out: Vector3): Vector3 {\n    Vector3.scale(this.direction, distance, out);\n    return out.add(this.origin);\n  }\n}\n","import { IClone } from \"./IClone\";\nimport { ICopy } from \"./ICopy\";\nimport { MathUtil } from \"./MathUtil\";\n\n/**\n * Describes a 2D-vector.\n */\nexport class Vector2 implements IClone<Vector2>, ICopy<Vector2Like, Vector2> {\n  /** @internal */\n  static readonly _zero = new Vector2(0.0, 0.0);\n  /** @internal */\n  static readonly _one = new Vector2(1.0, 1.0);\n\n  /**\n   * Determines the sum of two vectors.\n   * @param left - The first vector to add\n   * @param right - The second vector to add\n   * @param out - The sum of two vectors\n   */\n  static add(left: Vector2, right: Vector2, out: Vector2): void {\n    out._x = left._x + right._x;\n    out._y = left._y + right._y;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Determines the difference between two vectors.\n   * @param left - The first vector to subtract\n   * @param right - The second vector to subtract\n   * @param out - The difference between two vectors\n   */\n  static subtract(left: Vector2, right: Vector2, out: Vector2): void {\n    out._x = left._x - right._x;\n    out._y = left._y - right._y;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Determines the product of two vectors.\n   * @param left - The first vector to multiply\n   * @param right - The second vector to multiply\n   * @param out - The product of two vectors\n   */\n  static multiply(left: Vector2, right: Vector2, out: Vector2): void {\n    out._x = left._x * right._x;\n    out._y = left._y * right._y;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Determines the divisor of two vectors.\n   * @param left - The first vector to divide\n   * @param right - The second vector to divide\n   * @param out - The divisor of two vectors\n   */\n  static divide(left: Vector2, right: Vector2, out: Vector2): void {\n    out._x = left._x / right._x;\n    out._y = left._y / right._y;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Determines the dot product of two vectors.\n   * @param left - The first vector to dot\n   * @param right - The second vector to dot\n   * @returns The dot product of two vectors\n   */\n  static dot(left: Vector2, right: Vector2): number {\n    return left._x * right._x + left._y * right._y;\n  }\n\n  /**\n   * Determines the distance of two vectors.\n   * @param left - The first vector\n   * @param right - The second vector\n   * @returns The distance of two vectors\n   */\n  static distance(left: Vector2, right: Vector2): number {\n    const x = right._x - left._x;\n    const y = right._y - left._y;\n    return Math.sqrt(x * x + y * y);\n  }\n\n  /**\n   * Determines the squared distance of two vectors.\n   * @param left - The first vector\n   * @param right - The second vector\n   * @returns The squared distance of two vectors\n   */\n  static distanceSquared(left: Vector2, right: Vector2): number {\n    const x = right._x - left._x;\n    const y = right._y - left._y;\n    return x * x + y * y;\n  }\n\n  /**\n   * Determines whether the specified vectors are equals.\n   * @param left - The first vector to compare\n   * @param right - The second vector to compare\n   * @returns True if the specified vectors are equals, false otherwise\n   */\n  static equals(left: Vector2, right: Vector2): boolean {\n    return MathUtil.equals(left._x, right._x) && MathUtil.equals(left._y, right._y);\n  }\n\n  /**\n   * Performs a linear interpolation between two vectors.\n   * @param left - The first vector\n   * @param right - The second vector\n   * @param t - The blend amount where 0 returns left and 1 right\n   * @param out - The result of linear blending between two vectors\n   */\n  static lerp(left: Vector2, right: Vector2, t: number, out: Vector2): void {\n    const { _x, _y } = left;\n    out._x = _x + (right._x - _x) * t;\n    out._y = _y + (right._y - _y) * t;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Calculate a vector containing the largest components of the specified vectors.\n   * @param left - The first vector\n   * @param right - The second vector\n   * @param out - The vector containing the largest components of the specified vectors\n   */\n  static max(left: Vector2, right: Vector2, out: Vector2): void {\n    out._x = Math.max(left._x, right._x);\n    out._y = Math.max(left._y, right._y);\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Calculate a vector containing the smallest components of the specified vectors.\n   * @param left - The first vector\n   * @param right - The second vector\n   * @param out - The vector containing the smallest components of the specified vectors\n   */\n  static min(left: Vector2, right: Vector2, out: Vector2): void {\n    out._x = Math.min(left._x, right._x);\n    out._y = Math.min(left._y, right._y);\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Reverses the direction of a given vector.\n   * @param left - The vector to negate\n   * @param out - The vector facing in the opposite direction\n   */\n  static negate(left: Vector2, out: Vector2): void {\n    out._x = -left._x;\n    out._y = -left._y;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Converts the vector into a unit vector.\n   * @param left - The vector to normalize\n   * @param out - The normalized vector\n   */\n  static normalize(left: Vector2, out: Vector2): void {\n    const { _x, _y } = left;\n    let len = Math.sqrt(_x * _x + _y * _y);\n    if (len > MathUtil.zeroTolerance) {\n      len = 1 / len;\n      out._x = _x * len;\n      out._y = _y * len;\n      out._onValueChanged && out._onValueChanged();\n    }\n  }\n\n  /**\n   * Scale a vector by the given value.\n   * @param left - The vector to scale\n   * @param s - The amount by which to scale the vector\n   * @param out - The scaled vector\n   */\n  static scale(left: Vector2, s: number, out: Vector2): void {\n    out._x = left._x * s;\n    out._y = left._y * s;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /** @internal */\n  _x: number;\n  /** @internal */\n  _y: number;\n  /** @internal */\n  _onValueChanged: () => void = null;\n\n  /**\n   * The x component of the vector.\n   */\n  public get x(): number {\n    return this._x;\n  }\n\n  public set x(value: number) {\n    this._x = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * The y component of the vector.\n   */\n  public get y(): number {\n    return this._y;\n  }\n\n  public set y(value: number) {\n    this._y = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * Constructor of Vector2.\n   * @param x - The x component of the vector, default 0\n   * @param y - The y component of the vector, default 0\n   */\n  constructor(x: number = 0, y: number = 0) {\n    this._x = x;\n    this._y = y;\n  }\n\n  /**\n   * Set the value of this vector.\n   * @param x - The x component of the vector\n   * @param y - The y component of the vector\n   * @returns This vector\n   */\n  set(x: number, y: number): Vector2 {\n    this._x = x;\n    this._y = y;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Determines the sum of this vector and the specified vector.\n   * @param right - The specified vector\n   * @returns This vector\n   */\n  add(right: Vector2): Vector2 {\n    this._x += right._x;\n    this._y += right._y;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Determines the difference of this vector and the specified vector.\n   * @param right - The specified vector\n   * @returns This vector\n   */\n  subtract(right: Vector2): Vector2 {\n    this._x -= right._x;\n    this._y -= right._y;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Determines the product of this vector and the specified vector.\n   * @param right - The specified vector\n   * @returns This vector\n   */\n  multiply(right: Vector2): Vector2 {\n    this._x *= right._x;\n    this._y *= right._y;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Determines the divisor of this vector and the specified vector.\n   * @param right - The specified vector\n   * @returns This vector\n   */\n  divide(right: Vector2): Vector2 {\n    this._x /= right._x;\n    this._y /= right._y;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Calculate the length of this vector.\n   * @returns The length of this vector\n   */\n  length(): number {\n    const { _x, _y } = this;\n    return Math.sqrt(_x * _x + _y * _y);\n  }\n\n  /**\n   * Calculate the squared length of this vector.\n   * @returns The squared length of this vector\n   */\n  lengthSquared(): number {\n    const { _x, _y } = this;\n    return _x * _x + _y * _y;\n  }\n\n  /**\n   * Reverses the direction of this vector.\n   * @returns This vector\n   */\n  negate(): Vector2 {\n    this._x = -this._x;\n    this._y = -this._y;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Converts this vector into a unit vector.\n   * @returns This vector\n   */\n  normalize(): Vector2 {\n    Vector2.normalize(this, this);\n    return this;\n  }\n\n  /**\n   * Scale this vector by the given value.\n   * @param s - The amount by which to scale the vector\n   * @returns This vector\n   */\n  scale(s: number): Vector2 {\n    this._x *= s;\n    this._y *= s;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Creates a clone of this vector.\n   * @returns A clone of this vector\n   */\n  clone(): Vector2 {\n    return new Vector2(this._x, this._y);\n  }\n\n  /**\n   * Copy from vector2 like object.\n   * @param source - Vector2 like object\n   * @returns This vector\n   */\n  copyFrom(source: Vector2Like): Vector2 {\n    this._x = source.x;\n    this._y = source.y;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Copy the value of this vector from an array.\n   * @param array - The array\n   * @param offset - The start offset of the array\n   * @returns This vector\n   */\n  copyFromArray(array: ArrayLike<number>, offset: number = 0): Vector2 {\n    this._x = array[offset];\n    this._y = array[offset + 1];\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Copy the value of this vector to an array.\n   * @param out - The array\n   * @param outOffset - The start offset of the array\n   */\n  copyToArray(out: number[] | Float32Array | Float64Array, outOffset: number = 0) {\n    out[outOffset] = this._x;\n    out[outOffset + 1] = this._y;\n  }\n}\n\ninterface Vector2Like {\n  /** {@inheritDoc Vector2.x} */\n  x: number;\n  /** {@inheritDoc Vector2.y} */\n  y: number;\n}\n","import { IClone } from \"./IClone\";\nimport { ICopy } from \"./ICopy\";\nimport { MathUtil } from \"./MathUtil\";\nimport { Matrix } from \"./Matrix\";\nimport { Quaternion } from \"./Quaternion\";\n\n/**\n * Describes a 4D-vector.\n */\nexport class Vector4 implements IClone<Vector4>, ICopy<Vector4Like, Vector4> {\n  /** @internal */\n  static readonly _zero = new Vector4(0.0, 0.0, 0.0, 0.0);\n  /** @internal */\n  static readonly _one = new Vector4(1.0, 1.0, 1.0, 1.0);\n\n  /**\n   * Determines the sum of two vectors.\n   * @param left - The first vector to add\n   * @param right - The second vector to add\n   * @param out - The sum of two vectors\n   */\n  static add(left: Vector4, right: Vector4, out: Vector4): void {\n    out._x = left._x + right._x;\n    out._y = left._y + right._y;\n    out._z = left._z + right._z;\n    out._w = left._w + right._w;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Determines the difference between two vectors.\n   * @param left - The first vector to subtract\n   * @param right - The second vector to subtract\n   * @param out - The difference between two vectors\n   */\n  static subtract(left: Vector4, right: Vector4, out: Vector4): void {\n    out._x = left._x - right._x;\n    out._y = left._y - right._y;\n    out._z = left._z - right._z;\n    out._w = left._w - right._w;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Determines the product of two vectors.\n   * @param left - The first vector to multiply\n   * @param right - The second vector to multiply\n   * @param out - The product of two vectors\n   */\n  static multiply(left: Vector4, right: Vector4, out: Vector4): void {\n    out._x = left._x * right._x;\n    out._y = left._y * right._y;\n    out._z = left._z * right._z;\n    out._w = left._w * right._w;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Determines the divisor of two vectors.\n   * @param left - The first vector to divide\n   * @param right - The second vector to divide\n   * @param out - The divisor of two vectors\n   */\n  static divide(left: Vector4, right: Vector4, out: Vector4): void {\n    out._x = left._x / right._x;\n    out._y = left._y / right._y;\n    out._z = left._z / right._z;\n    out._w = left._w / right._w;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Determines the dot product of two vectors.\n   * @param left - The first vector to dot\n   * @param right - The second vector to dot\n   * @returns The dot product of two vectors\n   */\n  static dot(left: Vector4, right: Vector4): number {\n    return left._x * right._x + left._y * right._y + left._z * right._z + left._w * right._w;\n  }\n\n  /**\n   * Determines the distance of two vectors.\n   * @param a - The first vector\n   * @param b - The second vector\n   * @returns The distance of two vectors\n   */\n  static distance(a: Vector4, b: Vector4): number {\n    const x = b._x - a._x;\n    const y = b._y - a._y;\n    const z = b._z - a._z;\n    const w = b._w - a._w;\n    return Math.sqrt(x * x + y * y + z * z + w * w);\n  }\n\n  /**\n   * Determines the squared distance of two vectors.\n   * @param a - The first vector\n   * @param b - The second vector\n   * @returns The squared distance of two vectors\n   */\n  static distanceSquared(a: Vector4, b: Vector4): number {\n    const x = b._x - a._x;\n    const y = b._y - a._y;\n    const z = b._z - a._z;\n    const w = b._w - a._w;\n    return x * x + y * y + z * z + w * w;\n  }\n\n  /**\n   * Determines whether the specified vectors are equals.\n   * @param left - The first vector to compare\n   * @param right - The second vector to compare\n   * @returns True if the specified vectors are equals, false otherwise\n   */\n  static equals(left: Vector4, right: Vector4): boolean {\n    return (\n      MathUtil.equals(left._x, right._x) &&\n      MathUtil.equals(left._y, right._y) &&\n      MathUtil.equals(left._z, right._z) &&\n      MathUtil.equals(left._w, right._w)\n    );\n  }\n\n  /**\n   * Performs a linear interpolation between two vectors.\n   * @param start - The first vector\n   * @param end - The second vector\n   * @param t - The blend amount where 0 returns start and 1 end\n   * @param out - The result of linear blending between two vectors\n   */\n  static lerp(start: Vector4, end: Vector4, t: number, out: Vector4): void {\n    const { _x, _y, _z, _w } = start;\n    out._x = _x + (end._x - _x) * t;\n    out._y = _y + (end._y - _y) * t;\n    out._z = _z + (end._z - _z) * t;\n    out._w = _w + (end._w - _w) * t;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Calculate a vector containing the largest components of the specified vectors.\n   * @param left - The first vector\n   * @param right - The second vector\n   * @param out - The vector containing the largest components of the specified vectors\n   */\n  static max(left: Vector4, right: Vector4, out: Vector4): void {\n    out._x = Math.max(left._x, right._x);\n    out._y = Math.max(left._y, right._y);\n    out._z = Math.max(left._z, right._z);\n    out._w = Math.max(left._w, right._w);\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Calculate a vector containing the smallest components of the specified vectors.\n   * @param left - The first vector\n   * @param right - The second vector\n   * @param out - The vector containing the smallest components of the specified vectors\n   */\n  static min(left: Vector4, right: Vector4, out: Vector4): void {\n    out._x = Math.min(left._x, right._x);\n    out._y = Math.min(left._y, right._y);\n    out._z = Math.min(left._z, right._z);\n    out._w = Math.min(left._w, right._w);\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Reverses the direction of a given vector.\n   * @param a - The vector to negate\n   * @param out - The vector facing in the opposite direction\n   */\n  static negate(a: Vector4, out: Vector4): void {\n    out._x = -a._x;\n    out._y = -a._y;\n    out._z = -a._z;\n    out._w = -a._w;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Converts the vector into a unit vector.\n   * @param a - The vector to normalize\n   * @param out - The normalized vector\n   */\n  static normalize(a: Vector4, out: Vector4): void {\n    const { _x, _y, _z, _w } = a;\n    let len = Math.sqrt(_x * _x + _y * _y + _z * _z + _w * _w);\n    if (len > MathUtil.zeroTolerance) {\n      len = 1 / len;\n      out._x = _x * len;\n      out._y = _y * len;\n      out._z = _z * len;\n      out._w = _w * len;\n      out._onValueChanged && out._onValueChanged();\n    }\n  }\n\n  /**\n   * Scale a vector by the given value.\n   * @param a - The vector to scale\n   * @param s - The amount by which to scale the vector\n   * @param out - The scaled vector\n   */\n  static scale(a: Vector4, s: number, out: Vector4): void {\n    out._x = a._x * s;\n    out._y = a._y * s;\n    out._z = a._z * s;\n    out._w = a._w * s;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Performs a transformation using the given 4x4 matrix.\n   * @param v - The vector to transform\n   * @param m - The transform matrix\n   * @param out - The transformed vector3\n   */\n  static transform(v: Vector4, m: Matrix, out: Vector4): void {\n    const { _x, _y, _z, _w } = v;\n    const e = m.elements;\n    out._x = _x * e[0] + _y * e[4] + _z * e[8] + _w * e[12];\n    out._y = _x * e[1] + _y * e[5] + _z * e[9] + _w * e[13];\n    out._z = _x * e[2] + _y * e[6] + _z * e[10] + _w * e[14];\n    out._w = _x * e[3] + _y * e[7] + _z * e[11] + _w * e[15];\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /**\n   * Performs a transformation using the given quaternion.\n   * @param v - The vector to transform\n   * @param q - The transform quaternion\n   * @param out - The transformed vector\n   */\n  static transformByQuat(v: Vector4, q: Quaternion, out: Vector4): void {\n    const { _x: x, _y: y, _z: z, _w: w } = v;\n    const qx = q._x;\n    const qy = q._y;\n    const qz = q._z;\n    const qw = q._w;\n\n    // calculate quat * vec\n    const ix = qw * x + qy * z - qz * y;\n    const iy = qw * y + qz * x - qx * z;\n    const iz = qw * z + qx * y - qy * x;\n    const iw = -qx * x - qy * y - qz * z;\n\n    // calculate result * inverse quat\n    out._x = ix * qw - iw * qx - iy * qz + iz * qy;\n    out._y = iy * qw - iw * qy - iz * qx + ix * qz;\n    out._z = iz * qw - iw * qz - ix * qy + iy * qx;\n    out._w = w;\n    out._onValueChanged && out._onValueChanged();\n  }\n\n  /** @internal */\n  _x: number;\n  /** @internal */\n  _y: number;\n  /** @internal */\n  _z: number;\n  /** @internal */\n  _w: number;\n  /** @internal */\n  _onValueChanged: () => void = null;\n\n  /**\n   * The x component of the vector.\n   */\n  public get x(): number {\n    return this._x;\n  }\n\n  public set x(value: number) {\n    this._x = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * The y component of the vector.\n   */\n  public get y(): number {\n    return this._y;\n  }\n\n  public set y(value: number) {\n    this._y = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * The z component of the vector.\n   */\n  public get z(): number {\n    return this._z;\n  }\n\n  public set z(value: number) {\n    this._z = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * The w component of the vector.\n   */\n  public get w(): number {\n    return this._w;\n  }\n\n  public set w(value: number) {\n    this._w = value;\n    this._onValueChanged && this._onValueChanged();\n  }\n\n  /**\n   * Constructor of Vector4.\n   * @param x - The x component of the vector, default 0\n   * @param y - The y component of the vector, default 0\n   * @param z - The z component of the vector, default 0\n   * @param w - The w component of the vector, default 0\n   */\n  constructor(x: number = 0, y: number = 0, z: number = 0, w: number = 0) {\n    this._x = x;\n    this._y = y;\n    this._z = z;\n    this._w = w;\n  }\n\n  /**\n   * Set the value of this vector.\n   * @param x - The x component of the vector\n   * @param y - The y component of the vector\n   * @param z - The z component of the vector\n   * @param w - The w component of the vector\n   * @returns This vector\n   */\n  set(x: number, y: number, z: number, w: number): Vector4 {\n    this._x = x;\n    this._y = y;\n    this._z = z;\n    this._w = w;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Determines the sum of this vector and the specified vector.\n   * @param right - The specified vector\n   * @returns This vector\n   */\n  add(right: Vector4): Vector4 {\n    this._x += right._x;\n    this._y += right._y;\n    this._z += right._z;\n    this._w += right._w;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Determines the difference of this vector and the specified vector.\n   * @param right - the specified vector\n   * @returns This vector\n   */\n  subtract(right: Vector4): Vector4 {\n    this._x -= right._x;\n    this._y -= right._y;\n    this._z -= right._z;\n    this._w -= right._w;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Determines the product of this vector and the specified vector.\n   * @param right - the specified vector\n   * @returns This vector\n   */\n  multiply(right: Vector4): Vector4 {\n    this._x *= right._x;\n    this._y *= right._y;\n    this._z *= right._z;\n    this._w *= right._w;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Determines the divisor of this vector and the specified vector.\n   * @param right - the specified vector\n   * @returns This vector\n   */\n  divide(right: Vector4): Vector4 {\n    this._x /= right._x;\n    this._y /= right._y;\n    this._z /= right._z;\n    this._w /= right._w;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Calculate the length of this vector.\n   * @returns The length of this vector\n   */\n  length(): number {\n    const { _x, _y, _z, _w } = this;\n    return Math.sqrt(_x * _x + _y * _y + _z * _z + _w * _w);\n  }\n\n  /**\n   * Calculate the squared length of this vector.\n   * @returns The squared length of this vector\n   */\n  lengthSquared(): number {\n    const { _x, _y, _z, _w } = this;\n    return _x * _x + _y * _y + _z * _z + _w * _w;\n  }\n\n  /**\n   * Reverses the direction of this vector.\n   * @returns This vector\n   */\n  negate(): Vector4 {\n    this._x = -this._x;\n    this._y = -this._y;\n    this._z = -this._z;\n    this._w = -this._w;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Converts this vector into a unit vector.\n   * @returns This vector\n   */\n  normalize(): Vector4 {\n    Vector4.normalize(this, this);\n    return this;\n  }\n\n  /**\n   * Scale this vector by the given value.\n   * @param s - The amount by which to scale the vector\n   * @returns This vector\n   */\n  scale(s: number): Vector4 {\n    this._x *= s;\n    this._y *= s;\n    this._z *= s;\n    this._w *= s;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Creates a clone of this vector.\n   * @returns A clone of this vector\n   */\n  clone(): Vector4 {\n    let ret = new Vector4(this._x, this._y, this._z, this._w);\n    return ret;\n  }\n\n  /**\n   * Copy from vector3 like object.\n   * @param source - Vector3 like object.\n   * @returns This vector\n   */\n  copyFrom(source: Vector4Like): Vector4 {\n    this._x = source.x;\n    this._y = source.y;\n    this._z = source.z;\n    this._w = source.w;\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Copy the value of this vector by an array.\n   * @param array - The arrayƒ\n   * @param offset - The start offset of the array\n   * @returns This vector\n   */\n  copyFromArray(array: ArrayLike<number>, offset: number = 0): Vector4 {\n    this._x = array[offset];\n    this._y = array[offset + 1];\n    this._z = array[offset + 2];\n    this._w = array[offset + 3];\n    this._onValueChanged && this._onValueChanged();\n    return this;\n  }\n\n  /**\n   * Copy the value of this vector to an array.\n   * @param out - The array\n   * @param outOffset - The start offset of the array\n   */\n  copyToArray(out: number[] | Float32Array | Float64Array, outOffset: number = 0) {\n    out[outOffset] = this._x;\n    out[outOffset + 1] = this._y;\n    out[outOffset + 2] = this._z;\n    out[outOffset + 3] = this._w;\n  }\n}\n\ninterface Vector4Like {\n  /** {@inheritDoc Vector4.x} */\n  x: number;\n  /** {@inheritDoc Vector4.y} */\n  y: number;\n  /** {@inheritDoc Vector4.z} */\n  z: number;\n  /** {@inheritDoc Vector4.w} */\n  w: number;\n}\n","import { IClone } from \"./IClone\";\nimport { ICopy } from \"./ICopy\";\nimport { MathUtil } from \"./MathUtil\";\n\n/**\n * Describes a color in the from of RGBA (in order: R, G, B, A).\n */\nexport class Color implements IClone<Color>, ICopy<ColorLike, Color> {\n  /**\n   * Modify a value from the gamma space to the linear space.\n   * @param value - The value in gamma space\n   * @returns The value in linear space\n   */\n  static gammaToLinearSpace(value: number): number {\n    // https://www.khronos.org/registry/OpenGL/extensions/EXT/EXT_framebuffer_sRGB.txt\n    // https://www.khronos.org/registry/OpenGL/extensions/EXT/EXT_texture_sRGB_decode.txt\n\n    if (value <= 0.0) return 0.0;\n    else if (value <= 0.04045) return value / 12.92;\n    else if (value < 1.0) return Math.pow((value + 0.055) / 1.055, 2.4);\n    else return Math.pow(value, 2.4);\n  }\n\n  /**\n   * Modify a value from the linear space to the gamma space.\n   * @param value - The value in linear space\n   * @returns The value in gamma space\n   */\n  static linearToGammaSpace(value: number): number {\n    // https://www.khronos.org/registry/OpenGL/extensions/EXT/EXT_framebuffer_sRGB.txt\n    // https://www.khronos.org/registry/OpenGL/extensions/EXT/EXT_texture_sRGB_decode.txt\n\n    if (value <= 0.0) return 0.0;\n    else if (value < 0.0031308) return 12.92 * value;\n    else if (value < 1.0) return 1.055 * Math.pow(value, 0.41666) - 0.055;\n    else return Math.pow(value, 0.41666);\n  }\n\n  /**\n   * Determines whether the specified colors are equals.\n   * @param left - The first color to compare\n   * @param right - The second color to compare\n   * @returns True if the specified colors are equals, false otherwise\n   */\n  static equals(left: Color, right: Color): boolean {\n    return (\n      MathUtil.equals(left.r, right.r) &&\n      MathUtil.equals(left.g, right.g) &&\n      MathUtil.equals(left.b, right.b) &&\n      MathUtil.equals(left.a, right.a)\n    );\n  }\n\n  /**\n   * Determines the sum of two colors.\n   * @param left - The first color to add\n   * @param right - The second color to add\n   * @param out - The sum of two colors\n   * @returns The added color\n   */\n  static add(left: Color, right: Color, out: Color): Color {\n    out.r = left.r + right.r;\n    out.g = left.g + right.g;\n    out.b = left.b + right.b;\n    out.a = left.a + right.a;\n\n    return out;\n  }\n\n  /**\n   * Scale a color by the given value.\n   * @param left - The color to scale\n   * @param s - The amount by which to scale the color\n   * @param out - The scaled color\n   * @returns The scaled color\n   */\n  static scale(left: Color, s: number, out: Color): Color {\n    out.r = left.r * s;\n    out.g = left.g * s;\n    out.b = left.b * s;\n    out.a = left.a * s;\n\n    return out;\n  }\n\n  /** The red component of the color, 0~1. */\n  public r: number;\n  /** The green component of the color, 0~1. */\n  public g: number;\n  /** The blue component of the color, 0~1. */\n  public b: number;\n  /** The alpha component of the color, 0~1. */\n  public a: number;\n\n  /**\n   * Constructor of Color.\n   * @param r - The red component of the color\n   * @param g - The green component of the color\n   * @param b - The blue component of the color\n   * @param a - The alpha component of the color\n   */\n  constructor(r: number = 1, g: number = 1, b: number = 1, a: number = 1) {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n    this.a = a;\n  }\n\n  /**\n   * Set the value of this color.\n   * @param r - The red component of the color\n   * @param g - The green component of the color\n   * @param b - The blue component of the color\n   * @param a - The alpha component of the color\n   * @returns This color.\n   */\n  set(r: number, g: number, b: number, a: number): Color {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n    this.a = a;\n    return this;\n  }\n\n  /**\n   * Determines the sum of this color and the specified color.\n   * @param color - The specified color\n   * @returns The added color\n   */\n  add(color: Color): Color {\n    this.r += color.r;\n    this.g += color.g;\n    this.b += color.b;\n    this.a += color.a;\n\n    return this;\n  }\n\n  /**\n   * Scale this color by the given value.\n   * @param s - The amount by which to scale the color\n   * @returns The scaled color\n   */\n  scale(s: number): Color {\n    this.r *= s;\n    this.g *= s;\n    this.b *= s;\n    this.a *= s;\n\n    return this;\n  }\n\n  /**\n   * Creates a clone of this color.\n   * @returns A clone of this color\n   */\n  clone(): Color {\n    const ret = new Color(this.r, this.g, this.b, this.a);\n    return ret;\n  }\n\n  /**\n   * Copy from color like object.\n   * @param source - Color like object.\n   * @returns This vector\n   */\n  copyFrom(source: ColorLike): Color {\n    this.r = source.r;\n    this.g = source.g;\n    this.b = source.b;\n    this.a = source.a;\n    return this;\n  }\n\n  /**\n   * Modify components (r, g, b) of this color from gamma space to linear space.\n   * @param out - The color in linear space\n   * @returns The color in linear space\n   */\n  toLinear(out: Color): Color {\n    out.r = Color.gammaToLinearSpace(this.r);\n    out.g = Color.gammaToLinearSpace(this.g);\n    out.b = Color.gammaToLinearSpace(this.b);\n    return out;\n  }\n\n  /**\n   * Modify components (r, g, b) of this color from linear space to gamma space.\n   * @param out - The color in gamma space\n   * @returns The color in gamma space\n   */\n  toGamma(out: Color): Color {\n    out.r = Color.linearToGammaSpace(this.r);\n    out.g = Color.linearToGammaSpace(this.g);\n    out.b = Color.linearToGammaSpace(this.b);\n    return out;\n  }\n}\n\ninterface ColorLike {\n  /** {@inheritDoc Color.r} */\n  r: number;\n  /** {@inheritDoc Color.g} */\n  g: number;\n  /** {@inheritDoc Color.b} */\n  b: number;\n  /** {@inheritDoc Color.a} */\n  a: number;\n}\n","import { IClone } from \"./IClone\";\nimport { ICopy } from \"./ICopy\";\n\n// A 2d rectangle defined by x and y position, width and height.\nexport class Rect implements IClone<Rect>, ICopy<Rect, Rect> {\n  /** The x coordinate of the rectangle. */\n  public x: number;\n  /** The y coordinate of the rectangle. */\n  public y: number;\n  /** The width of the rectangle, measured from the x position. */\n  public width: number;\n  /** The height of the rectangle, measured from the y position. */\n  public height: number;\n\n  /**\n   * Constructor of Rect.\n   * @param x - The x coordinate of the rectangle, default 0\n   * @param y - The y coordinate of the rectangle, default 0\n   * @param width - The width of the rectangle, measured from the x position, default 0\n   * @param height - The height of the rectangle, measured from the y position, default 0\n   */\n  constructor(x: number = 0, y: number = 0, width: number = 0, height: number = 0) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n\n  /**\n   * Set the value of this rectangle.\n   * @param x - The x coordinate of the rectangle\n   * @param y - The y coordinate of the rectangle\n   * @param width - The width of the rectangle, measured from the x position\n   * @param height - The height of the rectangle, measured from the y position\n   * @returns This rectangle\n   */\n  set(x: number, y: number, width: number, height: number): Rect {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n    return this;\n  }\n\n  /**\n   * Creates a clone of this rect.\n   * @returns A clone of this rect\n   */\n  clone(): Rect {\n    return new Rect(this.x, this.y, this.width, this.height);\n  }\n\n  /**\n   * Copy this rect from the specified rect.\n   * @param source - The specified rect\n   * @returns This rect\n   */\n  copyFrom(source: Rect): Rect {\n    this.x = source.x;\n    this.y = source.y;\n    this.width = source.width;\n    this.height = source.height;\n    return this;\n  }\n}\n","import { Color } from \"./Color\";\nimport { IClone } from \"./IClone\";\nimport { ICopy } from \"./ICopy\";\nimport { Vector3 } from \"./Vector3\";\n\n/**\n * Use SH3 to represent irradiance environment maps efficiently, allowing for interactive rendering of diffuse objects under distant illumination.\n * @remarks\n * https://graphics.stanford.edu/papers/envmap/envmap.pdf\n * http://www.ppsloan.org/publications/StupidSH36.pdf\n * https://google.github.io/filament/Filament.md.html#annex/sphericalharmonics\n */\nexport class SphericalHarmonics3\n  implements IClone<SphericalHarmonics3>, ICopy<SphericalHarmonics3, SphericalHarmonics3>\n{\n  /** The coefficients of SphericalHarmonics3. */\n  coefficients: Float32Array = new Float32Array(27);\n\n  /**\n   * Add light to SphericalHarmonics3.\n   * @param direction - Light direction\n   * @param color - Light color\n   * @param deltaSolidAngle - The delta solid angle of the light\n   */\n  addLight(direction: Vector3, color: Color, deltaSolidAngle: number): void {\n    /**\n     * Implements `EvalSHBasis` from [Projection from Cube maps] in http://www.ppsloan.org/publications/StupidSH36.pdf.\n     *\n     * Basis constants\n     * 0: Math.sqrt(1/(4 * Math.PI))\n     *\n     * 1: -Math.sqrt(3 / (4 * Math.PI))\n     * 2: Math.sqrt(3 / (4 * Math.PI))\n     * 3: -Math.sqrt(3 / (4 * Math.PI))\n     *\n     * 4: Math.sqrt(15 / (4 * Math.PI))\n     * 5: -Math.sqrt(15 / (4 * Math.PI))\n     * 6: Math.sqrt(5 / (16 * Math.PI))\n     * 7: -Math.sqrt(15 / (4 * Math.PI)）\n     * 8: Math.sqrt(15 / (16 * Math.PI))\n     */\n\n    color.scale(deltaSolidAngle);\n\n    const coe = this.coefficients;\n\n    const { _x: x, _y: y, _z: z } = direction;\n    const { r, g, b } = color;\n\n    const bv0 = 0.282095; // basis0 = 0.886227\n    const bv1 = -0.488603 * y; // basis1 = -0.488603\n    const bv2 = 0.488603 * z; // basis2 = 0.488603\n    const bv3 = -0.488603 * x; // basis3 = -0.488603\n    const bv4 = 1.092548 * (x * y); // basis4 = 1.092548\n    const bv5 = -1.092548 * (y * z); // basis5 = -1.092548\n    const bv6 = 0.315392 * (3 * z * z - 1); // basis6 = 0.315392\n    const bv7 = -1.092548 * (x * z); // basis7 = -1.092548\n    const bv8 = 0.546274 * (x * x - y * y); // basis8 = 0.546274\n\n    (coe[0] += r * bv0), (coe[1] += g * bv0), (coe[2] += b * bv0);\n\n    (coe[3] += r * bv1), (coe[4] += g * bv1), (coe[5] += b * bv1);\n    (coe[6] += r * bv2), (coe[7] += g * bv2), (coe[8] += b * bv2);\n    (coe[9] += r * bv3), (coe[10] += g * bv3), (coe[11] += b * bv3);\n\n    (coe[12] += r * bv4), (coe[13] += g * bv4), (coe[14] += b * bv4);\n    (coe[15] += r * bv5), (coe[16] += g * bv5), (coe[17] += b * bv5);\n    (coe[18] += r * bv6), (coe[19] += g * bv6), (coe[20] += b * bv6);\n    (coe[21] += r * bv7), (coe[22] += g * bv7), (coe[23] += b * bv7);\n    (coe[24] += r * bv8), (coe[25] += g * bv8), (coe[26] += b * bv8);\n  }\n\n  /**\n   * Evaluates the color for the specified direction.\n   * @param direction - Specified direction\n   * @param out - Out color\n   */\n  evaluate(direction: Vector3, out: Color): Color {\n    /**\n     * Equations based on data from: http://ppsloan.org/publications/StupidSH36.pdf\n     *\n     *\n     * Basis constants\n     * 0: Math.sqrt(1/(4 * Math.PI))\n     *\n     * 1: -Math.sqrt(3 / (4 * Math.PI))\n     * 2: Math.sqrt(3 / (4 * Math.PI))\n     * 3: -Math.sqrt(3 / (4 * Math.PI))\n     *\n     * 4: Math.sqrt(15 / (4 * Math.PI)）\n     * 5: -Math.sqrt(15 / (4 * Math.PI))\n     * 6: Math.sqrt(5 / (16 * Math.PI)）\n     * 7: -Math.sqrt(15 / (4 * Math.PI)）\n     * 8: Math.sqrt(15 / (16 * Math.PI)）\n     *\n     *\n     * Convolution kernel\n     * 0: Math.PI\n     * 1: (2 * Math.PI) / 3\n     * 2: Math.PI / 4\n     */\n\n    const coe = this.coefficients;\n    const { _x: x, _y: y, _z: z } = direction;\n\n    const bv0 = 0.886227; // kernel0 * basis0 = 0.886227\n    const bv1 = -1.023327 * y; // kernel1 * basis1 = -1.023327\n    const bv2 = 1.023327 * z; // kernel1 * basis2 = 1.023327\n    const bv3 = -1.023327 * x; // kernel1 * basis3 = -1.023327\n    const bv4 = 0.858086 * y * x; // kernel2 * basis4 = 0.858086\n    const bv5 = -0.858086 * y * z; // kernel2 * basis5 = -0.858086\n    const bv6 = 0.247708 * (3 * z * z - 1); // kernel2 * basis6 = 0.247708\n    const bv7 = -0.858086 * z * x; // kernel2 * basis7 = -0.858086\n    const bv8 = 0.429042 * (x * x - y * y); // kernel2 * basis8 = 0.429042\n\n    // l0\n    let r = coe[0] * bv0;\n    let g = coe[1] * bv0;\n    let b = coe[2] * bv0;\n\n    // l1\n    r += coe[3] * bv1 + coe[6] * bv2 + coe[9] * bv3;\n    g += coe[4] * bv1 + coe[7] * bv2 + coe[10] * bv3;\n    b += coe[5] * bv1 + coe[8] * bv2 + coe[11] * bv3;\n\n    // l2\n    r += coe[12] * bv4 + coe[15] * bv5 + coe[18] * bv6 + coe[21] * bv7 + coe[24] * bv8;\n    g += coe[13] * bv4 + coe[16] * bv5 + coe[19] * bv6 + coe[22] * bv7 + coe[25] * bv8;\n    b += coe[14] * bv4 + coe[17] * bv5 + coe[20] * bv6 + coe[23] * bv7 + coe[26] * bv8;\n\n    out.set(r, g, b, 1.0);\n    return out;\n  }\n\n  /**\n   * Scale the coefficients.\n   * @param s - The amount by which to scale the SphericalHarmonics3\n   */\n  scale(s: number): void {\n    const src = this.coefficients;\n\n    (src[0] *= s), (src[1] *= s), (src[2] *= s);\n    (src[3] *= s), (src[4] *= s), (src[5] *= s);\n    (src[6] *= s), (src[7] *= s), (src[8] *= s);\n    (src[9] *= s), (src[10] *= s), (src[11] *= s);\n    (src[12] *= s), (src[13] *= s), (src[14] *= s);\n    (src[15] *= s), (src[16] *= s), (src[17] *= s);\n    (src[18] *= s), (src[19] *= s), (src[20] *= s);\n    (src[21] *= s), (src[22] *= s), (src[23] *= s);\n    (src[24] *= s), (src[25] *= s), (src[26] *= s);\n  }\n\n  /**\n   * Creates a clone of this SphericalHarmonics3.\n   * @returns A clone of this SphericalHarmonics3\n   */\n  clone(): SphericalHarmonics3 {\n    const sh = new SphericalHarmonics3();\n    sh.copyFrom(this);\n    return sh;\n  }\n\n  /**\n   * Copy this SphericalHarmonics3 from the specified SphericalHarmonics3.\n   * @param source - The specified SphericalHarmonics3\n   * @returns This SphericalHarmonics3\n   */\n  copyFrom(source: SphericalHarmonics3): SphericalHarmonics3 {\n    source.copyToArray(this.coefficients);\n    return this;\n  }\n\n  /**\n   * Copy the value of this spherical harmonics from an array.\n   * @param array - The array\n   * @param offset - The start offset of the array\n   */\n  copyFromArray(array: ArrayLike<number>, offset: number = 0): void {\n    const s = this.coefficients;\n\n    (s[0] = array[offset]), (s[1] = array[1 + offset]), (s[2] = array[2 + offset]);\n    (s[3] = array[3 + offset]), (s[4] = array[4 + offset]), (s[5] = array[5 + offset]);\n    (s[6] = array[6 + offset]), (s[7] = array[7 + offset]), (s[8] = array[8 + offset]);\n    (s[9] = array[9 + offset]), (s[10] = array[10 + offset]), (s[11] = array[11 + offset]);\n    (s[12] = array[12 + offset]), (s[13] = array[13 + offset]), (s[14] = array[14 + offset]);\n    (s[15] = array[15 + offset]), (s[16] = array[16 + offset]), (s[17] = array[17 + offset]);\n    (s[18] = array[18 + offset]), (s[19] = array[19 + offset]), (s[20] = array[20 + offset]);\n    (s[21] = array[21 + offset]), (s[22] = array[22 + offset]), (s[23] = array[23 + offset]);\n    (s[24] = array[24 + offset]), (s[25] = array[25 + offset]), (s[26] = array[26 + offset]);\n  }\n\n  /**\n   * Copy the value of this spherical harmonics to an array.\n   * @param out - The array\n   * @param outOffset - The start offset of the array\n   */\n  copyToArray(out: number[] | Float32Array | Float64Array, outOffset: number = 0): void {\n    const s = this.coefficients;\n\n    (out[0 + outOffset] = s[0]), (out[1 + outOffset] = s[1]), (out[2 + outOffset] = s[2]);\n\n    (out[3 + outOffset] = s[3]), (out[4 + outOffset] = s[4]), (out[5 + outOffset] = s[5]);\n    (out[6 + outOffset] = s[6]), (out[7 + outOffset] = s[7]), (out[8 + outOffset] = s[8]);\n    (out[9 + outOffset] = s[9]), (out[10 + outOffset] = s[10]), (out[11 + outOffset] = s[11]);\n\n    (out[12 + outOffset] = s[12]), (out[13 + outOffset] = s[13]), (out[14 + outOffset] = s[14]);\n    (out[15 + outOffset] = s[15]), (out[16 + outOffset] = s[16]), (out[17 + outOffset] = s[17]);\n    (out[18 + outOffset] = s[18]), (out[19 + outOffset] = s[19]), (out[20 + outOffset] = s[20]);\n    (out[21 + outOffset] = s[21]), (out[22 + outOffset] = s[22]), (out[23 + outOffset] = s[23]);\n    (out[24 + outOffset] = s[24]), (out[25 + outOffset] = s[25]), (out[26 + outOffset] = s[26]);\n  }\n}\n"],"names":["ContainmentType","PlaneIntersectionType","MathUtil","clamp","v","min","max","Math","equals","a","b","abs","zeroTolerance","isPowerOf2","radianToDegree","r","radToDegreeFactor","degreeToRadian","d","degreeToRadFactor","PI","Vector3","add","left","right","out","_x","_y","_z","_onValueChanged","subtract","multiply","divide","dot","cross","ax","ay","az","bx","by","bz","set","distance","x","y","z","sqrt","distanceSquared","lerp","start","end","t","negate","normalize","len","scale","s","transformNormal","m","e","elements","transformToVec3","transformToVec4","_w","transformCoordinate","w","transformByQuat","quaternion","qx","qy","qz","qw","ix","iy","iz","iw","length","lengthSquared","clone","copyFrom","source","copyFromArray","array","offset","copyToArray","outOffset","value","_zero","_one","BoundingSphere","fromPoints","points","Error","center","_tempVec30","i","radius","fromBox","box","BoundingBox","fromCenterAndExtent","extent","Number","MAX_VALUE","l","point","fromSphere","sphere","transform","matrix","_tempVec31","getCenter","getExtent","merge","box1","box2","getCorners","minX","minY","minZ","maxX","maxY","maxZ","CollisionUtil","distancePlaneAndPoint","plane","normal","intersectsPlaneAndPoint","Front","Back","Intersecting","intersectsPlaneAndBox","front","back","intersectsPlaneAndSphere","intersectsRayAndPlane","ray","dir","direction","position","origin","intersectsRayAndBox","dirX","dirY","dirZ","oriX","oriY","oriZ","tmax","inverse","t1","t2","temp","intersectsRayAndSphere","c","discriminant","intersectsBoxAndBox","boxA","boxB","intersectsSphereAndSphere","sphereA","sphereB","radiisum","intersectsSphereAndBox","closestPoint","intersectsFrustumAndBox","frustum","getPlane","frustumContainsBox","result","Contains","Disjoint","Intersects","frustumContainsSphere","intersectionType","Plane","p","factor","point0","point1","point2","x0","y0","z0","x1","y1","z1","x2","y2","z2","yz","xz","xy","invPyth","BoundingFrustum","near","far","top","bottom","calculateFromMatrix","index","me","m11","m12","m13","m14","m21","m22","m23","m24","m31","m32","m33","m34","m41","m42","m43","m44","nearNormal","farNormal","leftNormal","rightNormal","topNormal","bottomNormal","intersectsBox","intersectsSphere","Matrix3x3","le","re","oe","l11","l12","l13","l21","l22","l23","l31","l32","l33","r11","r12","r13","r21","r22","r23","r31","r32","r33","se","ee","inv","rotationQuaternion","xx","yx","yy","zx","zy","zz","wx","wy","wz","scaling","translation","invert","ae","a11","a12","a13","a21","a22","a23","a31","a32","a33","b12","b22","b32","det","normalMatrix","mat4","a14","a24","a34","a41","a42","a43","a44","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","rotate","sin","cos","translate","transpose","Float32Array","determinant","identity","ret","srce","copyFromMatrix","Quaternion","aw","bw","conjugate","rotationAxisAngle","axis","rad","normalAxis","_tempVector3","rotationEuler","rotationYawPitchRoll","yaw","pitch","roll","halfRoll","halfPitch","halfYaw","sinRoll","cosRoll","sinPitch","cosPitch","sinYaw","cosYaw","cosYawPitch","sinYawPitch","rotationMatrix3x3","half","invDot","slerp","scale0","scale1","cosom","omega","acos","sinom","rotationX","rotationY","rotationZ","rotateX","rotateY","rotateZ","getAxisAngle","toEuler","_toYawPitchRoll","toYawPitchRoll","quat","rotateAxisAngle","_tempQuat1","zw","yw","xw","asin","atan2","Matrix","l14","l24","l34","l41","l42","l43","l44","r14","r24","r34","r41","r42","r43","r44","rotationTranslation","affineTransformation","rotation","sx","sy","sz","lookAt","eye","target","up","xAxis","yAxis","zAxis","_tempVec32","ortho","lr","bt","nf","perspective","fovY","aspect","f","tan","b13","b21","b23","b31","b33","decompose","rm","_tempMat30","rme","xs","sign","ys","zs","invSX","invSY","invSZ","getRotation","trace","getScaling","getTranslation","_identity","Ray","intersectPlane","intersectSphere","intersectBox","getPoint","Vector2","Vector4","q","Color","gammaToLinearSpace","pow","linearToGammaSpace","g","color","toLinear","toGamma","Rect","width","height","SphericalHarmonics3","coefficients","addLight","deltaSolidAngle","coe","bv0","bv1","bv2","bv3","bv4","bv5","bv6","bv7","bv8","evaluate","src","sh"],"mappings":"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7BlO,QAAQ,CAACM,MAAM,CAAC2N,EAAE,CAAC,CAAC,CAAC,EAAEC,EAAE,CAAC,CAAC,CAAC,CAAC,IAC7BlO,QAAQ,CAACM,MAAM,CAAC2N,EAAE,CAAC,CAAC,CAAC,EAAEC,EAAE,CAAC,CAAC,CAAC,CAAC,IAC7BlO,QAAQ,CAACM,MAAM,CAAC2N,EAAE,CAAC,CAAC,CAAC,EAAEC,EAAE,CAAC,CAAC,CAAC,CAAC,IAC7BlO,QAAQ,CAACM,MAAM,CAAC2N,EAAE,CAAC,CAAC,CAAC,EAAEC,EAAE,CAAC,CAAC,CAAC,CAAC,IAC7BlO,QAAQ,CAACM,MAAM,CAAC2N,EAAE,CAAC,CAAC,CAAC,EAAEC,EAAE,CAAC,CAAC,CAAC,CAAC,IAC7BlO,QAAQ,CAACM,MAAM,CAAC2N,EAAE,CAAC,CAAC,CAAC,EAAEC,EAAE,CAAC,CAAC,CAAC,CAAC,IAC7BlO,QAAQ,CAACM,MAAM,CAAC2N,EAAE,CAAC,CAAC,CAAC,EAAEC,EAAE,CAAC,CAAC,CAAC,CAAC,IAC7BlO,QAAQ,CAACM,MAAM,CAAC2N,EAAE,CAAC,CAAC,CAAC,EAAEC,EAAE,CAAC,CAAC,CAAC,CAAC,IAC7BlO,QAAQ,CAACM,MAAM,CAAC2N,EAAE,CAAC,CAAC,CAAC,EAAEC,EAAE,CAAC,CAAC,CAAC,CAAC,IAC7BlO,QAAQ,CAACM,MAAM,CAAC2N,EAAE,CAAC,EAAE,CAAC,EAAEC,EAAE,CAAC,EAAE,CAAC,CAAC,IAC/BlO,QAAQ,CAACM,MAAM,CAAC2N,EAAE,CAAC,EAAE,CAAC,EAAEC,EAAE,CAAC,EAAE,CAAC,CAAC,IAC/BlO,QAAQ,CAACM,MAAM,CAAC2N,EAAE,CAAC,EAAE,CAAC,EAAEC,EAAE,CAAC,EAAE,CAAC,CAAC,IAC/BlO,QAAQ,CAACM,MAAM,CAAC2N,EAAE,CAAC,EAAE,CAAC,EAAEC,EAAE,CAAC,EAAE,CAAC,CAAC,IAC/BlO,QAAQ,CAACM,MAAM,CAAC2N,EAAE,CAAC,EAAE,CAAC,EAAEC,EAAE,CAAC,EAAE,CAAC,CAAC,IAC/BlO,QAAQ,CAACM,MAAM,CAAC2N,EAAE,CAAC,EAAE,CAAC,EAAE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"}