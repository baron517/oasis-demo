{"version":3,"file":"main.js","sources":["../src/base/Util.ts","../src/Utils.ts","../src/asset/AssetPromise.ts","../src/asset/ResourceManager.ts","../src/base/Event.ts","../src/clone/enums/CloneMode.ts","../src/clone/CloneManager.ts","../src/base/EventDispatcher.ts","../src/base/Logger.ts","../src/base/Time.ts","../src/base/EngineObject.ts","../src/base/Constant.ts","../src/DisorderedArray.ts","../src/shader/ShaderMacroCollection.ts","../src/ComponentsManager.ts","../src/clone/ComponentCloner.ts","../src/ComponentsDependencies.ts","../src/Layer.ts","../src/UpdateFlag.ts","../src/BoolUpdateFlag.ts","../src/Component.ts","../src/ListenerUpdateFlag.ts","../src/UpdateFlagManager.ts","../src/Transform.ts","../src/Entity.ts","../src/FeatureManager.ts","../src/input/enums/Keys.ts","../src/input/keyboard/KeyboardManager.ts","../src/enums/CameraClearFlags.ts","../src/physics/HitResult.ts","../src/physics/PhysicsManager.ts","../src/physics/enums/PhysicsMaterialCombineMode.ts","../src/physics/PhysicsMaterial.ts","../src/physics/Collider.ts","../src/physics/enums/ControllerNonWalkableMode.ts","../src/physics/CharacterController.ts","../src/physics/shape/ColliderShape.ts","../src/physics/shape/BoxColliderShape.ts","../src/physics/shape/SphereColliderShape.ts","../src/physics/shape/PlaneColliderShape.ts","../src/physics/enums/ColliderShapeUpAxis.ts","../src/physics/shape/CapsuleColliderShape.ts","../src/physics/joint/Joint.ts","../src/physics/joint/FixedJoint.ts","../src/physics/enums/HingeJointFlag.ts","../src/physics/joint/HingeJoint.ts","../src/physics/joint/SpringJoint.ts","../src/physics/joint/JointLimits.ts","../src/physics/joint/JointMotor.ts","../src/physics/enums/ControllerCollisionFlag.ts","../src/physics/StaticCollider.ts","../src/physics/DynamicCollider.ts","../src/input/enums/PointerPhase.ts","../src/input/enums/PointerButton.ts","../src/input/pointer/Pointer.ts","../src/input/pointer/PointerManager.ts","../src/input/wheel/WheelManager.ts","../src/input/InputManager.ts","../src/material/enums/RenderQueueType.ts","../src/asset/RefObject.ts","../src/shader/enums/ShaderDataGroup.ts","../src/texture/Texture.ts","../src/shader/enums/ShaderPropertyType.ts","../src/shaderlib/pbr/index.ts","../src/shaderlib/ShaderLib.ts","../src/shaderlib/ShaderFactory.ts","../src/shader/ShaderMacro.ts","../src/enums/ColorSpace.ts","../src/shader/ShaderUniform.ts","../src/shader/ShaderUniformBlock.ts","../src/shader/ShaderProgram.ts","../src/shader/ShaderProperty.ts","../src/shader/Shader.ts","../src/shader/ShaderData.ts","../src/shader/enums/BlendFactor.ts","../src/shader/enums/BlendOperation.ts","../src/shader/enums/ColorWriteMask.ts","../src/shader/state/RenderTargetBlendState.ts","../src/shader/state/BlendState.ts","../src/shader/enums/CompareFunction.ts","../src/shader/state/DepthState.ts","../src/shader/enums/CullMode.ts","../src/shader/state/RasterState.ts","../src/shader/enums/StencilOperation.ts","../src/shader/state/StencilState.ts","../src/shader/state/RenderState.ts","../src/material/Material.ts","../src/RenderPipeline/ClassPool.ts","../src/RenderPipeline/RenderElement.ts","../src/RenderPipeline/MeshRenderElement.ts","../src/RenderPipeline/RenderContext.ts","../src/RenderPipeline/SpriteElement.ts","../src/RenderPipeline/SpriteMaskElement.ts","../src/2d/enums/SpriteMaskInteraction.ts","../src/Renderer.ts","../src/2d/assembler/StaticInterfaceImplement.ts","../src/2d/assembler/SimpleSpriteAssembler.ts","../src/2d/data/RenderData2D.ts","../src/2d/enums/SpriteDirtyFlag.ts","../src/2d/enums/SpriteMaskLayer.ts","../src/2d/sprite/SpriteMask.ts","../src/graphic/enums/VertexElementFormat.ts","../src/graphic/enums/BufferUsage.ts","../src/graphic/enums/IndexFormat.ts","../src/graphic/BufferUtil.ts","../src/graphic/VertexElement.ts","../src/graphic/enums/BufferBindFlag.ts","../src/graphic/enums/SetDataOptions.ts","../src/graphic/Buffer.ts","../src/graphic/enums/MeshTopology.ts","../src/graphic/IndexBufferBinding.ts","../src/graphic/SubMesh.ts","../src/graphic/Mesh.ts","../src/graphic/VertexBufferBinding.ts","../src/texture/enums/RenderBufferDepthFormat.ts","../src/texture/enums/TextureCubeFace.ts","../src/texture/enums/TextureFilterMode.ts","../src/texture/enums/TextureFormat.ts","../src/texture/enums/TextureWrapMode.ts","../src/texture/RenderTarget.ts","../src/texture/Texture2D.ts","../src/texture/Texture2DArray.ts","../src/texture/TextureCube.ts","../src/mesh/BlendShapeManager.ts","../src/mesh/ModelMesh.ts","../src/mesh/Skin.ts","../src/mesh/MeshRenderer.ts","../src/mesh/SkinnedMeshRenderer.ts","../src/mesh/PrimitiveMesh.ts","../src/mesh/BufferMesh.ts","../src/mesh/BlendShapeFrame.ts","../src/mesh/BlendShape.ts","../src/RenderPipeline/Basic2DBatcher.ts","../src/RenderPipeline/SpriteMaskBatcher.ts","../src/RenderPipeline/SpriteMaskManager.ts","../src/RenderPipeline/TextRenderElement.ts","../src/enums/BackgroundMode.ts","../src/enums/BackgroundTextureFillMode.ts","../src/sky/Sky.ts","../src/Background.ts","../src/lighting/enums/DiffuseMode.ts","../src/lighting/AmbientLight.ts","../src/SceneFeature.ts","../src/lighting/Light.ts","../src/lighting/DirectLight.ts","../src/lighting/PointLight.ts","../src/lighting/SpotLight.ts","../src/lighting/LightFeature.ts","../src/Scene.ts","../src/SceneManager.ts","../src/shader/ShaderPool.ts","../src/shader/ShaderProgramPool.ts","../src/Engine.ts","../src/SystemInfo.ts","../src/EngineFeature.ts","../src/Script.ts","../src/RenderPipeline/RenderPass.ts","../src/RenderPipeline/SpriteBatcher.ts","../src/RenderPipeline/RenderQueue.ts","../src/RenderPipeline/BasicRenderPipeline.ts","../src/Camera.ts","../src/asset/request.ts","../src/asset/Loader.ts","../src/asset/AssetType.ts","../src/material/enums/RenderFace.ts","../src/material/enums/BlendMode.ts","../src/material/enums/TextureCoordinate.ts","../src/material/BaseMaterial.ts","../src/material/BlinnPhongMaterial.ts","../src/material/PBRBaseMaterial.ts","../src/material/PBRMaterial.ts","../src/material/PBRSpecularMaterial.ts","../src/material/UnlitMaterial.ts","../src/2d/enums/TextAlignment.ts","../src/2d/enums/TextOverflow.ts","../src/2d/enums/FontStyle.ts","../src/2d/atlas/SpriteAtlas.ts","../src/2d/enums/SpriteDrawMode.ts","../src/2d/sprite/Sprite.ts","../src/2d/assembler/SlicedSpriteAssembler.ts","../src/2d/sprite/SpriteRenderer.ts","../src/2d/atlas/FontAtlas.ts","../src/2d/text/Font.ts","../src/2d/text/CharRenderData.ts","../src/2d/text/CharRenderDataPool.ts","../src/2d/text/TextUtils.ts","../src/2d/text/TextRenderer.ts","../src/animation/AnimationClipCurveBinding.ts","../src/animation/AnimationEvent.ts","../src/animation/enums/AnimationProperty.ts","../src/animation/Motion.ts","../src/animation/AnimationClip.ts","../src/animation/enums/InterpolableValueType.ts","../src/animation/AnimatorUtils.ts","../src/animation/enums/AnimatorLayerBlendingMode.ts","../src/animation/enums/AnimatorStatePlayState.ts","../src/animation/enums/LayerState.ts","../src/animation/internal/AnimationCurveOwner.ts","../src/animation/internal/AnimationEventHandler.ts","../src/animation/AnimatorTransition.ts","../src/animation/enums/WrapMode.ts","../src/animation/internal/AnimatorStatePlayData.ts","../src/animation/internal/AnimatorLayerData.ts","../src/animation/internal/AnimatorStateData.ts","../src/animation/internal/AnimatorStateInfo.ts","../src/animation/internal/CrossCurveData.ts","../src/animation/internal/AnimatorTempValue.ts","../src/animation/Animator.ts","../src/animation/AnimatorController.ts","../src/animation/AnimatorControllerLayer.ts","../src/animation/StateMachineScript.ts","../src/animation/AnimatorState.ts","../src/animation/AnimatorStateMachine.ts","../src/animation/enums/InterpolationType.ts","../src/animation/AnimationCurve.ts","../src/animation/KeyFrame.ts","../src/animation/enums/AnimatorConditionMode.ts","../src/sky/SkyBoxMaterial.ts","../src/particle/ParticleRenderer.ts","../src/trail/TrailMaterial.ts","../src/trail/TrailRenderer.ts","../src/fog/Fog.ts","../src/fog/EXP2Fog.ts","../src/fog/LinearFog.ts","../src/env-probe/Probe.ts","../src/env-probe/CubeProbe.ts","../src/shadow/LightShadow.ts","../src/shadow/Extension.ts","../src/shadow/ShadowMapMaterial.ts","../src/shadow/ShadowMapPass.ts","../src/shadow/ShadowMaterial.ts","../src/shadow/ShadowPass.ts","../src/shadow/ShadowFeature.ts","../src/shadow/index.ts","../src/index.ts"],"sourcesContent":["export const Util = {\n  isArray:\n    \"isArray\" in Array\n      ? Array.isArray\n      : (value: any): boolean => {\n          return toString.call(value) === \"[object Array]\";\n        },\n  isArrayLike(x: any): boolean {\n    return !!x && typeof x.length === \"number\" && typeof x !== \"function\";\n  },\n  clone<T>(obj: T): T {\n    if (typeof obj !== \"object\" || obj === null) {\n      return obj;\n    }\n    let rst;\n    if (Util.isArrayLike(obj)) {\n      rst = (obj as any).slice();\n      for (let i = 0, l = (obj as any).length; i < l; i++) {\n        rst[i] = Util.clone(obj[i]);\n      }\n    } else {\n      rst = {};\n      for (const k in obj) {\n        if (obj.hasOwnProperty(k)) {\n          rst[k] = Util.clone(obj[k]);\n        }\n      }\n    }\n\n    return rst;\n  },\n\n  downloadBlob(blob: Blob, fileName: string = \"\") {\n    let url = window.URL.createObjectURL(blob);\n    let a = document.createElement(\"a\");\n    document.body.appendChild(a);\n    a.style.display = \"none\";\n    a.href = url;\n    a.download = fileName;\n    a.addEventListener(\"click\", () => {\n      if (a.parentElement) {\n        a.parentElement.removeChild(a);\n      }\n    });\n    a.click();\n    window.URL.revokeObjectURL(url);\n  }\n};\n\nexport const isArrayLike = <T>(x: any): x is ArrayLike<T> =>\n  x && typeof x.length === \"number\" && typeof x !== \"function\";\n\n/**\n * Fastly remove an element from array.\n * @param array - Array\n * @param item - Element\n */\nexport function removeFromArray(array: any[], item: any): boolean {\n  const index = array.indexOf(item);\n  if (index < 0) {\n    return false;\n  }\n  const last = array.length - 1;\n  if (index !== last) {\n    const end = array[last];\n    array[index] = end;\n  }\n  array.length--;\n  return true;\n}\n\nexport function ObjectValues(obj: any) {\n  return Object.keys(obj).map((key: any) => obj[key]);\n}\n","export class Utils {\n  /**\n   * @internal\n   * Simplify lodash get: https://github.com/lodash/lodash/blob/master/get.js.\n   * @param target - The object to query.\n   * @param path - The path of the property to get.\n   * @returns Returns the resolved value.\n   */\n  static _reflectGet(target: Object, path: string) {\n    const pathArr = this._stringToPath(path);\n\n    let object = target;\n    let index = 0;\n    const length = pathArr.length;\n\n    while (object != null && index < length) {\n      object = object[pathArr[index++]];\n    }\n    return index && index == length ? object : undefined;\n  }\n\n  private static _stringToPath(string): string[] {\n    const result = [];\n    if (string.charCodeAt(0) === charCodeOfDot) {\n      result.push(\"\");\n    }\n    string.replace(rePropName, (match, expression, quote, subString) => {\n      let key = match;\n      if (quote) {\n        key = subString.replace(reEscapeChar, \"$1\");\n      } else if (expression) {\n        key = expression.trim();\n      }\n      result.push(key);\n    });\n    return result;\n  }\n}\n\nconst charCodeOfDot = \".\".charCodeAt(0);\nconst reEscapeChar = /\\\\(\\\\)?/g;\nconst rePropName = RegExp(\n  // Match anything that isn't a dot or bracket.\n  \"[^.[\\\\]]+\" +\n    \"|\" +\n    // Or match property names within brackets.\n    \"\\\\[(?:\" +\n    // Match a non-string expression.\n    \"([^\\\"'][^[]*)\" +\n    \"|\" +\n    // Or match strings (supports escaping characters).\n    \"([\\\"'])((?:(?!\\\\2)[^\\\\\\\\]|\\\\\\\\.)*?)\\\\2\" +\n    \")\\\\]\" +\n    \"|\" +\n    // Or match \"\" as the space between consecutive dots or empty brackets.\n    \"(?=(?:\\\\.|\\\\[\\\\])(?:\\\\.|\\\\[\\\\]|$))\",\n  \"g\"\n);","type PromiseNotifier = (progress: number) => void;\n\n/**\n * Asset Promise Status\n */\nexport enum AssetPromiseStatus {\n  /** Success. */\n  Success,\n  /** Pending. */\n  Pending,\n  /** Failed. */\n  Failed\n}\n/**\n * Asset Loading Promise.\n */\nexport class AssetPromise<T> extends Promise<T> {\n  static all<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(\n    values: readonly [\n      T1 | PromiseLike<T1>,\n      T2 | PromiseLike<T2>,\n      T3 | PromiseLike<T3>,\n      T4 | PromiseLike<T4>,\n      T5 | PromiseLike<T5>,\n      T6 | PromiseLike<T6>,\n      T7 | PromiseLike<T7>,\n      T8 | PromiseLike<T8>,\n      T9 | PromiseLike<T9>,\n      T10 | PromiseLike<T10>\n    ]\n  ): AssetPromise<[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]>;\n\n  static all<T1, T2, T3, T4, T5, T6, T7, T8, T9>(\n    values: readonly [\n      T1 | PromiseLike<T1>,\n      T2 | PromiseLike<T2>,\n      T3 | PromiseLike<T3>,\n      T4 | PromiseLike<T4>,\n      T5 | PromiseLike<T5>,\n      T6 | PromiseLike<T6>,\n      T7 | PromiseLike<T7>,\n      T8 | PromiseLike<T8>,\n      T9 | PromiseLike<T9>\n    ]\n  ): AssetPromise<[T1, T2, T3, T4, T5, T6, T7, T8, T9]>;\n\n  static all<T1, T2, T3, T4, T5, T6, T7, T8>(\n    values: readonly [\n      T1 | PromiseLike<T1>,\n      T2 | PromiseLike<T2>,\n      T3 | PromiseLike<T3>,\n      T4 | PromiseLike<T4>,\n      T5 | PromiseLike<T5>,\n      T6 | PromiseLike<T6>,\n      T7 | PromiseLike<T7>,\n      T8 | PromiseLike<T8>\n    ]\n  ): AssetPromise<[T1, T2, T3, T4, T5, T6, T7, T8]>;\n\n  static all<T1, T2, T3, T4, T5, T6, T7>(\n    values: readonly [\n      T1 | PromiseLike<T1>,\n      T2 | PromiseLike<T2>,\n      T3 | PromiseLike<T3>,\n      T4 | PromiseLike<T4>,\n      T5 | PromiseLike<T5>,\n      T6 | PromiseLike<T6>,\n      T7 | PromiseLike<T7>\n    ]\n  ): AssetPromise<[T1, T2, T3, T4, T5, T6, T7]>;\n\n  static all<T1, T2, T3, T4, T5, T6>(\n    values: readonly [\n      T1 | PromiseLike<T1>,\n      T2 | PromiseLike<T2>,\n      T3 | PromiseLike<T3>,\n      T4 | PromiseLike<T4>,\n      T5 | PromiseLike<T5>,\n      T6 | PromiseLike<T6>\n    ]\n  ): AssetPromise<[T1, T2, T3, T4, T5, T6]>;\n\n  static all<T1, T2, T3, T4, T5>(\n    values: readonly [\n      T1 | PromiseLike<T1>,\n      T2 | PromiseLike<T2>,\n      T3 | PromiseLike<T3>,\n      T4 | PromiseLike<T4>,\n      T5 | PromiseLike<T5>\n    ]\n  ): AssetPromise<[T1, T2, T3, T4, T5]>;\n\n  static all<T1, T2, T3, T4>(\n    values: readonly [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>, T4 | PromiseLike<T4>]\n  ): AssetPromise<[T1, T2, T3, T4]>;\n\n  static all<T1, T2, T3>(\n    values: readonly [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>]\n  ): AssetPromise<[T1, T2, T3]>;\n\n  static all<T1, T2>(values: readonly [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>]): AssetPromise<[T1, T2]>;\n\n  static all<T>(values: readonly (T | PromiseLike<T>)[]): AssetPromise<T[]>;\n\n  /**\n   * Return a new resource Promise through the provided asset promise collection.\n   * The resolved of the new AssetPromise will be triggered when all the Promises in the provided set are completed.\n   * @param - AssetPromise Collection\n   * @returns AssetPromise\n   */\n  static all<T>(promises: T | PromiseLike<T>[]): AssetPromise<T[]> {\n    return new AssetPromise((resolve, reject, setProgress) => {\n      if (!Array.isArray(promises)) {\n        return resolve([promises]);\n      }\n\n      let completed = 0;\n      let total = promises.length;\n      let results = new Array<T>(total);\n\n      promises.forEach((value, index) => {\n        Promise.resolve(value)\n          .then((result) => {\n            results[index] = result;\n\n            completed += 1;\n            setProgress(completed / total);\n\n            if (completed == total) {\n              resolve(results);\n            }\n          })\n          .catch((err) => reject(err));\n      });\n    });\n  }\n\n  private _status: AssetPromiseStatus;\n  private _progress: number;\n  private _reject: (reason?: any) => void;\n  private _listeners: Set<PromiseNotifier>;\n\n  /**\n   * Current promise state.\n   */\n  get status(): AssetPromiseStatus {\n    return this._status;\n  }\n\n  /**\n   * Loading progress.\n   */\n  get progress(): number {\n    return this._progress;\n  }\n\n  /**\n   * Progress callback.\n   * @param callback - Progress callback\n   * @returns Asset Promise\n   */\n  onProgress(callback: (progress?: number) => any): AssetPromise<T> {\n    this._listeners.add(callback);\n    return this;\n  }\n\n  /**\n   * Cancel promise request.\n   * @returns Asset promise\n   */\n  cancel(): AssetPromise<T> {\n    if (this._status !== AssetPromiseStatus.Pending) {\n      return this;\n    }\n    this._reject(\"Promise Canceled\");\n    return this;\n  }\n\n  /**\n   * Create an asset loading Promise.\n   * @param executor - A callback used to initialize the promise. This callback is passed two arguments:\n   * a resolve callback used to resolve the promise with a value or the result of another promise,\n   * and a reject callback used to reject the promise with a provided reason or error.\n   * and a setProgress callback used to set promise progress with a percent.\n   */\n  constructor(\n    executor: (\n      resolve: (value?: T | PromiseLike<T>) => void,\n      reject?: (reason?: any) => void,\n      setProgress?: PromiseNotifier\n    ) => void\n  ) {\n    let newReject: (reason?: any) => void;\n\n    const setProgress = (progress: number) => {\n      if (progress <= this._progress) {\n        return;\n      }\n      this._progress = progress;\n\n      for (const listener of this._listeners) {\n        listener(progress);\n      }\n    };\n\n    super((resolve, reject) => {\n      newReject = (reason?: any) => {\n        // Add it to the micro task to avoid reporting an error when calling this directly.\n        Promise.resolve().then(() => {\n          this._status = AssetPromiseStatus.Failed;\n          reject(reason);\n        });\n      };\n      executor(\n        (value: T) => {\n          // Add it to the micro task to avoid reporting an error when calling this directly.\n          Promise.resolve().then(() => {\n            setProgress(1);\n            this._status = AssetPromiseStatus.Success;\n            resolve(value);\n          });\n        },\n        newReject,\n        (progress: number) => {\n          // Add it to the micro task to avoid reporting an error when calling this directly\n          Promise.resolve().then(() => {\n            setProgress(progress);\n          });\n        }\n      );\n    });\n    this._reject = newReject;\n    this._listeners = new Set();\n    this._progress = 0;\n    this._status = AssetPromiseStatus.Pending;\n  }\n}\n","import { Engine, EngineObject } from \"..\";\nimport { ObjectValues } from \"../base/Util\";\nimport { Utils } from \"../Utils\";\nimport { AssetPromise } from \"./AssetPromise\";\nimport { Loader } from \"./Loader\";\nimport { LoadItem } from \"./LoadItem\";\nimport { RefObject } from \"./RefObject\";\n\ntype EditorResourceItem = { virtualPath: string; path: string; type: string; id: string };\ntype EditorResourceConfig = Record<string, EditorResourceItem>;\n/**\n * ResourceManager\n */\nexport class ResourceManager {\n  /** Loader collection. */\n  private static _loaders: { [key: number]: Loader<any> } = {};\n  private static _extTypeMapping: { [key: string]: string } = {};\n\n  /**\n   * @internal\n   */\n  static _addLoader(type: string, loader: Loader<any>, extNames: string[]) {\n    this._loaders[type] = loader;\n    for (let i = 0, len = extNames.length; i < len; i++) {\n      this._extTypeMapping[extNames[i]] = type;\n    }\n  }\n\n  private static _getTypeByUrl(url: string): string {\n    const path = url.split(\"?\")[0];\n    return this._extTypeMapping[path.substring(path.lastIndexOf(\".\") + 1)];\n  }\n\n  /** The number of retries after failing to load assets. */\n  retryCount: number = 1;\n  /** Retry delay time after failed to load assets, in milliseconds. */\n  retryInterval: number = 0;\n  /** The default timeout period for loading assets, in milliseconds. */\n  timeout: number = Infinity;\n  /** @internal */\n  _objectPool: { [key: string]: any } = Object.create(null);\n  /** @internal */\n  _editorResourceConfig: EditorResourceConfig = Object.create(null);\n  /** @internal */\n  _virtualPathMap: Record<string, string> = Object.create(null);\n\n  /** Asset path pool, key is asset ID, value is asset path */\n  private _assetPool: { [key: number]: string } = Object.create(null);\n  /** Asset pool, the key is the asset path and the value is the asset. */\n  private _assetUrlPool: { [key: string]: Object } = Object.create(null);\n  /** Reference counted object pool, key is the object ID, and reference counted objects are put into this pool. */\n  private _refObjectPool: { [key: number]: RefObject } = Object.create(null);\n  /** Loading assets. */\n  private _loadingPromises: { [url: string]: AssetPromise<any> } = {};\n\n  /**\n   * Create a ResourceManager.\n   * @param engine - Engine to which the current ResourceManager belongs\n   */\n  constructor(public readonly engine: Engine) {}\n\n  /**\n   * Load asset asynchronously through the path.\n   * @param path - Path\n   * @returns Asset promise\n   */\n  load<T>(path: string): AssetPromise<T>;\n\n  /**\n   * Load asset collection asynchronously through urls.\n   * @param paths - Path collections\n   * @returns Asset Promise\n   */\n  load(paths: string[]): AssetPromise<Object[]>;\n\n  /**\n   * Load the asset asynchronously by asset item information.\n   * @param assetItem - AssetItem\n   * @returns AssetPromise\n   */\n  load<T>(assetItem: LoadItem): AssetPromise<T>;\n\n  /**\n   * Load the asset collection asynchronously by loading the information collection.\n   * @param assetItems - Asset collection\n   * @returns AssetPromise\n   */\n  load(assetItems: LoadItem[]): AssetPromise<Object[]>;\n\n  load<T>(assetInfo: string | LoadItem | (LoadItem | string)[]): AssetPromise<T | Object[]> {\n    // single item\n    if (!Array.isArray(assetInfo)) {\n      return this._loadSingleItem(assetInfo);\n    }\n    // multi items\n    const promises = assetInfo.map((item) => this._loadSingleItem<T>(item));\n    return AssetPromise.all(promises);\n  }\n\n  /**\n   * Cancel all assets that have not finished loading.\n   */\n  cancelNotLoaded(): void;\n\n  /**\n   * Cancel assets whose url has not finished loading.\n   * @param url - Resource url\n   */\n  cancelNotLoaded(url: string): void;\n\n  /**\n   * Cancel the incompletely loaded assets in urls.\n   * @param urls - Resource urls\n   */\n  cancelNotLoaded(urls: string[]): void;\n\n  cancelNotLoaded(url?: string | string[]): void {\n    if (!url) {\n      ObjectValues(this._loadingPromises).forEach((promise) => {\n        promise.cancel();\n      });\n    } else if (typeof url === \"string\") {\n      this._loadingPromises[url]?.cancel();\n    } else {\n      url.forEach((p) => {\n        this._loadingPromises[p]?.cancel();\n      });\n    }\n  }\n\n  /**\n   * Garbage collection will release resource objects managed by reference counting.\n   * @remarks The release principle is that it is not referenced by the components, including direct and indirect reference.\n   */\n  gc(): void {\n    this._gc(false);\n  }\n\n  /**\n   * Get asset url from instanceId.\n   * @param instanceId - Engine instance id\n   * @returns Asset url\n   */\n  getAssetPath(instanceId: number): string {\n    return this._assetPool[instanceId];\n  }\n\n  /**\n   * @beta Just for internal editor, not recommended for developers.\n   */\n  getResourceByRef<T>(ref: { refId: string; key?: string; isClone?: boolean }): Promise<T> {\n    const { refId, key, isClone } = ref;\n    const obj = this._objectPool[refId];\n    const promise = obj\n      ? Promise.resolve(obj)\n      : this.load<any>({ type: this._editorResourceConfig[refId].type, url: this._editorResourceConfig[refId].path });\n    return promise.then((res) => (key ? Utils._reflectGet(res, key) : res)).then((item) => (isClone ? item.clone() : item));\n  }\n\n  /**\n   * @internal\n   * @beta Just for internal editor, not recommended for developers.\n   */\n  initVirtualResources(config: EditorResourceItem[]): void {\n    config.forEach((element) => {\n      this._virtualPathMap[element.virtualPath] = element.path;\n      this._editorResourceConfig[element.id] = element;\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _addAsset(path: string, asset: EngineObject): void {\n    this._assetPool[asset.instanceId] = path;\n    this._assetUrlPool[path] = asset;\n  }\n\n  /**\n   * @internal\n   */\n  _deleteAsset(asset: EngineObject): void {\n    const id = asset.instanceId;\n    const path = this._assetPool[id];\n    if (path) {\n      delete this._assetPool[id];\n      delete this._assetUrlPool[path];\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _addRefObject(id: number, asset: RefObject): void {\n    this._refObjectPool[id] = asset;\n  }\n\n  /**\n   * @internal\n   */\n  _deleteRefObject(id: number): void {\n    delete this._refObjectPool[id];\n  }\n\n  /**\n   * @internal\n   */\n  _destroy(): void {\n    this.cancelNotLoaded();\n    this._gc(true);\n    this._assetPool = null;\n    this._assetUrlPool = null;\n    this._refObjectPool = null;\n    this._loadingPromises = null;\n  }\n\n  private _assignDefaultOptions(assetInfo: LoadItem): LoadItem | never {\n    assetInfo.type = assetInfo.type ?? ResourceManager._getTypeByUrl(assetInfo.url);\n    if (assetInfo.type === undefined) {\n      throw `asset type should be specified: ${assetInfo.url}`;\n    }\n    assetInfo.retryCount = assetInfo.retryCount ?? this.retryCount;\n    assetInfo.timeout = assetInfo.timeout ?? this.timeout;\n    assetInfo.retryInterval = assetInfo.retryInterval ?? this.retryInterval;\n    assetInfo.url = assetInfo.url ?? assetInfo.urls.join(\",\");\n    return assetInfo;\n  }\n\n  private _loadSingleItem<T>(item: LoadItem | string): AssetPromise<T> {\n    const info = this._assignDefaultOptions(typeof item === \"string\" ? { url: item } : item);\n    const infoUrl = info.url;\n    // check url mapping\n    const url = this._virtualPathMap[infoUrl] ? this._virtualPathMap[infoUrl] : infoUrl;\n    // has cache\n    if (this._assetUrlPool[url]) {\n      return new AssetPromise((resolve) => {\n        resolve(this._assetUrlPool[url] as T);\n      });\n    }\n    // loading\n    if (this._loadingPromises[url]) {\n      return this._loadingPromises[info.url];\n    }\n    const loader = ResourceManager._loaders[info.type];\n    if (!loader) {\n      throw `loader not found: ${info.type}`;\n    }\n    info.url = url;\n    const promise = loader.load(info, this);\n    this._loadingPromises[url] = promise;\n    promise\n      .then((res: EngineObject) => {\n        if (loader.useCache) this._addAsset(url, res);\n        if (this._loadingPromises) {\n          delete this._loadingPromises[url];\n        }\n      })\n      .catch((err: Error) => {\n        Promise.reject(err);\n        if (this._loadingPromises) {\n          delete this._loadingPromises[url];\n        }\n      });\n    return promise;\n  }\n\n  private _gc(forceDestroy: boolean): void {\n    const objects = ObjectValues(this._refObjectPool);\n    for (let i = 0, len = objects.length; i < len; i++) {\n      if (!objects[i].isGCIgnored || forceDestroy) {\n        objects[i].destroy();\n      }\n    }\n  }\n}\n\n/**\n * Declare ResourceLoader's decorator.\n * @param assetType - Type of asset\n * @param extnames - Name of file extension\n */\nexport function resourceLoader(assetType: string, extnames: string[], useCache: boolean = true) {\n  return <T extends Loader<any>>(Target: { new (useCache: boolean): T }) => {\n    const loader = new Target(useCache);\n    ResourceManager._addLoader(assetType, loader, extnames);\n  };\n}\n","import { EventDispatcher } from \"./EventDispatcher\";\n\nexport type Listener = ((e: Event) => any) & { once?: boolean };\n\n/** Event Object. * @class */\nexport class Event {\n  get propagationStopped(): boolean {\n    return this._propagationStopped;\n  }\n\n  get target(): EventDispatcher {\n    return this._target;\n  }\n\n  set target(t) {\n    this._target = t;\n  }\n\n  get timeStamp(): number {\n    return this._timeStamp;\n  }\n\n  get currentTarget(): EventDispatcher {\n    return this._currentTarget;\n  }\n\n  set currentTarget(t) {\n    this._currentTarget = t;\n  }\n\n  get bubbles(): boolean {\n    return this._bubbles;\n  }\n\n  get type(): string | number {\n    return this._type;\n  }\n\n  public data: any;\n\n  private _timeStamp: number;\n\n  private _target: EventDispatcher;\n\n  private _currentTarget: any;\n\n  private _bubbles: boolean;\n\n  private _propagationStopped: boolean;\n\n  private _type: string | number;\n\n  constructor(type: string | number, target: EventDispatcher = null, data: any = {}, bubbles: boolean = true) {\n    this._timeStamp = new Date().getTime();\n    this._target = target;\n    this.data = data;\n    this._currentTarget = null;\n    this._bubbles = bubbles;\n    this._propagationStopped = false;\n    this._type = type;\n  }\n\n  public stopPropagation(): void {\n    this._propagationStopped = true;\n  }\n}\n","/**\n * Clone mode.\n */\nexport enum CloneMode {\n  /** Ignore clone. */\n  Ignore,\n  /** Assignment clone. */\n  Assignment,\n  /** Shallow clone. */\n  Shallow,\n  /** Deep clone. */\n  Deep\n}\n","import { IClone } from \"@oasis-engine/design\";\nimport { CloneMode } from \"./enums/CloneMode\";\n\ntype TypeArray =\n  | Uint8Array\n  | Uint16Array\n  | Uint32Array\n  | Int8Array\n  | Int16Array\n  | Int32Array\n  | Float32Array\n  | Float64Array;\n\n/**\n * Property decorator, ignore the property when cloning.\n */\nexport function ignoreClone(target: Object, propertyKey: string): void {\n  CloneManager.registerCloneMode(target, propertyKey, CloneMode.Ignore);\n}\n\n/**\n * Property decorator, assign value to the property when cloning.\n *\n * @remarks\n * If it's a primitive type, the value will be copied.\n * If it's a class type, the reference will be copied.\n */\nexport function assignmentClone(target: Object, propertyKey: string): void {\n  CloneManager.registerCloneMode(target, propertyKey, CloneMode.Assignment);\n}\n\n/**\n * Property decorator, shallow clone the property when cloning.\n * After cloning, it will keep its own reference independent, and use the method of assignment to clone all its internal properties.\n * if the internal property is a primitive type, the value will be copied, if the internal property is a reference type, its reference address will be copied.。\n *\n * @remarks\n * Applicable to Object, Array, TypedArray and Class types.\n */\nexport function shallowClone(target: Object, propertyKey: string): void {\n  CloneManager.registerCloneMode(target, propertyKey, CloneMode.Shallow);\n}\n\n/**\n * Property decorator, deep clone the property when cloning.\n * After cloning, it will maintain its own reference independence, and all its internal deep properties will remain completely independent.\n *\n * @remarks\n * Applicable to Object, Array, TypedArray and Class types.\n * If Class is encountered during the deep cloning process, the custom cloning function of the object will be called first.\n * Custom cloning requires the object to implement the IClone interface.\n */\nexport function deepClone(target: Object, propertyKey: string): void {\n  CloneManager.registerCloneMode(target, propertyKey, CloneMode.Deep);\n}\n\n/**\n * @internal\n * Clone manager.\n */\nexport class CloneManager {\n  /** @internal */\n  static _subCloneModeMap = new Map<Object, Object>();\n  /** @internal */\n  static _cloneModeMap = new Map<Object, Object>();\n\n  private static _objectType = Object.getPrototypeOf(Object);\n\n  /**\n   * Register clone mode.\n   * @param target - Clone target\n   * @param propertyKey - Clone property name\n   * @param mode - Clone mode\n   */\n  static registerCloneMode(target: Object, propertyKey: string, mode: CloneMode): void {\n    let targetMap = CloneManager._subCloneModeMap.get(target.constructor);\n    if (!targetMap) {\n      targetMap = Object.create(null);\n      CloneManager._subCloneModeMap.set(target.constructor, targetMap);\n    }\n    targetMap[propertyKey] = mode;\n  }\n\n  /**\n   * Get the clone mode according to the prototype chain.\n   */\n  static getCloneMode(type: Function): Object {\n    let cloneModes = CloneManager._cloneModeMap.get(type);\n    if (!cloneModes) {\n      cloneModes = Object.create(null);\n      CloneManager._cloneModeMap.set(type, cloneModes);\n      const objectType = CloneManager._objectType;\n      const cloneModeMap = CloneManager._subCloneModeMap;\n      while (type !== objectType) {\n        const subCloneModes = cloneModeMap.get(type);\n        if (subCloneModes) {\n          Object.assign(cloneModes, subCloneModes);\n        }\n        type = Object.getPrototypeOf(type);\n      }\n    }\n    return cloneModes;\n  }\n\n  /**\n   * Deep clone the object.\n   * @param source - Clone source\n   * @param target - Clone target\n   */\n  static deepCloneObject(source: Object, target: Object): void {\n    const type = source.constructor;\n    switch (type) {\n      case Uint8Array:\n      case Uint16Array:\n      case Uint32Array:\n      case Int8Array:\n      case Int16Array:\n      case Int32Array:\n      case Float32Array:\n      case Float64Array:\n        // Type array clone.\n        (<TypeArray>target).set(<TypeArray>source);\n        break;\n      case Array:\n        // Array clone.\n        for (let i = 0, n = (<[]>source).length; i < n; i++) {\n          CloneManager._deepCloneObjectItem(source, target, i);\n        }\n        break;\n      default:\n        const customSource = <IClone>source;\n        if (customSource.clone && customSource.cloneTo) {\n          // Custom clone.\n          customSource.cloneTo(target);\n        } else {\n          // Object or other class not implements custom clone.\n          const keys = Object.keys(source);\n          for (let i = 0, n = keys.length; i < n; i++) {\n            CloneManager._deepCloneObjectItem(source, target, keys[i]);\n          }\n        }\n    }\n  }\n\n  private static _deepCloneObjectItem(source: object, target: object, k: number | string): void {\n    const sourceItem = source[k];\n    if (sourceItem instanceof Object) {\n      const itemType = (<Object>sourceItem).constructor;\n      switch (itemType) {\n        case Uint8Array:\n        case Uint16Array:\n        case Uint32Array:\n        case Int8Array:\n        case Int16Array:\n        case Int32Array:\n        case Float32Array:\n        case Float64Array:\n          // Type array clone.\n          const sourceTypeArrayItem = <TypeArray>sourceItem;\n          let targetTypeArrayItem = <TypeArray>target[k];\n          if (targetTypeArrayItem == null) {\n            target[k] = sourceTypeArrayItem.slice();\n          } else {\n            targetTypeArrayItem.set(sourceTypeArrayItem);\n          }\n          break;\n        case Array:\n          // Array clone.\n          const sourceArrayItem = <[]>sourceItem;\n          let targetArrayItem = <[]>target[k];\n          if (targetArrayItem == null) {\n            target[k] = new Array(sourceArrayItem.length);\n          } else {\n            targetArrayItem.length = sourceArrayItem.length;\n          }\n          CloneManager.deepCloneObject(sourceArrayItem, targetArrayItem);\n          break;\n        default:\n          if (sourceItem.clone && sourceItem.cloneTo) {\n            // Custom clone.\n            let sourceCustomItem = <IClone>sourceItem;\n            let targetCustomItem = <IClone>target[k];\n            if (targetCustomItem) {\n              sourceCustomItem.cloneTo(targetCustomItem);\n            } else {\n              target[k] = sourceCustomItem.clone();\n            }\n          } else {\n            // Object or other class not implements custom clone.\n            let targetItem = <Object>target[k];\n            targetItem == null && (target[k] = targetItem = new sourceItem.constructor());\n            CloneManager.deepCloneObject(sourceItem, targetItem);\n            break;\n          }\n      }\n    } else {\n      // Null or undefined and primitive type.\n      target[k] = sourceItem;\n    }\n  }\n}\n","import { ignoreClone } from \"../clone/CloneManager\";\nimport { Event } from \"./Event\";\n\n/**\n * EventDispatcher, which can be inherited as a base class.\n */\nexport class EventDispatcher {\n  @ignoreClone\n  private _evts = Object.create(null);\n  private _evtCount = 0;\n\n  /**\n   * Determine whether there is event listening.\n   * @param event - Event name\n   * @returns Returns whether there is a corresponding event\n   */\n  hasEvent(event: string): boolean {\n    return this._evts[event] != null;\n  }\n\n  /**\n   * Returns the names of all registered events.\n   * @returns All event names\n   */\n  eventNames(): string[] {\n    if (this._evtCount === 0) return [];\n    return Object.keys(this._evts);\n  }\n\n  /**\n   * Returns the number of listeners with the specified event name.\n   * @param event - Event name\n   * @returns The count of listeners\n   */\n  listenerCount(event: string): number {\n    const listeners = this._evts[event];\n\n    if (!listeners) return 0;\n    if (listeners.fn) return 1;\n    return listeners.length;\n  }\n\n  /**\n   * Dispatch the event with the specified event name.\n   * @param event - Event name\n   * @param data - Data\n   * @returns - Whether the dispatching is successful\n   */\n  dispatch(event: string, data?: any): boolean {\n    if (!this._evts[event]) {\n      return false;\n    }\n\n    const listeners = this._evts[event];\n\n    if (listeners.fn) {\n      if (listeners.once) this.removeEventListener(event, listeners.fn);\n      listeners.fn(data);\n    } else {\n      const l = listeners.length;\n      for (let i = 0; i < l; i++) {\n        if (listeners[i].once) this.removeEventListener(event, listeners[i].fn);\n        listeners[i].fn(data);\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Add a listener/\n   * @param event - Event name\n   * @param fn - Function\n   * @returns This\n   */\n  on(event: string, fn: Function): EventDispatcher {\n    return this.addEventListener(event, fn);\n  }\n\n  /**\n   * Add a one-time listener.\n   * @param event - Event name\n   * @param fn - Function\n   * @returns This\n   */\n  once(event: string, fn: Function): EventDispatcher {\n    return this.addEventListener(event, fn, true);\n  }\n\n  /**\n   * @deprecated Use `on/once` instead.\n   * Add a listener function with the specified event name.\n   * @param event - Event name\n   * @param fn - Function\n   * @param once - Is it a one-time listener\n   * @returns this\n   */\n  addEventListener(event: string, fn: Function, once?: boolean): EventDispatcher {\n    const listener = { fn, once };\n    const events = this._evts;\n    if (!events[event]) {\n      events[event] = listener;\n      this._evtCount++;\n    } else if (!events[event].fn) {\n      events[event].push(listener);\n    } else {\n      events[event] = [events[event], listener];\n    }\n    return this;\n  }\n\n  /**\n   * Remove the event listener(s) of the specified event name.\n   * @param event - Event name\n   * @param fn - Function, If is undefined, delete all corresponding event listeners.\n   */\n  off(event: string, fn?: Function): EventDispatcher {\n    if (!this._evts[event]) return this;\n    if (!fn) {\n      this._clearEvent(event);\n      return this;\n    }\n\n    const listeners = this._evts[event];\n\n    if (listeners.fn && listeners.fn === fn) {\n      this._clearEvent(event);\n    } else {\n      const index = listeners.indexOf(fn);\n      if (index > -1) {\n        const temp = listeners[listeners.length - 1];\n        listeners[index] = temp;\n        listeners.length--;\n        if (listeners.length === 1) {\n          this._evts[event] = listeners[0];\n        }\n      }\n    }\n    return this;\n  }\n\n  /**\n   * @deprecated Use `off` instead.\n   * Remove the event listener(s) of the specified event name.\n   * @param event - Event name\n   * @param fn - Function, If is undefined, delete all corresponding event listeners.\n   */\n  removeEventListener(event: string, fn?: Function): EventDispatcher {\n    return this.off(event, fn);\n  }\n\n  /**\n   * Remove all event listeners.\n   * @param event - Event name, delete all events if not passed\n   */\n  removeAllEventListeners(event?: string): void {\n    if (event) {\n      if (this._evts[event]) this._clearEvent(event);\n    } else {\n      this._evts = Object.create(null);\n      this._evtCount = 0;\n    }\n  }\n\n  /**\n   * @deprecated Use `dispatch` instead.\n   */\n  trigger(e: Event) {\n    this.dispatch(e.type as string, e.data);\n  }\n\n  private _clearEvent(event: string) {\n    if (--this._evtCount === 0) {\n      this._evts = Object.create(null);\n    } else {\n      delete this._evts[event];\n    }\n  }\n}\n","/**\n * @class\n * @private\n */\n/* tslint:disable */\nconst noop = (message?: any, ...optionalParams: any[]) => {};\nconst debug = console.log.bind(console);\nconst info = console.info.bind(console);\nconst warn = console.warn.bind(console);\nconst error = console.error.bind(console);\n\nexport const Logger = {\n  debug: noop,\n  info: noop,\n  warn: noop,\n  error: noop,\n  isEnabled: false,\n\n  /** Turn on log */\n  enable() {\n    this.debug = debug;\n    this.info = info;\n    this.warn = warn;\n    this.error = error;\n    this.isEnabled = true;\n  },\n\n  /** Turn off log */\n  disable() {\n    this.debug = noop;\n    this.info = noop;\n    this.warn = noop;\n    this.error = noop;\n    this.isEnabled = false;\n  }\n};\n","/**\n * Tools for calculating the time per frame.\n */\nexport class Time {\n  private _clock: { now: () => number };\n\n  private _timeScale: number;\n\n  private _deltaTime: number;\n\n  private _startTime: number;\n\n  private _lastTickTime: number;\n  /**\n   * Constructor of the Time.\n   */\n  constructor() {\n    this._clock = performance ? performance : Date;\n\n    this._timeScale = 1.0;\n    this._deltaTime = 0.0001;\n\n    const now = this._clock.now();\n    this._startTime = now;\n    this._lastTickTime = now;\n  }\n\n  reset() {\n    this._lastTickTime = this._clock.now();\n  }\n\n  /**\n   * Current Time\n   */\n  get nowTime(): number {\n    return this._clock.now();\n  }\n\n  /**\n   * Time between two ticks\n   */\n  get deltaTime(): number {\n    return this._deltaTime;\n  }\n\n  /**\n   * Scaled delta time.\n   */\n  get timeScale(): number {\n    return this._timeScale;\n  }\n  set timeScale(s) {\n    this._timeScale = s;\n  }\n\n  /**\n   * Unscaled delta time.\n   */\n  get unscaledDeltaTime(): number {\n    return this._deltaTime / this._timeScale;\n  }\n\n  /**\n   * The elapsed time, after the clock is initialized.\n   */\n  get timeSinceStartup(): number {\n    return this.nowTime - this._startTime;\n  }\n\n  /**\n   * Call every frame, update delta time and other data.\n   */\n  public tick(): void {\n    const now = this.nowTime;\n    this._deltaTime = (now - this._lastTickTime) * this._timeScale;\n    this._lastTickTime = now;\n  }\n}\n","import { ignoreClone } from \"../clone/CloneManager\";\nimport { Engine } from \"../Engine\";\n\n/**\n * EngineObject.\n */\nexport abstract class EngineObject {\n  private static _instanceIdCounter: number = 0;\n\n  /** Engine unique id. */\n  @ignoreClone\n  readonly instanceId: number = ++EngineObject._instanceIdCounter;\n\n  @ignoreClone\n  protected _engine: Engine;\n  protected _destroyed: boolean = false;\n\n  /**\n   * Get the engine which the object belongs.\n   */\n  get engine(): Engine {\n    return this._engine;\n  }\n\n  /**\n   * Whether it has been destroyed.\n   */\n  get destroyed(): boolean {\n    return this._destroyed;\n  }\n\n  constructor(engine: Engine) {\n    this._engine = engine;\n  }\n\n  /**\n   * Destroy self.\n   */\n  destroy(): void {\n    if (this._destroyed) return;\n\n    this._engine.resourceManager?._deleteAsset(this);\n    this._destroyed = true;\n  }\n}\n","/**\n * Data type enumeration\n */\nexport enum DataType {\n  /** Float */\n  FLOAT = 5126, // gl.FLOAT\n  /** Floating-point two-dimensional vector */\n  FLOAT_VEC2 = 35664, // gl.FLOAT_VEC2\n  /** Floating-point three-dimensional vector */\n  FLOAT_VEC3 = 35665, // gl.FLOAT_VEC3\n  /** Floating-point four-dimensional vector */\n  FLOAT_VEC4 = 35666, // gl.FLOAT_VEC4\n\n  /** Integer */\n  INT = 5124, // gl.INT\n  /** Integer two-dimensional vector */\n  INT_VEC2 = 35667, // gl.INT_VEC2\n  /** Integer three-dimensional vector */\n  INT_VEC3 = 35668, // gl.INT_VEC3\n  /** Integer four-dimensional vector */\n  INT_VEC4 = 35669, // gl.INT_VEC4\n\n  /** Boolean */\n  BOOL = 35670, // gl.BOOL\n  /** Boolean two-dimensional vector */\n  BOOL_VEC2 = 35671, // gl.BOOL_VEC2\n  /** Boolean three-dimensional vector */\n  BOOL_VEC3 = 35672, // gl.BOOL_VEC3\n  /** Boolean four-dimensional vector */\n  BOOL_VEC4 = 35673, // gl.BOOL_VEC4\n\n  /** Second-order matrix */\n  FLOAT_MAT2 = 35674, // gl.FLOAT_MAT2\n  /** Third-order matrix */\n  FLOAT_MAT3 = 35675, // gl.FLOAT_MAT3\n  /** Fourth-order matrix */\n  FLOAT_MAT4 = 35676, // gl.FLOAT_MAT4\n\n  /** Float array */\n  FLOAT_ARRAY = 35677, // gl.FLOAT_ARRAY\n  /** Floating-point two-dimensional vector array */\n  FLOAT_VEC2_ARRAY = 100000,\n  /** Floating-point three-dimensional vector array */\n  FLOAT_VEC3_ARRAY,\n  /** Floating-point four-dimensional vector array */\n  FLOAT_VEC4_ARRAY,\n\n  /** Integer array */\n  INT_ARRAY,\n  /** Integer two-dimensional vector array */\n  INT_VEC2_ARRAY,\n  /** Integer three-dimensional vector array */\n  INT_VEC3_ARRAY,\n  /** Integer four-dimensional vector array */\n  INT_VEC4_ARRAY,\n\n  /** Second-order matrix array */\n  FLOAT_MAT2_ARRAY,\n  /** Third-order matrix array */\n  FLOAT_MAT3_ARRAY,\n  /** Fourth-order matrix array */\n  FLOAT_MAT4_ARRAY,\n\n  /** 2D texture sampler array */\n  SAMPLER_2D_ARRAY,\n  /** Cube map texture sampler array */\n  SAMPLER_CUBE_ARRAY,\n\n  /** 2D sampler */\n  SAMPLER_2D = 35678, // gl.SAMPLER_2D\n  /** Cube map Texture sampler */\n  SAMPLER_CUBE = 35680, // gl.SAMPLER_CUBE\n\n  /** Byte */\n  BYTE = 5120, // gl.BYTE\n  /** Unsigned byte */\n  UNSIGNED_BYTE = 5121, // gl.UNSIGNED_BYTE\n  /** Short */\n  SHORT = 5122, // gl.SHORT\n  /** Unsigned short */\n  UNSIGNED_SHORT = 5123, // gl.UNSIGNED_SHORT\n  /** Unsigned int */\n  UNSIGNED_INT = 5125 // gl.UNSIGNED_INT\n}\n\n/**\n * GL Capabilities\n * Some capabilities can be smoothed out by extension, and some capabilities must use WebGL 2.0.\n * */\nexport enum GLCapabilityType {\n  shaderVertexID = \"shaderVertexID\",\n  standardDerivatives = \"OES_standard_derivatives\",\n  shaderTextureLod = \"EXT_shader_texture_lod\",\n  elementIndexUint = \"OES_element_index_uint\",\n  depthTexture = \"WEBGL_depth_texture\",\n  drawBuffers = \"WEBGL_draw_buffers\",\n  vertexArrayObject = \"OES_vertex_array_object\",\n  instancedArrays = \"ANGLE_instanced_arrays\",\n  multipleSample = \"multipleSampleOnlySupportedInWebGL2\",\n  textureFloat = \"OES_texture_float\",\n  textureFloatLinear = \"OES_texture_float_linear\",\n  textureHalfFloat = \"OES_texture_half_float\",\n  textureHalfFloatLinear = \"OES_texture_half_float_linear\",\n  WEBGL_colorBufferFloat = \"WEBGL_color_buffer_float\",\n  colorBufferFloat = \"EXT_color_buffer_float\",\n  colorBufferHalfFloat = \"EXT_color_buffer_half_float\",\n  textureFilterAnisotropic = \"EXT_texture_filter_anisotropic\",\n  blendMinMax = \"EXT_blend_minmax\",\n\n  astc = \"WEBGL_compressed_texture_astc\",\n  astc_webkit = \"WEBKIT_WEBGL_compressed_texture_astc\",\n  etc = \"WEBGL_compressed_texture_etc\",\n  etc_webkit = \"WEBKIT_WEBGL_compressed_texture_etc\",\n  etc1 = \"WEBGL_compressed_texture_etc1\",\n  etc1_webkit = \"WEBKIT_WEBGL_compressed_texture_etc1\",\n  pvrtc = \"WEBGL_compressed_texture_pvrtc\",\n  pvrtc_webkit = \"WEBKIT_WEBGL_compressed_texture_pvrtc\",\n  s3tc = \"WEBGL_compressed_texture_s3tc\",\n  s3tc_webkit = \"WEBKIT_WEBGL_compressed_texture_s3tc\"\n  // atc = \"WEBGL_compressed_texture_atc\",\n  // s3tc_srgb = \"WEBGL_compressed_texture_s3tc_srgb\"\n}\n\nexport type TypedArray =\n  | Int8Array\n  | Uint8Array\n  | Int16Array\n  | Uint16Array\n  | Int32Array\n  | Uint32Array\n  | Uint8ClampedArray\n  | Float32Array\n  | Float64Array;\n","/**\n * High-performance unordered array, delete uses exchange method to improve performance, internal capacity only increases.\n */\nexport class DisorderedArray<T> {\n  _elements: T[];\n\n  length: number = 0;\n\n  constructor(count: number = 0) {\n    this._elements = new Array<T>(count);\n  }\n\n  add(element: T): void {\n    if (this.length === this._elements.length) this._elements.push(element);\n    else this._elements[this.length] = element;\n    this.length++;\n  }\n\n  delete(element: T): void {\n    //TODO: It can be optimized for custom binary search and other algorithms, currently this._elements>=this.length wastes performance.\n    const index = this._elements.indexOf(element);\n    this.deleteByIndex(index);\n  }\n\n  get(index: number): T {\n    if (index >= this.length) {\n      throw \"Index is out of range.\";\n    }\n    return this._elements[index];\n  }\n\n  /**\n   *\n   * @param index\n   * @returns The replaced item is used to reset its index.\n   */\n  deleteByIndex(index: number): T {\n    var elements: T[] = this._elements;\n    let end: T = null;\n    const lastIndex = this.length - 1;\n    if (index !== lastIndex) {\n      end = elements[lastIndex];\n      elements[index] = end;\n    }\n    this.length--;\n    return end;\n  }\n\n  garbageCollection(): void {\n    this._elements.length = this.length;\n  }\n}\n","import { ShaderMacro } from \"./ShaderMacro\";\n\n/**\n * Shader macro collection.\n * @internal\n */\nexport class ShaderMacroCollection {\n  /**\n   * Union of two macro collection.\n   * @param left - input macro collection\n   * @param right - input macro collection\n   * @param out - union output macro collection\n   */\n  static unionCollection(left: ShaderMacroCollection, right: ShaderMacroCollection, out: ShaderMacroCollection): void {\n    const outMask = out._mask;\n    let minSize: number, maxSize: number;\n    let minMask: number[], maxMask: number[];\n    if (left._length < right._length) {\n      minSize = left._length;\n      maxSize = right._length;\n      minMask = left._mask;\n      maxMask = right._mask;\n    } else {\n      minSize = right._length;\n      maxSize = left._length;\n      minMask = right._mask;\n      maxMask = left._mask;\n    }\n\n    let i = 0;\n    outMask.length < maxSize && (outMask.length = maxSize);\n    for (; i < minSize; i++) {\n      outMask[i] = minMask[i] | maxMask[i];\n    }\n    for (; i < maxSize; i++) {\n      outMask[i] = maxMask[i];\n    }\n    out._length = maxSize;\n  }\n\n  /** @internal */\n  _mask: number[] = [];\n  /** @internal */\n  _length: number = 0;\n\n  /**\n   * Enable one macro in this macro collection.\n   * @param macro - ShaderMacro\n   */\n  enable(macro: ShaderMacro): void {\n    const index = macro._maskIndex;\n    const size = index + 1;\n    const mask = this._mask;\n    let maskStart = this._length; // must from this._length because this._length maybe less than mask.length and have dirty data should clear.\n    if (maskStart < size) {\n      mask.length < size && (mask.length = size); // mask.length maybe small than size,maybe not.\n      for (; maskStart < index; maskStart++) {\n        mask[maskStart] = 0;\n      }\n      mask[index] = macro._maskValue;\n      this._length = size;\n    } else {\n      mask[index] |= macro._maskValue;\n    }\n  }\n\n  /**\n   * Disable one macro in this macro collection.\n   * @param macro - ShaderMacro\n   */\n  disable(macro: ShaderMacro): void {\n    const index = macro._maskIndex;\n    const mask = this._mask;\n    const endIndex = this._length - 1;\n    if (index > endIndex) {\n      return;\n    }\n    const newValue = mask[index] & ~macro._maskValue;\n    if (index == endIndex && newValue === 0) {\n      this._length--;\n    } else {\n      mask[index] = newValue;\n    }\n  }\n\n  /**\n   * Union of this and other macro collection.\n   * @param macroCollection - macro collection\n   */\n  unionCollection(macroCollection: ShaderMacroCollection): void {\n    const addMask = macroCollection._mask;\n    const addSize = macroCollection._length;\n    const mask = this._mask;\n    const maskSize = this._length;\n    if (maskSize < addSize) {\n      mask.length < addSize && (mask.length = addSize);\n      let i = 0;\n      for (; i < maskSize; i++) {\n        mask[i] |= addMask[i];\n      }\n      for (; i < addSize; i++) {\n        mask[i] = addMask[i];\n      }\n      this._length = addSize;\n    } else {\n      for (let i = 0; i < addSize; i++) {\n        mask[i] |= addMask[i];\n      }\n    }\n  }\n\n  /**\n   * Complementarity of this and other macro collection.\n   * @param macroCollection - macro collection\n   */\n  complementaryCollection(macroCollection: ShaderMacroCollection): void {\n    const removeMask = macroCollection._mask;\n    const mask = this._mask;\n    let endIndex = this._length - 1;\n    let i = Math.min(macroCollection._length - 1, endIndex);\n    for (; i >= 0; i--) {\n      const newValue = mask[i] & ~removeMask[i];\n      if (i == endIndex && newValue === 0) {\n        endIndex--;\n        this._length--;\n      } else {\n        mask[i] = newValue;\n      }\n    }\n  }\n\n  /**\n   * Intersection of this and other macro collection.\n   * @param macroCollection - macro collection\n   */\n  intersectionCollection(macroCollection: ShaderMacroCollection): void {\n    const unionMask = macroCollection._mask;\n    const mask = this._mask;\n    for (let i = this._length - 1; i >= 0; i--) {\n      const value = mask[i] & unionMask[i];\n      if (value == 0 && i == this._length - 1) {\n        this._length--;\n      } else {\n        mask[i] = value;\n      }\n    }\n  }\n\n  /**\n   * Whether macro is enabled in this macro collection.\n   * @param macro - ShaderMacro\n   */\n  isEnable(macro: ShaderMacro): boolean {\n    const index = macro._maskIndex;\n    if (index >= this._length) {\n      return false;\n    }\n    return (this._mask[index] & macro._maskValue) !== 0;\n  }\n\n  /**\n   * Clear this macro collection.\n   */\n  clear(): void {\n    this._length = 0;\n  }\n}\n","import { Vector3 } from \"@oasis-engine/math\";\nimport { Camera } from \"./Camera\";\nimport { Component } from \"./Component\";\nimport { DisorderedArray } from \"./DisorderedArray\";\nimport { Renderer } from \"./Renderer\";\nimport { RenderContext } from \"./RenderPipeline/RenderContext\";\nimport { Script } from \"./Script\";\nimport { ShaderMacroCollection } from \"./shader/ShaderMacroCollection\";\n\n/**\n * The manager of the components.\n */\nexport class ComponentsManager {\n  private static _tempVector0 = new Vector3();\n  private static _tempVector1 = new Vector3();\n\n  // Script\n  private _onStartScripts: DisorderedArray<Script> = new DisorderedArray();\n  private _onUpdateScripts: DisorderedArray<Script> = new DisorderedArray();\n  private _onLateUpdateScripts: DisorderedArray<Script> = new DisorderedArray();\n  private _onPhysicsUpdateScripts: DisorderedArray<Script> = new DisorderedArray();\n  private _disableScripts: Script[] = [];\n  private _destroyScripts: Script[] = [];\n\n  // Animation\n  private _onUpdateAnimations: DisorderedArray<Component> = new DisorderedArray();\n\n  // Render\n  private _renderers: DisorderedArray<Renderer> = new DisorderedArray();\n  private _onUpdateRenderers: DisorderedArray<Renderer> = new DisorderedArray();\n\n  // Delay dispose active/inActive Pool\n  private _componentsContainerPool: Component[][] = [];\n\n  addRenderer(renderer: Renderer) {\n    renderer._rendererIndex = this._renderers.length;\n    this._renderers.add(renderer);\n  }\n\n  removeRenderer(renderer: Renderer) {\n    const replaced = this._renderers.deleteByIndex(renderer._rendererIndex);\n    replaced && (replaced._rendererIndex = renderer._rendererIndex);\n    renderer._rendererIndex = -1;\n  }\n\n  addOnStartScript(script: Script) {\n    script._onStartIndex = this._onStartScripts.length;\n    this._onStartScripts.add(script);\n  }\n\n  removeOnStartScript(script: Script): void {\n    const replaced = this._onStartScripts.deleteByIndex(script._onStartIndex);\n    replaced && (replaced._onStartIndex = script._onStartIndex);\n    script._onStartIndex = -1;\n  }\n\n  addOnUpdateScript(script: Script) {\n    script._onUpdateIndex = this._onUpdateScripts.length;\n    this._onUpdateScripts.add(script);\n  }\n\n  removeOnUpdateScript(script: Script): void {\n    const replaced = this._onUpdateScripts.deleteByIndex(script._onUpdateIndex);\n    replaced && (replaced._onUpdateIndex = script._onUpdateIndex);\n    script._onUpdateIndex = -1;\n  }\n\n  addOnLateUpdateScript(script: Script): void {\n    script._onLateUpdateIndex = this._onLateUpdateScripts.length;\n    this._onLateUpdateScripts.add(script);\n  }\n\n  removeOnLateUpdateScript(script: Script): void {\n    const replaced = this._onLateUpdateScripts.deleteByIndex(script._onLateUpdateIndex);\n    replaced && (replaced._onLateUpdateIndex = script._onLateUpdateIndex);\n    script._onLateUpdateIndex = -1;\n  }\n\n  addOnPhysicsUpdateScript(script: Script): void {\n    script._onPhysicsUpdateIndex = this._onPhysicsUpdateScripts.length;\n    this._onPhysicsUpdateScripts.add(script);\n  }\n\n  removeOnPhysicsUpdateScript(script: Script): void {\n    const replaced = this._onPhysicsUpdateScripts.deleteByIndex(script._onPhysicsUpdateIndex);\n    replaced && (replaced._onPhysicsUpdateIndex = script._onPhysicsUpdateIndex);\n    script._onPhysicsUpdateIndex = -1;\n  }\n\n  addOnUpdateAnimations(animation: Component): void {\n    //@ts-ignore\n    animation._onUpdateIndex = this._onUpdateAnimations.length;\n    this._onUpdateAnimations.add(animation);\n  }\n\n  removeOnUpdateAnimations(animation: Component): void {\n    //@ts-ignore\n    const replaced = this._onUpdateAnimations.deleteByIndex(animation._onUpdateIndex);\n    //@ts-ignore\n    replaced && (replaced._onUpdateIndex = animation._onUpdateIndex);\n    //@ts-ignore\n    animation._onUpdateIndex = -1;\n  }\n\n  addOnUpdateRenderers(renderer: Renderer): void {\n    renderer._onUpdateIndex = this._onUpdateRenderers.length;\n    this._onUpdateRenderers.add(renderer);\n  }\n\n  removeOnUpdateRenderers(renderer: Renderer): void {\n    const replaced = this._onUpdateRenderers.deleteByIndex(renderer._onUpdateIndex);\n    replaced && (replaced._onUpdateIndex = renderer._onUpdateIndex);\n    renderer._onUpdateIndex = -1;\n  }\n\n  addDisableScript(component: Script): void {\n    this._disableScripts.push(component);\n  }\n\n  addDestroyScript(component: Script): void {\n    this._destroyScripts.push(component);\n  }\n\n  callScriptOnStart(): void {\n    const onStartScripts = this._onStartScripts;\n    if (onStartScripts.length > 0) {\n      const elements = onStartScripts._elements;\n      // The 'onStartScripts.length' maybe add if you add some Script with addComponent() in some Script's onStart()\n      for (let i = 0; i < onStartScripts.length; i++) {\n        const script = elements[i];\n        if (!script._waitHandlingInValid) {\n          script._started = true;\n          script._onStartIndex = -1;\n          script.onStart();\n        }\n      }\n      onStartScripts.length = 0;\n    }\n  }\n\n  callScriptOnUpdate(deltaTime: number): void {\n    const elements = this._onUpdateScripts._elements;\n    for (let i = this._onUpdateScripts.length - 1; i >= 0; --i) {\n      const element = elements[i];\n      if (!element._waitHandlingInValid && element._started) {\n        element.onUpdate(deltaTime);\n      }\n    }\n  }\n\n  callScriptOnLateUpdate(deltaTime: number): void {\n    const elements = this._onLateUpdateScripts._elements;\n    for (let i = this._onLateUpdateScripts.length - 1; i >= 0; --i) {\n      const element = elements[i];\n      if (!element._waitHandlingInValid && element._started) {\n        element.onLateUpdate(deltaTime);\n      }\n    }\n  }\n\n  callScriptOnPhysicsUpdate(): void {\n    const elements = this._onPhysicsUpdateScripts._elements;\n    for (let i = this._onPhysicsUpdateScripts.length - 1; i >= 0; --i) {\n      const element = elements[i];\n      if (!element._waitHandlingInValid && element._started) {\n        element.onPhysicsUpdate();\n      }\n    }\n  }\n\n  callAnimationUpdate(deltaTime: number): void {\n    const elements = this._onUpdateAnimations._elements;\n    for (let i = this._onUpdateAnimations.length - 1; i >= 0; --i) {\n      //@ts-ignore\n      elements[i].update(deltaTime);\n    }\n  }\n\n  callRendererOnUpdate(deltaTime: number): void {\n    const elements = this._onUpdateRenderers._elements;\n    for (let i = this._onUpdateRenderers.length - 1; i >= 0; --i) {\n      elements[i].update(deltaTime);\n    }\n  }\n\n  callRender(context: RenderContext): void {\n    const camera = context._camera;\n    const elements = this._renderers._elements;\n    for (let i = this._renderers.length - 1; i >= 0; --i) {\n      const element = elements[i];\n\n      // filter by camera culling mask.\n      if (!(camera.cullingMask & element._entity.layer)) {\n        continue;\n      }\n\n      // filter by camera frustum.\n      if (camera.enableFrustumCulling) {\n        element.isCulled = !camera._frustum.intersectsBox(element.bounds);\n        if (element.isCulled) {\n          continue;\n        }\n      }\n\n      const transform = camera.entity.transform;\n      const position = transform.worldPosition;\n      const center = element.bounds.getCenter(ComponentsManager._tempVector0);\n      if (camera.isOrthographic) {\n        const forward = transform.getWorldForward(ComponentsManager._tempVector1);\n        Vector3.subtract(center, position, center);\n        element._distanceForSort = Vector3.dot(center, forward);\n      } else {\n        element._distanceForSort = Vector3.distanceSquared(center, position);\n      }\n\n      element._updateShaderData(context);\n\n      element._render(camera);\n\n      // union camera global macro and renderer macro.\n      ShaderMacroCollection.unionCollection(\n        camera._globalShaderMacro,\n        element.shaderData._macroCollection,\n        element._globalShaderMacro\n      );\n    }\n  }\n\n  handlingInvalidScripts(): void {\n    const { _disableScripts: disableScripts, _destroyScripts: destroyScripts } = this;\n\n    let length = disableScripts.length;\n    if (length > 0) {\n      for (let i = length - 1; i >= 0; i--) {\n        const disableScript = disableScripts[i];\n        disableScript._waitHandlingInValid && disableScript._handlingInValid();\n      }\n      disableScripts.length = 0;\n    }\n\n    length = destroyScripts.length;\n    if (length > 0) {\n      for (let i = length - 1; i >= 0; i--) {\n        destroyScripts[i].onDestroy();\n      }\n      destroyScripts.length = 0;\n    }\n  }\n\n  callCameraOnBeginRender(camera: Camera): void {\n    const scripts = camera.entity._scripts;\n    for (let i = scripts.length - 1; i >= 0; --i) {\n      const script = scripts.get(i);\n      script._waitHandlingInValid || script.onBeginRender(camera);\n    }\n  }\n\n  callCameraOnEndRender(camera: Camera): void {\n    const scripts = camera.entity._scripts;\n    for (let i = scripts.length - 1; i >= 0; --i) {\n      const script = scripts.get(i);\n      script._waitHandlingInValid || script.onEndRender(camera);\n    }\n  }\n\n  getActiveChangedTempList(): Component[] {\n    return this._componentsContainerPool.length ? this._componentsContainerPool.pop() : [];\n  }\n\n  putActiveChangedTempList(componentContainer: Component[]): void {\n    componentContainer.length = 0;\n    this._componentsContainerPool.push(componentContainer);\n  }\n}\n","import { Component } from \"../Component\";\nimport { CloneManager } from \"./CloneManager\";\nimport { CloneMode } from \"./enums/CloneMode\";\n\n/**\n * Custom clone interface.\n */\nexport interface ICustomClone {\n  /**\n   * @internal\n   */\n  _cloneTo(target: ICustomClone): void;\n}\n\nexport class ComponentCloner {\n  /**\n   * Clone component.\n   * @param source - Clone source\n   * @param target - Clone target\n   */\n  static cloneComponent(source: Component, target: Component): void {\n    const cloneModes = CloneManager.getCloneMode(source.constructor);\n    const keys = Object.keys(source);\n    for (let i = 0, n = keys.length; i < n; i++) {\n      const k = keys[i];\n      const cloneMode = cloneModes[k];\n      switch (cloneMode) {\n        case undefined:\n        case CloneMode.Assignment:\n          target[k] = source[k];\n          break;\n        case CloneMode.Shallow:\n          const sourcePropS: Object = source[k];\n          if (sourcePropS instanceof Object) {\n            let tarProp = <Object>target[k];\n            tarProp == null && (tarProp = target[k] = sourcePropS.constructor());\n            Object.assign(tarProp, sourcePropS);\n          } else {\n            // Null or undefined and primitive type.\n            target[k] = sourcePropS;\n          }\n          break;\n        case CloneMode.Deep:\n          const sourcePropD: Object = source[k];\n          if (sourcePropD instanceof Object) {\n            let tarProp = <Object>target[k];\n            tarProp == null && (tarProp = target[k] = sourcePropD.constructor());\n            CloneManager.deepCloneObject(sourcePropD, tarProp);\n          } else {\n            // Null or undefined and primitive type.\n            target[k] = sourcePropD;\n          }\n          break;\n      }\n    }\n    if ((<any>source)._cloneTo) {\n      (<any>source)._cloneTo(target);\n    }\n  }\n}\n","import { Component } from \"./Component\";\nimport { Entity } from \"./Entity\";\n\ntype ComponentConstructor = new (entity: Entity) => Component;\n\n/**\n * Used for component dependency registration.\n */\nexport class ComponentsDependencies {\n  /**\n   * @internal\n   */\n  private static _dependenciesMap = new Map<ComponentConstructor, ComponentConstructor[]>();\n  private static _invDependenciesMap = new Map<ComponentConstructor, ComponentConstructor[]>();\n\n  /**\n   * @internal\n   */\n  static _register(currentComponent: ComponentConstructor, dependentComponent: ComponentConstructor): void {\n    this._addDependency(currentComponent, dependentComponent, this._dependenciesMap);\n    this._addDependency(dependentComponent, currentComponent, this._invDependenciesMap);\n  }\n\n  /**\n   * @internal\n   */\n  static _addCheck(entity: Entity, type: ComponentConstructor): void {\n    // Check if there are dependent components.\n    const dependentComponents = ComponentsDependencies._dependenciesMap.get(type);\n    if (dependentComponents) {\n      for (let i = 0, n = dependentComponents.length; i < n; i++) {\n        const dependentComponent = dependentComponents[i];\n        if (!entity.getComponent(dependentComponent)) {\n          entity.addComponent(dependentComponent);\n        }\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static _removeCheck(entity: Entity, type: ComponentConstructor): void {\n    const invDependencies = ComponentsDependencies._invDependenciesMap.get(type);\n    if (invDependencies) {\n      for (let i = 0, len = invDependencies.length; i < len; i++) {\n        if (entity.getComponent(invDependencies[i])) {\n          throw `you should remove ${invDependencies[i]} before adding ${type}`;\n        }\n      }\n    }\n  }\n\n  private static _addDependency(\n    currentComponent: ComponentConstructor,\n    dependentComponent: ComponentConstructor,\n    map: Map<ComponentConstructor, ComponentConstructor[]>\n  ): void {\n    let components = map.get(currentComponent);\n    if (!components) {\n      components = [];\n      map.set(currentComponent, components);\n    }\n    if (components.indexOf(dependentComponent) === -1) {\n      components.push(dependentComponent);\n    }\n  }\n\n  private constructor() {}\n}\n\n/**\n * Dependent components, automatically added if they do not exist.\n * @param components -  Dependent components\n */\nexport function dependentComponents(...components: ComponentConstructor[]) {\n  return function <T extends ComponentConstructor>(target: T): void {\n    components.forEach((component) => ComponentsDependencies._register(target, component));\n  };\n}\n","/**\n * Layer, used for bit operations.\n */\nexport enum Layer {\n  /** Layer 0. */\n  Layer0 = 0x1,\n  /** Layer 1. */\n  Layer1 = 0x2,\n  /** Layer 2. */\n  Layer2 = 0x4,\n  /** Layer 3. */\n  Layer3 = 0x8,\n  /** Layer 4. */\n  Layer4 = 0x10,\n  /** Layer 5. */\n  Layer5 = 0x20,\n  /** Layer 6. */\n  Layer6 = 0x40,\n  /** Layer 7. */\n  Layer7 = 0x80,\n  /** Layer 8. */\n  Layer8 = 0x100,\n  /** Layer 9. */\n  Layer9 = 0x200,\n  /** Layer 10. */\n  Layer10 = 0x400,\n  /** Layer 11. */\n  Layer11 = 0x800,\n  /** Layer 12. */\n  Layer12 = 0x1000,\n  /** Layer 13. */\n  Layer13 = 0x2000,\n  /** Layer 14. */\n  Layer14 = 0x4000,\n  /** Layer 15. */\n  Layer15 = 0x8000,\n  /** Layer 16. */\n  Layer16 = 0x10000,\n  /** Layer 17. */\n  Layer17 = 0x20000,\n  /** Layer 18. */\n  Layer18 = 0x40000,\n  /** Layer 19. */\n  Layer19 = 0x80000,\n  /** Layer 20. */\n  Layer20 = 0x100000,\n  /** Layer 21. */\n  Layer21 = 0x200000,\n  /** Layer 22. */\n  Layer22 = 0x400000,\n  /** Layer 23. */\n  Layer23 = 0x800000,\n  /** Layer 24. */\n  Layer24 = 0x1000000,\n  /** Layer 25. */\n  Layer25 = 0x2000000,\n  /** Layer 26. */\n  Layer26 = 0x4000000,\n  /** Layer 27. */\n  Layer27 = 0x8000000,\n  /** Layer 28. */\n  Layer28 = 0x10000000,\n  /** Layer 29. */\n  Layer29 = 0x20000000,\n  /** Layer 30. */\n  Layer30 = 0x40000000,\n  /** Layer 31. */\n  Layer31 = 0x80000000,\n  /** All layers. */\n  Everything = 0xffffffff,\n  /** None layer. */\n  Nothing = 0x0\n}\n","import { removeFromArray } from \"./base/Util\";\nimport { UpdateFlagManager } from \"./UpdateFlagManager\";\n\n/**\n * Used to update tags.\n */\nexport abstract class UpdateFlag {\n  /** @internal */\n  _flagManagers: UpdateFlagManager[] = [];\n\n  /**\n   * Dispatch.\n   * @param param - Parameter\n   */\n  abstract dispatch(param?: Object): void;\n\n  /**\n   * Clear.\n   */\n  clearFromManagers(): void {\n    this._removeFromManagers();\n    this._flagManagers.length = 0;\n  }\n\n  /**\n   * Destroy.\n   */\n  destroy(): void {\n    this._removeFromManagers();\n    this._flagManagers = null;\n  }\n\n  private _removeFromManagers(): void {\n    const flagManagers = this._flagManagers;\n    for (let i = 0, n = flagManagers.length; i < n; i++) {\n      removeFromArray(flagManagers[i]._updateFlags, this);\n    }\n  }\n}\n","import { UpdateFlag } from \"./UpdateFlag\";\n\n/**\n * Used to update tags.\n */\nexport class BoolUpdateFlag extends UpdateFlag {\n  /** Flag. */\n  flag = true;\n\n  /**\n   * @inheritdoc\n   */\n  dispatch(): void {\n    this.flag = true;\n  }\n}\n","import { EngineObject } from \"./base\";\nimport { assignmentClone, ignoreClone } from \"./clone/CloneManager\";\nimport { Entity } from \"./Entity\";\nimport { Scene } from \"./Scene\";\n\n/**\n * The base class of the components.\n */\nexport abstract class Component extends EngineObject {\n  /** @internal */\n  @ignoreClone\n  _entity: Entity;\n  /** @internal */\n  @ignoreClone\n  _awoken: boolean = false;\n  /** @internal */\n  @ignoreClone\n  _destroyed: boolean = false;\n\n  @ignoreClone\n  private _phasedActive: boolean = false;\n  @assignmentClone\n  private _enabled: boolean = true;\n\n  /**\n   * Indicates whether the component is enabled.\n   */\n  get enabled(): boolean {\n    return this._enabled;\n  }\n\n  set enabled(value: boolean) {\n    if (value !== this._enabled) {\n      this._enabled = value;\n      if (this._entity.isActiveInHierarchy) {\n        if (value) {\n          this._phasedActive = true;\n          this._onEnable();\n        } else {\n          this._phasedActive = false;\n          this._onDisable();\n        }\n      }\n    }\n  }\n\n  /**\n   * Indicates whether the component is destroyed.\n   */\n  get destroyed(): boolean {\n    return this._destroyed;\n  }\n\n  /**\n   * The entity which the component belongs to.\n   */\n  get entity(): Entity {\n    return this._entity;\n  }\n\n  /**\n   * The scene which the component's entity belongs to.\n   */\n  get scene(): Scene {\n    return this._entity.scene;\n  }\n\n  constructor(entity: Entity) {\n    super(entity.engine);\n    this._entity = entity;\n  }\n\n  /**\n   * Destroy this instance.\n   */\n  destroy(): void {\n    if (this._destroyed) {\n      return;\n    }\n    this._entity._removeComponent(this);\n    if (this._entity.isActiveInHierarchy) {\n      this._enabled && this._onDisable();\n    }\n    this._destroyed = true;\n    this._onDestroy();\n  }\n\n  /**\n   * @internal\n   */\n  _onAwake(): void {}\n\n  /**\n   * @internal\n   */\n  _onEnable(): void {}\n\n  /**\n   * @internal\n   */\n  _onDisable(): void {}\n\n  /**\n   * @internal\n   */\n  _onDestroy(): void {}\n\n  /**\n   * @internal\n   */\n  _setActive(value: boolean): void {\n    const entity = this._entity;\n    if (value) {\n      // Awake condition is un awake && current entity is active in hierarchy\n      if (!this._awoken && entity._isActiveInHierarchy) {\n        this._awoken = true;\n        this._onAwake();\n      }\n      // Developer maybe do `isActive = false` in `onAwake` method\n      // Enable condition is phased active state is false && current compoment is active in hierarchy\n      if (!this._phasedActive && entity._isActiveInHierarchy && this._enabled) {\n        this._phasedActive = true;\n        this._onEnable();\n      }\n    } else {\n      // Disable condition is phased active state is true && current compoment is inActive in hierarchy\n      if (this._phasedActive && !(entity._isActiveInHierarchy && this._enabled)) {\n        this._phasedActive = false;\n        this._onDisable();\n      }\n    }\n  }\n}\n","import { UpdateFlag } from \"./UpdateFlag\";\n\n/**\n * Used to update tags.\n */\nexport class ListenerUpdateFlag extends UpdateFlag {\n  /** Listener. */\n  listener: Function;\n\n  /**\n   * @inheritdoc\n   */\n  dispatch(param?: Object): void {\n    this.listener && this.listener(param);\n  }\n}\n","import { UpdateFlag } from \"./UpdateFlag\";\n\n/**\n * @internal\n */\nexport class UpdateFlagManager {\n  /** @internal */\n  _updateFlags: UpdateFlag[] = [];\n\n  /**\n   * Create a UpdateFlag.\n   * @returns - The UpdateFlag.\n   */\n  createFlag<T extends UpdateFlag>(type: new () => T): T {\n    const flag = new type();\n    this.addFlag(flag);\n    return flag;\n  }\n\n  /**\n   * Add a UpdateFlag.\n   * @param flag - The UpdateFlag.\n   */\n  addFlag(flag: UpdateFlag): void {\n    this._updateFlags.push(flag);\n    flag._flagManagers.push(this);\n  }\n\n  /**\n   * Dispatch.\n   */\n  dispatch(param?: Object): void {\n    const updateFlags = this._updateFlags;\n    for (let i = updateFlags.length - 1; i >= 0; i--) {\n      updateFlags[i].dispatch(param);\n    }\n  }\n}\n","import { MathUtil, Matrix, Matrix3x3, Quaternion, Vector3 } from \"@oasis-engine/math\";\nimport { BoolUpdateFlag } from \"./BoolUpdateFlag\";\nimport { deepClone, ignoreClone } from \"./clone/CloneManager\";\nimport { Component } from \"./Component\";\nimport { Entity } from \"./Entity\";\nimport { ListenerUpdateFlag } from \"./ListenerUpdateFlag\";\nimport { UpdateFlagManager } from \"./UpdateFlagManager\";\n\n/**\n * Used to implement transformation related functions.\n */\nexport class Transform extends Component {\n  private static _tempQuat0: Quaternion = new Quaternion();\n  private static _tempVec30: Vector3 = new Vector3();\n  private static _tempVec31: Vector3 = new Vector3();\n  private static _tempVec32: Vector3 = new Vector3();\n  private static _tempMat30: Matrix3x3 = new Matrix3x3();\n  private static _tempMat31: Matrix3x3 = new Matrix3x3();\n  private static _tempMat32: Matrix3x3 = new Matrix3x3();\n  private static _tempMat41: Matrix = new Matrix();\n  private static _tempMat42: Matrix = new Matrix();\n\n  @deepClone\n  private _position: Vector3 = new Vector3();\n  @deepClone\n  private _rotation: Vector3 = new Vector3();\n  @deepClone\n  private _rotationQuaternion: Quaternion = new Quaternion();\n  @deepClone\n  private _scale: Vector3 = new Vector3(1, 1, 1);\n  @deepClone\n  private _worldPosition: Vector3 = new Vector3();\n  @deepClone\n  private _worldRotation: Vector3 = new Vector3();\n  @deepClone\n  private _worldRotationQuaternion: Quaternion = new Quaternion();\n  @deepClone\n  private _lossyWorldScale: Vector3 = new Vector3(1, 1, 1);\n  @deepClone\n  private _localMatrix: Matrix = new Matrix();\n  @deepClone\n  private _worldMatrix: Matrix = new Matrix();\n  @ignoreClone\n  private _updateFlagManager: UpdateFlagManager = new UpdateFlagManager();\n  @ignoreClone\n  private _isParentDirty: boolean = true;\n  @ignoreClone\n  private _parentTransformCache: Transform = null;\n\n  private _dirtyFlag: number = TransformFlag.WmWpWeWqWs;\n\n  /**\n   * Local position.\n   */\n  get position(): Vector3 {\n    return this._position;\n  }\n\n  set position(value: Vector3) {\n    if (this._position !== value) {\n      this._position.copyFrom(value);\n    }\n  }\n\n  /**\n   * World position.\n   */\n  get worldPosition(): Vector3 {\n    const worldPosition = this._worldPosition;\n    if (this._isContainDirtyFlag(TransformFlag.WorldPosition)) {\n      //@ts-ignore\n      worldPosition._onValueChanged = null;\n      if (this._getParentTransform()) {\n        this.worldMatrix.getTranslation(worldPosition);\n      } else {\n        worldPosition.copyFrom(this._position);\n      }\n      //@ts-ignore\n      worldPosition._onValueChanged = this._onWorldPositionChanged;\n      this._setDirtyFlagFalse(TransformFlag.WorldPosition);\n    }\n\n    return worldPosition;\n  }\n\n  set worldPosition(value: Vector3) {\n    if (this._worldPosition !== value) {\n      this._worldPosition.copyFrom(value);\n    }\n  }\n\n  /**\n   * Local rotation, defining the rotation value in degrees.\n   * Rotations are performed around the Y axis, the X axis, and the Z axis, in that order.\n   */\n  get rotation(): Vector3 {\n    const rotation = this._rotation;\n    if (this._isContainDirtyFlag(TransformFlag.LocalEuler)) {\n      //@ts-ignore\n      rotation._onValueChanged = null;\n      this._rotationQuaternion.toEuler(rotation);\n      //@ts-ignore\n      rotation._onValueChanged = this._onRotationChanged;\n      rotation.scale(MathUtil.radToDegreeFactor); // radians to degrees\n      this._setDirtyFlagFalse(TransformFlag.LocalEuler);\n    }\n\n    return rotation;\n  }\n\n  set rotation(value: Vector3) {\n    if (this._rotation !== value) {\n      this._rotation.copyFrom(value);\n    }\n  }\n\n  /**\n   * World rotation, defining the rotation value in degrees.\n   * Rotations are performed around the Y axis, the X axis, and the Z axis, in that order.\n   */\n  get worldRotation(): Vector3 {\n    const worldRotation = this._worldRotation;\n    if (this._isContainDirtyFlag(TransformFlag.WorldEuler)) {\n      //@ts-ignore\n      worldRotation._onValueChanged = null;\n      this.worldRotationQuaternion.toEuler(worldRotation);\n      worldRotation.scale(MathUtil.radToDegreeFactor); // Radian to angle\n      //@ts-ignore\n      worldRotation._onValueChanged = this._onWorldRotationChanged;\n      this._setDirtyFlagFalse(TransformFlag.WorldEuler);\n    }\n    return worldRotation;\n  }\n\n  set worldRotation(value: Vector3) {\n    if (this._worldRotation !== value) {\n      this._worldRotation.copyFrom(value);\n    }\n  }\n\n  /**\n   * Local rotation, defining the rotation by using a unit quaternion.\n   */\n  get rotationQuaternion(): Quaternion {\n    const rotationQuaternion = this._rotationQuaternion;\n    if (this._isContainDirtyFlag(TransformFlag.LocalQuat)) {\n      //@ts-ignore\n      rotationQuaternion._onValueChanged = null;\n      Quaternion.rotationEuler(\n        MathUtil.degreeToRadian(this._rotation.x),\n        MathUtil.degreeToRadian(this._rotation.y),\n        MathUtil.degreeToRadian(this._rotation.z),\n        rotationQuaternion\n      );\n      //@ts-ignore\n      rotationQuaternion._onValueChanged = this._onRotationQuaternionChanged;\n      this._setDirtyFlagFalse(TransformFlag.LocalQuat);\n    }\n    return rotationQuaternion;\n  }\n\n  set rotationQuaternion(value: Quaternion) {\n    if (this._rotationQuaternion !== value) {\n      if (value.normalized) {\n        this._rotationQuaternion.copyFrom(value);\n      } else {\n        Quaternion.normalize(value, this._rotationQuaternion);\n      }\n    } else {\n      value.normalized || value.normalize();\n    }\n  }\n\n  /**\n   * World rotation, defining the rotation by using a unit quaternion.\n   */\n  get worldRotationQuaternion(): Quaternion {\n    const worldRotationQuaternion = this._worldRotationQuaternion;\n    if (this._isContainDirtyFlag(TransformFlag.WorldQuat)) {\n      //@ts-ignore\n      worldRotationQuaternion._onValueChanged = null;\n      const parent = this._getParentTransform();\n      if (parent != null) {\n        Quaternion.multiply(parent.worldRotationQuaternion, this.rotationQuaternion, worldRotationQuaternion);\n      } else {\n        worldRotationQuaternion.copyFrom(this.rotationQuaternion);\n      }\n      //@ts-ignore\n      worldRotationQuaternion._onValueChanged = this._onWorldRotationQuaternionChanged;\n      this._setDirtyFlagFalse(TransformFlag.WorldQuat);\n    }\n    return worldRotationQuaternion;\n  }\n\n  set worldRotationQuaternion(value: Quaternion) {\n    if (this._worldRotationQuaternion !== value) {\n      if (value.normalized) {\n        this._worldRotationQuaternion.copyFrom(value);\n      } else {\n        Quaternion.normalize(value, this._worldRotationQuaternion);\n      }\n    }\n    value.normalized || value.normalize();\n  }\n\n  /**\n   * Local scaling.\n   */\n  get scale(): Vector3 {\n    return this._scale;\n  }\n\n  set scale(value: Vector3) {\n    if (this._scale !== value) {\n      this._scale.copyFrom(value);\n    }\n  }\n\n  /**\n   * Local lossy scaling.\n   * @remarks The value obtained may not be correct under certain conditions(for example, the parent node has scaling,\n   * and the child node has a rotation), the scaling will be tilted. Vector3 cannot be used to correctly represent the scaling. Must use Matrix3x3.\n   */\n  get lossyWorldScale(): Vector3 {\n    if (this._isContainDirtyFlag(TransformFlag.WorldScale)) {\n      if (this._getParentTransform()) {\n        const scaleMat = this._getScaleMatrix();\n        const e = scaleMat.elements;\n        this._lossyWorldScale.set(e[0], e[4], e[8]);\n      } else {\n        this._lossyWorldScale.copyFrom(this._scale);\n      }\n      this._setDirtyFlagFalse(TransformFlag.WorldScale);\n    }\n    return this._lossyWorldScale;\n  }\n\n  /**\n   * Local matrix.\n   * @remarks Need to re-assign after modification to ensure that the modification takes effect.\n   */\n  get localMatrix(): Matrix {\n    if (this._isContainDirtyFlag(TransformFlag.LocalMatrix)) {\n      Matrix.affineTransformation(this._scale, this.rotationQuaternion, this._position, this._localMatrix);\n      this._setDirtyFlagFalse(TransformFlag.LocalMatrix);\n    }\n    return this._localMatrix;\n  }\n\n  set localMatrix(value: Matrix) {\n    if (this._localMatrix !== value) {\n      this._localMatrix.copyFrom(value);\n    }\n\n    this._localMatrix.decompose(this._position, this._rotationQuaternion, this._scale);\n\n    this._setDirtyFlagTrue(TransformFlag.LocalEuler);\n    this._setDirtyFlagFalse(TransformFlag.LocalMatrix);\n    this._updateAllWorldFlag();\n  }\n\n  /**\n   * World matrix.\n   * @remarks Need to re-assign after modification to ensure that the modification takes effect.\n   */\n  get worldMatrix(): Matrix {\n    if (this._isContainDirtyFlag(TransformFlag.WorldMatrix)) {\n      const parent = this._getParentTransform();\n      if (parent) {\n        Matrix.multiply(parent.worldMatrix, this.localMatrix, this._worldMatrix);\n      } else {\n        this._worldMatrix.copyFrom(this.localMatrix);\n      }\n      this._setDirtyFlagFalse(TransformFlag.WorldMatrix);\n    }\n    return this._worldMatrix;\n  }\n\n  set worldMatrix(value: Matrix) {\n    if (this._worldMatrix !== value) {\n      this._worldMatrix.copyFrom(value);\n    }\n    const parent = this._getParentTransform();\n    if (parent) {\n      Matrix.invert(parent.worldMatrix, Transform._tempMat42);\n      Matrix.multiply(Transform._tempMat42, value, this._localMatrix);\n    } else {\n      this._localMatrix.copyFrom(value);\n    }\n    this.localMatrix = this._localMatrix;\n    this._setDirtyFlagFalse(TransformFlag.WorldMatrix);\n  }\n\n  /**\n   * @internal\n   */\n  constructor(entity: Entity) {\n    super(entity);\n\n    this._onPositionChanged = this._onPositionChanged.bind(this);\n    this._onWorldPositionChanged = this._onWorldPositionChanged.bind(this);\n    this._onRotationChanged = this._onRotationChanged.bind(this);\n    this._onWorldRotationChanged = this._onWorldRotationChanged.bind(this);\n    this._onRotationQuaternionChanged = this._onRotationQuaternionChanged.bind(this);\n    this._onWorldRotationQuaternionChanged = this._onWorldRotationQuaternionChanged.bind(this);\n    this._onScaleChanged = this._onScaleChanged.bind(this);\n\n    //@ts-ignore\n    this._position._onValueChanged = this._onPositionChanged;\n    //@ts-ignore\n    this._worldPosition._onValueChanged = this._onWorldPositionChanged;\n    //@ts-ignore\n    this._rotation._onValueChanged = this._onRotationChanged;\n    //@ts-ignore\n    this._worldRotation._onValueChanged = this._onWorldRotationChanged;\n    //@ts-ignore\n    this._rotationQuaternion._onValueChanged = this._onRotationQuaternionChanged;\n    //@ts-ignore\n    this._worldRotationQuaternion._onValueChanged = this._onWorldRotationQuaternionChanged;\n    //@ts-ignore\n    this._scale._onValueChanged = this._onScaleChanged;\n  }\n\n  /**\n   * Set local position by X, Y, Z value.\n   * @param x - X coordinate\n   * @param y - Y coordinate\n   * @param z - Z coordinate\n   */\n  setPosition(x: number, y: number, z: number): void {\n    this._position.set(x, y, z);\n  }\n\n  /**\n   * Set local rotation by the X, Y, Z components of the euler angle, unit in degrees.\n   * Rotations are performed around the Y axis, the X axis, and the Z axis, in that order.\n   * @param x - The angle of rotation around the X axis\n   * @param y - The angle of rotation around the Y axis\n   * @param z - The angle of rotation around the Z axis\n   */\n  setRotation(x: number, y: number, z: number): void {\n    this._rotation.set(x, y, z);\n  }\n\n  /**\n   * Set local rotation by the X, Y, Z, and W components of the quaternion.\n   * @param x - X component of quaternion\n   * @param y - Y component of quaternion\n   * @param z - Z component of quaternion\n   * @param w - W component of quaternion\n   */\n  setRotationQuaternion(x: number, y: number, z: number, w: number): void {\n    this._rotationQuaternion.set(x, y, z, w);\n  }\n\n  /**\n   * Set local scaling by scaling values along X, Y, Z axis.\n   * @param x - Scaling along X axis\n   * @param y - Scaling along Y axis\n   * @param z - Scaling along Z axis\n   */\n  setScale(x: number, y: number, z: number): void {\n    this._scale.set(x, y, z);\n  }\n\n  /**\n   * Set world position by X, Y, Z value.\n   * @param x - X coordinate\n   * @param y - Y coordinate\n   * @param z - Z coordinate\n   */\n  setWorldPosition(x: number, y: number, z: number): void {\n    this._worldPosition.set(x, y, z);\n  }\n\n  /**\n   * Set world rotation by the X, Y, Z components of the euler angle, unit in degrees, Yaw/Pitch/Roll sequence.\n   * @param x - The angle of rotation around the X axis\n   * @param y - The angle of rotation around the Y axis\n   * @param z - The angle of rotation around the Z axis\n   */\n  setWorldRotation(x: number, y: number, z: number): void {\n    this._worldRotation.set(x, y, z);\n  }\n\n  /**\n   * Set local rotation by the X, Y, Z, and W components of the quaternion.\n   * @param x - X component of quaternion\n   * @param y - Y component of quaternion\n   * @param z - Z component of quaternion\n   * @param w - W component of quaternion\n   */\n  setWorldRotationQuaternion(x: number, y: number, z: number, w: number): void {\n    this._worldRotationQuaternion.set(x, y, z, w);\n  }\n\n  /**\n   * Get the forward direction in world space.\n   * @param forward - Forward vector\n   * @returns Forward vector\n   */\n  getWorldForward(forward: Vector3): Vector3 {\n    const e = this.worldMatrix.elements;\n    forward.set(-e[8], -e[9], -e[10]);\n    return forward.normalize();\n  }\n\n  /**\n   * Get the right direction in world space.\n   * @param right - Right vector\n   * @returns Right vector\n   */\n  getWorldRight(right: Vector3): Vector3 {\n    const e = this.worldMatrix.elements;\n    right.set(e[0], e[1], e[2]);\n    return right.normalize();\n  }\n\n  /**\n   * Get the up direction in world space.\n   * @param up - Up vector\n   * @returns Up vector\n   */\n  getWorldUp(up: Vector3): Vector3 {\n    const e = this.worldMatrix.elements;\n    up.set(e[4], e[5], e[6]);\n    return up.normalize();\n  }\n\n  /**\n   * Translate in the direction and distance of the translation.\n   * @param translation - Direction and distance of translation\n   * @param relativeToLocal = `true` - Is relative to the local coordinate system\n   */\n  translate(translation: Vector3, relativeToLocal?: boolean): void;\n\n  /**\n   * Translate some distance by x along the x axis, y along the y axis, and z along the z axis.\n   * @param x - Distance along the x axis\n   * @param y - Distance along the y axis\n   * @param z - Distance along the z axis\n   * @param relativeToLocal = `true` - Is relative to the local coordinate system\n   */\n  translate(x: number, y: number, z: number, relativeToLocal?: boolean): void;\n\n  translate(\n    translationOrX: Vector3 | number,\n    relativeToLocalOrY?: boolean | number,\n    z?: number,\n    relativeToLocal?: boolean\n  ): void {\n    if (typeof translationOrX === \"number\") {\n      const translate = Transform._tempVec30;\n      translate.set(translationOrX, <number>relativeToLocalOrY, z);\n      this._translate(translate, relativeToLocal);\n    } else {\n      this._translate(translationOrX, <boolean>relativeToLocalOrY);\n    }\n  }\n\n  /**\n   * Rotate around the passed Vector3.\n   * @param rotation - Euler angle in degrees\n   * @param relativeToLocal = `true` - Is relative to the local coordinate system\n   */\n  rotate(rotation: Vector3, relativeToLocal?: boolean): void;\n\n  /**\n   * Rotate around the passed Vector3.\n   * @param x - Rotation along x axis, in degrees\n   * @param y - Rotation along y axis, in degrees\n   * @param z - Rotation along z axis, in degrees\n   * @param relativeToLocal = `true` - Is relative to the local coordinate system\n   */\n  rotate(x: number, y: number, z: number, relativeToLocal?: boolean): void;\n\n  rotate(\n    rotationOrX: Vector3 | number,\n    relativeToLocalOrY?: boolean | number,\n    z?: number,\n    relativeToLocal?: boolean\n  ): void {\n    if (typeof rotationOrX === \"number\") {\n      this._rotateXYZ(rotationOrX, <number>relativeToLocalOrY, z, relativeToLocal);\n    } else {\n      this._rotateXYZ(rotationOrX.x, rotationOrX.y, rotationOrX.z, <boolean>relativeToLocalOrY);\n    }\n  }\n\n  /**\n   * Rotate around the specified axis according to the specified angle.\n   * @param axis - Rotate axis\n   * @param angle - Rotate angle in degrees\n   * @param relativeToLocal = `true` - Relative to local space\n   */\n  rotateByAxis(axis: Vector3, angle: number, relativeToLocal: boolean = true): void {\n    const rad = angle * MathUtil.degreeToRadFactor;\n    Quaternion.rotationAxisAngle(axis, rad, Transform._tempQuat0);\n    this._rotateByQuat(Transform._tempQuat0, relativeToLocal);\n  }\n\n  /**\n   * Rotate and ensure that the world front vector points to the target world position.\n   * @param targetPosition - Target world position\n   * @param worldUp - Up direction in world space, default is Vector3(0, 1, 0)\n   */\n  lookAt(targetPosition: Vector3, worldUp?: Vector3): void {\n    const zAxis = Transform._tempVec30;\n    Vector3.subtract(this.worldPosition, targetPosition, zAxis);\n    let axisLen = zAxis.length();\n    if (axisLen <= MathUtil.zeroTolerance) {\n      // The current position and the target position are almost the same.\n      return;\n    }\n    zAxis.scale(1 / axisLen);\n    const xAxis = Transform._tempVec31;\n    if (worldUp) {\n      Vector3.cross(worldUp, zAxis, xAxis);\n    } else {\n      xAxis.set(zAxis.z, 0, -zAxis.x);\n    }\n    axisLen = xAxis.length();\n    if (axisLen <= MathUtil.zeroTolerance) {\n      // @todo:\n      // 1.worldUp is（0,0,0）\n      // 2.worldUp is parallel to zAxis\n      return;\n    }\n    xAxis.scale(1 / axisLen);\n    const yAxis = Transform._tempVec32;\n    Vector3.cross(zAxis, xAxis, yAxis);\n\n    const rotMat = Transform._tempMat41;\n    const { elements: e } = rotMat;\n    (e[0] = xAxis.x), (e[1] = xAxis.y), (e[2] = xAxis.z);\n    (e[4] = yAxis.x), (e[5] = yAxis.y), (e[6] = yAxis.z);\n    (e[8] = zAxis.x), (e[9] = zAxis.y), (e[10] = zAxis.z);\n    rotMat.getRotation(this._worldRotationQuaternion);\n  }\n\n  /**\n   * Register world transform change flag.\n   * @returns Change flag\n   */\n  registerWorldChangeFlag(): BoolUpdateFlag {\n    return this._updateFlagManager.createFlag(BoolUpdateFlag);\n  }\n\n  /**\n   * @internal\n   */\n  _registerWorldChangeListener(): ListenerUpdateFlag {\n    return this._updateFlagManager.createFlag(ListenerUpdateFlag);\n  }\n\n  /**\n   * @internal\n   */\n  _parentChange(): void {\n    this._isParentDirty = true;\n    this._updateAllWorldFlag();\n  }\n\n  /**\n   * @internal\n   */\n  _isFrontFaceInvert(): boolean {\n    const scale = this.lossyWorldScale;\n    let isInvert = scale.x < 0;\n    scale.y < 0 && (isInvert = !isInvert);\n    scale.z < 0 && (isInvert = !isInvert);\n    return isInvert;\n  }\n\n  /**\n   * Get worldMatrix: Will trigger the worldMatrix update of itself and all parent entities.\n   * Get worldPosition: Will trigger the worldMatrix, local position update of itself and the worldMatrix update of all parent entities.\n   * In summary, any update of related variables will cause the dirty mark of one of the full process (worldMatrix or worldRotationQuaternion) to be false.\n   */\n  private _updateWorldPositionFlag(): void {\n    if (!this._isContainDirtyFlags(TransformFlag.WmWp)) {\n      this._worldAssociatedChange(TransformFlag.WmWp);\n      const nodeChildren = this._entity._children;\n      for (let i: number = 0, n: number = nodeChildren.length; i < n; i++) {\n        nodeChildren[i].transform?._updateWorldPositionFlag();\n      }\n    }\n  }\n\n  /**\n   * Get worldMatrix: Will trigger the worldMatrix update of itself and all parent entities.\n   * Get worldPosition: Will trigger the worldMatrix, local position update of itself and the worldMatrix update of all parent entities.\n   * Get worldRotationQuaternion: Will trigger the world rotation (in quaternion) update of itself and all parent entities.\n   * Get worldRotation: Will trigger the world rotation(in euler and quaternion) update of itself and world rotation(in quaternion) update of all parent entities.\n   * In summary, any update of related variables will cause the dirty mark of one of the full process (worldMatrix or worldRotationQuaternion) to be false.\n   */\n  private _updateWorldRotationFlag() {\n    if (!this._isContainDirtyFlags(TransformFlag.WmWeWq)) {\n      this._worldAssociatedChange(TransformFlag.WmWeWq);\n      const nodeChildren = this._entity._children;\n      for (let i: number = 0, n: number = nodeChildren.length; i < n; i++) {\n        nodeChildren[i].transform?._updateWorldPositionAndRotationFlag(); // Rotation update of parent entity will trigger world position and rotation update of all child entity.\n      }\n    }\n  }\n\n  /**\n   * Get worldMatrix: Will trigger the worldMatrix update of itself and all parent entities.\n   * Get worldPosition: Will trigger the worldMatrix, local position update of itself and the worldMatrix update of all parent entities.\n   * Get worldRotationQuaternion: Will trigger the world rotation (in quaternion) update of itself and all parent entities.\n   * Get worldRotation: Will trigger the world rotation(in euler and quaternion) update of itself and world rotation(in quaternion) update of all parent entities.\n   * In summary, any update of related variables will cause the dirty mark of one of the full process (worldMatrix or worldRotationQuaternion) to be false.\n   */\n  private _updateWorldPositionAndRotationFlag() {\n    if (!this._isContainDirtyFlags(TransformFlag.WmWpWeWq)) {\n      this._worldAssociatedChange(TransformFlag.WmWpWeWq);\n      const nodeChildren = this._entity._children;\n      for (let i: number = 0, n: number = nodeChildren.length; i < n; i++) {\n        nodeChildren[i].transform?._updateWorldPositionAndRotationFlag();\n      }\n    }\n  }\n\n  /**\n   * Get worldMatrix: Will trigger the worldMatrix update of itself and all parent entities.\n   * Get worldPosition: Will trigger the worldMatrix, local position update of itself and the worldMatrix update of all parent entities.\n   * Get worldScale: Will trigger the scaling update of itself and all parent entities.\n   * In summary, any update of related variables will cause the dirty mark of one of the full process (worldMatrix) to be false.\n   */\n  private _updateWorldScaleFlag() {\n    if (!this._isContainDirtyFlags(TransformFlag.WmWs)) {\n      this._worldAssociatedChange(TransformFlag.WmWs);\n      const nodeChildren = this._entity._children;\n      for (let i: number = 0, n: number = nodeChildren.length; i < n; i++) {\n        nodeChildren[i].transform?._updateWorldPositionAndScaleFlag();\n      }\n    }\n  }\n\n  /**\n   * Get worldMatrix: Will trigger the worldMatrix update of itself and all parent entities.\n   * Get worldPosition: Will trigger the worldMatrix, local position update of itself and the worldMatrix update of all parent entities.\n   * Get worldScale: Will trigger the scaling update of itself and all parent entities.\n   * In summary, any update of related variables will cause the dirty mark of one of the full process (worldMatrix) to be false.\n   */\n  private _updateWorldPositionAndScaleFlag(): void {\n    if (!this._isContainDirtyFlags(TransformFlag.WmWpWs)) {\n      this._worldAssociatedChange(TransformFlag.WmWpWs);\n      const nodeChildren = this._entity._children;\n      for (let i: number = 0, n: number = nodeChildren.length; i < n; i++) {\n        nodeChildren[i].transform?._updateWorldPositionAndScaleFlag();\n      }\n    }\n  }\n\n  /**\n   * Update all world transform property dirty flag, the principle is the same as above.\n   */\n  private _updateAllWorldFlag(): void {\n    if (!this._isContainDirtyFlags(TransformFlag.WmWpWeWqWs)) {\n      this._worldAssociatedChange(TransformFlag.WmWpWeWqWs);\n      const nodeChildren = this._entity._children;\n      for (let i: number = 0, n: number = nodeChildren.length; i < n; i++) {\n        nodeChildren[i].transform?._updateAllWorldFlag();\n      }\n    }\n  }\n\n  private _getParentTransform(): Transform | null {\n    if (!this._isParentDirty) {\n      return this._parentTransformCache;\n    }\n    let parentCache: Transform = null;\n    let parent = this._entity.parent;\n    while (parent) {\n      const transform = parent.transform;\n      if (transform) {\n        parentCache = transform;\n        break;\n      } else {\n        parent = parent.parent;\n      }\n    }\n    this._parentTransformCache = parentCache;\n    this._isParentDirty = false;\n    return parentCache;\n  }\n\n  private _getScaleMatrix(): Matrix3x3 {\n    const invRotation = Transform._tempQuat0;\n    const invRotationMat = Transform._tempMat30;\n    const worldRotScaMat = Transform._tempMat31;\n    const scaMat = Transform._tempMat32;\n    worldRotScaMat.copyFromMatrix(this.worldMatrix);\n    Quaternion.invert(this.worldRotationQuaternion, invRotation);\n    Matrix3x3.rotationQuaternion(invRotation, invRotationMat);\n    Matrix3x3.multiply(invRotationMat, worldRotScaMat, scaMat);\n    return scaMat;\n  }\n\n  private _isContainDirtyFlags(targetDirtyFlags: number): boolean {\n    return (this._dirtyFlag & targetDirtyFlags) === targetDirtyFlags;\n  }\n\n  private _isContainDirtyFlag(type: number): boolean {\n    return (this._dirtyFlag & type) != 0;\n  }\n\n  private _setDirtyFlagTrue(type: number) {\n    this._dirtyFlag |= type;\n  }\n\n  private _setDirtyFlagFalse(type: number) {\n    this._dirtyFlag &= ~type;\n  }\n\n  private _worldAssociatedChange(type: number): void {\n    this._dirtyFlag |= type;\n    this._updateFlagManager.dispatch();\n  }\n\n  private _rotateByQuat(rotateQuat: Quaternion, relativeToLocal: boolean): void {\n    if (relativeToLocal) {\n      Quaternion.multiply(this.rotationQuaternion, rotateQuat, this._rotationQuaternion);\n    } else {\n      Quaternion.multiply(rotateQuat, this.worldRotationQuaternion, this._worldRotationQuaternion);\n    }\n  }\n\n  private _translate(translation: Vector3, relativeToLocal: boolean = true): void {\n    if (relativeToLocal) {\n      const { _tempVec30 } = Transform;\n      Vector3.transformByQuat(translation, this.worldRotationQuaternion, _tempVec30);\n      this._worldPosition.add(_tempVec30);\n    } else {\n      this._worldPosition.add(translation);\n    }\n  }\n\n  private _rotateXYZ(x: number, y: number, z: number, relativeToLocal: boolean = true): void {\n    const radFactor = MathUtil.degreeToRadFactor;\n    const rotQuat = Transform._tempQuat0;\n    Quaternion.rotationEuler(x * radFactor, y * radFactor, z * radFactor, rotQuat);\n    this._rotateByQuat(rotQuat, relativeToLocal);\n  }\n\n  private _onPositionChanged(): void {\n    this._setDirtyFlagTrue(TransformFlag.LocalMatrix);\n    this._updateWorldPositionFlag();\n  }\n\n  private _onWorldPositionChanged(): void {\n    const worldPosition = this._worldPosition;\n    const parent = this._getParentTransform();\n    if (parent) {\n      Matrix.invert(parent.worldMatrix, Transform._tempMat41);\n      Vector3.transformCoordinate(worldPosition, Transform._tempMat41, this._position);\n    } else {\n      this._position.copyFrom(worldPosition);\n    }\n    this._setDirtyFlagFalse(TransformFlag.WorldPosition);\n  }\n\n  private _onRotationChanged(): void {\n    this._setDirtyFlagTrue(TransformFlag.LocalMatrix | TransformFlag.LocalQuat);\n    this._setDirtyFlagFalse(TransformFlag.LocalEuler);\n    this._updateWorldRotationFlag();\n  }\n\n  private _onWorldRotationChanged(): void {\n    const worldRotation = this._worldRotation;\n    Quaternion.rotationEuler(\n      MathUtil.degreeToRadian(worldRotation.x),\n      MathUtil.degreeToRadian(worldRotation.y),\n      MathUtil.degreeToRadian(worldRotation.z),\n      this._worldRotationQuaternion\n    );\n    this._setDirtyFlagFalse(TransformFlag.WorldEuler);\n  }\n\n  private _onRotationQuaternionChanged(): void {\n    this._setDirtyFlagTrue(TransformFlag.LocalMatrix | TransformFlag.LocalEuler);\n    this._setDirtyFlagFalse(TransformFlag.LocalQuat);\n    this._updateWorldRotationFlag();\n  }\n\n  private _onWorldRotationQuaternionChanged(): void {\n    const worldRotationQuaternion = this._worldRotationQuaternion;\n    const parent = this._getParentTransform();\n    if (parent) {\n      const invParentQuaternion = Transform._tempQuat0;\n      Quaternion.invert(parent.worldRotationQuaternion, invParentQuaternion);\n      Quaternion.multiply(invParentQuaternion, worldRotationQuaternion, this._rotationQuaternion);\n    } else {\n      this._rotationQuaternion.copyFrom(worldRotationQuaternion);\n    }\n    this._setDirtyFlagFalse(TransformFlag.WorldQuat);\n  }\n\n  private _onScaleChanged(): void {\n    this._setDirtyFlagTrue(TransformFlag.LocalMatrix);\n    this._updateWorldScaleFlag();\n  }\n}\n/**\n * Dirty flag of transform.\n */\nenum TransformFlag {\n  LocalEuler = 0x1,\n  LocalQuat = 0x2,\n  WorldPosition = 0x4,\n  WorldEuler = 0x8,\n  WorldQuat = 0x10,\n  WorldScale = 0x20,\n  LocalMatrix = 0x40,\n  WorldMatrix = 0x80,\n\n  /** WorldMatrix | WorldPosition */\n  WmWp = 0x84,\n  /** WorldMatrix | WorldEuler | WorldQuat */\n  WmWeWq = 0x98,\n  /** WorldMatrix | WorldPosition | WorldEuler | WorldQuat */\n  WmWpWeWq = 0x9c,\n  /** WorldMatrix | WorldScale */\n  WmWs = 0xa0,\n  /** WorldMatrix | WorldPosition | WorldScale */\n  WmWpWs = 0xa4,\n  /** WorldMatrix | WorldPosition | WorldEuler | WorldQuat | WorldScale */\n  WmWpWeWqWs = 0xbc\n}\n","import { Matrix } from \"@oasis-engine/math\";\nimport { EngineObject } from \"./base\";\nimport { BoolUpdateFlag } from \"./BoolUpdateFlag\";\nimport { ComponentCloner } from \"./clone/ComponentCloner\";\nimport { Component } from \"./Component\";\nimport { ComponentsDependencies } from \"./ComponentsDependencies\";\nimport { DisorderedArray } from \"./DisorderedArray\";\nimport { Engine } from \"./Engine\";\nimport { Layer } from \"./Layer\";\nimport { Scene } from \"./Scene\";\nimport { Script } from \"./Script\";\nimport { Transform } from \"./Transform\";\n\n/**\n * Entity, be used as components container.\n */\nexport class Entity extends EngineObject {\n  /**\n   * @internal\n   */\n  static _findChildByName(root: Entity, name: string): Entity {\n    const children = root._children;\n    for (let i = children.length - 1; i >= 0; i--) {\n      const child = children[i];\n      if (child.name === name) {\n        return child;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @internal\n   */\n  static _traverseSetOwnerScene(entity: Entity, scene: Scene): void {\n    entity._scene = scene;\n    const children = entity._children;\n    for (let i = entity.childCount - 1; i >= 0; i--) {\n      this._traverseSetOwnerScene(children[i], scene);\n    }\n  }\n\n  /** The name of entity. */\n  name: string;\n  /** The layer the entity belongs to. */\n  layer: Layer = Layer.Layer0;\n  /** Transform component. */\n  readonly transform: Transform;\n\n  /** @internal */\n  _isActiveInHierarchy: boolean = false;\n  /** @internal */\n  _components: Component[] = [];\n  /** @internal */\n  _scripts: DisorderedArray<Script> = new DisorderedArray<Script>();\n  /** @internal */\n  _children: Entity[] = [];\n  /** @internal */\n  _scene: Scene;\n  /** @internal */\n  _isRoot: boolean = false;\n  /** @internal */\n  _isActive: boolean = true;\n  /** @internal */\n  _siblingIndex: number = -1;\n\n  private _parent: Entity = null;\n  private _activeChangedComponents: Component[];\n\n  /**\n   * Whether to activate locally.\n   */\n  get isActive(): boolean {\n    return this._isActive;\n  }\n\n  set isActive(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      if (value) {\n        const parent = this._parent;\n        if (parent?._isActiveInHierarchy || (this._isRoot && this._scene._isActiveInEngine)) {\n          this._processActive();\n        }\n      } else {\n        if (this._isActiveInHierarchy) {\n          this._processInActive();\n        }\n      }\n    }\n  }\n\n  /**\n   * Whether it is active in the hierarchy.\n   */\n  get isActiveInHierarchy(): boolean {\n    return this._isActiveInHierarchy;\n  }\n\n  /**\n   * The parent entity.\n   */\n  get parent(): Entity {\n    return this._parent;\n  }\n\n  set parent(value: Entity) {\n    this._setParent(value);\n  }\n\n  /**\n   * The children entities\n   */\n  get children(): Readonly<Entity[]> {\n    return this._children;\n  }\n\n  /**\n   * @deprecated Please use `children.length` property instead.\n   * Number of the children entities\n   */\n  get childCount(): number {\n    return this._children.length;\n  }\n\n  /**\n   * The scene the entity belongs to.\n   */\n  get scene(): Scene {\n    return this._scene;\n  }\n\n  /**\n   * The sibling index.\n   */\n  get siblingIndex(): number {\n    return this._siblingIndex;\n  }\n\n  set siblingIndex(value: number) {\n    if (this._siblingIndex === -1) {\n      throw `The entity ${this.name} is not in the hierarchy`;\n    }\n\n    this._setSiblingIndex(this._isRoot ? this._scene._rootEntities : this._parent._children, value);\n  }\n\n  /**\n   * Create a entity.\n   * @param engine - The engine the entity belongs to\n   */\n  constructor(engine: Engine, name?: string) {\n    super(engine);\n    this.name = name;\n    this.transform = this.addComponent(Transform);\n    this._inverseWorldMatFlag = this.transform.registerWorldChangeFlag();\n  }\n\n  /**\n   * Add component based on the component type.\n   * @param type - The type of the component\n   * @returns\tThe component which has been added\n   */\n  addComponent<T extends Component>(type: new (entity: Entity) => T): T {\n    ComponentsDependencies._addCheck(this, type);\n    const component = new type(this);\n    this._components.push(component);\n    component._setActive(true);\n    return component;\n  }\n\n  /**\n   * Get component which match the type.\n   * @param type - The type of the component\n   * @returns\tThe first component which match type\n   */\n  getComponent<T extends Component>(type: new (entity: Entity) => T): T {\n    for (let i = this._components.length - 1; i >= 0; i--) {\n      const component = this._components[i];\n      if (component instanceof type) {\n        return component;\n      }\n    }\n  }\n\n  /**\n   * Get components which match the type.\n   * @param type - The type of the component\n   * @param results - The components which match type\n   * @returns\tThe components which match type\n   */\n  getComponents<T extends Component>(type: new (entity: Entity) => T, results: T[]): T[] {\n    results.length = 0;\n    for (let i = this._components.length - 1; i >= 0; i--) {\n      const component = this._components[i];\n      if (component instanceof type) {\n        results.push(component);\n      }\n    }\n    return results;\n  }\n\n  /**\n   * Get the components which match the type of the entity and it's children.\n   * @param type - The component type\n   * @param results - The components collection\n   * @returns\tThe components collection which match the type\n   */\n  getComponentsIncludeChildren<T extends Component>(type: new (entity: Entity) => T, results: T[]): T[] {\n    results.length = 0;\n    this._getComponentsInChildren<T>(type, results);\n    return results;\n  }\n\n  /**\n   * Add child entity.\n   * @param child - The child entity which want to be added\n   */\n  addChild(child: Entity): void;\n\n  /**\n   * Add child entity at specified index.\n   * @param index - specified index\n   * @param child - The child entity which want to be added\n   */\n  addChild(index: number, child: Entity): void;\n\n  addChild(indexOrChild: number | Entity, child?: Entity): void {\n    let index: number;\n    if (typeof indexOrChild === \"number\") {\n      index = indexOrChild;\n    } else {\n      index = undefined;\n      child = indexOrChild;\n    }\n\n    if (child._isRoot) {\n      child._scene._removeFromEntityList(child);\n      child._isRoot = false;\n\n      this._addToChildrenList(index, child);\n      child._parent = this;\n\n      const newScene = this._scene;\n      if (child._scene !== newScene) {\n        Entity._traverseSetOwnerScene(child, newScene);\n      }\n\n      if (this._isActiveInHierarchy) {\n        !child._isActiveInHierarchy && child._isActive && child._processActive();\n      } else {\n        child._isActiveInHierarchy && child._processInActive();\n      }\n\n      child._setTransformDirty();\n    } else {\n      child._setParent(this, index);\n    }\n  }\n\n  /**\n   * Remove child entity.\n   * @param child - The child entity which want to be removed\n   */\n  removeChild(child: Entity): void {\n    child._setParent(null);\n  }\n\n  /**\n   * @deprecated Please use `children` property instead.\n   * Find child entity by index.\n   * @param index - The index of the child entity\n   * @returns\tThe component which be found\n   */\n  getChild(index: number): Entity {\n    return this._children[index];\n  }\n\n  /**\n   * Find child entity by name.\n   * @param name - The name of the entity which want to be found\n   * @returns The component which be found\n   */\n  findByName(name: string): Entity {\n    const children = this._children;\n    const child = Entity._findChildByName(this, name);\n    if (child) return child;\n    for (let i = children.length - 1; i >= 0; i--) {\n      const child = children[i];\n      const grandson = child.findByName(name);\n      if (grandson) {\n        return grandson;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Find the entity by path.\n   * @param path - The path fo the entity eg: /entity\n   * @returns The component which be found\n   */\n  findByPath(path: string): Entity {\n    const splits = path.split(\"/\");\n    let entity: Entity = this;\n    for (let i = 0, length = splits.length; i < length; ++i) {\n      const split = splits[i];\n      if (split) {\n        entity = Entity._findChildByName(entity, split);\n        if (!entity) {\n          return null;\n        }\n      }\n    }\n    return entity;\n  }\n\n  /**\n   * Create child entity.\n   * @param name - The child entity's name\n   * @returns The child entity\n   */\n  createChild(name?: string): Entity {\n    const child = new Entity(this.engine, name);\n    child.layer = this.layer;\n    child.parent = this;\n    return child;\n  }\n\n  /**\n   * Clear children entities.\n   */\n  clearChildren(): void {\n    const children = this._children;\n    for (let i = children.length - 1; i >= 0; i--) {\n      const child = children[i];\n      child._parent = null;\n      child._isActiveInHierarchy && child._processInActive();\n      Entity._traverseSetOwnerScene(child, null); // Must after child._processInActive().\n    }\n    children.length = 0;\n  }\n\n  /**\n   * Clone.\n   * @returns Cloned entity\n   */\n  clone(): Entity {\n    const cloneEntity = new Entity(this._engine, this.name);\n\n    cloneEntity._isActive = this._isActive;\n    cloneEntity.transform.localMatrix = this.transform.localMatrix;\n\n    const children = this._children;\n    for (let i = 0, len = this._children.length; i < len; i++) {\n      const child = children[i];\n      cloneEntity.addChild(child.clone());\n    }\n\n    const components = this._components;\n    for (let i = 0, n = components.length; i < n; i++) {\n      const sourceComp = components[i];\n      if (!(sourceComp instanceof Transform)) {\n        const targetComp = cloneEntity.addComponent(<new (entity: Entity) => Component>sourceComp.constructor);\n        ComponentCloner.cloneComponent(sourceComp, targetComp);\n      }\n    }\n\n    return cloneEntity;\n  }\n\n  /**\n   * Destroy self.\n   */\n  destroy(): void {\n    if (this._destroyed) {\n      return;\n    }\n\n    super.destroy();\n    const components = this._components;\n    for (let i = components.length - 1; i >= 0; i--) {\n      components[i].destroy();\n    }\n    this._components.length = 0;\n\n    const children = this._children;\n    for (let i = children.length - 1; i >= 0; i--) {\n      children[i].destroy();\n    }\n    this._children.length = 0;\n\n    if (this._isRoot) {\n      this._scene._removeFromEntityList(this);\n      this._isRoot = false;\n    } else {\n      this._removeFromParent();\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _removeComponent(component: Component): void {\n    ComponentsDependencies._removeCheck(this, component.constructor as any);\n    const components = this._components;\n    components.splice(components.indexOf(component), 1);\n  }\n\n  /**\n   * @internal\n   */\n  _addScript(script: Script) {\n    script._entityScriptsIndex = this._scripts.length;\n    this._scripts.add(script);\n  }\n\n  /**\n   * @internal\n   */\n  _removeScript(script: Script): void {\n    const replaced = this._scripts.deleteByIndex(script._entityScriptsIndex);\n    replaced && (replaced._entityScriptsIndex = script._entityScriptsIndex);\n    script._entityScriptsIndex = -1;\n  }\n\n  /**\n   * @internal\n   */\n  _removeFromParent(): void {\n    const oldParent = this._parent;\n    if (oldParent != null) {\n      const oldSibling = oldParent._children;\n      let index = this._siblingIndex;\n      oldSibling.splice(index, 1);\n      for (let n = oldSibling.length; index < n; index++) {\n        oldSibling[index]._siblingIndex--;\n      }\n      this._parent = null;\n      this._siblingIndex = -1;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _processActive(): void {\n    if (this._activeChangedComponents) {\n      throw \"Note: can't set the 'main inActive entity' active in hierarchy, if the operation is in main inActive entity or it's children script's onDisable Event.\";\n    }\n    this._activeChangedComponents = this._engine._componentsManager.getActiveChangedTempList();\n    this._setActiveInHierarchy(this._activeChangedComponents);\n    this._setActiveComponents(true);\n  }\n\n  /**\n   * @internal\n   */\n  _processInActive(): void {\n    if (this._activeChangedComponents) {\n      throw \"Note: can't set the 'main active entity' inActive in hierarchy, if the operation is in main active entity or it's children script's onEnable Event.\";\n    }\n    this._activeChangedComponents = this._engine._componentsManager.getActiveChangedTempList();\n    this._setInActiveInHierarchy(this._activeChangedComponents);\n    this._setActiveComponents(false);\n  }\n\n  private _addToChildrenList(index: number, child: Entity): void {\n    const children = this._children;\n    const childCount = children.length;\n    if (index === undefined) {\n      child._siblingIndex = childCount;\n      children.push(child);\n    } else {\n      if (index < 0 || index > childCount) {\n        throw `The index ${index} is out of child list bounds ${childCount}`;\n      }\n      child._siblingIndex = index;\n      children.splice(index, 0, child);\n      for (let i = index + 1, n = childCount + 1; i < n; i++) {\n        children[i]._siblingIndex++;\n      }\n    }\n  }\n\n  private _setParent(parent: Entity, siblingIndex?: number): void {\n    const oldParent = this._parent;\n    if (parent !== oldParent) {\n      this._removeFromParent();\n      this._parent = parent;\n      if (parent) {\n        parent._addToChildrenList(siblingIndex, this);\n\n        const parentScene = parent._scene;\n        if (this._scene !== parentScene) {\n          Entity._traverseSetOwnerScene(this, parentScene);\n        }\n\n        if (parent._isActiveInHierarchy) {\n          !this._isActiveInHierarchy && this._isActive && this._processActive();\n        } else {\n          this._isActiveInHierarchy && this._processInActive();\n        }\n      } else {\n        this._isActiveInHierarchy && this._processInActive();\n        if (oldParent) {\n          Entity._traverseSetOwnerScene(this, null);\n        }\n      }\n      this._setTransformDirty();\n    }\n  }\n\n  private _getComponentsInChildren<T extends Component>(type: new (entity: Entity) => T, results: T[]): void {\n    for (let i = this._components.length - 1; i >= 0; i--) {\n      const component = this._components[i];\n      if (component instanceof type) {\n        results.push(component);\n      }\n    }\n    for (let i = this._children.length - 1; i >= 0; i--) {\n      this._children[i]._getComponentsInChildren<T>(type, results);\n    }\n  }\n\n  private _setActiveComponents(isActive: boolean): void {\n    const activeChangedComponents = this._activeChangedComponents;\n    for (let i = 0, length = activeChangedComponents.length; i < length; ++i) {\n      activeChangedComponents[i]._setActive(isActive);\n    }\n    this._engine._componentsManager.putActiveChangedTempList(activeChangedComponents);\n    this._activeChangedComponents = null;\n  }\n\n  private _setActiveInHierarchy(activeChangedComponents: Component[]): void {\n    this._isActiveInHierarchy = true;\n    const components = this._components;\n    for (let i = components.length - 1; i >= 0; i--) {\n      const component = components[i];\n      (component.enabled || !component._awoken) && activeChangedComponents.push(component);\n    }\n    const children = this._children;\n    for (let i = children.length - 1; i >= 0; i--) {\n      const child = children[i];\n      child.isActive && child._setActiveInHierarchy(activeChangedComponents);\n    }\n  }\n\n  private _setInActiveInHierarchy(activeChangedComponents: Component[]): void {\n    this._isActiveInHierarchy = false;\n    const components = this._components;\n    for (let i = components.length - 1; i >= 0; i--) {\n      const component = components[i];\n      component.enabled && activeChangedComponents.push(component);\n    }\n    const children = this._children;\n    for (let i = children.length - 1; i >= 0; i--) {\n      const child: Entity = children[i];\n      child.isActive && child._setInActiveInHierarchy(activeChangedComponents);\n    }\n  }\n\n  private _setTransformDirty() {\n    if (this.transform) {\n      this.transform._parentChange();\n    } else {\n      for (let i = 0, len = this._children.length; i < len; i++) {\n        this._children[i]._setTransformDirty();\n      }\n    }\n  }\n\n  private _setSiblingIndex(sibling: Entity[], target: number): void {\n    target = Math.min(target, sibling.length - 1);\n    if (target < 0) {\n      throw `Sibling index ${target} should large than 0`;\n    }\n    if (this._siblingIndex !== target) {\n      const oldIndex = this._siblingIndex;\n      if (target < oldIndex) {\n        for (let i = oldIndex; i >= target; i--) {\n          const child = i == target ? this : sibling[i - 1];\n          sibling[i] = child;\n          child._siblingIndex = i;\n        }\n      } else {\n        for (let i = oldIndex; i <= target; i++) {\n          const child = i == target ? this : sibling[i + 1];\n          sibling[i] = child;\n          child._siblingIndex = i;\n        }\n      }\n    }\n  }\n\n  //--------------------------------------------------------------deprecated----------------------------------------------------------------\n  private _invModelMatrix: Matrix = new Matrix();\n  private _inverseWorldMatFlag: BoolUpdateFlag;\n\n  /**\n   * @deprecated\n   */\n  getInvModelMatrix(): Matrix {\n    if (this._inverseWorldMatFlag.flag) {\n      Matrix.invert(this.transform.worldMatrix, this._invModelMatrix);\n      this._inverseWorldMatFlag.flag = false;\n    }\n    return this._invModelMatrix;\n  }\n}\n","import { SceneFeature } from \"./SceneFeature\";\nimport { EngineFeature } from \"./EngineFeature\";\nimport { Scene } from \"./Scene\";\nimport { Engine } from \"./Engine\";\n\n/**\n * Manage a set of feature objects.\n */\nexport class FeatureManager<T extends EngineFeature | SceneFeature> {\n  private _features: Array<new (engine: Engine) => T> = [];\n\n  private _objects = [];\n\n  /**\n   * Register a feature.\n   * @param {SceneFeature|EngineFeature} IFeature\n   */\n  public registerFeature(IFeature: new () => T): void {\n    const featureArray = this._features;\n\n    // Search by type, avoid adding\n    for (let i = 0, len = featureArray.length; i < len; i++) {\n      if (featureArray[i] === IFeature) {\n        return;\n      }\n    }\n\n    // Add to global array\n    featureArray.push(IFeature);\n\n    // Add to existing scene\n    const objectArray = this._objects;\n    for (let i = 0, len = objectArray.length; i < len; i++) {\n      objectArray[i].features.push(new IFeature());\n    }\n  }\n\n  /**\n   * Add an feature with functional characteristics.\n   * @param {Scene|Engine} obj - Scene or engine\n   */\n  public addObject(obj: Scene | Engine): void {\n    obj.features = [];\n    for (let i = 0, len = this._features.length; i < len; i++) {\n      obj.features.push(new this._features[i]((<any>obj).engine ?? <any>obj) as any);\n    }\n    this._objects.push(obj);\n  }\n\n  /**\n   * Call the specified method of the feature.\n   * @param obj - Scene or engine\n   * @param method - Method name\n   * @param args - Function args\n   */\n  public callFeatureMethod(obj: Scene | Engine, method: string, args: any[]): void {\n    const features = obj.features;\n    const count = features.length;\n\n    for (let i = 0; i < count; i++) {\n      const feature = features[i];\n      if (feature[method]) {\n        feature[method].apply(feature, args);\n      }\n    }\n  }\n\n  /**\n   * Find feature.\n   * @param obj - Scene or engine\n   * @param IFeature - plug-in\n   */\n\n  public findFeature(obj: Scene | Engine, IFeature: new () => T): T {\n    const features = obj.features;\n    const count = features.length;\n\n    for (let i = 0; i < count; i++) {\n      const feature = features[i];\n      if (feature.constructor === (IFeature as any)) {\n        return feature as any;\n      }\n    }\n    return undefined;\n  }\n}\n","/**\n * The keys of the keyboard.\n * Keep up with W3C standards.(https://www.w3.org/TR/2017/CR-uievents-code-20170601/)\n */\nexport enum Keys {\n    /** `~ on a US keyboard. This is the 半角/全角/漢字 (hankaku/zenkaku/kanji) key on Japanese keyboards. */\n    Backquote,\n    /** Used for both the US \\| (on the 101-key layout) and also for the key located between the \" and Enter keys on row C of the 102-, 104- and 106-key layouts. Labelled #~ on a UK (102) keyboard. */\n    Backslash,\n    /**\tBackspace or ⌫. Labelled Delete on Apple keyboards. */\n    Backspace,\n    /** [{ on a US keyboard. */\n    BracketLeft,\n    /** ]} on a US keyboard. */\n    BracketRight,\n    /** ,< on a US keyboard. */\n    Comma,\n    /** 0) on a US keyboard. */\n    Digit0,\n    /** 1! on a US keyboard. */\n    Digit1,\n    /** 2@ on a US keyboard. */\n    Digit2,\n    /** 3# on a US keyboard. */\n    Digit3,\n    /** 4$ on a US keyboard. */\n    Digit4,\n    /** 5% on a US keyboard. */\n    Digit5,\n    /** 6^ on a US keyboard. */\n    Digit6,\n    /** 7& on a US keyboard. */\n    Digit7,\n    /** 8* on a US keyboard. */\n    Digit8,\n    /** 9( on a US keyboard. */\n    Digit9,\n    /** =+ on a US keyboard. */\n    Equal,\n    /** Located between the left Shift and Z keys. Labelled \\| on a UK keyboard. */\n    IntlBackslash,\n    /** Located between the / and right Shift keys. Labelled \\ろ (ro) on a Japanese keyboard. */\n    IntlRo,\n    /** Located between the = and Backspace keys. Labelled ¥ (yen) on a Japanese keyboard. \\/ on a Russian keyboard. */\n    IntlYen,\n    /** a on a US keyboard. Labelled q on an AZERTY (e.g., French) keyboard. */\n    KeyA,\n    /** b on a US keyboard. */\n    KeyB,\n    /** c on a US keyboard. */\n    KeyC,\n    /** d on a US keyboard. */\n    KeyD,\n    /** e on a US keyboard. */\n    KeyE,\n    /** f on a US keyboard. */\n    KeyF,\n    /** g on a US keyboard. */\n    KeyG,\n    /** h on a US keyboard. */\n    KeyH,\n    /** i on a US keyboard. */\n    KeyI,\n    /** j on a US keyboard. */\n    KeyJ,\n    /** k on a US keyboard. */\n    KeyK,\n    /** l on a US keyboard. */\n    KeyL,\n    /** m on a US keyboard. */\n    KeyM,\n    /** n on a US keyboard. */\n    KeyN,\n    /** o on a US keyboard. */\n    KeyO,\n    /** p on a US keyboard. */\n    KeyP,\n    /** q on a US keyboard. Labelled a on an AZERTY (e.g., French) keyboard. */\n    KeyQ,\n    /** r on a US keyboard. */\n    KeyR,\n    /** s on a US keyboard. */\n    KeyS,\n    /** t on a US keyboard. */\n    KeyT,\n    /** u on a US keyboard. */\n    KeyU,\n    /** v on a US keyboard. */\n    KeyV,\n    /** w on a US keyboard. Labelled z on an AZERTY (e.g., French) keyboard. */\n    KeyW,\n    /** x on a US keyboard. */\n    KeyX,\n    /** y on a US keyboard. Labelled z on a QWERTZ (e.g., German) keyboard. */\n    KeyY,\n    /** z on a US keyboard. Labelled w on an AZERTY (e.g., French) keyboard, and y on a QWERTZ (e.g., German) keyboard. */\n    KeyZ,\n    /** -_ on a US keyboard. */\n    Minus,\n    /** .> on a US keyboard. */\n    Period,\n    /** '\" on a US keyboard. */\n    Quote,\n    /** ;: on a US keyboard. */\n    Semicolon,\n    /** /? on a US keyboard. */\n    Slash,\n\n    /** Alt, Option or ⌥. */\n    AltLeft,\n    /** Alt, Option or ⌥. This is labelled AltGr key on many keyboard layouts. */\n    AltRight,\n    /** CapsLock or ⇪. */\n    CapsLock,\n    /** The application context menu key, which is typically found between the right Meta key and the right Control key. */\n    ContextMenu,\n    /** Control or ⌃. */\n    ControlLeft,\n    /** Control or ⌃. */\n    ControlRight,\n    /** Enter or ↵. Labelled Return on Apple keyboards. */\n    Enter,\n    /** The Windows, ⌘, Command or other OS symbol key. */\n    MetaLeft,\n    /** The Windows, ⌘, Command or other OS symbol key. */\n    MetaRight,\n    /** Shift or ⇧. */\n    ShiftLeft,\n    /** Shift or ⇧. */\n    ShiftRight,\n    /** Space. */\n    Space,\n    /** Tab or ⇥. */\n    Tab,\n\n    /** Japanese: 変換 (henkan). */\n    Convert,\n    /** Japanese: カタカナ/ひらがな/ローマ字 (katakana/hiragana/romaji). */\n    KanaMode,\n    /** \n     * Korean: HangulMode 한/영 (han/yeong).\n     * Japanese (Mac keyboard): かな (kana).\n     * */\n    Lang1,\n    /**\n     * \tKorean: Hanja 한자 (hanja).\n     *  Japanese (Mac keyboard): 英数 (eisu).\n     */\n    Lang2,\n    /** Japanese (word-processing keyboard): Katakana. */\n    Lang3,\n    /** Japanese (word-processing keyboard): Hiragana. */\n    Lang4,\n    /** Japanese (word-processing keyboard): Zenkaku/Hankaku. */\n    Lang5,\n    /** Japanese: 無変換 (muhenkan). */\n    NonConvert,\n\n    /** ⌦. The forward delete key. Note that on Apple keyboards, the key labelled Delete on the main part of the keyboard should be encoded as \"Backspace\". */\n    Delete,\n    /** Page Down, End or ↘. */\n    End,\n    /** Help. Not present on standard PC keyboards. */\n    Help,\n    /** Home or ↖. */\n    Home,\n    /** Insert or Ins. Not present on Apple keyboards. */\n    Insert,\n    /** Page Down, PgDn or ⇟. */\n    PageDown,\n    /** Page Up, PgUp or ⇞. */\n    PageUp,\n\n    /** ↓ */\n    ArrowDown,\n    /** ← */\n    ArrowLeft,\n    /** → */\n    ArrowRight,\n    /** ↑ */\n    ArrowUp,\n\n    /** On the Mac, the \"NumLock\" code should be used for the numpad Clear key. */\n    NumLock,\n    /** \n     * 0 Ins on a keyboard.\n     * 0 on a phone or remote control.\n     * */\n    Numpad0,\n    /**\n     * 1 End on a keyboard.\n     * 1 or 1 QZ on a phone or remote control.\n     */\n    Numpad1,\n    /**\n     * 2 ↓ on a keyboard.\n     * 2 ABC on a phone or remote control.\n     */\n    Numpad2,\n    /**\n     * 3 PgDn on a keyboard.\n     * 3 DEF on a phone or remote control.\n     */\n    Numpad3,\n    /**\n     * 4 ← on a keyboard.\n     * 4 GHI on a phone or remote control.\n     */\n    Numpad4,\n    /**\n     * 5 on a keyboard.\n     * 5 JKL on a phone or remote control.\n     */\n    Numpad5,\n    /**\n     * 6 → on a keyboard.\n     * 6 MNO on a phone or remote control.\n     */\n    Numpad6,\n    /**\n     * 7 Home on a keyboard.\n     * 7 PQRS or 7 PRS on a phone or remote control.\n     */\n    Numpad7,\n    /**\n     * 8 ↑ on a keyboard.\n     * 8 TUV on a phone or remote control.\n     */\n    Numpad8,\n    /**\n     * 9 PgUp on a keyboard.\n     * 9 WXYZ or 9 WXY on a phone or remote control.\n     */\n    Numpad9,\n    /** + */\n    NumpadAdd,\n    /** Found on the Microsoft Natural Keyboard. */\n    NumpadBackspace,\n    /** C or AC (All Clear). Also for use with numpads that have a Clear key that is separate from the NumLock key. On the Mac, the numpad Clear key should always be encoded as \"NumLock\". */\n    NumpadClear,\n    /** CE (Clear Entry) */\n    NumpadClearEntry,\n    /** , (thousands separator). For locales where the thousands separator is a \".\" (e.g., Brazil), this key may generate a .. */\n    NumpadComma,\n    /** . Del. For locales where the decimal separator is \",\" (e.g., Brazil), this key may generate a ,. */\n    NumpadDecimal,\n    /** / */\n    NumpadDivide,\n    /** Numpad Enter */\n    NumpadEnter,\n    /** = */\n    NumpadEqual,\n    /** # on a phone or remote control device. This key is typically found below the 9 key and to the right of the 0 key. */\n    NumpadHash,\n    /** M+ Add current entry to the value stored in memory. */\n    NumpadMemoryAdd,\n    /** MC Clear the value stored in memory. */\n    NumpadMemoryClear,\n    /** MR Replace the current entry with the value stored in memory. */\n    NumpadMemoryRecall,\n    /** MS Replace the value stored in memory with the current entry. */\n    NumpadMemoryStore,\n    /** M- Subtract current entry from the value stored in memory. */\n    NumpadMemorySubtract,\n    /** \n     * * on a keyboard. For use with numpads that provide mathematical operations (+, -, * and /).\n     * Use \"NumpadStar\" for the * key on phones and remote controls.\n     */\n    NumpadMultiply,\n    /** ( Found on the Microsoft Natural Keyboard. */\n    NumpadParenLeft,\n    /** ) Found on the Microsoft Natural Keyboard. */\n    NumpadParenRight,\n    /**\n     * * on a phone or remote control device. This key is typically found below the 7 key and to the left of the 0 key.\n     * Use \"NumpadMultiply\" for the * key on numeric keypads.\n     */\n    NumpadStar,\n    /** - */\n    NumpadSubtract,\n\n    /** Esc or ⎋. */\n    Escape,\n    /** F1 */\n    F1,\n    /** F2 */\n    F2,\n    /** F3 */\n    F3,\n    /** F4 */\n    F4,\n    /** F5 */\n    F5,\n    /** F6 */\n    F6,\n    /** F7 */\n    F7,\n    /** F8 */\n    F8,\n    /** F9 */\n    F9,\n    /** F10 */\n    F10,\n    /** F11 */\n    F11,\n    /** F12 */\n    F12,\n    /** F13 */\n    F13,\n    /** F14 */\n    F14,\n    /** F15 */\n    F15,\n    /** Fn This is typically a hardware key that does not generate a separate code. Most keyboards do not place this key in the function section, but it is included here to keep it with related keys. */\n    Fn,\n    /** FLock or FnLock. Function Lock key. Found on the Microsoft Natural Keyboard. */\n    FnLock,\n    /** PrtScr SysRq or Print Screen. */\n    PrintScreen,\n    /** Scroll Lock */\n    ScrollLock,\n    /** Pause Break */\n    Pause,\n\n    /** Some laptops place this key to the left of the ↑ key. */\n    BrowserBack,\n    /** Browser Favorites */\n    BrowserFavorites,\n    /** Some laptops place this key to the right of the ↑ key. */\n    BrowserForward,\n    /** Browser Home */\n    BrowserHome,\n    /** Browser Refresh */\n    BrowserRefresh,\n    /** Browser Search */\n    BrowserSearch,\n    /** Browser Stop */\n    BrowserStop,\n    /** Eject or ⏏. This key is placed in the function section on some Apple keyboards. */\n    Eject,\n    /** Sometimes labelled My Computer on the keyboard. */\n    LaunchApp1,\n    /** Sometimes labelled Calculator on the keyboard. */\n    LaunchApp2,\n    /** Launch Mail */\n    LaunchMail,\n    /** Media Play/Pause */\n    MediaPlayPause,\n    /** Media Select */\n    MediaSelect,\n    /** Media Stop */\n    MediaStop,\n    /** Media Track Next */\n    MediaTrackNext,\n    /** Media Track Previous */\n    MediaTrackPrevious,\n    /** This key is placed in the function section on some Apple keyboards, replacing the Eject key. */\n    Power,\n    /** Sleep */\n    Sleep,\n    /** Audio Volume Down */\n    AudioVolumeDown,\n    /** Audio Volume Mute */\n    AudioVolumeMute,\n    /** Audio Volume Up */\n    AudioVolumeUp,\n    /** Wake Up */\n    WakeUp,\n\n    /** Hyper */\n    Hyper,\n    /** Super */\n    Super,\n    /** Turbo */\n    Turbo,\n\n    /** Abort */\n    Abort,\n    /** Resume */\n    Resume,\n    /** Suspend */\n    Suspend,\n\n    /** Found on Sun’s USB keyboard. */\n    Again,\n    /** Found on Sun’s USB keyboard. */\n    Copy,\n    /** Found on Sun’s USB keyboard. */\n    Cut,\n    /** Found on Sun’s USB keyboard. */\n    Find,\n    /** Found on Sun’s USB keyboard. */\n    Open,\n    /** Found on Sun’s USB keyboard. */\n    Paste,\n    /** Found on Sun’s USB keyboard. */\n    Props,\n    /** Found on Sun’s USB keyboard. */\n    Select,\n    /** Found on Sun’s USB keyboard. */\n    Undo,\n\n    /** Use for dedicated ひらがな key found on some Japanese word processing keyboards. */\n    Hiragana,\n    /** Use for dedicated カタカナ key found on some Japanese word processing keyboards. */\n    Katakana,\n\n    /** This value code should be used when no other value given in this specification is appropriate. */\n    Unidentified,\n}","import { DisorderedArray } from \"../../DisorderedArray\";\nimport { Keys } from \"../enums/Keys\";\nimport { IInput } from \"../interface/IInput\";\n\n/**\n * Keyboard Manager.\n * @internal\n */\nexport class KeyboardManager implements IInput {\n  /** @internal */\n  _curHeldDownKeyToIndexMap: number[] = [];\n  /** @internal */\n  _upKeyToFrameCountMap: number[] = [];\n  /** @internal */\n  _downKeyToFrameCountMap: number[] = [];\n\n  /** @internal */\n  _curFrameHeldDownList: DisorderedArray<Keys> = new DisorderedArray();\n  /** @internal */\n  _curFrameDownList: DisorderedArray<Keys> = new DisorderedArray();\n  /** @internal */\n  _curFrameUpList: DisorderedArray<Keys> = new DisorderedArray();\n\n  private _htmlCanvas: HTMLCanvasElement;\n  private _nativeEvents: KeyboardEvent[] = [];\n  private _hadListener: boolean = false;\n\n  /**\n   * Create a KeyboardManager.\n   */\n  constructor(htmlCanvas: HTMLCanvasElement) {\n    this._htmlCanvas = htmlCanvas;\n    // Need to set tabIndex to make the canvas focus.\n    htmlCanvas.tabIndex = htmlCanvas.tabIndex;\n    this._onKeyEvent = this._onKeyEvent.bind(this);\n    htmlCanvas.addEventListener(\"keydown\", this._onKeyEvent);\n    htmlCanvas.addEventListener(\"keyup\", this._onKeyEvent);\n    this._hadListener = true;\n  }\n\n  /**\n   * @internal\n   */\n  _update(frameCount: number): void {\n    const { _nativeEvents: nativeEvents, _curFrameDownList: curFrameDownList, _curFrameUpList: curFrameUpList } = this;\n    curFrameDownList.length = 0;\n    curFrameUpList.length = 0;\n    if (nativeEvents.length > 0) {\n      const {\n        _curHeldDownKeyToIndexMap: curHeldDownKeyToIndexMap,\n        _curFrameHeldDownList: curFrameHeldDownList,\n        _downKeyToFrameCountMap: downKeyToFrameCountMap,\n        _upKeyToFrameCountMap: upKeyToFrameCountMap\n      } = this;\n      for (let i = 0, n = nativeEvents.length; i < n; i++) {\n        const evt = nativeEvents[i];\n        const codeKey = <Keys>Keys[evt.code];\n        switch (evt.type) {\n          case \"keydown\":\n            // Filter the repeated triggers of the keyboard.\n            if (curHeldDownKeyToIndexMap[codeKey] == null) {\n              curFrameDownList.add(codeKey);\n              curFrameHeldDownList.add(codeKey);\n              curHeldDownKeyToIndexMap[codeKey] = curFrameHeldDownList.length - 1;\n              downKeyToFrameCountMap[codeKey] = frameCount;\n            }\n            break;\n          case \"keyup\":\n            const delIndex = curHeldDownKeyToIndexMap[codeKey];\n            if (delIndex != null) {\n              curHeldDownKeyToIndexMap[codeKey] = null;\n              const swapCode = curFrameHeldDownList.deleteByIndex(delIndex);\n              swapCode && (curHeldDownKeyToIndexMap[swapCode] = delIndex);\n            }\n            curFrameUpList.add(codeKey);\n            upKeyToFrameCountMap[codeKey] = frameCount;\n            break;\n          default:\n            break;\n        }\n      }\n      nativeEvents.length = 0;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _onFocus(): void {\n    if (!this._hadListener) {\n      this._htmlCanvas.addEventListener(\"keydown\", this._onKeyEvent);\n      this._htmlCanvas.addEventListener(\"keyup\", this._onKeyEvent);\n      this._hadListener = true;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _onBlur(): void {\n    if (this._hadListener) {\n      this._htmlCanvas.removeEventListener(\"keydown\", this._onKeyEvent);\n      this._htmlCanvas.removeEventListener(\"keyup\", this._onKeyEvent);\n      this._curHeldDownKeyToIndexMap.length = 0;\n      this._curFrameHeldDownList.length = 0;\n      this._curFrameDownList.length = 0;\n      this._curFrameUpList.length = 0;\n      this._nativeEvents.length = 0;\n      this._hadListener = false;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _destroy(): void {\n    if (this._hadListener) {\n      this._htmlCanvas.removeEventListener(\"keydown\", this._onKeyEvent);\n      this._htmlCanvas.removeEventListener(\"keyup\", this._onKeyEvent);\n      this._hadListener = false;\n    }\n    this._curHeldDownKeyToIndexMap = null;\n    this._upKeyToFrameCountMap = null;\n    this._downKeyToFrameCountMap = null;\n    this._nativeEvents = null;\n\n    this._curFrameHeldDownList = null;\n    this._curFrameDownList = null;\n    this._curFrameUpList = null;\n  }\n\n  private _onKeyEvent(evt: KeyboardEvent): void {\n    evt.cancelable && evt.preventDefault();\n    this._nativeEvents.push(evt);\n  }\n}\n","/**\n * Camera clear flags enumeration.\n */\nexport enum CameraClearFlags {\n  /* Do nothing. */\n  None = 0x0,\n  /* Clear color with scene background. */\n  Color = 0x1,\n  /* Clear depth only. */\n  Depth = 0x2,\n  /* Clear depth only. */\n  Stencil = 0x4,\n\n  /* Clear color with scene background and depth. */\n  ColorDepth = 0x3,\n  /* Clear color with scene background and stencil. */\n  ColorStencil = 0x5,\n  /* Clear depth and stencil. */\n  DepthStencil = 0x6,\n\n  /* Clear color with scene background, depth, and stencil. */\n  All = 0x7\n}\n","import { Entity } from \"../Entity\";\nimport { Vector3 } from \"@oasis-engine/math\";\n\n/**\n * Structure used to get information back from a raycast or a sweep.\n */\nexport class HitResult {\n  /** The entity that was hit. */\n  entity: Entity = null;\n  /** The distance from the ray's origin to the impact point. */\n  distance: number = 0;\n  /** The impact point in world space where the ray hit the collider. */\n  point: Vector3 = new Vector3();\n  /** The normal of the surface the ray hit. */\n  normal: Vector3 = new Vector3();\n}\n","import { ICharacterController, ICollider, IPhysics, IPhysicsManager } from \"@oasis-engine/design\";\nimport { Ray, Vector3 } from \"@oasis-engine/math\";\nimport { DisorderedArray } from \"../DisorderedArray\";\nimport { Engine } from \"../Engine\";\nimport { Layer } from \"../Layer\";\nimport { CharacterController } from \"./CharacterController\";\nimport { Collider } from \"./Collider\";\nimport { HitResult } from \"./HitResult\";\nimport { ColliderShape } from \"./shape\";\n\n/**\n * A physics manager is a collection of colliders and constraints which can interact.\n */\nexport class PhysicsManager {\n  /** @internal */\n  static _nativePhysics: IPhysics;\n  /** @internal */\n  _initialized: boolean = false;\n\n  private _engine: Engine;\n  private _restTime: number = 0;\n\n  private _colliders: DisorderedArray<Collider> = new DisorderedArray();\n\n  private _gravity: Vector3 = new Vector3(0, -9.81, 0);\n  private _nativePhysicsManager: IPhysicsManager;\n  private _physicalObjectsMap: Record<number, ColliderShape> = {};\n  private _onContactEnter = (obj1: number, obj2: number) => {\n    const shape1 = this._physicalObjectsMap[obj1];\n    const shape2 = this._physicalObjectsMap[obj2];\n\n    let scripts = shape1.collider.entity._scripts;\n    for (let i = 0, len = scripts.length; i < len; i++) {\n      const script = scripts.get(i);\n      script._waitHandlingInValid || script.onCollisionEnter(shape2);\n    }\n\n    scripts = shape2.collider.entity._scripts;\n    for (let i = 0, len = scripts.length; i < len; i++) {\n      const script = scripts.get(i);\n      script._waitHandlingInValid || script.onCollisionEnter(shape1);\n    }\n  };\n  private _onContactExit = (obj1: number, obj2: number) => {\n    const shape1 = this._physicalObjectsMap[obj1];\n    const shape2 = this._physicalObjectsMap[obj2];\n\n    let scripts = shape1.collider.entity._scripts;\n    for (let i = 0, len = scripts.length; i < len; i++) {\n      const script = scripts.get(i);\n      script._waitHandlingInValid || script.onCollisionExit(shape2);\n    }\n\n    scripts = shape2.collider.entity._scripts;\n    for (let i = 0, len = scripts.length; i < len; i++) {\n      const script = scripts.get(i);\n      script._waitHandlingInValid || script.onCollisionExit(shape1);\n    }\n  };\n  private _onContactStay = (obj1: number, obj2: number) => {\n    const shape1 = this._physicalObjectsMap[obj1];\n    const shape2 = this._physicalObjectsMap[obj2];\n\n    let scripts = shape1.collider.entity._scripts;\n    for (let i = 0, len = scripts.length; i < len; i++) {\n      const script = scripts.get(i);\n      script._waitHandlingInValid || script.onCollisionStay(shape2);\n    }\n\n    scripts = shape2.collider.entity._scripts;\n    for (let i = 0, len = scripts.length; i < len; i++) {\n      const script = scripts.get(i);\n      script._waitHandlingInValid || script.onCollisionStay(shape1);\n    }\n  };\n  private _onTriggerEnter = (obj1: number, obj2: number) => {\n    const shape1 = this._physicalObjectsMap[obj1];\n    const shape2 = this._physicalObjectsMap[obj2];\n\n    let scripts = shape1.collider.entity._scripts;\n    for (let i = 0, len = scripts.length; i < len; i++) {\n      const script = scripts.get(i);\n      script._waitHandlingInValid || script.onTriggerEnter(shape2);\n    }\n\n    scripts = shape2.collider.entity._scripts;\n    for (let i = 0, len = scripts.length; i < len; i++) {\n      const script = scripts.get(i);\n      script._waitHandlingInValid || script.onTriggerEnter(shape1);\n    }\n  };\n\n  private _onTriggerExit = (obj1: number, obj2: number) => {\n    const shape1 = this._physicalObjectsMap[obj1];\n    const shape2 = this._physicalObjectsMap[obj2];\n\n    let scripts = shape1.collider.entity._scripts;\n    for (let i = 0, n = scripts.length; i < n; i++) {\n      const script = scripts.get(i);\n      script._waitHandlingInValid || script.onTriggerExit(shape2);\n    }\n\n    scripts = shape2.collider.entity._scripts;\n    for (let i = 0, n = scripts.length; i < n; i++) {\n      const script = scripts.get(i);\n      script._waitHandlingInValid || script.onTriggerExit(shape1);\n    }\n  };\n\n  private _onTriggerStay = (obj1: number, obj2: number) => {\n    const shape1 = this._physicalObjectsMap[obj1];\n    const shape2 = this._physicalObjectsMap[obj2];\n\n    let scripts = shape1.collider.entity._scripts;\n    for (let i = 0, len = scripts.length; i < len; i++) {\n      const script = scripts.get(i);\n      script._waitHandlingInValid || script.onTriggerStay(shape2);\n    }\n\n    scripts = shape2.collider.entity._scripts;\n    for (let i = 0, len = scripts.length; i < len; i++) {\n      const script = scripts.get(i);\n      script._waitHandlingInValid || script.onTriggerStay(shape1);\n    }\n  };\n\n  /** The fixed time step in seconds at which physics are performed. */\n  fixedTimeStep: number = 1 / 60;\n\n  /** The max sum of time step in seconds one frame. */\n  maxSumTimeStep: number = 1 / 3;\n\n  /**\n   * The gravity of physics scene.\n   */\n  get gravity(): Vector3 {\n    return this._gravity;\n  }\n\n  set gravity(value: Vector3) {\n    const gravity = this._gravity;\n    if (gravity !== value) {\n      gravity.copyFrom(value);\n    }\n    this._nativePhysicsManager.setGravity(gravity);\n  }\n\n  constructor(engine: Engine) {\n    this._engine = engine;\n  }\n\n  /**\n   * initialize PhysicsManager.\n   * @param physics - Physics Engine\n   */\n  initialize(physics: IPhysics): void {\n    if (this._initialized) {\n      return;\n    }\n    PhysicsManager._nativePhysics = physics;\n    this._nativePhysicsManager = PhysicsManager._nativePhysics.createPhysicsManager(\n      this._onContactEnter,\n      this._onContactExit,\n      this._onContactStay,\n      this._onTriggerEnter,\n      this._onTriggerExit,\n      this._onTriggerStay\n    );\n    this._initialized = true;\n  }\n\n  /**\n   * Casts a ray through the Scene and returns the first hit.\n   * @param ray - The ray\n   * @returns Returns True if the ray intersects with a collider, otherwise false\n   */\n  raycast(ray: Ray): boolean;\n\n  /**\n   * Casts a ray through the Scene and returns the first hit.\n   * @param ray - The ray\n   * @param outHitResult - If true is returned, outHitResult will contain more detailed collision information\n   * @returns Returns True if the ray intersects with a collider, otherwise false\n   */\n  raycast(ray: Ray, outHitResult: HitResult): boolean;\n\n  /**\n   * Casts a ray through the Scene and returns the first hit.\n   * @param ray - The ray\n   * @param distance - The max distance the ray should check\n   * @returns Returns True if the ray intersects with a collider, otherwise false\n   */\n  raycast(ray: Ray, distance: number): boolean;\n\n  /**\n   * Casts a ray through the Scene and returns the first hit.\n   * @param ray - The ray\n   * @param distance - The max distance the ray should check\n   * @param outHitResult - If true is returned, outHitResult will contain more detailed collision information\n   * @returns Returns True if the ray intersects with a collider, otherwise false\n   */\n  raycast(ray: Ray, distance: number, outHitResult: HitResult): boolean;\n\n  /**\n   * Casts a ray through the Scene and returns the first hit.\n   * @param ray - The ray\n   * @param distance - The max distance the ray should check\n   * @param layerMask - Layer mask that is used to selectively ignore Colliders when casting\n   * @returns Returns True if the ray intersects with a collider, otherwise false\n   */\n  raycast(ray: Ray, distance: number, layerMask: Layer): boolean;\n\n  /**\n   * Casts a ray through the Scene and returns the first hit.\n   * @param ray - The ray\n   * @param distance - The max distance the ray should check\n   * @param layerMask - Layer mask that is used to selectively ignore Colliders when casting\n   * @param outHitResult - If true is returned, outHitResult will contain more detailed collision information\n   * @returns Returns True if the ray intersects with a collider, otherwise false.\n   */\n  raycast(ray: Ray, distance: number, layerMask: Layer, outHitResult: HitResult): boolean;\n\n  raycast(\n    ray: Ray,\n    distanceOrResult?: number | HitResult,\n    layerMaskOrResult?: Layer | HitResult,\n    outHitResult?: HitResult\n  ): boolean {\n    let hitResult: HitResult;\n\n    let distance = Number.MAX_VALUE;\n    if (typeof distanceOrResult === \"number\") {\n      distance = distanceOrResult;\n    } else if (distanceOrResult != undefined) {\n      hitResult = distanceOrResult;\n    }\n\n    let layerMask = Layer.Everything;\n    if (typeof layerMaskOrResult === \"number\") {\n      layerMask = layerMaskOrResult;\n    } else if (layerMaskOrResult != undefined) {\n      hitResult = layerMaskOrResult;\n    }\n\n    if (outHitResult) {\n      hitResult = outHitResult;\n    }\n\n    if (hitResult != undefined) {\n      const result = this._nativePhysicsManager.raycast(ray, distance, (idx, distance, position, normal) => {\n        hitResult.entity = this._physicalObjectsMap[idx]._collider.entity;\n        hitResult.distance = distance;\n        hitResult.normal.copyFrom(normal);\n        hitResult.point.copyFrom(position);\n      });\n\n      if (result) {\n        if (hitResult.entity.layer & layerMask) {\n          return true;\n        } else {\n          hitResult.entity = null;\n          hitResult.distance = 0;\n          hitResult.point.set(0, 0, 0);\n          hitResult.normal.set(0, 0, 0);\n          return false;\n        }\n      }\n      return false;\n    } else {\n      return this._nativePhysicsManager.raycast(ray, distance);\n    }\n  }\n\n  /**\n   * Call on every frame to update pose of objects.\n   * @internal\n   */\n  _update(deltaTime: number): void {\n    const { fixedTimeStep: fixedTimeStep, _nativePhysicsManager: nativePhysicsManager } = this;\n    const componentsManager = this._engine._componentsManager;\n\n    const simulateTime = deltaTime + this._restTime;\n    const step = Math.floor(Math.min(this.maxSumTimeStep, simulateTime) / fixedTimeStep);\n    this._restTime = simulateTime - step * fixedTimeStep;\n    for (let i = 0; i < step; i++) {\n      componentsManager.callScriptOnPhysicsUpdate();\n      this._callColliderOnUpdate();\n      nativePhysicsManager.update(fixedTimeStep);\n      this._callColliderOnLateUpdate();\n    }\n  }\n\n  /**\n   * Add ColliderShape into the manager.\n   * @param colliderShape - The Collider Shape.\n   * @internal\n   */\n  _addColliderShape(colliderShape: ColliderShape): void {\n    this._physicalObjectsMap[colliderShape.id] = colliderShape;\n    this._nativePhysicsManager.addColliderShape(colliderShape._nativeShape);\n  }\n\n  /**\n   * Remove ColliderShape.\n   * @param colliderShape - The Collider Shape.\n   * @internal\n   */\n  _removeColliderShape(colliderShape: ColliderShape): void {\n    delete this._physicalObjectsMap[colliderShape.id];\n    this._nativePhysicsManager.removeColliderShape(colliderShape._nativeShape);\n  }\n\n  /**\n   * Add collider into the manager.\n   * @param collider - StaticCollider or DynamicCollider.\n   * @internal\n   */\n  _addCollider(collider: Collider): void {\n    if (collider._index === -1) {\n      collider._index = this._colliders.length;\n      this._colliders.add(collider);\n    }\n    this._nativePhysicsManager.addCollider(<ICollider>collider._nativeCollider);\n  }\n\n  /**\n   * Add character controller into the manager.\n   * @param controller - Character Controller.\n   * @internal\n   */\n  _addCharacterController(controller: CharacterController): void {\n    if (controller._index === -1) {\n      controller._index = this._colliders.length;\n      this._colliders.add(controller);\n    }\n    this._nativePhysicsManager.addCharacterController(<ICharacterController>controller._nativeCollider);\n  }\n\n  /**\n   * Remove collider.\n   * @param collider - StaticCollider or DynamicCollider.\n   * @internal\n   */\n  _removeCollider(collider: Collider): void {\n    const replaced = this._colliders.deleteByIndex(collider._index);\n    replaced && (replaced._index = collider._index);\n    collider._index = -1;\n    this._nativePhysicsManager.removeCollider(<ICollider>collider._nativeCollider);\n  }\n\n  /**\n   * Remove collider.\n   * @param controller - Character Controller.\n   * @internal\n   */\n  _removeCharacterController(controller: CharacterController): void {\n    const replaced = this._colliders.deleteByIndex(controller._index);\n    replaced && (replaced._index = controller._index);\n    controller._index = -1;\n    this._nativePhysicsManager.removeCharacterController(<ICharacterController>controller._nativeCollider);\n  }\n\n  /**\n   * @internal\n   */\n  _callColliderOnUpdate(): void {\n    const elements = this._colliders._elements;\n    for (let i = this._colliders.length - 1; i >= 0; --i) {\n      elements[i]._onUpdate();\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _callColliderOnLateUpdate(): void {\n    const elements = this._colliders._elements;\n    for (let i = this._colliders.length - 1; i >= 0; --i) {\n      elements[i]._onLateUpdate();\n    }\n  }\n}\n","/**\n * Describes how physics materials of the colliding objects are combined.\n */\nexport enum PhysicsMaterialCombineMode {\n  /** Averages the friction/bounce of the two colliding materials. */\n  Average,\n  /** Uses the smaller friction/bounce of the two colliding materials. */\n  Minimum,\n  /** Multiplies the friction/bounce of the two colliding materials. */\n  Multiply,\n  /** Uses the larger friction/bounce of the two colliding materials. */\n  Maximum\n}\n","import { IPhysicsMaterial } from \"@oasis-engine/design\";\nimport { PhysicsManager } from \"./PhysicsManager\";\nimport { PhysicsMaterialCombineMode } from \"./enums/PhysicsMaterialCombineMode\";\n\n/**\n * Material class to represent a set of surface properties.\n */\nexport class PhysicsMaterial {\n  private _bounciness: number = 0.1;\n  private _dynamicFriction: number = 0.1;\n  private _staticFriction: number = 0.1;\n  private _bounceCombine: PhysicsMaterialCombineMode = PhysicsMaterialCombineMode.Average;\n  private _frictionCombine: PhysicsMaterialCombineMode = PhysicsMaterialCombineMode.Average;\n\n  /** @internal */\n  _nativeMaterial: IPhysicsMaterial;\n\n  constructor() {\n    this._nativeMaterial = PhysicsManager._nativePhysics.createPhysicsMaterial(\n      this._staticFriction,\n      this._dynamicFriction,\n      this._bounciness,\n      this._bounceCombine,\n      this._frictionCombine\n    );\n  }\n\n  /**\n   * The coefficient of bounciness.\n   */\n  get bounciness(): number {\n    return this._bounciness;\n  }\n\n  set bounciness(value: number) {\n    this._bounciness = value;\n    this._nativeMaterial.setBounciness(value);\n  }\n\n  /**\n   * The DynamicFriction value.\n   */\n  get dynamicFriction(): number {\n    return this._dynamicFriction;\n  }\n\n  set dynamicFriction(value: number) {\n    this._dynamicFriction = value;\n    this._nativeMaterial.setDynamicFriction(value);\n  }\n\n  /**\n   * The coefficient of static friction.\n   */\n  get staticFriction(): number {\n    return this._staticFriction;\n  }\n\n  set staticFriction(value: number) {\n    this._staticFriction = value;\n    this._nativeMaterial.setStaticFriction(value);\n  }\n\n  /**\n   * The restitution combine mode.\n   */\n  get bounceCombine(): PhysicsMaterialCombineMode {\n    return this._bounceCombine;\n  }\n\n  set bounceCombine(value: PhysicsMaterialCombineMode) {\n    this._bounceCombine = value;\n    this._nativeMaterial.setBounceCombine(value);\n  }\n\n  /**\n   * The friction combine mode.\n   */\n  get frictionCombine(): PhysicsMaterialCombineMode {\n    return this._frictionCombine;\n  }\n\n  set frictionCombine(value: PhysicsMaterialCombineMode) {\n    this._frictionCombine = value;\n    this._nativeMaterial.setFrictionCombine(value);\n  }\n\n  /**\n   * @internal\n   */\n  _destroy() {\n    this._nativeMaterial.destroy();\n  }\n}\n","import { ICollider, IStaticCollider } from \"@oasis-engine/design\";\nimport { BoolUpdateFlag } from \"../BoolUpdateFlag\";\nimport { ignoreClone } from \"../clone/CloneManager\";\nimport { Component } from \"../Component\";\nimport { dependentComponents } from \"../ComponentsDependencies\";\nimport { Entity } from \"../Entity\";\nimport { Transform } from \"../Transform\";\nimport { ColliderShape } from \"./shape/ColliderShape\";\n\n/**\n * Base class for all colliders.\n * @decorator `@dependentComponents(Transform)`\n */\n@dependentComponents(Transform)\nexport class Collider extends Component {\n  /** @internal */\n  @ignoreClone\n  _index: number = -1;\n  /** @internal */\n  _nativeCollider: ICollider;\n\n  protected _updateFlag: BoolUpdateFlag;\n  protected _shapes: ColliderShape[] = [];\n\n  /**\n   * The shapes of this collider.\n   */\n  get shapes(): Readonly<ColliderShape[]> {\n    return this._shapes;\n  }\n\n  /**\n   * @internal\n   */\n  constructor(entity: Entity) {\n    super(entity);\n    this._updateFlag = this.entity.transform.registerWorldChangeFlag();\n  }\n\n  /**\n   * Add collider shape on this collider.\n   * @param shape - Collider shape\n   */\n  addShape(shape: ColliderShape): void {\n    const oldCollider = shape._collider;\n    if (oldCollider !== this) {\n      if (oldCollider) {\n        oldCollider.removeShape(shape);\n      }\n\n      this._shapes.push(shape);\n      this.engine.physicsManager._addColliderShape(shape);\n      shape._collider = this;\n      this._nativeCollider.addShape(shape._nativeShape);\n    }\n  }\n\n  /**\n   * Remove a collider shape.\n   * @param shape - The collider shape.\n   */\n  removeShape(shape: ColliderShape): void {\n    const index = this._shapes.indexOf(shape);\n    if (index !== -1) {\n      this._shapes.splice(index, 1);\n      this.engine.physicsManager._removeColliderShape(shape);\n      shape._collider = null;\n      this._nativeCollider.removeShape(shape._nativeShape);\n    }\n  }\n\n  /**\n   * Remove all shape attached.\n   */\n  clearShapes(): void {\n    const shapes = this._shapes;\n    for (let i = 0, n = shapes.length; i < n; i++) {\n      const shape = shapes[i];\n      this.engine.physicsManager._removeColliderShape(shape);\n      shape._destroy();\n      this._nativeCollider.removeShape(shape._nativeShape);\n    }\n    shapes.length = 0;\n  }\n\n  /**\n   * @internal\n   */\n  _onUpdate(): void {\n    if (this._updateFlag.flag) {\n      const { transform } = this.entity;\n      (<IStaticCollider>this._nativeCollider).setWorldTransform(\n        transform.worldPosition,\n        transform.worldRotationQuaternion\n      );\n\n      const worldScale = transform.lossyWorldScale;\n      for (let i = 0, n = this.shapes.length; i < n; i++) {\n        this.shapes[i]._nativeShape.setWorldScale(worldScale);\n      }\n      this._updateFlag.flag = false;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _onLateUpdate(): void {}\n\n  /**\n   * @override\n   * @internal\n   */\n  _onEnable(): void {\n    this.engine.physicsManager._addCollider(this);\n  }\n\n  /**\n   * @override\n   * @internal\n   */\n  _onDisable(): void {\n    this.engine.physicsManager._removeCollider(this);\n  }\n\n  /**\n   * @override\n   * @internal\n   */\n  _onDestroy(): void {\n    this.clearShapes();\n    this._nativeCollider.destroy();\n  }\n}\n","/**\n * The up axis of the collider shape.\n */\nexport enum ControllerNonWalkableMode {\n  /** Stops character from climbing up non-walkable slopes, but doesn't move it otherwise. */\n  PreventClimbing,\n  /** Stops character from climbing up non-walkable slopes, and forces it to slide down those slopes. */\n  PreventClimbingAndForceSliding\n}\n","import { ICharacterController } from \"@oasis-engine/design\";\nimport { Vector3 } from \"@oasis-engine/math\";\nimport { Entity } from \"../Entity\";\nimport { Collider } from \"./Collider\";\nimport { ControllerNonWalkableMode } from \"./enums/ControllerNonWalkableMode\";\nimport { PhysicsManager } from \"./PhysicsManager\";\nimport { ColliderShape } from \"./shape\";\n\n/**\n * The character controllers.\n */\nexport class CharacterController extends Collider {\n  /** @internal */\n  _index: number = -1;\n\n  private _stepOffset: number = 0;\n  private _nonWalkableMode: ControllerNonWalkableMode = ControllerNonWalkableMode.PreventClimbing;\n  private _upDirection = new Vector3(0, 1, 0);\n  private _slopeLimit: number = 0;\n\n  /**\n   * The step offset for the controller.\n   */\n  get stepOffset(): number {\n    return this._stepOffset;\n  }\n\n  set stepOffset(value: number) {\n    this._stepOffset = value;\n    (<ICharacterController>this._nativeCollider).setStepOffset(value);\n  }\n\n  /**\n   * The value of the non-walkable mode.\n   */\n  get nonWalkableMode(): ControllerNonWalkableMode {\n    return this._nonWalkableMode;\n  }\n\n  set nonWalkableMode(value: ControllerNonWalkableMode) {\n    this._nonWalkableMode = value;\n    (<ICharacterController>this._nativeCollider).setNonWalkableMode(value);\n  }\n\n  /**\n   * The up direction for the controller.\n   */\n  get upDirection(): Vector3 {\n    return this._upDirection;\n  }\n\n  set upDirection(value: Vector3) {\n    if (this._upDirection !== value) {\n      this._upDirection.copyFrom(value);\n    }\n    (<ICharacterController>this._nativeCollider).setUpDirection(this._upDirection);\n  }\n\n  /**\n   * The slope limit for the controller.\n   */\n  get slopeLimit(): number {\n    return this._slopeLimit;\n  }\n\n  set slopeLimit(value: number) {\n    this._slopeLimit = value;\n    (<ICharacterController>this._nativeCollider).setSlopeLimit(value);\n  }\n\n  /**\n   * @internal\n   */\n  constructor(entity: Entity) {\n    super(entity);\n    (<ICharacterController>this._nativeCollider) = PhysicsManager._nativePhysics.createCharacterController();\n  }\n\n  /**\n   * Moves the character using a \"collide-and-slide\" algorithm.\n   * @param disp - Displacement vector\n   * @param minDist - The minimum travelled distance to consider.\n   * @param elapsedTime - Time elapsed since last call\n   * @return flags - The ControllerCollisionFlag\n   */\n  move(disp: Vector3, minDist: number, elapsedTime: number): number {\n    return (<ICharacterController>this._nativeCollider).move(disp, minDist, elapsedTime);\n  }\n\n  /**\n   * Add collider shape on this controller.\n   * @param shape - Collider shape\n   * @override\n   */\n  addShape(shape: ColliderShape): void {\n    if (this._shapes.length > 0) {\n      throw \"only allow single shape on controller!\";\n    }\n    super.addShape(shape);\n    this._updateFlag.flag = true;\n  }\n\n  /**\n   * Remove all shape attached.\n   * @override\n   */\n  clearShapes(): void {\n    if (this._shapes.length > 0) {\n      super.removeShape(this._shapes[0]);\n    }\n  }\n\n  /**\n   * @internal\n   * @override\n   */\n  _onUpdate() {\n    if (this._updateFlag.flag) {\n      const { transform } = this.entity;\n      const shapes = this.shapes;\n      (<ICharacterController>this._nativeCollider).setWorldPosition(transform.worldPosition);\n\n      const worldScale = transform.lossyWorldScale;\n      for (let i = 0, n = shapes.length; i < n; i++) {\n        shapes[i]._nativeShape.setWorldScale(worldScale);\n      }\n      this._updateFlag.flag = false;\n    }\n  }\n\n  /**\n   * @internal\n   * @override\n   */\n  _onLateUpdate() {\n    const position = this.entity.transform.worldPosition;\n    (<ICharacterController>this._nativeCollider).getWorldPosition(position);\n    this.entity.transform.worldPosition = position;\n    this._updateFlag.flag = false;\n  }\n\n  /**\n   * @override\n   * @internal\n   */\n  _onEnable() {\n    this.engine.physicsManager._addCharacterController(this);\n  }\n\n  /**\n   * @override\n   * @internal\n   */\n  _onDisable() {\n    this.engine.physicsManager._removeCharacterController(this);\n  }\n}\n","import { IColliderShape } from \"@oasis-engine/design\";\nimport { PhysicsMaterial } from \"../PhysicsMaterial\";\nimport { Vector3 } from \"@oasis-engine/math\";\nimport { Collider } from \"../Collider\";\n\n/**\n * Abstract class for collider shapes.\n */\nexport abstract class ColliderShape {\n  private static _idGenerator: number = 0;\n\n  /** @internal */\n  _collider: Collider;\n  /** @internal */\n  _nativeShape: IColliderShape;\n\n  protected _id: number;\n  protected _position: Vector3 = new Vector3();\n  protected _material: PhysicsMaterial;\n  protected _isTrigger: boolean = false;\n  protected _isSceneQuery: boolean = true;\n  private _contactOffset: number = 0;\n\n  /**\n   * Collider owner of this shape.\n   */\n  get collider(): Collider {\n    return this._collider;\n  }\n\n  /**\n   * Unique id for this shape.\n   */\n  get id(): number {\n    return this._id;\n  }\n\n  /**\n   * Contact offset for this shape.\n   */\n  get contactOffset() {\n    return this._contactOffset;\n  }\n\n  set contactOffset(value: number) {\n    this._contactOffset = value;\n    this._nativeShape.setContactOffset(value);\n  }\n\n  /**\n   * Physical material.\n   */\n  get material(): PhysicsMaterial {\n    return this._material;\n  }\n\n  set material(value: PhysicsMaterial) {\n    this._material = value;\n    this._nativeShape.setMaterial(value._nativeMaterial);\n  }\n\n  /**\n   * The local position of this ColliderShape.\n   */\n  get position(): Vector3 {\n    return this._position;\n  }\n\n  set position(value: Vector3) {\n    if (this._position !== value) {\n      this._position.copyFrom(value);\n    }\n    this._nativeShape.setPosition(value);\n  }\n\n  /**\n   * True for TriggerShape, false for SimulationShape.\n   */\n  get isTrigger(): boolean {\n    return this._isTrigger;\n  }\n\n  set isTrigger(value: boolean) {\n    this._isTrigger = value;\n    this._nativeShape.setIsTrigger(value);\n  }\n\n  protected constructor() {\n    this._material = new PhysicsMaterial();\n    this._id = ColliderShape._idGenerator++;\n  }\n\n  /**\n   * Set local position of collider shape\n   * @param x - The x component of the vector, default 0\n   * @param y - The y component of the vector, default 0\n   * @param z - The z component of the vector, default 0\n   */\n  setPosition(x: number, y: number, z: number): void {\n    this._position.set(x, y, z);\n    this._nativeShape.setPosition(this._position);\n  }\n\n  /**\n   * @internal\n   */\n  _destroy() {\n    this._material._destroy();\n    this._nativeShape.destroy();\n  }\n}\n","import { ColliderShape } from \"./ColliderShape\";\nimport { IBoxColliderShape } from \"@oasis-engine/design\";\nimport { Vector3 } from \"@oasis-engine/math\";\nimport { PhysicsManager } from \"../PhysicsManager\";\n\n/**\n * Physical collider shape for box.\n */\nexport class BoxColliderShape extends ColliderShape {\n  private _size: Vector3 = new Vector3(1, 1, 1);\n  /**\n   * Size of box shape.\n   */\n  get size(): Vector3 {\n    return this._size;\n  }\n\n  set size(value: Vector3) {\n    if (this._size != value) {\n      this._size.copyFrom(value);\n    }\n    (<IBoxColliderShape>this._nativeShape).setSize(value);\n  }\n\n  constructor() {\n    super();\n    this._nativeShape = PhysicsManager._nativePhysics.createBoxColliderShape(\n      this._id,\n      this._size,\n      this._material._nativeMaterial\n    );\n  }\n\n  /**\n   * Set size of box.\n   * @param x - Size of x-axis\n   * @param y - Size of y-axis\n   * @param z - Size of z-axis\n   */\n  setSize(x: number, y: number, z: number): void {\n    this._size.x = x;\n    this._size.y = y;\n    this._size.z = z;\n    (<IBoxColliderShape>this._nativeShape).setSize(this._size);\n  }\n}\n","import { ColliderShape } from \"./ColliderShape\";\nimport { ISphereColliderShape } from \"@oasis-engine/design\";\nimport { PhysicsManager } from \"../PhysicsManager\";\n\n/**\n * Physical collider shape for sphere.\n */\nexport class SphereColliderShape extends ColliderShape {\n  private _radius: number = 1;\n\n  /**\n   * Radius of sphere shape.\n   */\n  get radius(): number {\n    return this._radius;\n  }\n\n  set radius(value: number) {\n    this._radius = value;\n    (<ISphereColliderShape>this._nativeShape).setRadius(value);\n  }\n\n  constructor() {\n    super();\n    this._nativeShape = PhysicsManager._nativePhysics.createSphereColliderShape(\n      this._id,\n      this._radius,\n      this._material._nativeMaterial\n    );\n  }\n}\n","import { IPlaneColliderShape } from \"@oasis-engine/design\";\nimport { Vector3 } from \"@oasis-engine/math\";\nimport { PhysicsManager } from \"../PhysicsManager\";\nimport { ColliderShape } from \"./ColliderShape\";\n\n/**\n * Physical collider shape plane.\n */\nexport class PlaneColliderShape extends ColliderShape {\n  private _rotation: Vector3 = new Vector3();\n\n  /**\n   * The local rotation of this plane.\n   */\n  get rotation(): Vector3 {\n    return this._rotation;\n  }\n\n  set rotation(value: Vector3) {\n    if (this._rotation != value) {\n      this._rotation.copyFrom(value);\n    }\n    (<IPlaneColliderShape>this._nativeShape).setRotation(value);\n  }\n\n  constructor() {\n    super();\n    this._nativeShape = PhysicsManager._nativePhysics.createPlaneColliderShape(\n      this._id,\n      this._material._nativeMaterial\n    );\n  }\n\n  /**\n   * Set the local rotation of this plane.\n   * @param x - Radian of yaw\n   * @param y - Radian of pitch\n   * @param z - Radian of roll\n   */\n  setRotation(x: number, y: number, z: number): void {\n    this._rotation.set(x, y, z);\n    (<IPlaneColliderShape>this._nativeShape).setRotation(this._rotation);\n  }\n}\n","/**\n * The up axis of the collider shape.\n */\nexport enum ColliderShapeUpAxis {\n  /** Up axis is X. */\n  X,\n  /** Up axis is Y. */\n  Y,\n  /** Up axis is Z. */\n  Z\n}","import { ColliderShape } from \"./ColliderShape\";\nimport { ICapsuleColliderShape } from \"@oasis-engine/design\";\nimport { PhysicsManager } from \"../PhysicsManager\";\nimport { ColliderShapeUpAxis } from \"../enums/ColliderShapeUpAxis\";\n\n/**\n * Physical collider shape for capsule.\n */\nexport class CapsuleColliderShape extends ColliderShape {\n  private _radius: number = 1;\n  private _height: number = 2;\n  private _upAxis: ColliderShapeUpAxis = ColliderShapeUpAxis.Y;\n\n  /**\n   * Radius of capsule.\n   */\n  get radius(): number {\n    return this._radius;\n  }\n\n  set radius(value: number) {\n    this._radius = value;\n    (<ICapsuleColliderShape>this._nativeShape).setRadius(value);\n  }\n\n  /**\n   * Height of capsule.\n   */\n  get height(): number {\n    return this._height;\n  }\n\n  set height(value: number) {\n    this._height = value;\n    (<ICapsuleColliderShape>this._nativeShape).setHeight(value);\n  }\n\n  /**\n   * Up axis of capsule.\n   */\n  get upAxis(): ColliderShapeUpAxis {\n    return this._upAxis;\n  }\n\n  set upAxis(value: ColliderShapeUpAxis) {\n    this._upAxis = value;\n    (<ICapsuleColliderShape>this._nativeShape).setUpAxis(value);\n  }\n\n  constructor() {\n    super();\n    this._nativeShape = PhysicsManager._nativePhysics.createCapsuleColliderShape(\n      this._id,\n      this._radius,\n      this._height,\n      this._material._nativeMaterial\n    );\n    (<ICapsuleColliderShape>this._nativeShape).setUpAxis(ColliderShapeUpAxis.Y);\n  }\n}\n","import { IJoint } from \"@oasis-engine/design\";\nimport { Vector3, Quaternion } from \"@oasis-engine/math\";\nimport { Component } from \"../../Component\";\nimport { Collider } from \"../Collider\";\nimport { dependentComponents } from \"../../ComponentsDependencies\";\nimport { Entity } from \"../../Entity\";\n\n/**\n * A base class providing common functionality for joints.\n * @decorator `@dependentComponents(Collider)`\n */\n@dependentComponents(Collider)\nexport class Joint extends Component {\n  protected _connectedCollider = new JointCollider();\n  protected _collider = new JointCollider();\n  protected _nativeJoint: IJoint;\n  private _force: number = 0;\n  private _torque: number = 0;\n\n  /**\n   * The connected collider.\n   */\n  get connectedCollider(): Collider {\n    return this._connectedCollider.collider;\n  }\n\n  set connectedCollider(value: Collider) {\n    if (this._connectedCollider.collider !== value) {\n      this._connectedCollider.collider = value;\n      this._nativeJoint.setConnectedCollider(value._nativeCollider);\n    }\n  }\n\n  /**\n   * The connected anchor position.\n   * @remarks If connectedCollider is set, this anchor is relative offset, or the anchor is world position.\n   */\n  get connectedAnchor(): Vector3 {\n    return this._connectedCollider.localPosition;\n  }\n\n  set connectedAnchor(value: Vector3) {\n    const connectedAnchor = this._connectedCollider.localPosition;\n    if (value !== connectedAnchor) {\n      connectedAnchor.copyFrom(value);\n    }\n    this._nativeJoint.setConnectedAnchor(value);\n  }\n\n  /**\n   *  The scale to apply to the inverse mass of collider 0 for resolving this constraint.\n   */\n  get connectedMassScale(): number {\n    return this._connectedCollider.massScale;\n  }\n\n  set connectedMassScale(value: number) {\n    if (value !== this._connectedCollider.massScale) {\n      this._connectedCollider.massScale = value;\n      this._nativeJoint.setConnectedMassScale(value);\n    }\n  }\n\n  /**\n   * The scale to apply to the inverse inertia of collider0 for resolving this constraint.\n   */\n  get connectedInertiaScale(): number {\n    return this._connectedCollider.inertiaScale;\n  }\n\n  set connectedInertiaScale(value: number) {\n    if (value !== this._connectedCollider.inertiaScale) {\n      this._connectedCollider.inertiaScale = value;\n      this._nativeJoint.setConnectedInertiaScale(value);\n    }\n  }\n\n  /**\n   * The scale to apply to the inverse mass of collider 1 for resolving this constraint.\n   */\n  get massScale(): number {\n    return this._collider.massScale;\n  }\n\n  set massScale(value: number) {\n    if (value !== this._collider.massScale) {\n      this._collider.massScale = value;\n      this._nativeJoint.setMassScale(value);\n    }\n  }\n\n  /**\n   * The scale to apply to the inverse inertia of collider1 for resolving this constraint.\n   */\n  get inertiaScale(): number {\n    return this._collider.inertiaScale;\n  }\n\n  set inertiaScale(value: number) {\n    if (value !== this._collider.inertiaScale) {\n      this._collider.inertiaScale = value;\n      this._nativeJoint.setInertiaScale(value);\n    }\n  }\n\n  /**\n   * The maximum force the joint can apply before breaking.\n   */\n  get breakForce(): number {\n    return this._force;\n  }\n\n  set breakForce(value: number) {\n    if (value !== this._force) {\n      this._force = value;\n      this._nativeJoint.setBreakForce(value);\n    }\n  }\n\n  /**\n   * The maximum torque the joint can apply before breaking.\n   */\n  get breakTorque(): number {\n    return this._torque;\n  }\n\n  set breakTorque(value: number) {\n    if (value !== this._torque) {\n      this._torque = value;\n      this._nativeJoint.setBreakTorque(value);\n    }\n  }\n\n  constructor(entity: Entity) {\n    super(entity);\n    this._connectedCollider.localPosition = new Vector3();\n  }\n}\n\n/**\n * @internal\n */\nclass JointCollider {\n  collider: Collider = null;\n  localPosition: Vector3;\n  localRotation: Quaternion;\n  massScale: number = 0;\n  inertiaScale: number = 0;\n}\n","import { Joint } from \"./Joint\";\nimport { PhysicsManager } from \"../PhysicsManager\";\nimport { Collider } from \"../Collider\";\n\n/*\n * A fixed joint permits no relative movement between two colliders. ie the colliders are glued together.\n */\nexport class FixedJoint extends Joint {\n  /**\n   * @override\n   * @internal\n   */\n  _onAwake() {\n    const collider = this._collider;\n    collider.collider = this.entity.getComponent(Collider);\n    this._nativeJoint = PhysicsManager._nativePhysics.createFixedJoint(collider.collider._nativeCollider);\n  }\n}\n","/**\n * Flags specific to the Hinge Joint.\n * @internal\n */\nexport enum HingeJointFlag {\n  /** enable the limit */\n  LimitEnabled = 1,\n  /** enable the drive */\n  DriveEnabled = 2,\n  /** if the existing velocity is beyond the drive velocity, do not add force */\n  DriveFreeSpin = 4\n}\n","import { Joint } from \"./Joint\";\nimport { IHingeJoint } from \"@oasis-engine/design\";\nimport { PhysicsManager } from \"../PhysicsManager\";\nimport { HingeJointFlag } from \"../enums/HingeJointFlag\";\nimport { Collider } from \"../Collider\";\nimport { Vector3 } from \"@oasis-engine/math\";\nimport { JointMotor } from \"./JointMotor\";\nimport { JointLimits } from \"./JointLimits\";\n\n/**\n * A joint which behaves in a similar way to a hinge or axle.\n */\nexport class HingeJoint extends Joint {\n  private _axis: Vector3 = new Vector3(1, 0, 0);\n  private _hingeFlags: number = 0;\n  private _useSpring: boolean = false;\n  private _jointMonitor: JointMotor;\n  private _limits: JointLimits;\n\n  /**\n   * The anchor rotation.\n   */\n  get axis(): Vector3 {\n    return this._axis;\n  }\n\n  set axis(value: Vector3) {\n    const axis = this._axis;\n    if (value !== axis) {\n      axis.copyFrom(value);\n    }\n    (<IHingeJoint>this._nativeJoint).setAxis(axis);\n  }\n\n  /**\n   * The swing offset.\n   */\n  get swingOffset(): Vector3 {\n    return this._collider.localPosition;\n  }\n\n  set swingOffset(value: Vector3) {\n    const swingOffset = this._collider.localPosition;\n    if (value !== swingOffset) {\n      swingOffset.copyFrom(value);\n    }\n    (<IHingeJoint>this._nativeJoint).setSwingOffset(swingOffset);\n  }\n\n  /**\n   * The current angle in degrees of the joint relative to its rest position.\n   */\n  get angle(): number {\n    return (<IHingeJoint>this._nativeJoint).getAngle();\n  }\n\n  /**\n   * The angular velocity of the joint in degrees per second.\n   */\n  get velocity(): Readonly<Vector3> {\n    return (<IHingeJoint>this._nativeJoint).getVelocity();\n  }\n\n  /**\n   * Enables the joint's limits. Disabled by default.\n   */\n  get useLimits(): boolean {\n    return (this._hingeFlags & HingeJointFlag.LimitEnabled) == HingeJointFlag.LimitEnabled;\n  }\n\n  set useLimits(value: boolean) {\n    if (value !== this.useLimits) {\n      this._hingeFlags |= HingeJointFlag.LimitEnabled;\n    }\n    (<IHingeJoint>this._nativeJoint).setHingeJointFlag(HingeJointFlag.LimitEnabled, value);\n  }\n\n  /**\n   * Enables the joint's motor. Disabled by default.\n   */\n  get useMotor(): boolean {\n    return (this._hingeFlags & HingeJointFlag.DriveEnabled) == HingeJointFlag.DriveEnabled;\n  }\n\n  set useMotor(value: boolean) {\n    if (value !== this.useMotor) {\n      this._hingeFlags |= HingeJointFlag.DriveEnabled;\n    }\n    (<IHingeJoint>this._nativeJoint).setHingeJointFlag(HingeJointFlag.DriveEnabled, value);\n  }\n\n  /**\n   * Enables the joint's spring. Disabled by default.\n   */\n  get useSpring(): boolean {\n    return this._useSpring;\n  }\n\n  set useSpring(value: boolean) {\n    this._useSpring = value;\n    this.limits = this._limits;\n  }\n\n  /**\n   * The motor will apply a force up to a maximum force to achieve the target velocity in degrees per second.\n   */\n  get motor(): JointMotor {\n    return this._jointMonitor;\n  }\n\n  set motor(value: JointMotor) {\n    this._jointMonitor = value;\n    (<IHingeJoint>this._nativeJoint).setDriveVelocity(value.targetVelocity);\n    (<IHingeJoint>this._nativeJoint).setDriveForceLimit(value.forceLimit);\n    (<IHingeJoint>this._nativeJoint).setDriveGearRatio(value.gearRation);\n    (<IHingeJoint>this._nativeJoint).setHingeJointFlag(HingeJointFlag.DriveFreeSpin, value.freeSpin);\n  }\n\n  /**\n   * Limit of angular rotation (in degrees) on the hinge joint.\n   */\n  get limits(): JointLimits {\n    return this._limits;\n  }\n\n  set limits(value: JointLimits) {\n    this._limits = value;\n    if (this.useSpring) {\n      (<IHingeJoint>this._nativeJoint).setSoftLimit(value.min, value.max, value.stiffness, value.damping);\n    } else {\n      (<IHingeJoint>this._nativeJoint).setHardLimit(value.min, value.max, value.contactDistance);\n    }\n  }\n\n  /**\n   * @override\n   * @internal\n   */\n  _onAwake() {\n    const collider = this._collider;\n    collider.localPosition = new Vector3();\n    collider.collider = this.entity.getComponent(Collider);\n    this._nativeJoint = PhysicsManager._nativePhysics.createHingeJoint(collider.collider._nativeCollider);\n  }\n}\n","import { Joint } from \"./Joint\";\nimport { ISpringJoint } from \"@oasis-engine/design\";\nimport { PhysicsManager } from \"../PhysicsManager\";\nimport { Collider } from \"../Collider\";\nimport { Vector3 } from \"@oasis-engine/math\";\n\n/**\n * A joint that maintains an upper or lower bound (or both) on the distance between two points on different objects.\n */\nexport class SpringJoint extends Joint {\n  private _minDistance: number = 0;\n  private _maxDistance: number = 0;\n  private _tolerance: number = 0.25;\n  private _stiffness: number = 0;\n  private _damping: number = 0;\n\n  /**\n   * The swing offset.\n   */\n  get swingOffset(): Vector3 {\n    return this._collider.localPosition;\n  }\n\n  set swingOffset(value: Vector3) {\n    const swingOffset = this._collider.localPosition;\n    if (value !== swingOffset) {\n      swingOffset.copyFrom(value);\n    }\n    (<ISpringJoint>this._nativeJoint).setSwingOffset(value);\n  }\n\n  /**\n   * The minimum distance.\n   */\n  get minDistance(): number {\n    return this._minDistance;\n  }\n\n  set minDistance(value: number) {\n    this._minDistance = value;\n    (<ISpringJoint>this._nativeJoint).setMinDistance(value);\n  }\n\n  /**\n   * The maximum distance.\n   */\n  get maxDistance(): number {\n    return this._maxDistance;\n  }\n\n  set maxDistance(value: number) {\n    this._maxDistance = value;\n    (<ISpringJoint>this._nativeJoint).setMaxDistance(value);\n  }\n\n  /**\n   * The distance beyond the allowed range at which the joint becomes active.\n   */\n  get tolerance(): number {\n    return this._tolerance;\n  }\n\n  set tolerance(value: number) {\n    this._tolerance = value;\n    (<ISpringJoint>this._nativeJoint).setTolerance(value);\n  }\n\n  /**\n   * The spring strength of the joint.\n   */\n  get stiffness(): number {\n    return this._stiffness;\n  }\n\n  set stiffness(value: number) {\n    this._stiffness = value;\n    (<ISpringJoint>this._nativeJoint).setStiffness(value);\n  }\n\n  /**\n   * The degree of damping of the joint spring of the joint.\n   */\n  get damping(): number {\n    return this._damping;\n  }\n\n  set damping(value: number) {\n    this._damping = value;\n    (<ISpringJoint>this._nativeJoint).setDamping(value);\n  }\n\n  /**\n   * @override\n   * @internal\n   */\n  _onAwake() {\n    const collider = this._collider;\n    collider.localPosition = new Vector3();\n    collider.collider = this.entity.getComponent(Collider);\n    this._nativeJoint = PhysicsManager._nativePhysics.createSpringJoint(collider.collider._nativeCollider);\n  }\n}\n","/**\n * JointLimits is used to limit the joints angle.\n */\nexport class JointLimits {\n  /** The upper angular limit (in degrees) of the joint. */\n  max: number = 0;\n  /** The lower angular limit (in degrees) of the joint. */\n  min: number = 0;\n  /** Distance inside the limit value at which the limit will be considered to be active by the solver. */\n  contactDistance: number = -1;\n\n  /** The spring forces used to reach the target position. */\n  stiffness: number = 0;\n  /** The damper force uses to dampen the spring. */\n  damping: number = 0;\n}\n","/**\n * The JointMotor is used to motorize a joint.\n */\nexport class JointMotor {\n  /** The motor will apply a force up to force to achieve targetVelocity. */\n  targetVelocity: number = 0;\n  /** The force limit.*/\n  forceLimit: number = Number.MAX_VALUE;\n  /** Gear ration for the motor */\n  gearRation: number = 1.0;\n  /** If freeSpin is enabled the motor will only accelerate but never slow down. */\n  freeSpin: boolean = false;\n}\n","/**\n * The up axis of the collider shape.\n */\nexport enum ControllerCollisionFlag {\n  /** Character is colliding to the sides. */\n  Sides = 1,\n  /** Character has collision above. */\n  Up = 2,\n  /** Character has collision below. */\n  Down = 4\n}\n","import { Entity } from \"../Entity\";\nimport { Collider } from \"./Collider\";\nimport { PhysicsManager } from \"./PhysicsManager\";\n\n/**\n * A static collider component that will not move.\n * @remarks Mostly used for object which always stays at the same place and never moves around.\n */\nexport class StaticCollider extends Collider {\n  /**\n   * @internal\n   */\n  constructor(entity: Entity) {\n    super(entity);\n    const { transform } = this.entity;\n    this._nativeCollider = PhysicsManager._nativePhysics.createStaticCollider(\n      transform.worldPosition,\n      transform.worldRotationQuaternion\n    );\n  }\n}\n","import { IDynamicCollider } from \"@oasis-engine/design\";\nimport { Quaternion, Vector3 } from \"@oasis-engine/math\";\nimport { Entity } from \"../Entity\";\nimport { Collider } from \"./Collider\";\nimport { PhysicsManager } from \"./PhysicsManager\";\n\n/**\n * A dynamic collider can act with self-defined movement or physical force.\n */\nexport class DynamicCollider extends Collider {\n  private _linearDamping: number = 0;\n  private _angularDamping: number = 0;\n  private _linearVelocity = new Vector3();\n  private _angularVelocity = new Vector3();\n  private _mass: number = 0;\n  private _centerOfMass = new Vector3();\n  private _inertiaTensor = new Vector3();\n  private _maxAngularVelocity: number = 0;\n  private _maxDepenetrationVelocity: number = 0;\n  private _sleepThreshold: number = 0;\n  private _solverIterations: number = 0;\n  private _isKinematic: boolean = false;\n  private _constraints: DynamicColliderConstraints = 0;\n  private _collisionDetectionMode: CollisionDetectionMode = CollisionDetectionMode.Discrete;\n\n  /**\n   * The linear damping of the dynamic collider.\n   */\n  get linearDamping(): number {\n    return this._linearDamping;\n  }\n\n  set linearDamping(value: number) {\n    this._linearDamping = value;\n    (<IDynamicCollider>this._nativeCollider).setLinearDamping(value);\n  }\n\n  /**\n   * The angular damping of the dynamic collider.\n   */\n  get angularDamping(): number {\n    return this._angularDamping;\n  }\n\n  set angularDamping(value: number) {\n    this._angularDamping = value;\n    (<IDynamicCollider>this._nativeCollider).setAngularDamping(value);\n  }\n\n  /**\n   * The linear velocity vector of the dynamic collider measured in world unit per second.\n   */\n  get linearVelocity(): Vector3 {\n    return this._linearVelocity;\n  }\n\n  set linearVelocity(value: Vector3) {\n    if (this._linearVelocity !== value) {\n      this._linearVelocity.copyFrom(value);\n    }\n    (<IDynamicCollider>this._nativeCollider).setLinearVelocity(this._linearVelocity);\n  }\n\n  /**\n   * The angular velocity vector of the dynamic collider measured in radians per second.\n   */\n  get angularVelocity(): Vector3 {\n    return this._angularVelocity;\n  }\n\n  set angularVelocity(value: Vector3) {\n    if (this._angularVelocity !== value) {\n      this._angularVelocity.copyFrom(value);\n    }\n    (<IDynamicCollider>this._nativeCollider).setAngularVelocity(this._angularVelocity);\n  }\n\n  /**\n   * The mass of the dynamic collider.\n   */\n  get mass(): number {\n    return this._mass;\n  }\n\n  set mass(value: number) {\n    this._mass = value;\n    (<IDynamicCollider>this._nativeCollider).setMass(value);\n  }\n\n  /**\n   * The center of mass relative to the transform's origin.\n   */\n  get centerOfMass(): Vector3 {\n    return this._centerOfMass;\n  }\n\n  set centerOfMass(value: Vector3) {\n    if (this._centerOfMass !== value) {\n      this._centerOfMass.copyFrom(value);\n    }\n    (<IDynamicCollider>this._nativeCollider).setCenterOfMass(this._centerOfMass);\n  }\n\n  /**\n   * The diagonal inertia tensor of mass relative to the center of mass.\n   */\n  get inertiaTensor(): Vector3 {\n    return this._inertiaTensor;\n  }\n\n  set inertiaTensor(value: Vector3) {\n    if (this._inertiaTensor !== value) {\n      this._inertiaTensor.copyFrom(value);\n    }\n    (<IDynamicCollider>this._nativeCollider).setInertiaTensor(this._inertiaTensor);\n  }\n\n  /**\n   * The maximum angular velocity of the collider measured in radians per second. (Default 7) range { 0, infinity }.\n   */\n  get maxAngularVelocity(): number {\n    return this._maxAngularVelocity;\n  }\n\n  set maxAngularVelocity(value: number) {\n    this._maxAngularVelocity = value;\n    (<IDynamicCollider>this._nativeCollider).setMaxAngularVelocity(value);\n  }\n\n  /**\n   * Maximum velocity of a collider when moving out of penetrating state.\n   */\n  get maxDepenetrationVelocity(): number {\n    return this._maxDepenetrationVelocity;\n  }\n\n  set maxDepenetrationVelocity(value: number) {\n    this._maxDepenetrationVelocity = value;\n    (<IDynamicCollider>this._nativeCollider).setMaxDepenetrationVelocity(value);\n  }\n\n  /**\n   * The mass-normalized energy threshold, below which objects start going to sleep.\n   */\n  get sleepThreshold(): number {\n    return this._sleepThreshold;\n  }\n\n  set sleepThreshold(value: number) {\n    this._sleepThreshold = value;\n    (<IDynamicCollider>this._nativeCollider).setSleepThreshold(value);\n  }\n\n  /**\n   * The solverIterations determines how accurately collider joints and collision contacts are resolved.\n   */\n  get solverIterations(): number {\n    return this._solverIterations;\n  }\n\n  set solverIterations(value: number) {\n    this._solverIterations = value;\n    (<IDynamicCollider>this._nativeCollider).setSolverIterations(value);\n  }\n\n  /**\n   * Controls whether physics affects the dynamic collider.\n   */\n  get isKinematic(): boolean {\n    return this._isKinematic;\n  }\n\n  set isKinematic(value: boolean) {\n    this._isKinematic = value;\n    (<IDynamicCollider>this._nativeCollider).setIsKinematic(value);\n  }\n\n  /**\n   * The particular rigid dynamic lock flag.\n   */\n  get constraints(): DynamicColliderConstraints {\n    return this._constraints;\n  }\n\n  set constraints(value: DynamicColliderConstraints) {\n    this._constraints = value;\n    (<IDynamicCollider>this._nativeCollider).setConstraints(value);\n  }\n\n  /**\n   * The colliders' collision detection mode.\n   */\n  get collisionDetectionMode(): CollisionDetectionMode {\n    return this._collisionDetectionMode;\n  }\n\n  set collisionDetectionMode(value: CollisionDetectionMode) {\n    this._collisionDetectionMode = value;\n    (<IDynamicCollider>this._nativeCollider).setCollisionDetectionMode(value);\n  }\n\n  /**\n   * @internal\n   */\n  constructor(entity: Entity) {\n    super(entity);\n    const { transform } = this.entity;\n    this._nativeCollider = PhysicsManager._nativePhysics.createDynamicCollider(\n      transform.worldPosition,\n      transform.worldRotationQuaternion\n    );\n  }\n\n  /**\n   * Apply a force to the DynamicCollider.\n   * @param force - The force make the collider move\n   */\n  applyForce(force: Vector3): void {\n    (<IDynamicCollider>this._nativeCollider).addForce(force);\n  }\n\n  /**\n   * Apply a torque to the DynamicCollider.\n   * @param torque - The force make the collider rotate\n   */\n  applyTorque(torque: Vector3): void {\n    (<IDynamicCollider>this._nativeCollider).addTorque(torque);\n  }\n\n  /**\n   * Moves kinematically controlled dynamic actors through the game world.\n   * @param position - The desired position for the kinematic actor\n   */\n  move(position: Vector3): void;\n\n  /**\n   * Moves kinematically controlled dynamic actors through the game world.\n   * @param rotation - The desired rotation for the kinematic actor\n   */\n  move(rotation: Quaternion): void;\n\n  /**\n   * Moves kinematically controlled dynamic actors through the game world.\n   * @param position - The desired position for the kinematic actor\n   * @param rotation - The desired rotation for the kinematic actor\n   */\n  move(position: Vector3, rotation: Quaternion): void;\n\n  move(positionOrRotation: Vector3 | Quaternion, rotation?: Quaternion): void {\n    (<IDynamicCollider>this._nativeCollider).move(positionOrRotation, rotation);\n  }\n\n  /**\n   * Forces a collider to sleep at least one frame.\n   */\n  sleep(): void {\n    (<IDynamicCollider>this._nativeCollider).sleep();\n  }\n\n  /**\n   * Forces a collider to wake up.\n   */\n  wakeUp(): void {\n    (<IDynamicCollider>this._nativeCollider).wakeUp();\n  }\n\n  /**\n   * @override\n   * @internal\n   */\n  _onLateUpdate(): void {\n    const { transform } = this.entity;\n    const { worldPosition, worldRotationQuaternion } = transform;\n    (<IDynamicCollider>this._nativeCollider).getWorldTransform(worldPosition, worldRotationQuaternion);\n    this._updateFlag.flag = false;\n  }\n}\n\n/**\n * The collision detection mode constants.\n */\nexport enum CollisionDetectionMode {\n  /** Continuous collision detection is off for this dynamic collider. */\n  Discrete,\n  /** Continuous collision detection is on for colliding with static mesh geometry. */\n  Continuous,\n  /** Continuous collision detection is on for colliding with static and dynamic geometry. */\n  ContinuousDynamic,\n  /** Speculative continuous collision detection is on for static and dynamic geometries */\n  ContinuousSpeculative\n}\n\n/**\n * Use these flags to constrain motion of dynamic collider.\n */\nexport enum DynamicColliderConstraints {\n  /** Not Freeze. */\n  None = 0,\n  /** Freeze motion along the X-axis. */\n  FreezePositionX = 1,\n  /** Freeze motion along the Y-axis. */\n  FreezePositionY = 2,\n  /** Freeze motion along the Z-axis. */\n  FreezePositionZ = 4,\n  /** Freeze rotation along the X-axis. */\n  FreezeRotationX = 8,\n  /** Freeze rotation along the Y-axis. */\n  FreezeRotationY = 16,\n  /** Freeze rotation along the Z-axis. */\n  FreezeRotationZ = 32\n}\n","/**\n *  The current phase of the pointer.\n */\nexport enum PointerPhase {\n  /** A Pointer pressed on the screen. */\n  Down,\n  /** A pointer moved on the screen. */\n  Move,\n  /** A pointer was lifted from the screen. */\n  Up,\n  /** The system cancelled tracking for the pointer. */\n  Leave\n}\n","/**\n * Defines values that specify the buttons on a pointer device.\n * Refer to the W3C standards.(https://www.w3.org/TR/uievents/#dom-mouseevent-button)\n * Refer to Microsoft's documentation.(https://docs.microsoft.com/en-us/dotnet/api/system.windows.input.mousebutton?view=windowsdesktop-6.0)\n */\nexport enum PointerButton {\n  /** Indicate the primary pointer of the device (in general, the left button or the only button on single-button devices, used to activate a user interface control or select text) or the un-initialized value. */\n  Primary = 0,\n  /** Indicate the auxiliary pointer (in general, the middle button, often combined with a mouse wheel). */\n  Auxiliary = 1,\n  /** Indicate the secondary pointer (in general, the right button, often used to display a context menu). */\n  Secondary = 2,\n  /** Indicate the X1 (back) pointer. */\n  XButton1 = 3,\n  /** Indicate the X2 (forward) pointer. */\n  XButton2 = 4,\n  /** Indicate the X3 pointer. */\n  XButton3 = 5,\n  /** Indicate the X4 pointer. */\n  XButton4 = 6,\n  /** Indicate the X5 pointer. */\n  XButton5 = 7,\n  /** Indicate the X6 pointer. */\n  XButton6 = 8,\n  /** Indicate the X7 pointer. */\n  XButton7 = 9,\n  /** Indicate the X8 pointer. */\n  XButton8 = 10\n}\n","import { Vector2 } from \"@oasis-engine/math\";\nimport { PointerPhase } from \"../enums/PointerPhase\";\n\n/**\n * Pointer.\n */\nexport class Pointer {\n  /**\n   * Unique id.\n   * @remarks Start from 0.\n   */\n  readonly id: number;\n  /** The phase of pointer. */\n  phase: PointerPhase = PointerPhase.Leave;\n  /** The position of the pointer in screen space pixel coordinates. */\n  position: Vector2 = new Vector2();\n\n  /** @internal */\n  _uniqueID: number;\n\n  /**\n   * @internal\n   */\n  constructor(id: number) {\n    this.id = id;\n  }\n}\n","import { Ray, Vector2 } from \"@oasis-engine/math\";\nimport { Canvas } from \"../../Canvas\";\nimport { DisorderedArray } from \"../../DisorderedArray\";\nimport { Engine } from \"../../Engine\";\nimport { Entity } from \"../../Entity\";\nimport { CameraClearFlags } from \"../../enums/CameraClearFlags\";\nimport { HitResult } from \"../../physics\";\nimport { PointerPhase } from \"../enums/PointerPhase\";\nimport { PointerButton } from \"../enums/PointerButton\";\nimport { IInput } from \"../interface/IInput\";\nimport { Pointer } from \"./Pointer\";\n\n/**\n * Pointer Manager.\n * @internal\n */\nexport class PointerManager implements IInput {\n  /** Refer to the W3C standards.(https://www.w3.org/TR/uievents/#dom-mouseevent-buttons) */\n  public static Buttons = [0x1, 0x4, 0x2, 0x8, 0x10, 0x20, 0x40, 0x80, 0x100, 0x200, 0x400];\n\n  private static _tempRay: Ray = new Ray();\n  private static _tempPoint: Vector2 = new Vector2();\n  private static _tempHitResult: HitResult = new HitResult();\n\n  /** @internal */\n  _pointers: Pointer[] = [];\n  /** @internal */\n  _movingDelta: Vector2 = new Vector2();\n  /** @internal */\n  _multiPointerEnabled: boolean = true;\n  /** @internal */\n  _buttons: number = 0x0;\n  /** @internal */\n  _upMap: number[] = [];\n  /** @internal */\n  _downMap: number[] = [];\n  /** @internal */\n  _downList: DisorderedArray<PointerButton> = new DisorderedArray();\n  /** @internal */\n  _upList: DisorderedArray<PointerButton> = new DisorderedArray();\n  /** @internal */\n  _currentPosition: Vector2 = new Vector2();\n\n  private _currentPressedEntity: Entity;\n  private _currentEnteredEntity: Entity;\n\n  private _engine: Engine;\n  private _canvas: Canvas;\n  private _htmlCanvas: HTMLCanvasElement;\n  private _nativeEvents: PointerEvent[] = [];\n  private _pointerPool: Pointer[];\n  private _keyEventList: number[] = [];\n  private _keyEventCount: number = 0;\n  private _needOverallPointers: boolean = false;\n  private _hadListener: boolean = false;\n  private _lastPositionFrameCount: number = 0;\n\n  /**\n   * Create a PointerManager.\n   * @param engine - The current engine instance\n   * @param htmlCanvas - HTMLCanvasElement\n   */\n  constructor(engine: Engine, htmlCanvas: HTMLCanvasElement) {\n    this._engine = engine;\n    this._canvas = engine.canvas;\n    this._htmlCanvas = htmlCanvas;\n    htmlCanvas.oncontextmenu = (event: UIEvent) => {\n      return false;\n    };\n    const onPointerEvent = (this._onPointerEvent = this._onPointerEvent.bind(this));\n    htmlCanvas.addEventListener(\"pointerdown\", onPointerEvent);\n    htmlCanvas.addEventListener(\"pointerup\", onPointerEvent);\n    htmlCanvas.addEventListener(\"pointerout\", onPointerEvent);\n    htmlCanvas.addEventListener(\"pointermove\", onPointerEvent);\n    this._hadListener = true;\n    // If there are no compatibility issues, navigator.maxTouchPoints should be used here.\n    this._pointerPool = new Array<Pointer>(11);\n  }\n\n  /**\n   * @internal\n   */\n  _update(frameCount: number): void {\n    this._needOverallPointers && this._overallPointers();\n    this._downList.length = 0;\n    this._upList.length = 0;\n    this._movingDelta.set(0, 0);\n    this._nativeEvents.length > 0 && this._handlePointerEvent(this._nativeEvents, frameCount);\n    this._pointers.length > 0 && (this._lastPositionFrameCount = frameCount);\n    if (this._engine.physicsManager._initialized) {\n      const rayCastEntity = this._pointerRayCast();\n      const { _keyEventCount: keyEventCount } = this;\n      if (keyEventCount > 0) {\n        const { _keyEventList: keyEventList } = this;\n        for (let i = 0; i < keyEventCount; i++) {\n          switch (keyEventList[i]) {\n            case PointerKeyEvent.Down:\n              this._firePointerDown(rayCastEntity);\n              break;\n            case PointerKeyEvent.Up:\n              this._firePointerUpAndClick(rayCastEntity);\n              break;\n          }\n        }\n        this._firePointerExitAndEnter(rayCastEntity);\n        keyEventList[keyEventCount - 1] === PointerKeyEvent.Leave && (this._currentPressedEntity = null);\n        this._keyEventCount = 0;\n      } else {\n        this._firePointerDrag();\n        this._firePointerExitAndEnter(rayCastEntity);\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _onFocus(): void {\n    if (!this._hadListener) {\n      const { _htmlCanvas: htmlCanvas, _onPointerEvent: onPointerEvent } = this;\n      htmlCanvas.addEventListener(\"pointerdown\", onPointerEvent);\n      htmlCanvas.addEventListener(\"pointerup\", onPointerEvent);\n      htmlCanvas.addEventListener(\"pointerout\", onPointerEvent);\n      htmlCanvas.addEventListener(\"pointermove\", onPointerEvent);\n      this._hadListener = true;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _onBlur(): void {\n    if (this._hadListener) {\n      const { _htmlCanvas: htmlCanvas, _onPointerEvent: onPointerEvent } = this;\n      htmlCanvas.removeEventListener(\"pointerdown\", onPointerEvent);\n      htmlCanvas.removeEventListener(\"pointerup\", onPointerEvent);\n      htmlCanvas.removeEventListener(\"pointerout\", onPointerEvent);\n      htmlCanvas.removeEventListener(\"pointermove\", onPointerEvent);\n      this._nativeEvents.length = 0;\n      this._pointerPool.length = 0;\n      this._currentEnteredEntity = null;\n      this._currentPressedEntity = null;\n      this._downList.length = 0;\n      this._upList.length = 0;\n      this._hadListener = false;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _destroy(): void {\n    // @ts-ignore\n    if (this._hadListener) {\n      const { _htmlCanvas: htmlCanvas, _onPointerEvent: onPointerEvent } = this;\n      htmlCanvas.removeEventListener(\"pointerdown\", onPointerEvent);\n      htmlCanvas.removeEventListener(\"pointerup\", onPointerEvent);\n      htmlCanvas.removeEventListener(\"pointerout\", onPointerEvent);\n      htmlCanvas.removeEventListener(\"pointermove\", onPointerEvent);\n      this._hadListener = false;\n    }\n    this._nativeEvents.length = 0;\n    this._pointerPool.length = 0;\n    this._pointers.length = 0;\n    this._currentPosition = null;\n    this._currentEnteredEntity = null;\n    this._currentPressedEntity = null;\n    this._engine = null;\n    this._canvas = null;\n  }\n\n  private _onPointerEvent(evt: PointerEvent) {\n    evt.cancelable && evt.preventDefault();\n    evt.type === \"pointerdown\" && this._htmlCanvas.focus();\n    this._nativeEvents.push(evt);\n  }\n\n  private _overallPointers(): void {\n    const { _pointers: pointers } = this;\n    let deleteCount = 0;\n    const totalCount = pointers.length;\n    for (let i = 0; i < totalCount; i++) {\n      if (pointers[i].phase === PointerPhase.Leave) {\n        deleteCount++;\n      } else {\n        if (deleteCount > 0) {\n          pointers[i - deleteCount] = pointers[i];\n        }\n      }\n    }\n    pointers.length = totalCount - deleteCount;\n    this._needOverallPointers = false;\n  }\n\n  private _getIndexByPointerID(pointerId: number): number {\n    const { _pointers: pointers } = this;\n    for (let i = pointers.length - 1; i >= 0; i--) {\n      if (pointers[i]._uniqueID === pointerId) {\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  private _addPointer(pointerId: number, x: number, y: number, phase: PointerPhase): void {\n    const { _pointers: pointers } = this;\n    const lastCount = pointers.length;\n    if (lastCount === 0 || this._multiPointerEnabled) {\n      const { _pointerPool: pointerPool } = this;\n      // Get Pointer smallest index.\n      let i = 0;\n      for (; i < lastCount; i++) {\n        if (pointers[i].id > i) {\n          break;\n        }\n      }\n      let pointer = pointerPool[i];\n      if (!pointer) {\n        pointer = pointerPool[i] = new Pointer(i);\n      }\n      pointer._uniqueID = pointerId;\n      pointer.position.set(x, y);\n      pointer.phase = phase;\n      pointers.splice(i, 0, pointer);\n    }\n  }\n\n  private _removePointer(pointerIndex: number): void {\n    const leavePointer = this._pointers[pointerIndex];\n    leavePointer.phase = PointerPhase.Leave;\n  }\n\n  private _updatePointer(pointerIndex: number, x: number, y: number, phase: PointerPhase): void {\n    const updatedPointer = this._pointers[pointerIndex];\n    updatedPointer.position.set(x, y);\n    updatedPointer.phase = phase;\n  }\n\n  private _handlePointerEvent(nativeEvents: PointerEvent[], frameCount: number): void {\n    const {\n      _pointers: pointers,\n      _keyEventList: keyEventList,\n      _upMap: upMap,\n      _downMap: downMap,\n      _upList: upList,\n      _downList: downList\n    } = this;\n    let activePointerCount = pointers.length;\n    const pixelRatioW = this._canvas.width / this._htmlCanvas.clientWidth;\n    const pixelRatioH = this._canvas.height / this._htmlCanvas.clientHeight;\n    const nativeEventsLen = nativeEvents.length;\n    for (let i = 0; i < nativeEventsLen; i++) {\n      const evt = nativeEvents[i];\n      const pointerButton: PointerButton = evt.button | PointerButton.Primary;\n      const pointerIndex = this._getIndexByPointerID(evt.pointerId);\n      switch (evt.type) {\n        case \"pointerdown\":\n          if (pointerIndex === -1) {\n            this._addPointer(evt.pointerId, evt.offsetX * pixelRatioW, evt.offsetY * pixelRatioH, PointerPhase.Down);\n            activePointerCount++;\n          } else {\n            this._updatePointer(pointerIndex, evt.offsetX * pixelRatioW, evt.offsetY * pixelRatioH, PointerPhase.Down);\n          }\n          activePointerCount === 1 && (keyEventList[this._keyEventCount++] = PointerKeyEvent.Down);\n          downList.add(pointerButton);\n          downMap[pointerButton] = frameCount;\n          break;\n        case \"pointerup\":\n          if (pointerIndex >= 0) {\n            this._updatePointer(pointerIndex, evt.offsetX * pixelRatioW, evt.offsetY * pixelRatioH, PointerPhase.Up);\n            activePointerCount === 1 && (keyEventList[this._keyEventCount++] = PointerKeyEvent.Up);\n          }\n          upList.add(pointerButton);\n          upMap[pointerButton] = frameCount;\n          break;\n        case \"pointermove\":\n          if (pointerIndex === -1) {\n            this._addPointer(evt.pointerId, evt.offsetX * pixelRatioW, evt.offsetY * pixelRatioH, PointerPhase.Move);\n            activePointerCount++;\n          } else {\n            this._updatePointer(pointerIndex, evt.offsetX * pixelRatioW, evt.offsetY * pixelRatioH, PointerPhase.Move);\n          }\n          break;\n        case \"pointerout\":\n          if (pointerIndex >= 0) {\n            this._removePointer(pointerIndex);\n            --activePointerCount === 0 && (keyEventList[this._keyEventCount++] = PointerKeyEvent.Leave);\n            this._needOverallPointers = true;\n          }\n          break;\n      }\n    }\n    this._buttons = nativeEvents[nativeEventsLen - 1].buttons;\n    const pointerCount = pointers.length;\n    if (pointerCount > 0) {\n      const { _currentPosition: currentPosition } = this;\n      const { x: lastX, y: lastY } = currentPosition;\n      if (activePointerCount === 0) {\n        // Get the pointer coordinates when leaving, and use it to correctly dispatch the click event.\n        const lastNativeEvent = nativeEvents[nativeEventsLen - 1];\n        currentPosition.set(lastNativeEvent.offsetX * pixelRatioW, lastNativeEvent.offsetY * pixelRatioH);\n      } else {\n        currentPosition.set(0, 0);\n        for (let i = 0; i < pointerCount; i++) {\n          currentPosition.add(pointers[i].position);\n        }\n        currentPosition.scale(1 / pointerCount);\n      }\n      // Update pointer moving delta.\n      if (this._lastPositionFrameCount === frameCount - 1) {\n        this._movingDelta.set(currentPosition.x - lastX, currentPosition.y - lastY);\n      }\n    }\n    nativeEvents.length = 0;\n  }\n\n  private _pointerRayCast(): Entity {\n    if (this._pointers.length > 0) {\n      const { _tempPoint: point, _tempRay: ray, _tempHitResult: hitResult } = PointerManager;\n      const { _activeCameras: cameras } = this._engine.sceneManager.activeScene;\n      const x = this._currentPosition.x / this._canvas.width;\n      const y = this._currentPosition.y / this._canvas.height;\n      for (let i = cameras.length - 1; i >= 0; i--) {\n        const camera = cameras[i];\n        if (!camera.enabled || camera.renderTarget) {\n          continue;\n        }\n        const { x: vpX, y: vpY, z: vpW, w: vpH } = camera.viewport;\n        if (x >= vpX && y >= vpY && x - vpX <= vpW && y - vpY <= vpH) {\n          point.set((x - vpX) / vpW, (y - vpY) / vpH);\n          // TODO: Only check which colliders have listened to the input.\n          if (\n            this._engine.physicsManager.raycast(\n              camera.viewportPointToRay(point, ray),\n              Number.MAX_VALUE,\n              camera.cullingMask,\n              hitResult\n            )\n          ) {\n            return hitResult.entity;\n          } else if (camera.clearFlags & CameraClearFlags.Color) {\n            return null;\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n  private _firePointerDrag(): void {\n    if (this._currentPressedEntity) {\n      const scripts = this._currentPressedEntity._scripts;\n      for (let i = scripts.length - 1; i >= 0; i--) {\n        const script = scripts.get(i);\n        script._waitHandlingInValid || script.onPointerDrag();\n      }\n    }\n  }\n\n  private _firePointerExitAndEnter(rayCastEntity: Entity): void {\n    if (this._currentEnteredEntity !== rayCastEntity) {\n      if (this._currentEnteredEntity) {\n        const scripts = this._currentEnteredEntity._scripts;\n        for (let i = scripts.length - 1; i >= 0; i--) {\n          const script = scripts.get(i);\n          script._waitHandlingInValid || script.onPointerExit();\n        }\n      }\n      if (rayCastEntity) {\n        const scripts = rayCastEntity._scripts;\n        for (let i = scripts.length - 1; i >= 0; i--) {\n          const script = scripts.get(i);\n          script._waitHandlingInValid || script.onPointerEnter();\n        }\n      }\n      this._currentEnteredEntity = rayCastEntity;\n    }\n  }\n\n  private _firePointerDown(rayCastEntity: Entity): void {\n    if (rayCastEntity) {\n      const scripts = rayCastEntity._scripts;\n      for (let i = scripts.length - 1; i >= 0; i--) {\n        const script = scripts.get(i);\n        script._waitHandlingInValid || script.onPointerDown();\n      }\n    }\n    this._currentPressedEntity = rayCastEntity;\n  }\n\n  private _firePointerUpAndClick(rayCastEntity: Entity): void {\n    const { _currentPressedEntity: pressedEntity } = this;\n    if (pressedEntity) {\n      const sameTarget = pressedEntity === rayCastEntity;\n      const scripts = pressedEntity._scripts;\n      for (let i = scripts.length - 1; i >= 0; i--) {\n        const script = scripts.get(i);\n        if (!script._waitHandlingInValid) {\n          sameTarget && script.onPointerClick();\n          script.onPointerUp();\n        }\n      }\n      this._currentPressedEntity = null;\n    }\n  }\n}\n\n/**\n * @internal\n */\nenum PointerKeyEvent {\n  Down,\n  Up,\n  Leave\n}\n","import { Vector3 } from \"@oasis-engine/math\";\nimport { IInput } from \"../interface/IInput\";\n\n/**\n * Wheel Manager.\n * @internal\n */\nexport class WheelManager implements IInput {\n  /** @internal */\n  _delta: Vector3 = new Vector3();\n\n  private _nativeEvents: WheelEvent[] = [];\n  private _canvas: HTMLCanvasElement;\n  private _hadListener: boolean;\n\n  /**\n   * Create a KeyboardManager.\n   */\n  constructor(htmlCanvas: HTMLCanvasElement) {\n    this._onWheelEvent = this._onWheelEvent.bind(this);\n    htmlCanvas.addEventListener(\"wheel\", this._onWheelEvent);\n    this._canvas = htmlCanvas;\n    this._hadListener = true;\n  }\n\n  /**\n   * @internal\n   */\n  _update(): void {\n    const { _delta: delta } = this;\n    delta.set(0, 0, 0);\n    const { _nativeEvents: nativeEvents } = this;\n    if (nativeEvents.length > 0) {\n      for (let i = nativeEvents.length - 1; i >= 0; i--) {\n        const evt = nativeEvents[i];\n        delta.x += evt.deltaX;\n        delta.y += evt.deltaY;\n        delta.z += evt.deltaZ;\n      }\n      nativeEvents.length = 0;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _onFocus(): void {\n    if (!this._hadListener) {\n      this._canvas.addEventListener(\"wheel\", this._onWheelEvent);\n      this._hadListener = true;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _onBlur(): void {\n    if (this._hadListener) {\n      this._canvas.removeEventListener(\"wheel\", this._onWheelEvent);\n      this._nativeEvents.length = 0;\n      this._delta.set(0, 0, 0);\n      this._hadListener = false;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _destroy(): void {\n    if (this._hadListener) {\n      this._canvas.removeEventListener(\"wheel\", this._onWheelEvent);\n      this._hadListener = false;\n    }\n    this._nativeEvents = null;\n  }\n\n  private _onWheelEvent(evt: WheelEvent): void {\n    evt.cancelable && evt.preventDefault();\n    this._nativeEvents.push(evt);\n  }\n}\n","import { Engine } from \"../Engine\";\nimport { KeyboardManager } from \"./keyboard/KeyboardManager\";\nimport { Keys } from \"./enums/Keys\";\nimport { Pointer } from \"./pointer/Pointer\";\nimport { PointerManager } from \"./pointer/PointerManager\";\nimport { PointerButton } from \"./enums/PointerButton\";\nimport { WheelManager } from \"./wheel/WheelManager\";\nimport { Vector2, Vector3 } from \"@oasis-engine/math\";\n\n/**\n * InputManager manages device input such as mouse, touch, keyboard, etc.\n */\nexport class InputManager {\n  /** Sometimes the input module will not be initialized, such as off-screen rendering. */\n  private _initialized: boolean = false;\n  private _curFrameCount: number = 0;\n  private _wheelManager: WheelManager;\n  private _pointerManager: PointerManager;\n  private _keyboardManager: KeyboardManager;\n\n  /**\n   * Pointer List.\n   */\n  get pointers(): Readonly<Pointer[] | null> {\n    return this._initialized ? this._pointerManager._pointers : null;\n  }\n\n  /**\n   *  Whether to handle multi-pointer.\n   */\n  get multiPointerEnabled(): boolean {\n    return this._initialized ? this._pointerManager._multiPointerEnabled : false;\n  }\n\n  set multiPointerEnabled(enabled: boolean) {\n    this._initialized && (this._pointerManager._multiPointerEnabled = enabled);\n  }\n\n  /**\n   * Get the change of the scroll wheel on the x-axis.\n   * @returns Change value\n   */\n  get wheelDelta(): Readonly<Vector3 | null> {\n    return this._initialized ? this._wheelManager._delta : null;\n  }\n\n  /**\n   * Get the change of the pointer.\n   * @returns Change value\n   */\n  get pointerMovingDelta(): Readonly<Vector2 | null> {\n    return this._initialized ? this._pointerManager._movingDelta : null;\n  }\n\n  /**\n   * Get the position of the pointer.\n   * @returns The position of the pointer\n   */\n  get pointerPosition(): Readonly<Vector2> {\n    return this._initialized && this._pointerManager._pointers.length > 0\n      ? this._pointerManager._currentPosition\n      : null;\n  }\n\n  /**\n   * Whether the key is being held down, if there is no parameter, return whether any key is being held down.\n   * @param key - The keys of the keyboard\n   * @returns Whether the key is being held down\n   */\n  isKeyHeldDown(key?: Keys): boolean {\n    if (this._initialized) {\n      if (key === undefined) {\n        return this._keyboardManager._curFrameHeldDownList.length > 0;\n      } else {\n        return this._keyboardManager._curHeldDownKeyToIndexMap[key] != null;\n      }\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Whether the key starts to be pressed down during the current frame, if there is no parameter, return whether any key starts to be pressed down during the current frame.\n   * @param key - The keys of the keyboard\n   * @returns Whether the key starts to be pressed down during the current frame\n   */\n  isKeyDown(key?: Keys): boolean {\n    if (this._initialized) {\n      if (key === undefined) {\n        return this._keyboardManager._curFrameDownList.length > 0;\n      } else {\n        return this._keyboardManager._downKeyToFrameCountMap[key] === this._curFrameCount;\n      }\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Whether the key is released during the current frame, if there is no parameter, return whether any key released during the current frame.\n   * @param key - The keys of the keyboard\n   * @returns Whether the key is released during the current frame\n   */\n  isKeyUp(key?: Keys): boolean {\n    if (this._initialized) {\n      if (key === undefined) {\n        return this._keyboardManager._curFrameUpList.length > 0;\n      } else {\n        return this._keyboardManager._upKeyToFrameCountMap[key] === this._curFrameCount;\n      }\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Whether the pointer is being held down, if there is no parameter, return whether any pointer is being held down.\n   * @param pointerButton - The pointerButton on a pointer device\n   * @returns Whether the pointer is being held down\n   */\n  isPointerHeldDown(pointerButton?: PointerButton): boolean {\n    if (this._initialized) {\n      if (pointerButton === undefined) {\n        return this._pointerManager._buttons !== 0;\n      } else {\n        return (this._pointerManager._buttons & PointerManager.Buttons[pointerButton]) !== 0;\n      }\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Whether the pointer starts to be pressed down during the current frame, if there is no parameter, return whether any pointer starts to be pressed down during the current frame.\n   * @param pointerButton - The pointerButton on a pointer device\n   * @returns Whether the pointer starts to be pressed down during the current frame\n   */\n  isPointerDown(pointerButton: PointerButton): boolean {\n    if (this._initialized) {\n      if (pointerButton === undefined) {\n        return this._pointerManager._downList.length > 0;\n      } else {\n        return this._pointerManager._downMap[pointerButton] === this._curFrameCount;\n      }\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Whether the pointer is released during the current frame, if there is no parameter, return whether any pointer released during the current frame.\n   * @param pointerButton - The pointerButtons on a mouse device\n   * @returns Whether the pointer is released during the current frame\n   */\n  isPointerUp(pointerButton: PointerButton): boolean {\n    if (this._initialized) {\n      if (pointerButton === undefined) {\n        return this._pointerManager._upList.length > 0;\n      } else {\n        return this._pointerManager._upMap[pointerButton] === this._curFrameCount;\n      }\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  constructor(engine: Engine) {\n    // @ts-ignore\n    const canvas = engine._canvas._webCanvas;\n    if (typeof OffscreenCanvas === \"undefined\" || !(canvas instanceof OffscreenCanvas)) {\n      this._wheelManager = new WheelManager(canvas);\n      this._pointerManager = new PointerManager(engine, canvas);\n      this._keyboardManager = new KeyboardManager(canvas);\n      this._onBlur = this._onBlur.bind(this);\n      window.addEventListener(\"blur\", this._onBlur);\n      this._onFocus = this._onFocus.bind(this);\n      window.addEventListener(\"focus\", this._onFocus);\n      this._initialized = true;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _update(): void {\n    if (this._initialized) {\n      ++this._curFrameCount;\n      this._wheelManager._update();\n      this._pointerManager._update(this._curFrameCount);\n      this._keyboardManager._update(this._curFrameCount);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _destroy(): void {\n    if (this._initialized) {\n      window.removeEventListener(\"blur\", this._onBlur);\n      window.removeEventListener(\"focus\", this._onFocus);\n      this._wheelManager._destroy();\n      this._pointerManager._destroy();\n      this._keyboardManager._destroy();\n    }\n  }\n\n  private _onBlur(): void {\n    this._wheelManager._onBlur();\n    this._pointerManager._onBlur();\n    this._keyboardManager._onBlur();\n  }\n\n  private _onFocus(): void {\n    this._wheelManager._onFocus();\n    this._pointerManager._onFocus();\n    this._keyboardManager._onFocus();\n  }\n}\n","/**\n * Render queue type.\n */\nexport enum RenderQueueType {\n  /** Opaque queue. */\n  Opaque,\n  /** Opaque queue, alpha cutoff. */\n  AlphaTest,\n  /** Transparent queue, rendering from back to front to ensure correct rendering of transparent objects. */\n  Transparent\n}\n","import { EngineObject } from \"../base/EngineObject\";\nimport { Engine } from \"../Engine\";\nimport { IRefObject } from \"./IRefObject\";\n\n/**\n * The base class of assets, with reference counting capability.\n */\nexport abstract class RefObject extends EngineObject implements IRefObject {\n  /** Whether to ignore the garbage collection check, if it is true, it will not be affected by ResourceManager.gc(). */\n  isGCIgnored: boolean = false;\n\n  private _refCount: number = 0;\n\n  /**\n   * Counted by valid references.\n   */\n  get refCount(): number {\n    return this._refCount;\n  }\n\n  protected constructor(engine: Engine) {\n    super(engine);\n    engine.resourceManager._addRefObject(this.instanceId, this);\n  }\n\n  /**\n   * Destroy self.\n   * @param force - Whether to force the destruction, if it is false, refCount = 0 can be released successfully.\n   * @returns Whether the release was successful.\n   */\n  destroy(force: boolean = false): boolean {\n    if (this._destroyed) return true;\n    if (!force && this._refCount !== 0) return false;\n    const resourceManager = this._engine.resourceManager;\n    // resourceManager maybe null,because engine has destroyed.\n    // TODO:the right way to fix this is to ensure destroy all when call engine.destroy,thus don't need to add this project.\n    if (resourceManager) {\n      super.destroy();\n      resourceManager._deleteRefObject(this.instanceId);\n    }\n\n    const refCount = this._getRefCount();\n    if (refCount > 0) {\n      this._addRefCount(-refCount);\n    }\n    this._engine = null;\n    this._onDestroy();\n    \n    return true;\n  }\n\n  /**\n   * @internal\n   */\n  _getRefCount(): number {\n    return this._refCount;\n  }\n\n  /**\n   * @internal\n   */\n  _addRefCount(value: number): void {\n    this._refCount += value;\n  }\n\n  /**\n   * @internal\n   */\n  _addToResourceManager(path: string): void {\n    this._engine.resourceManager._addAsset(path, this);\n  }\n\n  /**\n   * Called when the resource is destroyed.\n   * Subclasses can override this function.\n   */\n  protected abstract _onDestroy(): void;\n}\n","/**\n * Shader data grouping.\n */\nexport enum ShaderDataGroup {\n  /** Scene group. */\n  Scene,\n  /** Camera group. */\n  Camera,\n  /** Renderer group. */\n  Renderer,\n  /** material group. */\n  Material\n}\n","import { RefObject } from \"../asset/RefObject\";\nimport { Logger } from \"../base/Logger\";\nimport { IPlatformTexture } from \"../renderingHardwareInterface\";\nimport { TextureFilterMode } from \"./enums/TextureFilterMode\";\nimport { TextureFormat } from \"./enums/TextureFormat\";\nimport { TextureWrapMode } from \"./enums/TextureWrapMode\";\n\n/**\n * The base class of texture, contains some common functions of texture-related classes.\n */\nexport abstract class Texture extends RefObject {\n  name: string;\n\n  /** @internal */\n  _platformTexture: IPlatformTexture;\n  /** @internal */\n  _mipmap: boolean;\n\n  protected _format: TextureFormat;\n  protected _width: number;\n  protected _height: number;\n  protected _mipmapCount: number;\n\n  private _wrapModeU: TextureWrapMode;\n  private _wrapModeV: TextureWrapMode;\n  private _filterMode: TextureFilterMode;\n  private _anisoLevel: number = 1;\n\n  /**\n   * Texture format.\n   */\n  get format(): TextureFormat {\n    return this._format;\n  }\n\n  /**\n   * The width of the texture.\n   */\n  get width(): number {\n    return this._width;\n  }\n\n  /**\n   * The height of the texture.\n   */\n  get height(): number {\n    return this._height;\n  }\n\n  /**\n   * Wrapping mode for texture coordinate S.\n   */\n  get wrapModeU(): TextureWrapMode {\n    return this._wrapModeU;\n  }\n\n  set wrapModeU(value: TextureWrapMode) {\n    if (value === this._wrapModeU) return;\n    this._wrapModeU = value;\n\n    this._platformTexture.wrapModeU = value;\n  }\n\n  /**\n   * Wrapping mode for texture coordinate T.\n   */\n  get wrapModeV(): TextureWrapMode {\n    return this._wrapModeV;\n  }\n\n  set wrapModeV(value: TextureWrapMode) {\n    if (value === this._wrapModeV) return;\n    this._wrapModeV = value;\n\n    this._platformTexture.wrapModeV = value;\n  }\n\n  /**\n   * Texture mipmapping count.\n   */\n  get mipmapCount(): number {\n    return this._mipmapCount;\n  }\n\n  /**\n   * Filter mode for texture.\n   */\n  get filterMode(): TextureFilterMode {\n    return this._filterMode;\n  }\n\n  set filterMode(value: TextureFilterMode) {\n    if (value === this._filterMode) return;\n    this._filterMode = value;\n\n    this._platformTexture.filterMode = value;\n  }\n\n  /**\n   * Anisotropic level for texture.\n   */\n  get anisoLevel(): number {\n    return this._anisoLevel;\n  }\n\n  set anisoLevel(value: number) {\n    const max = this._engine._hardwareRenderer.capability.maxAnisoLevel;\n\n    if (value > max) {\n      Logger.warn(`anisoLevel:${value}, exceeds the limit and is automatically downgraded to:${max}`);\n      value = max;\n    }\n\n    if (value < 1) {\n      Logger.warn(`anisoLevel:${value}, must be greater than 0, and is automatically downgraded to 1`);\n      value = 1;\n    }\n\n    if (value === this._anisoLevel) return;\n\n    this._anisoLevel = value;\n\n    this._platformTexture.anisoLevel = value;\n  }\n\n  /**\n   * Generate multi-level textures based on the 0th level data.\n   */\n  generateMipmaps(): void {\n    if (!this._mipmap) return;\n\n    this._platformTexture.generateMipmaps();\n  }\n\n  /**\n   * @override\n   */\n  _onDestroy() {\n    this._platformTexture.destroy();\n    this._platformTexture = null;\n  }\n\n  /**\n   * Get the maximum mip level of the corresponding size:rounding down.\n   * @remarks http://download.nvidia.com/developer/Papers/2005/NP2_Mipmapping/NP2_Mipmap_Creation.pdf\n   */\n  protected _getMaxMiplevel(size: number): number {\n    return Math.floor(Math.log2(size));\n  }\n\n  protected _getMipmapCount(): number {\n    return this._mipmap ? Math.floor(Math.log2(Math.max(this._width, this._height))) + 1 : 1;\n  }\n}\n","/**\n * Shader Property type.\n */\nexport enum ShaderPropertyType {\n  /** Float type. */\n  Float,\n  /** Int type. */\n  Int,\n  /** Vector2 type. */\n  Vector2,\n  /** Vector3 type. */\n  Vector3,\n  /** Vector4 type. */\n  Vector4,\n  /** Matrix type. */\n  Matrix,\n  /** Color type. */\n  Color,\n  /** Texture type. */\n  Texture,\n  /** Float array type. */\n  FloatArray,\n  /** Int array type. */\n  IntArray,\n  /** Texture array type. */\n  TextureArray\n}\n","import pbr_frag_define from \"./pbr_frag_define.glsl\";\n\n/** direct + IBL */\nimport pbr_helper from \"./pbr_helper.glsl\";\nimport brdf from \"./brdf.glsl\";\nimport direct_irradiance_frag_define from \"./direct_irradiance_frag_define.glsl\";\nimport ibl_frag_define from \"./ibl_frag_define.glsl\";\n\nimport pbr_frag from \"./pbr_frag.glsl\";\n\nexport default {\n  pbr_frag_define,\n\n  pbr_helper,\n  brdf,\n  direct_irradiance_frag_define,\n  ibl_frag_define,\n\n  pbr_frag\n};\n","import common from \"./common.glsl\";\nimport common_vert from \"./common_vert.glsl\";\nimport common_frag from \"./common_frag.glsl\";\n\nimport color_share from \"./color_share.glsl\";\nimport normal_share from \"./normal_share.glsl\";\nimport uv_share from \"./uv_share.glsl\";\nimport worldpos_share from \"./worldpos_share.glsl\";\nimport shadow_share from \"./shadow_share.glsl\";\nimport fog_share from \"./fog_share.glsl\";\n\nimport begin_normal_vert from \"./begin_normal_vert.glsl\";\nimport begin_position_vert from \"./begin_position_vert.glsl\";\n\nimport position_vert from \"./position_vert.glsl\";\nimport color_vert from \"./color_vert.glsl\";\nimport normal_vert from \"./normal_vert.glsl\";\nimport skinning_vert from \"./skinning_vert.glsl\";\nimport blendShape_input from \"./blendShape_input.glsl\";\nimport blendShape_vert from \"./blendShape_vert.glsl\";\nimport uv_vert from \"./uv_vert.glsl\";\nimport worldpos_vert from \"./worldpos_vert.glsl\";\nimport shadow_vert from \"./shadow_vert.glsl\";\nimport fog_vert from \"./fog_vert.glsl\";\n\nimport light_frag_define from \"./light_frag_define.glsl\";\nimport mobile_material_frag from \"./mobile_material_frag.glsl\";\nimport fog_frag from \"./fog_frag.glsl\";\n\nimport begin_mobile_frag from \"./begin_mobile_frag.glsl\";\nimport begin_viewdir_frag from \"./begin_viewdir_frag.glsl\";\n\nimport mobile_blinnphong_frag from \"./mobile_blinnphong_frag.glsl\";\n\nimport noise_common from \"./noise_common.glsl\";\nimport noise_cellular_2D from \"./noise_cellular_2D.glsl\";\nimport noise_cellular_2x2 from \"./noise_cellular_2x2.glsl\";\nimport noise_cellular_2x2x2 from \"./noise_cellular_2x2x2.glsl\";\nimport noise_cellular_3D from \"./noise_cellular_3D.glsl\";\nimport noise_cellular from \"./noise_cellular.glsl\";\nimport noise_perlin_2D from \"./noise_perlin_2D.glsl\";\nimport noise_perlin_3D from \"./noise_perlin_3D.glsl\";\nimport noise_perlin_4D from \"./noise_perlin_4D.glsl\";\nimport noise_perlin from \"./noise_perlin.glsl\";\nimport noise_psrd_2D from \"./noise_psrd_2D.glsl\";\nimport noise_simplex_2D from \"./noise_simplex_2D.glsl\";\nimport noise_simplex_3D_grad from \"./noise_simplex_3D_grad.glsl\";\nimport noise_simplex_3D from \"./noise_simplex_3D.glsl\";\nimport noise_simplex_4D from \"./noise_simplex_4D.glsl\";\nimport noise_simplex from \"./noise_simplex.glsl\";\n\nimport PBRShaderLib from \"./pbr\";\n\nimport normal_get from \"./normal_get.glsl\";\n\nexport const ShaderLib = {\n  common,\n  common_vert,\n  common_frag,\n\n  color_share,\n  normal_share,\n  uv_share,\n  worldpos_share,\n  shadow_share,\n  fog_share,\n\n  begin_normal_vert,\n  begin_position_vert,\n\n  position_vert,\n  color_vert,\n  normal_vert,\n  skinning_vert,\n  blendShape_input,\n  blendShape_vert,\n  uv_vert,\n  worldpos_vert,\n  shadow_vert,\n  fog_vert,\n\n  light_frag_define,\n  mobile_material_frag,\n  fog_frag,\n\n  begin_mobile_frag,\n  begin_viewdir_frag,\n\n  mobile_blinnphong_frag,\n\n  noise_common,\n  noise_cellular_2D,\n  noise_cellular_2x2,\n  noise_cellular_2x2x2,\n  noise_cellular_3D,\n  noise_cellular,\n  noise_perlin_2D,\n  noise_perlin_3D,\n  noise_perlin_4D,\n  noise_perlin,\n  noise_psrd_2D,\n  noise_simplex_2D,\n  noise_simplex_3D_grad,\n  noise_simplex_3D,\n  noise_simplex_4D,\n  noise_simplex,\n\n  ...PBRShaderLib,\n  normal_get\n};\n","import { ShaderLib } from \"./ShaderLib\";\nimport { Logger } from \"../base/Logger\";\n\nclass ShaderFactory {\n  static parseCustomMacros(macros: string[]) {\n    return macros.map((m) => `#define ${m}\\n`).join(\"\");\n  }\n\n  static parseIncludes(src: string) {\n    const regex = /^[ \\t]*#include +<([\\w\\d.]+)>/gm;\n\n    function replace(match, slice) {\n      var replace = ShaderLib[slice];\n\n      if (replace === undefined) {\n        Logger.error(`Shader slice \"${match.trim()}\" not founded.`);\n        return \"\";\n      }\n\n      return ShaderFactory.parseIncludes(replace);\n    }\n\n    return src.replace(regex, replace);\n  }\n\n  /**\n   * GLSL extension.\n   * @param extensions - such as [\"GL_EXT_shader_texture_lod\"]\n   * */\n  static parseExtension(extensions: string[]): string {\n    return extensions.map((e) => `#extension ${e} : enable\\n`).join(\"\");\n  }\n\n  /**\n   * Convert lower GLSL version to GLSL 300 es.\n   * @param shader - code\n   * @param isFrag - Whether it is a fragment shader.\n   * */\n  static convertTo300(shader: string, isFrag?: boolean) {\n    /** replace attribute and in */\n    shader = shader.replace(/\\battribute\\b/g, \"in\");\n    shader = shader.replace(/\\bvarying\\b/g, isFrag ? \"in\" : \"out\");\n\n    /** replace api */\n    shader = shader.replace(/\\btexture(2D|Cube)\\b/g, \"texture\");\n    shader = shader.replace(/\\btexture(2D|Cube)LodEXT\\b/g, \"textureLod\");\n    if (isFrag) {\n      const isMRT = /\\bgl_FragData\\[.+?\\]/g.test(shader);\n      if (isMRT) {\n        shader = shader.replace(/\\bgl_FragColor\\b/g, \"gl_FragData[0]\");\n        const result = shader.match(/\\bgl_FragData\\[.+?\\]/g);\n        shader = this._replaceMRTShader(shader, result);\n      } else {\n        shader = shader.replace(/void\\s+?main\\s*\\(/g, `out vec4 glFragColor;\\nvoid main(`);\n        shader = shader.replace(/\\bgl_FragColor\\b/g, \"glFragColor\");\n      }\n    }\n\n    return shader;\n  }\n\n  private static _replaceMRTShader(shader: string, result: string[]): string {\n    let declaration = \"\";\n    const mrtIndexSet = new Set();\n\n    for (let i = 0; i < result.length; i++) {\n      const res = result[i].match(/\\bgl_FragData\\[(.+?)\\]/);\n      mrtIndexSet.add(res[1]);\n    }\n\n    mrtIndexSet.forEach((index) => {\n      declaration += `layout(location=${index}) out vec4 fragOutColor${index};\\n`;\n    });\n    declaration += `void main(`;\n\n    shader = shader.replace(/\\bgl_FragData\\[(.+?)\\]/g, \"fragOutColor$1\");\n\n    shader = shader.replace(/void\\s+?main\\s*\\(/g, declaration);\n    return shader;\n  }\n}\n\nexport { ShaderFactory };\n","/**\n * Shader macro。\n */\nexport class ShaderMacro {\n  /** @internal */\n  static _macroNameIdMap: Record<string, number> = Object.create(null);\n\n  private static _macroNameCounter: number = 0;\n\n  /** Name. */\n  readonly name: string;\n  /** Value. */\n  readonly value: string;\n\n  /** @internal */\n  _nameId: number;\n  /** @internal */\n  _maskIndex: number;\n  /** @internal */\n  _maskValue: number;\n\n  /**\n   * @internal\n   */\n  constructor(name: string, value: string, maskIndex: number, maskValue: number) {\n    this.name = name;\n    this._maskIndex = maskIndex;\n    this._maskValue = maskValue;\n    this.value = value;\n\n    const macroNameIDMap = ShaderMacro._macroNameIdMap;\n    let nameID = macroNameIDMap[name];\n    if (macroNameIDMap[name] === undefined) {\n      macroNameIDMap[name] = nameID = ShaderMacro._macroNameCounter++;\n    }\n    this._nameId = nameID;\n  }\n}\n","/**\n * Color Space.\n */\nexport enum ColorSpace {\n  /** Linear color space. */\n  Linear,\n  /** Gamma color space. */\n  Gamma\n}\n","import { Color, Matrix, Vector2, Vector3, Vector4 } from \"@oasis-engine/math\";\nimport { Engine } from \"../Engine\";\nimport { ColorSpace } from \"../enums/ColorSpace\";\nimport { IHardwareRenderer } from \"../renderingHardwareInterface/IHardwareRenderer\";\nimport { Texture } from \"../texture/Texture\";\nimport { ShaderPropertyValueType } from \"./ShaderData\";\n\n/**\n * Shader uniform。\n * @internal\n */\nexport class ShaderUniform {\n  name: string;\n  propertyId: number;\n  location: WebGLUniformLocation;\n  applyFunc: (shaderUniform: ShaderUniform, value: ShaderPropertyValueType) => void;\n  cacheValue: number | Vector2 | Vector3 | Vector4;\n  textureIndex: GLenum | GLenum[];\n  textureDefault: Texture | Texture[];\n\n  private _rhi: IHardwareRenderer;\n  private _gl: WebGLRenderingContext;\n  private _colorSpace: ColorSpace;\n\n  constructor(engine: Engine) {\n    const rhi = engine._hardwareRenderer;\n    this._rhi = rhi;\n    this._gl = rhi.gl;\n    this._colorSpace = engine.settings.colorSpace;\n  }\n\n  upload1f(shaderUniform: ShaderUniform, value: number): void {\n    if (this.cacheValue !== value) {\n      this._gl.uniform1f(shaderUniform.location, value);\n      this.cacheValue = value;\n    }\n  }\n\n  upload1fv(shaderUniform: ShaderUniform, value: Float32Array): void {\n    this._gl.uniform1fv(shaderUniform.location, value);\n  }\n\n  upload2f(shaderUniform: ShaderUniform, value: Vector2 | Vector3 | Vector4 | Color): void {\n    const cacheValue = <Vector2>this.cacheValue;\n    if ((<Color>value).r !== undefined) {\n      if (cacheValue.x !== (<Color>value).r || cacheValue.y !== (<Color>value).g) {\n        if (this._colorSpace === ColorSpace.Linear) {\n          this._gl.uniform2f(\n            shaderUniform.location,\n            Color.gammaToLinearSpace((<Color>value).r),\n            Color.gammaToLinearSpace((<Color>value).g)\n          );\n        } else {\n          this._gl.uniform2f(shaderUniform.location, (<Color>value).r, (<Color>value).g);\n        }\n        cacheValue.x = (<Color>value).r;\n        cacheValue.y = (<Color>value).g;\n      }\n    } else {\n      if (cacheValue.x !== (<Vector2>value).x || cacheValue.y !== (<Vector2>value).y) {\n        this._gl.uniform2f(shaderUniform.location, (<Vector2>value).x, (<Vector2>value).y);\n        cacheValue.x = (<Vector2>value).x;\n        cacheValue.y = (<Vector2>value).y;\n      }\n    }\n  }\n\n  upload2fv(shaderUniform: ShaderUniform, value: Float32Array): void {\n    this._gl.uniform2fv(shaderUniform.location, value);\n  }\n\n  upload3f(shaderUniform: ShaderUniform, value: Vector3 | Vector4 | Color): void {\n    const cacheValue = <Vector3>this.cacheValue;\n    if ((<Color>value).r !== undefined) {\n      if (cacheValue.x !== (<Color>value).r || cacheValue.y !== (<Color>value).g || cacheValue.z !== (<Color>value).b) {\n        if (this._colorSpace === ColorSpace.Linear) {\n          this._gl.uniform3f(\n            shaderUniform.location,\n            Color.gammaToLinearSpace((<Color>value).r),\n            Color.gammaToLinearSpace((<Color>value).g),\n            Color.gammaToLinearSpace((<Color>value).b)\n          );\n        } else {\n          this._gl.uniform3f(shaderUniform.location, (<Color>value).r, (<Color>value).g, (<Color>value).b);\n        }\n        cacheValue.x = (<Color>value).r;\n        cacheValue.y = (<Color>value).g;\n        cacheValue.z = (<Color>value).b;\n      }\n    } else {\n      if (\n        cacheValue.x !== (<Vector3>value).x ||\n        cacheValue.y !== (<Vector3>value).y ||\n        cacheValue.z !== (<Vector3>value).z\n      ) {\n        this._gl.uniform3f(shaderUniform.location, (<Vector3>value).x, (<Vector3>value).y, (<Vector3>value).z);\n        cacheValue.x = (<Vector3>value).x;\n        cacheValue.y = (<Vector3>value).y;\n        cacheValue.z = (<Vector3>value).z;\n      }\n    }\n  }\n\n  upload3fv(shaderUniform: ShaderUniform, value: Float32Array): void {\n    this._gl.uniform3fv(shaderUniform.location, value);\n  }\n\n  upload4f(shaderUniform: ShaderUniform, value: Vector4 | Color): void {\n    const cacheValue = <Vector4>this.cacheValue;\n    if ((<Color>value).r !== undefined) {\n      if (\n        cacheValue.x !== (<Color>value).r ||\n        cacheValue.y !== (<Color>value).g ||\n        cacheValue.z !== (<Color>value).b ||\n        cacheValue.w !== (<Color>value).a\n      ) {\n        if (this._colorSpace === ColorSpace.Linear) {\n          this._gl.uniform4f(\n            shaderUniform.location,\n            Color.gammaToLinearSpace((<Color>value).r),\n            Color.gammaToLinearSpace((<Color>value).g),\n            Color.gammaToLinearSpace((<Color>value).b),\n            (<Color>value).a\n          );\n        } else {\n          this._gl.uniform4f(\n            shaderUniform.location,\n            (<Color>value).r,\n            (<Color>value).g,\n            (<Color>value).b,\n            (<Color>value).a\n          );\n        }\n        cacheValue.x = (<Color>value).r;\n        cacheValue.y = (<Color>value).g;\n        cacheValue.z = (<Color>value).b;\n        cacheValue.w = (<Color>value).a;\n      }\n    } else {\n      if (\n        cacheValue.x !== (<Vector4>value).x ||\n        cacheValue.y !== (<Vector4>value).y ||\n        cacheValue.z !== (<Vector4>value).z ||\n        cacheValue.w !== (<Vector4>value).w\n      ) {\n        this._gl.uniform4f(\n          shaderUniform.location,\n          (<Vector4>value).x,\n          (<Vector4>value).y,\n          (<Vector4>value).z,\n          (<Vector4>value).w\n        );\n        cacheValue.x = (<Vector4>value).x;\n        cacheValue.y = (<Vector4>value).y;\n        cacheValue.z = (<Vector4>value).z;\n        cacheValue.w = (<Vector4>value).w;\n      }\n    }\n  }\n\n  upload4fv(shaderUniform: ShaderUniform, value: Float32Array): void {\n    this._gl.uniform4fv(shaderUniform.location, value);\n  }\n\n  upload1i(shaderUniform: ShaderUniform, value: number): void {\n    if (this.cacheValue !== value) {\n      this._gl.uniform1i(shaderUniform.location, value);\n      this.cacheValue = value;\n    }\n  }\n\n  upload1iv(shaderUniform: ShaderUniform, value: Int32Array): void {\n    this._gl.uniform1iv(shaderUniform.location, value);\n  }\n\n  upload2i(shaderUniform: ShaderUniform, value: Vector2 | Vector3 | Vector4 | Color): void {\n    const cacheValue = <Vector2>this.cacheValue;\n    if ((<Color>value).r !== undefined) {\n      if (cacheValue.x !== (<Color>value).r || cacheValue.y !== (<Color>value).g) {\n        this._gl.uniform2i(shaderUniform.location, (<Color>value).r, (<Color>value).g);\n        cacheValue.x = (<Color>value).r;\n        cacheValue.y = (<Color>value).g;\n      }\n    } else {\n      if (cacheValue.x !== (<Vector2>value).x || cacheValue.y !== (<Vector2>value).y) {\n        this._gl.uniform2i(shaderUniform.location, (<Vector2>value).x, (<Vector2>value).y);\n        cacheValue.x = (<Vector2>value).x;\n        cacheValue.y = (<Vector2>value).y;\n      }\n    }\n  }\n\n  upload2iv(shaderUniform: ShaderUniform, value: Int32Array): void {\n    this._gl.uniform2iv(shaderUniform.location, value);\n  }\n\n  upload3i(shaderUniform: ShaderUniform, value: Vector3 | Vector4 | Color): void {\n    const cacheValue = <Vector3>this.cacheValue;\n    if ((<Color>value).r !== undefined) {\n      if (cacheValue.x !== (<Color>value).r || cacheValue.y !== (<Color>value).g || cacheValue.z !== (<Color>value).b) {\n        this._gl.uniform3i(shaderUniform.location, (<Color>value).r, (<Color>value).g, (<Color>value).b);\n        cacheValue.x = (<Color>value).r;\n        cacheValue.y = (<Color>value).g;\n        cacheValue.z = (<Color>value).b;\n      }\n    } else {\n      if (\n        cacheValue.x !== (<Vector3>value).x ||\n        cacheValue.y !== (<Vector3>value).y ||\n        cacheValue.z !== (<Vector3>value).z\n      ) {\n        this._gl.uniform3i(shaderUniform.location, (<Vector3>value).x, (<Vector3>value).y, (<Vector3>value).z);\n        cacheValue.x = (<Vector3>value).x;\n        cacheValue.y = (<Vector3>value).y;\n        cacheValue.z = (<Vector3>value).z;\n      }\n    }\n  }\n  upload3iv(shaderUniform: ShaderUniform, value: Int32Array): void {\n    this._gl.uniform3iv(shaderUniform.location, value);\n  }\n  upload4i(shaderUniform: ShaderUniform, value: Vector4 | Color): void {\n    const cacheValue = <Vector4>this.cacheValue;\n    if ((<Color>value).r !== undefined) {\n      if (\n        cacheValue.x !== (<Color>value).r ||\n        cacheValue.y !== (<Color>value).g ||\n        cacheValue.z !== (<Color>value).b ||\n        cacheValue.w !== (<Color>value).a\n      ) {\n        this._gl.uniform4i(\n          shaderUniform.location,\n          (<Color>value).r,\n          (<Color>value).g,\n          (<Color>value).b,\n          (<Color>value).a\n        );\n        cacheValue.x = (<Color>value).r;\n        cacheValue.y = (<Color>value).g;\n        cacheValue.z = (<Color>value).b;\n        cacheValue.w = (<Color>value).a;\n      }\n    } else {\n      if (\n        cacheValue.x !== (<Vector4>value).x ||\n        cacheValue.y !== (<Vector4>value).y ||\n        cacheValue.z !== (<Vector4>value).z ||\n        cacheValue.w !== (<Vector4>value).w\n      ) {\n        this._gl.uniform4i(\n          shaderUniform.location,\n          (<Vector4>value).x,\n          (<Vector4>value).y,\n          (<Vector4>value).z,\n          (<Vector4>value).w\n        );\n        cacheValue.x = (<Vector4>value).x;\n        cacheValue.y = (<Vector4>value).y;\n        cacheValue.z = (<Vector4>value).z;\n        cacheValue.w = (<Vector4>value).w;\n      }\n    }\n  }\n\n  upload4iv(shaderUniform: ShaderUniform, value: Int32Array): void {\n    this._gl.uniform4iv(shaderUniform.location, value);\n  }\n\n  uploadMat4(shaderUniform: ShaderUniform, value: Matrix): void {\n    this._gl.uniformMatrix4fv(shaderUniform.location, false, value.elements);\n  }\n\n  uploadMat4v(shaderUniform: ShaderUniform, value: Float32Array): void {\n    this._gl.uniformMatrix4fv(shaderUniform.location, false, value);\n  }\n\n  uploadTexture(shaderUniform: ShaderUniform, value: Texture): void {\n    const rhi = this._rhi;\n    rhi.activeTexture(shaderUniform.textureIndex as GLenum);\n    rhi.bindTexture(value._platformTexture);\n  }\n\n  uploadTextureArray(shaderUniform: ShaderUniform, value: Texture[]): void {\n    const rhi = this._rhi;\n    const textureIndices = shaderUniform.textureIndex as GLenum[];\n    for (let i = 0; i < value.length; i++) {\n      const texture = value[i];\n      rhi.activeTexture(textureIndices[i]);\n      rhi.bindTexture(texture._platformTexture);\n    }\n  }\n}\n","import { ShaderUniform } from \"./ShaderUniform\";\n\n/**\n * Shader uniform block.\n * @internal\n */\nexport class ShaderUniformBlock {\n  readonly constUniforms: ShaderUniform[] = [];\n  readonly textureUniforms: ShaderUniform[] = [];\n}\n","import { Vector2, Vector3, Vector4 } from \"@oasis-engine/math\";\nimport { Logger } from \"../base/Logger\";\nimport { Camera } from \"../Camera\";\nimport { Engine } from \"../Engine\";\nimport { Material } from \"../material/Material\";\nimport { Renderer } from \"../Renderer\";\nimport { IHardwareRenderer } from \"../renderingHardwareInterface/IHardwareRenderer\";\nimport { Texture } from \"../texture\";\nimport { ShaderDataGroup } from \"./enums/ShaderDataGroup\";\nimport { Shader } from \"./Shader\";\nimport { ShaderData } from \"./ShaderData\";\nimport { ShaderUniform } from \"./ShaderUniform\";\nimport { ShaderUniformBlock } from \"./ShaderUniformBlock\";\n\n/**\n * Shader program, corresponding to the GPU shader program.\n * @internal\n */\nexport class ShaderProgram {\n  private static _counter: number = 0;\n\n  private static _addLineNum(str: string) {\n    const lines = str.split(\"\\n\");\n    const limitLength = (lines.length + 1).toString().length + 6;\n    let prefix;\n    return lines\n      .map((line, index) => {\n        prefix = `0:${index + 1}`;\n        if (prefix.length >= limitLength) return prefix.substring(0, limitLength) + line;\n\n        for (let i = 0; i < limitLength - prefix.length; i++) prefix += \" \";\n\n        return prefix + line;\n      })\n      .join(\"\\n\");\n  }\n\n  id: number;\n\n  readonly sceneUniformBlock: ShaderUniformBlock = new ShaderUniformBlock();\n  readonly cameraUniformBlock: ShaderUniformBlock = new ShaderUniformBlock();\n  readonly rendererUniformBlock: ShaderUniformBlock = new ShaderUniformBlock();\n  readonly materialUniformBlock: ShaderUniformBlock = new ShaderUniformBlock();\n  readonly otherUniformBlock: ShaderUniformBlock = new ShaderUniformBlock();\n\n  /** @internal */\n  _uploadRenderCount: number = -1;\n  /** @internal */\n  _uploadCamera: Camera;\n  /** @internal */\n  _uploadRenderer: Renderer;\n  /** @internal */\n  _uploadMaterial: Material;\n\n  attributeLocation: Record<string, GLint> = Object.create(null);\n\n  // @todo: move to RHI.\n  private _isValid: boolean;\n  private _engine: Engine;\n  private _gl: WebGLRenderingContext;\n  private _vertexShader: WebGLShader;\n  private _fragmentShader: WebGLShader;\n  private _glProgram: WebGLProgram;\n  private _activeTextureUint: number = 0;\n\n  /**\n   * Whether this shader program is valid.\n   */\n  get isValid(): boolean {\n    return this._isValid;\n  }\n\n  constructor(engine: Engine, vertexSource: string, fragmentSource: string) {\n    this._engine = engine;\n    this._gl = engine._hardwareRenderer.gl;\n    this._glProgram = this._createProgram(vertexSource, fragmentSource);\n\n    if (this._glProgram) {\n      this._isValid = true;\n      this._recordLocation();\n    } else {\n      this._isValid = false;\n    }\n\n    this.id = ShaderProgram._counter++;\n  }\n\n  /**\n   * Upload all shader data in shader uniform block.\n   * @param uniformBlock - shader Uniform block\n   * @param shaderData - shader data\n   */\n  uploadAll(uniformBlock: ShaderUniformBlock, shaderData: ShaderData): void {\n    this.uploadUniforms(uniformBlock, shaderData);\n    this.uploadTextures(uniformBlock, shaderData);\n  }\n\n  /**\n   * Upload constant shader data in shader uniform block.\n   * @param uniformBlock - shader Uniform block\n   * @param shaderData - shader data\n   */\n  uploadUniforms(uniformBlock: ShaderUniformBlock, shaderData: ShaderData): void {\n    const propertyValueMap = shaderData._propertyValueMap;\n    const constUniforms = uniformBlock.constUniforms;\n\n    for (let i = 0, n = constUniforms.length; i < n; i++) {\n      const uniform = constUniforms[i];\n      const data = propertyValueMap[uniform.propertyId];\n      data != null && uniform.applyFunc(uniform, data);\n    }\n  }\n\n  /**\n   * Upload texture shader data in shader uniform block.\n   * @param uniformBlock - shader Uniform block\n   * @param shaderData - shader data\n   */\n  uploadTextures(uniformBlock: ShaderUniformBlock, shaderData: ShaderData): void {\n    const propertyValueMap = shaderData._propertyValueMap;\n    const textureUniforms = uniformBlock.textureUniforms;\n    // textureUniforms property maybe null if ShaderUniformBlock not contain any texture.\n    if (textureUniforms) {\n      for (let i = 0, n = textureUniforms.length; i < n; i++) {\n        const uniform = textureUniforms[i];\n        const texture = <Texture>propertyValueMap[uniform.propertyId];\n        if (texture && !texture.destroyed) {\n          uniform.applyFunc(uniform, texture);\n        } else {\n          uniform.applyFunc(uniform, uniform.textureDefault);\n        }\n      }\n    }\n  }\n\n  /**\n   * Upload ungroup texture shader data in shader uniform block.\n   */\n  uploadUnGroupTextures(): void {\n    const textureUniforms = this.otherUniformBlock.textureUniforms;\n    // textureUniforms property maybe null if ShaderUniformBlock not contain any texture.\n    if (textureUniforms) {\n      for (let i = 0, n = textureUniforms.length; i < n; i++) {\n        const uniform = textureUniforms[i];\n        uniform.applyFunc(uniform, uniform.textureDefault);\n      }\n    }\n  }\n\n  /**\n   * Grouping other data.\n   */\n  groupingOtherUniformBlock(): void {\n    const { constUniforms, textureUniforms } = this.otherUniformBlock;\n    constUniforms.length > 0 && this._groupingSubOtherUniforms(constUniforms, false);\n    textureUniforms.length > 0 && this._groupingSubOtherUniforms(textureUniforms, true);\n  }\n\n  /**\n   * Bind this shader program.\n   * @returns Whether the shader program is switched.\n   */\n  bind(): boolean {\n    const rhi: IHardwareRenderer = this._engine._hardwareRenderer;\n    if (rhi._currentBind !== this) {\n      this._gl.useProgram(this._glProgram);\n      rhi._currentBind = this;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Destroy this shader program.\n   */\n  destroy(): void {\n    const gl = this._gl;\n    this._vertexShader && gl.deleteShader(this._vertexShader);\n    this._fragmentShader && gl.deleteShader(this._fragmentShader);\n    this._glProgram && gl.deleteProgram(this._glProgram);\n  }\n\n  private _groupingSubOtherUniforms(uniforms: ShaderUniform[], isTexture: boolean): void {\n    for (let i = uniforms.length - 1; i >= 0; i--) {\n      const uniform = uniforms[i];\n      const group = Shader._getShaderPropertyGroup(uniform.name);\n      if (group !== undefined) {\n        uniforms.splice(uniforms.indexOf(uniform), 1);\n        this._groupingUniform(uniform, group, isTexture);\n      }\n    }\n  }\n\n  private _groupingUniform(uniform: ShaderUniform, group: ShaderDataGroup, isTexture: boolean): void {\n    switch (group) {\n      case ShaderDataGroup.Scene:\n        if (isTexture) {\n          this.sceneUniformBlock.textureUniforms.push(uniform);\n        } else {\n          this.sceneUniformBlock.constUniforms.push(uniform);\n        }\n        break;\n      case ShaderDataGroup.Camera:\n        if (isTexture) {\n          this.cameraUniformBlock.textureUniforms.push(uniform);\n        } else {\n          this.cameraUniformBlock.constUniforms.push(uniform);\n        }\n        break;\n      case ShaderDataGroup.Renderer:\n        if (isTexture) {\n          this.rendererUniformBlock.textureUniforms.push(uniform);\n        } else {\n          this.rendererUniformBlock.constUniforms.push(uniform);\n        }\n        break;\n      case ShaderDataGroup.Material:\n        if (isTexture) {\n          this.materialUniformBlock.textureUniforms.push(uniform);\n        } else {\n          this.materialUniformBlock.constUniforms.push(uniform);\n        }\n        break;\n      default:\n        if (isTexture) {\n          this.otherUniformBlock.textureUniforms.push(uniform);\n        } else {\n          this.otherUniformBlock.constUniforms.push(uniform);\n        }\n    }\n  }\n\n  /**\n   * init and link program with shader.\n   */\n  private _createProgram(vertexSource: string, fragmentSource: string): WebGLProgram | null {\n    const gl = this._gl;\n\n    // create and compile shader\n    const vertexShader = this._createShader(gl.VERTEX_SHADER, vertexSource);\n    if (!vertexShader) {\n      return null;\n    }\n\n    const fragmentShader = this._createShader(gl.FRAGMENT_SHADER, fragmentSource);\n    if (!fragmentShader) {\n      return null;\n    }\n\n    // link program and shader\n    const program = gl.createProgram();\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n    gl.linkProgram(program);\n    gl.validateProgram(program);\n\n    if (gl.isContextLost()) {\n      Logger.error(\"Context lost while linking program.\");\n      gl.deleteShader(vertexShader);\n      gl.deleteShader(fragmentShader);\n      return null;\n    }\n\n    if (Logger.isEnabled && !gl.getProgramParameter(program, gl.LINK_STATUS)) {\n      Logger.error(\"Could not link WebGL program. \\n\" + gl.getProgramInfoLog(program));\n      gl.deleteProgram(program);\n      return null;\n    }\n\n    this._vertexShader = vertexShader;\n    this._fragmentShader = fragmentShader;\n    return program;\n  }\n\n  private _createShader(shaderType: number, shaderSource: string): WebGLShader | null {\n    const gl = this._gl;\n    const shader = gl.createShader(shaderType);\n\n    if (!shader) {\n      Logger.error(\"Context lost while create shader.\");\n      return null;\n    }\n\n    gl.shaderSource(shader, shaderSource);\n    gl.compileShader(shader);\n\n    if (gl.isContextLost()) {\n      Logger.error(\"Context lost while compiling shader.\");\n      gl.deleteShader(shader);\n      return null;\n    }\n\n    if (Logger.isEnabled && !gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n      Logger.error(\n        `Could not compile WebGL shader.\\n${gl.getShaderInfoLog(shader)}`,\n        ShaderProgram._addLineNum(shaderSource)\n      );\n      gl.deleteShader(shader);\n      return null;\n    }\n\n    return shader;\n  }\n\n  /**\n   * record the location of uniform/attribute.\n   */\n  private _recordLocation(): void {\n    const gl = this._gl;\n    const program = this._glProgram;\n    const uniformInfos = this._getUniformInfos();\n    const attributeInfos = this._getAttributeInfos();\n\n    uniformInfos.forEach(({ name, size, type }) => {\n      const shaderUniform = new ShaderUniform(this._engine);\n      let isArray = false;\n      let isTexture = false;\n\n      if (name.indexOf(\"[0]\") > 0) {\n        name = name.substr(0, name.length - 3);\n        isArray = true;\n      }\n\n      const location = gl.getUniformLocation(program, name);\n      shaderUniform.name = name;\n      shaderUniform.propertyId = Shader.getPropertyByName(name)._uniqueId;\n      shaderUniform.location = location;\n\n      switch (type) {\n        case gl.FLOAT:\n          if (isArray) {\n            shaderUniform.applyFunc = shaderUniform.upload1fv;\n          } else {\n            shaderUniform.applyFunc = shaderUniform.upload1f;\n            shaderUniform.cacheValue = 0;\n          }\n          break;\n        case gl.FLOAT_VEC2:\n          if (isArray) {\n            shaderUniform.applyFunc = shaderUniform.upload2fv;\n          } else {\n            shaderUniform.applyFunc = shaderUniform.upload2f;\n            shaderUniform.cacheValue = new Vector2(0, 0);\n          }\n          break;\n        case gl.FLOAT_VEC3:\n          if (isArray) {\n            shaderUniform.applyFunc = shaderUniform.upload3fv;\n          } else {\n            shaderUniform.applyFunc = shaderUniform.upload3f;\n            shaderUniform.cacheValue = new Vector3(0, 0, 0);\n          }\n          break;\n        case gl.FLOAT_VEC4:\n          if (isArray) {\n            shaderUniform.applyFunc = shaderUniform.upload4fv;\n          } else {\n            shaderUniform.applyFunc = shaderUniform.upload4f;\n            shaderUniform.cacheValue = new Vector4(0, 0, 0, 0);\n          }\n          break;\n        case gl.BOOL:\n        case gl.INT:\n          if (isArray) {\n            shaderUniform.applyFunc = shaderUniform.upload1iv;\n          } else {\n            shaderUniform.applyFunc = shaderUniform.upload1i;\n            shaderUniform.cacheValue = 0;\n          }\n          break;\n        case gl.BOOL_VEC2:\n        case gl.INT_VEC2:\n          if (isArray) {\n            shaderUniform.applyFunc = shaderUniform.upload2iv;\n          } else {\n            shaderUniform.applyFunc = shaderUniform.upload2i;\n            shaderUniform.cacheValue = new Vector2(0, 0);\n          }\n          break;\n        case gl.BOOL_VEC3:\n        case gl.INT_VEC3:\n          if (isArray) {\n          } else {\n          }\n          shaderUniform.applyFunc = isArray ? shaderUniform.upload3iv : shaderUniform.upload3i;\n          shaderUniform.cacheValue = new Vector3(0, 0, 0);\n          break;\n        case gl.BOOL_VEC4:\n        case gl.INT_VEC4:\n          if (isArray) {\n            shaderUniform.applyFunc = shaderUniform.upload4iv;\n          } else {\n            shaderUniform.applyFunc = shaderUniform.upload4i;\n            shaderUniform.cacheValue = new Vector4(0, 0, 0);\n          }\n          break;\n        case gl.FLOAT_MAT4:\n          shaderUniform.applyFunc = isArray ? shaderUniform.uploadMat4v : shaderUniform.uploadMat4;\n          break;\n        case gl.SAMPLER_2D:\n        case gl.SAMPLER_CUBE:\n        case (<WebGL2RenderingContext>gl).SAMPLER_2D_ARRAY:\n          let defaultTexture: Texture;\n          switch (type) {\n            case gl.SAMPLER_2D:\n              defaultTexture = this._engine._magentaTexture2D;\n              break;\n            case gl.SAMPLER_CUBE:\n              defaultTexture = this._engine._magentaTextureCube;\n              break;\n            case (<WebGL2RenderingContext>gl).SAMPLER_2D_ARRAY:\n              defaultTexture = this._engine._magentaTexture2DArray;\n              break;\n            default:\n              throw new Error(\"Unsupported texture type.\");\n          }\n\n          isTexture = true;\n          if (isArray) {\n            const defaultTextures = new Array<Texture>(size);\n            const textureIndices = new Int32Array(size);\n            const glTextureIndices = new Array<number>(size);\n\n            for (let i = 0; i < size; i++) {\n              defaultTextures[i] = defaultTexture;\n              textureIndices[i] = this._activeTextureUint;\n              glTextureIndices[i] = gl.TEXTURE0 + this._activeTextureUint++;\n            }\n            shaderUniform.textureDefault = defaultTextures;\n            shaderUniform.textureIndex = glTextureIndices;\n            shaderUniform.applyFunc = shaderUniform.uploadTextureArray;\n            this.bind();\n            gl.uniform1iv(location, textureIndices);\n            shaderUniform.uploadTextureArray(shaderUniform, defaultTextures);\n          } else {\n            const textureIndex = gl.TEXTURE0 + this._activeTextureUint;\n\n            shaderUniform.textureDefault = defaultTexture;\n            shaderUniform.textureIndex = textureIndex;\n            shaderUniform.applyFunc = shaderUniform.uploadTexture;\n            this.bind();\n            gl.uniform1i(location, this._activeTextureUint++);\n            shaderUniform.uploadTexture(shaderUniform, defaultTexture);\n          }\n          break;\n      }\n\n      const group = Shader._getShaderPropertyGroup(name);\n      this._groupingUniform(shaderUniform, group, isTexture);\n    });\n\n    attributeInfos.forEach(({ name }) => {\n      this.attributeLocation[name] = gl.getAttribLocation(program, name);\n    });\n  }\n\n  private _getUniformInfos(): WebGLActiveInfo[] {\n    const gl = this._gl;\n    const program = this._glProgram;\n    const uniformInfos = new Array<WebGLActiveInfo>();\n\n    const uniformCount = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n    for (let i = 0; i < uniformCount; ++i) {\n      const info = gl.getActiveUniform(program, i);\n      uniformInfos[i] = info;\n    }\n\n    return uniformInfos;\n  }\n\n  private _getAttributeInfos(): WebGLActiveInfo[] {\n    const gl = this._gl;\n    const program = this._glProgram;\n    const attributeInfos = new Array<WebGLActiveInfo>();\n\n    const attributeCount = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n    for (let i = 0; i < attributeCount; ++i) {\n      const info = gl.getActiveAttrib(program, i);\n      attributeInfos[i] = info;\n    }\n\n    return attributeInfos;\n  }\n}\n","import { ShaderDataGroup } from \"./enums/ShaderDataGroup\";\nimport { ShaderPropertyType } from \"./enums/ShaderPropertyType\";\n\n/**\n * Shader property.\n */\nexport class ShaderProperty {\n  private static _propertyNameCounter: number = 0;\n\n  /** @internal */\n  _uniqueId: number;\n  /** @internal */\n  _group: ShaderDataGroup;\n  /** @internal */\n  _type: ShaderPropertyType;\n\n  /** Shader property name. */\n  readonly name: string;\n\n  /**\n   * Shader property type.\n   */\n  get type(): ShaderPropertyType {\n    return this._type;\n  }\n\n  /**\n   * @internal\n   */\n  constructor(name: string) {\n    this.name = name;\n    this._uniqueId = ShaderProperty._propertyNameCounter++;\n  }\n}\n","import { GLCapabilityType } from \"../base/Constant\";\nimport { Engine } from \"../Engine\";\nimport { ShaderFactory } from \"../shaderlib/ShaderFactory\";\nimport { ShaderDataGroup } from \"./enums/ShaderDataGroup\";\nimport { ShaderMacro } from \"./ShaderMacro\";\nimport { ShaderMacroCollection } from \"./ShaderMacroCollection\";\nimport { ShaderProgram } from \"./ShaderProgram\";\nimport { ShaderProperty } from \"./ShaderProperty\";\n\n/**\n * Shader containing vertex and fragment source.\n */\nexport class Shader {\n  /** @internal */\n  static readonly _compileMacros: ShaderMacroCollection = new ShaderMacroCollection();\n  /** @internal */\n  static _propertyIdMap: Record<number, ShaderProperty> = Object.create(null);\n\n  private static _shaderCounter: number = 0;\n  private static _shaderMap: Record<string, Shader> = Object.create(null);\n  private static _propertyNameMap: Record<string, ShaderProperty> = Object.create(null);\n  private static _macroMaskMap: string[][] = [];\n  private static _macroCounter: number = 0;\n  private static _macroMap: Record<string, ShaderMacro> = Object.create(null);\n  private static _shaderExtension = [\"GL_EXT_shader_texture_lod\", \"GL_OES_standard_derivatives\", \"GL_EXT_draw_buffers\"];\n\n  /**\n   * Create a shader.\n   * @param name - Name of the shader\n   * @param vertexSource - Vertex source code\n   * @param fragmentSource - Fragment source code\n   */\n  static create(name: string, vertexSource: string, fragmentSource: string): Shader {\n    const shaderMap = Shader._shaderMap;\n    if (shaderMap[name]) {\n      throw `Shader named \"${name}\" already exists.`;\n    }\n    return (shaderMap[name] = new Shader(name, vertexSource, fragmentSource));\n  }\n\n  /**\n   * Find a shader by name.\n   * @param name - Name of the shader\n   */\n  static find(name: string): Shader {\n    return Shader._shaderMap[name];\n  }\n\n  /**\n   * Get shader macro by name.\n   * @param name - Name of the shader macro\n   * @returns Shader macro\n   */\n  static getMacroByName(name: string): ShaderMacro;\n\n  /**\n   * Get shader macro by name.\n   * @param name - Name of the shader macro\n   * @param value - Value of the shader macro\n   * @returns Shader macro\n   */\n  static getMacroByName(name: string, value: string): ShaderMacro;\n\n  static getMacroByName(name: string, value?: string): ShaderMacro {\n    const key = value ? name + ` ` + value : name;\n    let macro = Shader._macroMap[key];\n    if (!macro) {\n      const maskMap = Shader._macroMaskMap;\n      const counter = Shader._macroCounter;\n      const index = Math.floor(counter / 32);\n      const bit = counter % 32;\n\n      macro = new ShaderMacro(name, value, index, 1 << bit);\n      Shader._macroMap[key] = macro;\n      if (index == maskMap.length) {\n        maskMap.length++;\n        maskMap[index] = new Array<string>(32);\n      }\n      maskMap[index][bit] = key;\n      Shader._macroCounter++;\n    }\n    return macro;\n  }\n\n  /**\n   * Get shader property by name.\n   * @param name - Name of the shader property\n   * @returns Shader property\n   */\n  static getPropertyByName(name: string): ShaderProperty {\n    const propertyNameMap = Shader._propertyNameMap;\n    if (propertyNameMap[name] != null) {\n      return propertyNameMap[name];\n    } else {\n      const property = new ShaderProperty(name);\n      propertyNameMap[name] = property;\n      Shader._propertyIdMap[property._uniqueId] = property;\n      return property;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static _getShaderPropertyGroup(propertyName: string): ShaderDataGroup | null {\n    const shaderProperty = Shader._propertyNameMap[propertyName];\n    return shaderProperty?._group;\n  }\n\n  private static _getNamesByMacros(macros: ShaderMacroCollection, out: string[]): void {\n    const maskMap = Shader._macroMaskMap;\n    const mask = macros._mask;\n    out.length = 0;\n    for (let i = 0, n = macros._length; i < n; i++) {\n      const subMaskMap = maskMap[i];\n      const subMask = mask[i];\n      const n = subMask < 0 ? 32 : Math.floor(Math.log2(subMask)) + 1; // if is negative must contain 1 << 31.\n      for (let j = 0; j < n; j++) {\n        if (subMask & (1 << j)) {\n          out.push(subMaskMap[j]);\n        }\n      }\n    }\n  }\n\n  /** The name of shader. */\n  readonly name: string;\n\n  /** @internal */\n  _shaderId: number = 0;\n\n  private _vertexSource: string;\n  private _fragmentSource: string;\n\n  private constructor(name: string, vertexSource: string, fragmentSource: string) {\n    this._shaderId = Shader._shaderCounter++;\n    this.name = name;\n    this._vertexSource = vertexSource;\n    this._fragmentSource = fragmentSource;\n  }\n\n  /**\n   * Compile shader variant by macro name list.\n   *\n   * @remarks\n   * Usually a shader contains some macros,any combination of macros is called shader variant.\n   *\n   * @param engine - Engine to which the shader variant belongs\n   * @param macros - Macro name list\n   * @returns Is the compiled shader variant valid\n   */\n  compileVariant(engine: Engine, macros: string[]): boolean {\n    const compileMacros = Shader._compileMacros;\n    compileMacros.clear();\n    for (let i = 0, n = macros.length; i < n; i++) {\n      compileMacros.enable(Shader.getMacroByName(macros[i]));\n    }\n    return this._getShaderProgram(engine, compileMacros).isValid;\n  }\n\n  /**\n   * @internal\n   */\n  _getShaderProgram(engine: Engine, macroCollection: ShaderMacroCollection): ShaderProgram {\n    const shaderProgramPool = engine._getShaderProgramPool(this);\n    let shaderProgram = shaderProgramPool.get(macroCollection);\n    if (shaderProgram) {\n      return shaderProgram;\n    }\n\n    const isWebGL2: boolean = engine._hardwareRenderer.isWebGL2;\n    const macroNameList = [];\n    Shader._getNamesByMacros(macroCollection, macroNameList);\n    const macroNameStr = ShaderFactory.parseCustomMacros(macroNameList);\n    const versionStr = isWebGL2 ? \"#version 300 es\" : \"#version 100\";\n    let precisionStr = `\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n      precision highp int;\n    #else\n      precision mediump float;\n      precision mediump int;\n    #endif\n    `;\n\n    if (engine._hardwareRenderer.canIUse(GLCapabilityType.shaderTextureLod)) {\n      precisionStr += \"#define HAS_TEX_LOD\\n\";\n    }\n    if (engine._hardwareRenderer.canIUse(GLCapabilityType.standardDerivatives)) {\n      precisionStr += \"#define HAS_DERIVATIVES\\n\";\n    }\n\n    let vertexSource = ShaderFactory.parseIncludes(\n      ` ${versionStr}\n        ${precisionStr}\n        ${macroNameStr}\n        ` + this._vertexSource\n    );\n\n    let fragmentSource = ShaderFactory.parseIncludes(\n      ` ${versionStr}\n        ${isWebGL2 ? \"\" : ShaderFactory.parseExtension(Shader._shaderExtension)}\n        ${precisionStr}\n        ${macroNameStr}\n      ` + this._fragmentSource\n    );\n\n    if (isWebGL2) {\n      vertexSource = ShaderFactory.convertTo300(vertexSource);\n      fragmentSource = ShaderFactory.convertTo300(fragmentSource, true);\n    }\n\n    shaderProgram = new ShaderProgram(engine, vertexSource, fragmentSource);\n\n    shaderProgramPool.cache(shaderProgram);\n    return shaderProgram;\n  }\n}\n","import { IClone } from \"@oasis-engine/design\";\nimport { Color, Matrix, Vector2, Vector3, Vector4 } from \"@oasis-engine/math\";\nimport { IRefObject } from \"../asset/IRefObject\";\nimport { CloneManager } from \"../clone/CloneManager\";\nimport { Texture } from \"../texture/Texture\";\nimport { ShaderDataGroup } from \"./enums/ShaderDataGroup\";\nimport { ShaderPropertyType } from \"./enums/ShaderPropertyType\";\nimport { Shader } from \"./Shader\";\nimport { ShaderMacro } from \"./ShaderMacro\";\nimport { ShaderMacroCollection } from \"./ShaderMacroCollection\";\nimport { ShaderProperty } from \"./ShaderProperty\";\n\n/**\n * Shader data collection,Correspondence includes shader properties data and macros data.\n */\nexport class ShaderData implements IRefObject, IClone {\n  /** @internal */\n  _group: ShaderDataGroup;\n  /** @internal */\n  _propertyValueMap: Record<number, ShaderPropertyValueType> = Object.create(null);\n  /** @internal */\n  _macroCollection: ShaderMacroCollection = new ShaderMacroCollection();\n\n  private _macroMap: Record<number, ShaderMacro> = Object.create(null);\n  private _refCount: number = 0;\n\n  /**\n   * @internal\n   */\n  constructor(group: ShaderDataGroup) {\n    this._group = group;\n  }\n\n  /**\n   * Get float by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Float\n   */\n  getFloat(propertyName: string): number;\n\n  /**\n   * Get float by shader property.\n   * @param property - Shader property, use `Shader.getPropertyByName` to get\n   * @returns Float\n   */\n  getFloat(property: ShaderProperty): number;\n\n  getFloat(property: string | ShaderProperty): number {\n    return this.getPropertyValue(property);\n  }\n\n  /**\n   * Set float by shader property name.\n   * @remarks Corresponding float shader property type.\n   * @param propertyName - Shader property name\n   * @param value - Float\n   */\n  setFloat(propertyName: string, value: number): void;\n\n  /**\n   * Set float by shader property.\n   * @remarks Corresponding float shader property type.\n   * @param property - Shader property, use `Shader.getPropertyByName` to get\n   * @param value - Float\n   */\n  setFloat(property: ShaderProperty, value: number): void;\n\n  setFloat(property: string | ShaderProperty, value: number): void {\n    this._setPropertyValue(property, ShaderPropertyType.Float, value);\n  }\n\n  /**\n   * Get int by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Int\n   */\n  getInt(propertyName: string): number;\n\n  /**\n   * Get int by shader property.\n   * @param property - Shader property, use `Shader.getPropertyByName` to get\n   * @returns Int\n   */\n  getInt(property: ShaderProperty): number;\n\n  getInt(property: string | ShaderProperty): number {\n    return this.getPropertyValue(property);\n  }\n\n  /**\n   * Set int by shader property name.\n   * @remarks Correspondence includes int and bool shader property type.\n   * @param propertyName - Shader property name\n   * @param value - Int\n   */\n  setInt(propertyName: string, value: number): void;\n\n  /**\n   * Set int by shader property.\n   * @remarks Correspondence includes int and bool shader property type.\n   * @param property - Shader property, use `Shader.getPropertyByName` to get\n   * @param value - Int\n   */\n  setInt(property: ShaderProperty, value: number): void;\n\n  setInt(property: string | ShaderProperty, value: number): void {\n    this._setPropertyValue(property, ShaderPropertyType.Int, value);\n  }\n\n  /**\n   * Get float array by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Float array\n   */\n  getFloatArray(propertyName: string): Float32Array;\n\n  /**\n   * Get float array by shader property.\n   * @param property - Shader property, use `Shader.getPropertyByName` to get\n   * @returns Float array\n   */\n  getFloatArray(property: ShaderProperty): Float32Array;\n\n  getFloatArray(property: string | ShaderProperty): Float32Array {\n    return this.getPropertyValue(property);\n  }\n\n  /**\n   * Set float array by shader property name.\n   * @remarks Correspondence includes float array、vec2 array、vec3 array、vec4 array and matrix array shader property type.\n   * @param propertyName - Shader property name\n   * @param value - Float array\n   */\n  setFloatArray(propertyName: string, value: Float32Array): void;\n\n  /**\n   * Set float array by shader property.\n   * @remarks Correspondence includes float array、vec2 array、vec3 array、vec4 array and matrix array shader property type.\n   * @param property - Shader property, use `Shader.getPropertyByName` to get\n   * @param value - Float array\n   */\n  setFloatArray(property: ShaderProperty, value: Float32Array): void;\n\n  setFloatArray(property: string | ShaderProperty, value: Float32Array): void {\n    this._setPropertyValue(property, ShaderPropertyType.FloatArray, value);\n  }\n\n  /**\n   * Get int array by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Int Array\n   */\n  getIntArray(propertyName: string): Int32Array;\n\n  /**\n   * Get int array by shader property.\n   * @param property - Shader property, use `Shader.getPropertyByName` to get\n   * @returns Int Array\n   */\n  getIntArray(property: ShaderProperty): Int32Array;\n\n  getIntArray(property: string | ShaderProperty): Int32Array {\n    return this.getPropertyValue(property);\n  }\n\n  /**\n   * Set int array by shader property name.\n   * @remarks Correspondence includes bool array、int array、bvec2 array、bvec3 array、bvec4 array、ivec2 array、ivec3 array and ivec4 array shader property type.\n   * @param propertyName - Shader property name\n   * @param value - Int Array\n   */\n  setIntArray(propertyName: string, value: Int32Array): void;\n\n  /**\n   * Set int array by shader property.\n   * @remarks Correspondence includes bool array、int array、bvec2 array、bvec3 array、bvec4 array、ivec2 array、ivec3 array and ivec4 array shader property type.\n   * @param property - Shader property, use `Shader.getPropertyByName` to get\n   * @param value - Int Array\n   */\n  setIntArray(property: ShaderProperty, value: Int32Array): void;\n\n  setIntArray(property: string | ShaderProperty, value: Int32Array): void {\n    this._setPropertyValue(property, ShaderPropertyType.IntArray, value);\n  }\n\n  /**\n   * Get two-dimensional from shader property name.\n   * @param propertyName - Shader property name\n   * @returns Two-dimensional vector\n   */\n  getVector2(propertyName: string): Vector2;\n\n  /**\n   * Get two-dimensional from shader property.\n   * @param property - Shader property, use `Shader.getPropertyByName` to get\n   * @returns Two-dimensional vector\n   */\n  getVector2(property: ShaderProperty): Vector2;\n\n  getVector2(property: string | ShaderProperty): Vector2 {\n    return this.getPropertyValue(property);\n  }\n\n  /**\n   * Set two-dimensional vector from shader property name.\n   * @remarks Correspondence includes vec2、ivec2 and bvec2 shader property type.\n   * @param property - Shader property name\n   * @param value - Two-dimensional vector\n   */\n  setVector2(property: string, value: Vector2): void;\n\n  /**\n   * Set two-dimensional vector from shader property.\n   * @remarks Correspondence includes vec2、ivec2 and bvec2 shader property type.\n   * @param property - Shader property, use `Shader.getPropertyByName` to get\n   * @param value - Two-dimensional vector\n   */\n  setVector2(property: ShaderProperty, value: Vector2): void;\n\n  setVector2(property: string | ShaderProperty, value: Vector2): void {\n    this._setPropertyValue(property, ShaderPropertyType.Vector2, value);\n  }\n\n  /**\n   * Get vector3 by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Three-dimensional vector\n   */\n  getVector3(propertyName: string): Vector3;\n\n  /**\n   * Get vector3 by shader property.\n   * @param property - Shader property, use `Shader.getPropertyByName` to get\n   * @returns Three-dimensional vector\n   */\n  getVector3(property: ShaderProperty): Vector3;\n\n  getVector3(property: string | ShaderProperty): Vector3 {\n    return this.getPropertyValue(property);\n  }\n\n  /**\n   * Set three dimensional vector by shader property name.\n   * @remarks Correspondence includes vec3、ivec3 and bvec3 shader property type.\n   * @param property - Shader property name\n   * @param value - Three-dimensional vector\n   */\n  setVector3(property: string, value: Vector3): void;\n\n  /**\n   * Set three dimensional vector by shader property.\n   * @remarks Correspondence includes vec3、ivec3 and bvec3 shader property type.\n   * @param property - Shader property, use `Shader.getPropertyByName` to get\n   * @param value - Three-dimensional vector\n   */\n  setVector3(property: ShaderProperty, value: Vector3): void;\n\n  setVector3(property: string | ShaderProperty, value: Vector3): void {\n    this._setPropertyValue(property, ShaderPropertyType.Vector3, value);\n  }\n\n  /**\n   * Get vector4 by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Four-dimensional vector\n   */\n  getVector4(propertyName: string): Vector4;\n\n  /**\n   * Get vector4 by shader property.\n   * @param property - Shader property, use `Shader.getPropertyByName` to get\n   * @returns Four-dimensional vector\n   */\n  getVector4(property: ShaderProperty): Vector4;\n\n  getVector4(property: string | ShaderProperty): Vector4 {\n    return this.getPropertyValue(property);\n  }\n\n  /**\n   * Set four-dimensional vector by shader property name.\n   * @remarks Correspondence includes vec4、ivec4 and bvec4 shader property type.\n   * @param property - Shader property name\n   * @param value - Four-dimensional vector\n   */\n  setVector4(property: string, value: Vector4): void;\n\n  /**\n   * Set four-dimensional vector by shader property.\n   * @remarks Correspondence includes vec4、ivec4 and bvec4 shader property type.\n   * @param property - Shader property, use `Shader.getPropertyByName` to get\n   * @param value - Four-dimensional vector\n   */\n  setVector4(property: ShaderProperty, value: Vector4): void;\n\n  setVector4(property: string | ShaderProperty, value: Vector4): void {\n    this._setPropertyValue(property, ShaderPropertyType.Vector4, value);\n  }\n\n  /**\n   * Get matrix by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Matrix\n   */\n  getMatrix(propertyName: string): Matrix;\n\n  /**\n   * Get matrix by shader property.\n   * @param property - Shader property, use `Shader.getPropertyByName` to get\n   * @returns Matrix\n   */\n  getMatrix(property: ShaderProperty): Matrix;\n\n  getMatrix(property: string | ShaderProperty): Matrix {\n    return this.getPropertyValue(property);\n  }\n\n  /**\n   * Set matrix by shader property name.\n   * @remarks Correspondence includes matrix shader property type.\n   * @param propertyName - Shader property name\n   * @param value - Matrix\n   */\n  setMatrix(propertyName: string, value: Matrix);\n\n  /**\n   * Set matrix by shader property.\n   * @remarks Correspondence includes matrix shader property type.\n   * @param property - Shader property, use `Shader.getPropertyByName` to get\n   * @param value - Matrix\n   */\n  setMatrix(property: ShaderProperty, value: Matrix);\n\n  setMatrix(property: string | ShaderProperty, value: Matrix): void {\n    this._setPropertyValue(property, ShaderPropertyType.Matrix, value);\n  }\n\n  /**\n   * Get color by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Color\n   */\n  getColor(propertyName: string): Color;\n\n  /**\n   * Get color by shader property.\n   * @param property - Shader property, use `Shader.getPropertyByName` to get\n   * @returns Color\n   */\n  getColor(property: ShaderProperty): Color;\n\n  getColor(property: string | ShaderProperty): Color {\n    return this.getPropertyValue(property);\n  }\n\n  /**\n   * Set color by shader property name.\n   * @remarks Correspondence includes vec4 shader property type.\n   * @param propertyName - Shader property name\n   * @param value - Color\n   */\n  setColor(propertyName: string, value: Color): void;\n\n  /**\n   * Set color by shader property.\n   * @remarks Correspondence includes vec4 shader property type.\n   * @param property - Shader property, use `Shader.getPropertyByName` to get\n   * @param value - Color\n   */\n  setColor(property: ShaderProperty, value: Color): void;\n\n  setColor(property: string | ShaderProperty, value: Color): void {\n    this._setPropertyValue(property, ShaderPropertyType.Color, value);\n  }\n\n  /**\n   * Get texture by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Texture\n   */\n  getTexture(propertyName: string): Texture;\n\n  /**\n   * Get texture by shader property.\n   * @param property - Shader property, use `Shader.getPropertyByName` to get\n   * @returns Texture\n   */\n  getTexture(property: ShaderProperty): Texture;\n\n  getTexture(property: string | ShaderProperty): Texture {\n    return this.getPropertyValue(property);\n  }\n\n  /**\n   * Set texture by shader property name.\n   * @param propertyName - Shader property name\n   * @param value - Texture\n   */\n  setTexture(propertyName: string, value: Texture): void;\n\n  /**\n   * Set texture by shader property.\n   * @param property - Shader property, use `Shader.getPropertyByName` to get\n   * @param value - Texture\n   */\n  setTexture(property: ShaderProperty, value: Texture): void;\n\n  setTexture(property: string | ShaderProperty, value: Texture): void {\n    if (this._getRefCount() > 0) {\n      const lastValue = this.getPropertyValue<Texture>(property);\n      lastValue && lastValue._addRefCount(-1);\n      value && value._addRefCount(1);\n    }\n    this._setPropertyValue(property, ShaderPropertyType.Texture, value);\n  }\n\n  /**\n   * Get texture array by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Texture array\n   */\n  getTextureArray(propertyName: string): Texture[];\n\n  /**\n   * Get texture array by shader property.\n   * @param property - Shader property, use `Shader.getPropertyByName` to get\n   * @returns Texture array\n   */\n  getTextureArray(property: ShaderProperty): Texture[];\n\n  getTextureArray(property: string | ShaderProperty): Texture[] {\n    return this.getPropertyValue(property);\n  }\n\n  /**\n   * Set texture array by shader property name.\n   * @param propertyName - Shader property name\n   * @param value - Texture array\n   */\n  setTextureArray(propertyName: string, value: Texture[]): void;\n\n  /**\n   * Set texture array by shader property.\n   * @param property - Shader property, use `Shader.getPropertyByName` to get\n   * @param value - Texture array\n   */\n  setTextureArray(property: ShaderProperty, value: Texture[]): void;\n\n  setTextureArray(property: string | ShaderProperty, value: Texture[]): void {\n    if (this._getRefCount() > 0) {\n      const lastValue = this.getPropertyValue<Texture[]>(property);\n      if (lastValue) {\n        for (let i = 0, n = lastValue.length; i < n; i++) {\n          lastValue[i]._addRefCount(-1);\n        }\n      }\n      if (value) {\n        for (let i = 0, n = value.length; i < n; i++) {\n          value[i]._addRefCount(1);\n        }\n      }\n    }\n    this._setPropertyValue(property, ShaderPropertyType.TextureArray, value);\n  }\n\n  /**\n   * Get shader property value set on this shaderData.\n   * @param property - Shader property\n   * @returns Property value\n   */\n  getPropertyValue<T extends ShaderPropertyValueType>(property: string | ShaderProperty): T {\n    if (typeof property === \"string\") {\n      property = Shader.getPropertyByName(property);\n    }\n    return this._propertyValueMap[property._uniqueId] as T;\n  }\n\n  /**\n   * Enable macro with name.\n   * @param macroName - Macro name\n   */\n  enableMacro(macroName: string): void;\n\n  /**\n   * Enable macro with name and value.\n   * @remarks Name and value will combine, it's equal the macro of \"name value\".\n   * @param name - Macro name\n   * @param value - Macro value\n   */\n  enableMacro(name: string, value: string): void;\n\n  /**\n   * Enable macro with shaderMacro.\n   * @param macro - Shader macro\n   */\n  enableMacro(macro: ShaderMacro): void;\n\n  enableMacro(macro: string | ShaderMacro, value?: string): void {\n    if (typeof macro === \"string\") {\n      macro = Shader.getMacroByName(macro, value);\n    }\n    const nameID = macro._nameId;\n    const lastMacro = this._macroMap[nameID];\n    if (lastMacro !== macro) {\n      const macroCollection = this._macroCollection;\n      lastMacro && macroCollection.disable(lastMacro);\n      macroCollection.enable(macro);\n      this._macroMap[nameID] = macro;\n    }\n  }\n\n  /**\n   * Disable macro.\n   * @param macroName - Macro name\n   */\n  disableMacro(macroName: string): void;\n\n  /**\n   * Disable macro.\n   * @param macro - Shader macro\n   */\n  disableMacro(macro: ShaderMacro): void;\n\n  disableMacro(macro: string | ShaderMacro): void {\n    let nameID: number;\n    if (typeof macro === \"string\") {\n      nameID = ShaderMacro._macroNameIdMap[macro];\n      if (nameID === undefined) {\n        return;\n      }\n    } else {\n      nameID = macro._nameId;\n    }\n\n    const currentMacro = this._macroMap[nameID];\n    if (currentMacro) {\n      this._macroCollection.disable(currentMacro);\n      delete this._macroMap[nameID];\n    }\n  }\n\n  /**\n   * Get shader macro array that are currently enabled for ShaderData.\n   */\n  getMacros(): ShaderMacro[];\n  /**\n   * Get shader macro array that are currently enabled for ShaderData.\n   * @param out - Shader macro array\n   */\n  getMacros(out: ShaderMacro[]): void;\n\n  getMacros(out?: ShaderMacro[]): ShaderMacro[] | void {\n    if (out) {\n      const macroMap = this._macroMap;\n      out.length = 0;\n      for (var key in macroMap) {\n        out.push(macroMap[key]);\n      }\n    } else {\n      return Object.values(this._macroMap);\n    }\n  }\n\n  /**\n   * Get all shader properties that have been set on this shaderData\n   * @returns  All shader properties\n   */\n  getProperties(): ShaderProperty[];\n\n  /**\n   * Get all shader properties that have been set on this shaderData\n   * @param out - All shader properties\n   */\n  getProperties(out: ShaderProperty[]): void;\n\n  getProperties(out?: ShaderProperty[]): void | ShaderProperty[] {\n    let properties: ShaderProperty[];\n    if (out) {\n      out.length = 0;\n      properties = out;\n    } else {\n      properties = [];\n    }\n\n    const propertyValueMap = this._propertyValueMap;\n    const propertyIdMap = Shader._propertyIdMap;\n    for (let key in propertyValueMap) {\n      properties.push(propertyIdMap[key]);\n    }\n\n    if (!out) {\n      return properties;\n    }\n  }\n\n  clone(): ShaderData {\n    const shaderData = new ShaderData(this._group);\n    this.cloneTo(shaderData);\n    return shaderData;\n  }\n\n  cloneTo(target: ShaderData): void {\n    CloneManager.deepCloneObject(this._macroCollection, target._macroCollection);\n    Object.assign(target._macroMap, this._macroMap);\n\n    const propertyValueMap = this._propertyValueMap;\n    const targetPropertyValueMap = target._propertyValueMap;\n    const keys = Object.keys(propertyValueMap);\n    for (let i = 0, n = keys.length; i < n; i++) {\n      const k = keys[i];\n      const property = <ShaderPropertyValueType>propertyValueMap[k];\n      if (property != null) {\n        if (typeof property === \"number\") {\n          targetPropertyValueMap[k] = property;\n        } else if (property instanceof Texture) {\n          targetPropertyValueMap[k] = property;\n        } else if (property instanceof Array || property instanceof Float32Array || property instanceof Int32Array) {\n          targetPropertyValueMap[k] = property.slice();\n        } else {\n          const targetProperty = targetPropertyValueMap[k];\n          if (targetProperty) {\n            targetProperty.copyFrom(property);\n          } else {\n            targetPropertyValueMap[k] = property.clone();\n          }\n        }\n      } else {\n        targetPropertyValueMap[k] = property;\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _setPropertyValue<T extends ShaderPropertyValueType>(\n    property: string | ShaderProperty,\n    type: ShaderPropertyType,\n    value: T\n  ): void {\n    if (typeof property === \"string\") {\n      property = Shader.getPropertyByName(property);\n    }\n\n    if (property._group !== this._group) {\n      if (property._group === undefined) {\n        property._group = this._group;\n      } else {\n        throw `Shader property ${property.name} has been used as ${ShaderDataGroup[property._group]} group.`;\n      }\n    }\n\n    if (property._type !== type) {\n      if (property._type === undefined) {\n        property._type = type;\n      } else {\n        throw `Shader property ${property.name} has been used as ${ShaderPropertyType[property._type]} type.`;\n      }\n    }\n\n    this._propertyValueMap[property._uniqueId] = value;\n  }\n\n  /**\n   * @internal\n   */\n  _getRefCount(): number {\n    return this._refCount;\n  }\n\n  /**\n   * @internal\n   */\n  _addRefCount(value: number): void {\n    this._refCount += value;\n    const properties = this._propertyValueMap;\n    for (const k in properties) {\n      const property = properties[k];\n      // @todo: Separate array to speed performance.\n      if (property && property instanceof Texture) {\n        property._addRefCount(value);\n      }\n    }\n  }\n}\n\nexport type ShaderPropertyValueType =\n  | number\n  | Vector2\n  | Vector3\n  | Vector4\n  | Color\n  | Matrix\n  | Texture\n  | Texture[]\n  | Int32Array\n  | Float32Array;\n","/**\n * Blend factor.\n * @remarks defines which function is used for blending pixel arithmetic\n */\nexport enum BlendFactor {\n  /** (0, 0, 0, 0)*/\n  Zero,\n  /** (1, 1, 1, 1)*/\n  One,\n  /** (Rs, Gs, Bs, As) */\n  SourceColor,\n  /** (1 - Rs, 1 - Gs, 1 - Bs, 1 - As)*/\n  OneMinusSourceColor,\n  /** (Rd, Gd, Bd, Ad)*/\n  DestinationColor,\n  /** (1 - Rd, 1 - Gd, 1 - Bd, 1 - Ad)*/\n  OneMinusDestinationColor,\n  /** (As, As, As, As)*/\n  SourceAlpha,\n  /** (1 - As, 1 - As, 1 - As, 1 - As)*/\n  OneMinusSourceAlpha,\n  /** (Ad, Ad, Ad, Ad)*/\n  DestinationAlpha,\n  /** (1 - Ad, 1 - Ad, 1 - Ad, 1 - Ad)*/\n  OneMinusDestinationAlpha,\n  /** (min(As, 1 - Ad), min(As, 1 - Ad), min(As, 1 - Ad), 10)*/\n  SourceAlphaSaturate,\n  /** (Rc, Gc, Bc, Ac)*/\n  BlendColor,\n  /** (1 - Rc, 1 - Gc, 1 - Bc, 1 - Ac)*/\n  OneMinusBlendColor\n}\n","/**\n * Blend operation function.\n * @remarks defines how a new pixel is combined with a pixel.\n */\nexport enum BlendOperation {\n  /** src + dst. */\n  Add,\n  /** src - dst. */\n  Subtract,\n  /** dst - src. */\n  ReverseSubtract,\n  /** Minimum of source and destination. */\n  Min,\n  /** Maximum of source and destination. */\n  Max\n}\n","/**\n * Set which color channels can be rendered to frame buffer.\n * @remarks enumeration can be combined using bit operations.\n */\nexport enum ColorWriteMask {\n  /** Do not write to any channel. */\n  None = 0,\n  /** Write to the red channel. */\n  Red = 0x1,\n  /** Write to the green channel. */\n  Green = 0x2,\n  /** Write to the blue channel. */\n  Blue = 0x4,\n  /** Write to the alpha channel. */\n  Alpha = 0x8,\n  /** Write to all channel. */\n  All = 0xf\n}\n","import { BlendOperation } from \"../enums/BlendOperation\";\nimport { BlendFactor } from \"../enums/BlendFactor\";\nimport { ColorWriteMask } from \"../enums/ColorWriteMask\";\n\n/**\n * The blend state of the render target.\n */\nexport class RenderTargetBlendState {\n  /** Whether to enable blend. */\n  enabled: boolean = false;\n  /** color (RGB) blend operation. */\n  colorBlendOperation: BlendOperation = BlendOperation.Add;\n  /** alpha (A) blend operation. */\n  alphaBlendOperation: BlendOperation = BlendOperation.Add;\n  /** color blend factor (RGB) for source. */\n  sourceColorBlendFactor: BlendFactor = BlendFactor.One;\n  /** alpha blend factor (A) for source. */\n  sourceAlphaBlendFactor: BlendFactor = BlendFactor.One;\n  /** color blend factor (RGB) for destination. */\n  destinationColorBlendFactor: BlendFactor = BlendFactor.Zero;\n  /** alpha blend factor (A) for destination. */\n  destinationAlphaBlendFactor: BlendFactor = BlendFactor.Zero;\n  /** color mask. */\n  colorWriteMask: ColorWriteMask = ColorWriteMask.All;\n}\n","import { Color } from \"@oasis-engine/math\";\nimport { GLCapabilityType } from \"../../base/Constant\";\nimport { IHardwareRenderer } from \"../../renderingHardwareInterface/IHardwareRenderer\";\nimport { BlendFactor } from \"../enums/BlendFactor\";\nimport { BlendOperation } from \"../enums/BlendOperation\";\nimport { ColorWriteMask } from \"../enums/ColorWriteMask\";\nimport { RenderState } from \"./RenderState\";\nimport { RenderTargetBlendState } from \"./RenderTargetBlendState\";\n\n/**\n * Blend state.\n */\nexport class BlendState {\n  private static _getGLBlendFactor(rhi: IHardwareRenderer, blendFactor: BlendFactor): number {\n    const gl = rhi.gl;\n\n    switch (blendFactor) {\n      case BlendFactor.Zero:\n        return gl.ZERO;\n      case BlendFactor.One:\n        return gl.ONE;\n      case BlendFactor.SourceColor:\n        return gl.SRC_COLOR;\n      case BlendFactor.OneMinusSourceColor:\n        return gl.ONE_MINUS_SRC_COLOR;\n      case BlendFactor.DestinationColor:\n        return gl.DST_COLOR;\n      case BlendFactor.OneMinusDestinationColor:\n        return gl.ONE_MINUS_DST_COLOR;\n      case BlendFactor.SourceAlpha:\n        return gl.SRC_ALPHA;\n      case BlendFactor.OneMinusSourceAlpha:\n        return gl.ONE_MINUS_SRC_ALPHA;\n      case BlendFactor.DestinationAlpha:\n        return gl.DST_ALPHA;\n      case BlendFactor.OneMinusDestinationAlpha:\n        return gl.ONE_MINUS_DST_ALPHA;\n      case BlendFactor.SourceAlphaSaturate:\n        return gl.SRC_ALPHA_SATURATE;\n      case BlendFactor.BlendColor:\n        return gl.CONSTANT_COLOR;\n      case BlendFactor.OneMinusBlendColor:\n        return gl.ONE_MINUS_CONSTANT_COLOR;\n    }\n  }\n\n  private static _getGLBlendOperation(rhi: IHardwareRenderer, blendOperation: BlendOperation): number {\n    const gl = rhi.gl;\n\n    switch (blendOperation) {\n      case BlendOperation.Add:\n        return gl.FUNC_ADD;\n      case BlendOperation.Subtract:\n        return gl.FUNC_SUBTRACT;\n      case BlendOperation.ReverseSubtract:\n        return gl.FUNC_REVERSE_SUBTRACT;\n      case BlendOperation.Min:\n        if (!rhi.canIUse(GLCapabilityType.blendMinMax)) {\n          throw new Error(\"BlendOperation.Min is not supported in this context\");\n        }\n        return gl.MIN; // in webgl1.0 is an extension\n      case BlendOperation.Max:\n        if (!rhi.canIUse(GLCapabilityType.blendMinMax)) {\n          throw new Error(\"BlendOperation.Max is not supported in this context\");\n        }\n        return gl.MAX; // in webgl1.0 is an extension\n    }\n  }\n\n  /** The blend state of the render target. */\n  readonly targetBlendState: RenderTargetBlendState = new RenderTargetBlendState();\n  /** Constant blend color. */\n  readonly blendColor: Color = new Color(0, 0, 0, 0);\n  /** Whether to use (Alpha-to-Coverage) technology. */\n  alphaToCoverage: boolean = false;\n\n  /**\n   * @internal\n   * Apply the current blend state by comparing with the last blend state.\n   */\n  _apply(hardwareRenderer: IHardwareRenderer, lastRenderState: RenderState): void {\n    this._platformApply(hardwareRenderer, lastRenderState.blendState);\n  }\n\n  private _platformApply(rhi: IHardwareRenderer, lastState: BlendState): void {\n    const gl = <WebGLRenderingContext>rhi.gl;\n    const lastTargetBlendState = lastState.targetBlendState;\n\n    const {\n      enabled,\n      colorBlendOperation,\n      alphaBlendOperation,\n      sourceColorBlendFactor,\n      destinationColorBlendFactor,\n      sourceAlphaBlendFactor,\n      destinationAlphaBlendFactor,\n      colorWriteMask\n    } = this.targetBlendState;\n\n    if (enabled !== lastTargetBlendState.enabled) {\n      if (enabled) {\n        gl.enable(gl.BLEND);\n      } else {\n        gl.disable(gl.BLEND);\n      }\n      lastTargetBlendState.enabled = enabled;\n    }\n\n    if (enabled) {\n      // apply blend factor.\n      if (\n        sourceColorBlendFactor !== lastTargetBlendState.sourceColorBlendFactor ||\n        destinationColorBlendFactor !== lastTargetBlendState.destinationColorBlendFactor ||\n        sourceAlphaBlendFactor !== lastTargetBlendState.sourceAlphaBlendFactor ||\n        destinationAlphaBlendFactor !== lastTargetBlendState.destinationAlphaBlendFactor\n      ) {\n        gl.blendFuncSeparate(\n          BlendState._getGLBlendFactor(rhi, sourceColorBlendFactor),\n          BlendState._getGLBlendFactor(rhi, destinationColorBlendFactor),\n          BlendState._getGLBlendFactor(rhi, sourceAlphaBlendFactor),\n          BlendState._getGLBlendFactor(rhi, destinationAlphaBlendFactor)\n        );\n        lastTargetBlendState.sourceColorBlendFactor = sourceColorBlendFactor;\n        lastTargetBlendState.destinationColorBlendFactor = destinationColorBlendFactor;\n        lastTargetBlendState.sourceAlphaBlendFactor = sourceAlphaBlendFactor;\n        lastTargetBlendState.destinationAlphaBlendFactor = destinationAlphaBlendFactor;\n      }\n\n      // apply blend operation.\n      if (\n        colorBlendOperation !== lastTargetBlendState.colorBlendOperation ||\n        alphaBlendOperation !== lastTargetBlendState.alphaBlendOperation\n      ) {\n        gl.blendEquationSeparate(\n          BlendState._getGLBlendOperation(rhi, colorBlendOperation),\n          BlendState._getGLBlendOperation(rhi, alphaBlendOperation)\n        );\n        lastTargetBlendState.colorBlendOperation = colorBlendOperation;\n        lastTargetBlendState.alphaBlendOperation = alphaBlendOperation;\n      }\n\n      // apply blend color.\n      const blendColor = this.blendColor;\n      if (!Color.equals(lastState.blendColor, blendColor)) {\n        gl.blendColor(blendColor.r, blendColor.g, blendColor.b, blendColor.a);\n        lastState.blendColor.copyFrom(blendColor);\n      }\n    }\n\n    // apply color mask.\n    if (colorWriteMask !== lastTargetBlendState.colorWriteMask) {\n      gl.colorMask(\n        (colorWriteMask & ColorWriteMask.Red) !== 0,\n        (colorWriteMask & ColorWriteMask.Green) !== 0,\n        (colorWriteMask & ColorWriteMask.Blue) !== 0,\n        (colorWriteMask & ColorWriteMask.Alpha) !== 0\n      );\n      lastTargetBlendState.colorWriteMask = colorWriteMask;\n    }\n\n    // apply alpha to coverage.\n    const alphaToCoverage = this.alphaToCoverage;\n    if (alphaToCoverage !== lastState.alphaToCoverage) {\n      if (alphaToCoverage) {\n        gl.enable(gl.SAMPLE_ALPHA_TO_COVERAGE);\n      } else {\n        gl.disable(gl.SAMPLE_ALPHA_TO_COVERAGE);\n      }\n      lastState.alphaToCoverage = alphaToCoverage;\n    }\n  }\n}\n","/**\n * Depth/Stencil comparison function.\n * @remarks Specifies a function that compares incoming pixel depth/stencil to the current depth/stencil buffer value.\n */\nexport enum CompareFunction {\n  /** never pass. */\n  Never,\n  /** pass if the incoming value is less than the depth/stencil buffer value. */\n  Less,\n  /** pass if the incoming value equals the depth/stencil buffer value. */\n  Equal,\n  /** pass if the incoming value is less than or equal to the depth/stencil buffer value. */\n  LessEqual,\n  /** pass if the incoming value is greater than the depth/stencil buffer value. */\n  Greater,\n  /** pass if the incoming value is not equal to the depth/stencil buffer value. */\n  NotEqual,\n  /** pass if the incoming value is greater than or equal to the depth/stencil buffer value. */\n  GreaterEqual,\n  /** always pass. */\n  Always\n}\n","import { IHardwareRenderer } from \"../../renderingHardwareInterface/IHardwareRenderer\";\nimport { CompareFunction } from \"../enums/CompareFunction\";\nimport { RenderState } from \"./RenderState\";\n\n/**\n * Depth state.\n */\nexport class DepthState {\n  private static _getGLCompareFunction(rhi: IHardwareRenderer, compareFunction: CompareFunction): number {\n    const gl = rhi.gl;\n\n    switch (compareFunction) {\n      case CompareFunction.Never:\n        return gl.NEVER;\n      case CompareFunction.Less:\n        return gl.LESS;\n      case CompareFunction.Equal:\n        return gl.EQUAL;\n      case CompareFunction.LessEqual:\n        return gl.LEQUAL;\n      case CompareFunction.Greater:\n        return gl.GREATER;\n      case CompareFunction.NotEqual:\n        return gl.NOTEQUAL;\n      case CompareFunction.GreaterEqual:\n        return gl.GEQUAL;\n      case CompareFunction.Always:\n        return gl.ALWAYS;\n    }\n  }\n\n  /** Whether to enable the depth test. */\n  enabled: boolean = true;\n  /** Whether the depth value can be written.*/\n  writeEnabled: boolean = true;\n  /** Depth comparison function. */\n  compareFunction: CompareFunction = CompareFunction.Less;\n\n  /**\n   * @internal\n   * Apply the current depth state by comparing with the last depth state.\n   */\n  _apply(hardwareRenderer: IHardwareRenderer, lastRenderState: RenderState): void {\n    this._platformApply(hardwareRenderer, lastRenderState.depthState);\n  }\n\n  private _platformApply(rhi: IHardwareRenderer, lastState: DepthState): void {\n    const gl = <WebGLRenderingContext>rhi.gl;\n    const { enabled, compareFunction, writeEnabled } = this;\n\n    if (enabled != lastState.enabled) {\n      if (enabled) {\n        gl.enable(gl.DEPTH_TEST);\n      } else {\n        gl.disable(gl.DEPTH_TEST);\n      }\n      lastState.enabled = enabled;\n    }\n\n    if (enabled) {\n      // apply compare func.\n      if (compareFunction != lastState.compareFunction) {\n        gl.depthFunc(DepthState._getGLCompareFunction(rhi, compareFunction));\n        lastState.compareFunction = compareFunction;\n      }\n\n      // apply write enabled.\n      if (writeEnabled != lastState.writeEnabled) {\n        gl.depthMask(writeEnabled);\n        lastState.writeEnabled = writeEnabled;\n      }\n    }\n  }\n}\n","/**\n * Culling mode.\n * @remarks specifies whether or not front- and/or back-facing polygons can be culled.\n */\nexport enum CullMode {\n  /** Disable culling. */\n  Off,\n  /** cut the front-face of the polygons. */\n  Front,\n  /** cut the back-face of the polygons. */\n  Back\n}\n","import { IHardwareRenderer } from \"../../renderingHardwareInterface/IHardwareRenderer\";\nimport { CullMode } from \"../enums/CullMode\";\nimport { RenderState } from \"./RenderState\";\n\n/**\n * Raster state.\n */\nexport class RasterState {\n  /** Specifies whether or not front- and/or back-facing polygons can be culled. */\n  cullMode: CullMode = CullMode.Back;\n  /** The multiplier by which an implementation-specific value is multiplied with to create a constant depth offset. */\n  depthBias: number = 0;\n  /** The scale factor for the variable depth offset for each polygon. */\n  slopeScaledDepthBias: number = 0;\n\n  /** @internal */\n  _cullFaceEnable: boolean = true;\n  /** @internal */\n  _frontFaceInvert: boolean = false;\n\n  /**\n   * @internal\n   */\n  _apply(hardwareRenderer: IHardwareRenderer, lastRenderState: RenderState, frontFaceInvert: boolean): void {\n    this._platformApply(hardwareRenderer, lastRenderState.rasterState, frontFaceInvert);\n  }\n\n  private _platformApply(rhi: IHardwareRenderer, lastState: RasterState, frontFaceInvert: boolean): void {\n    const gl = <WebGLRenderingContext>rhi.gl;\n    const { cullMode, depthBias, slopeScaledDepthBias } = this;\n\n    const cullFaceEnable = cullMode !== CullMode.Off;\n    if (cullFaceEnable !== lastState._cullFaceEnable) {\n      if (cullFaceEnable) {\n        gl.enable(gl.CULL_FACE);\n      } else {\n        gl.disable(gl.CULL_FACE);\n      }\n      lastState._cullFaceEnable = cullFaceEnable;\n    }\n\n    // apply front face.\n    if (cullFaceEnable) {\n      if (cullMode !== lastState.cullMode) {\n        if (cullMode == CullMode.Back) {\n          gl.cullFace(gl.BACK);\n        } else {\n          gl.cullFace(gl.FRONT);\n        }\n        lastState.cullMode = cullMode;\n      }\n    }\n\n    if (frontFaceInvert !== lastState._frontFaceInvert) {\n      if (frontFaceInvert) {\n        gl.frontFace(gl.CW);\n      } else {\n        gl.frontFace(gl.CCW);\n      }\n      lastState._frontFaceInvert = frontFaceInvert;\n    }\n\n    // apply polygonOffset.\n    if (depthBias !== lastState.depthBias || slopeScaledDepthBias !== lastState.slopeScaledDepthBias) {\n      if (depthBias !== 0 || slopeScaledDepthBias !== 0) {\n        gl.enable(gl.POLYGON_OFFSET_FILL);\n        gl.polygonOffset(slopeScaledDepthBias, depthBias);\n      } else {\n        gl.disable(gl.POLYGON_OFFSET_FILL);\n      }\n      lastState.depthBias = depthBias;\n      lastState.slopeScaledDepthBias = slopeScaledDepthBias;\n    }\n  }\n}\n","/**\n * Stencil operation mode.\n * @remarks sets the front and/or back-facing stencil test actions.\n */\nexport enum StencilOperation {\n  /** Keeps the current value. */\n  Keep,\n  /** Sets the stencil buffer value to 0. */\n  Zero,\n  /** Sets the stencil buffer value to the reference value. */\n  Replace,\n  /** Increments the current stencil buffer value. Clamps to the maximum representable unsigned value. */\n  IncrementSaturate,\n  /** Decrements the current stencil buffer value. Clamps to 0. */\n  DecrementSaturate,\n  /** Inverts the current stencil buffer value bitwise. */\n  Invert,\n  /** Increments the current stencil buffer value. Wraps stencil buffer value to zero when incrementing the maximum representable unsigned value. */\n  IncrementWrap,\n  /** Decrements the current stencil buffer value. Wraps stencil buffer value to the maximum representable unsigned value when decrementing a stencil buffer value of 0. */\n  DecrementWrap\n}\n","import { IHardwareRenderer } from \"../../renderingHardwareInterface/IHardwareRenderer\";\nimport { CompareFunction } from \"../enums/CompareFunction\";\nimport { StencilOperation } from \"../enums/StencilOperation\";\nimport { RenderState } from \"./RenderState\";\n\n/**\n * Stencil state.\n */\nexport class StencilState {\n  private static _getGLCompareFunction(rhi: IHardwareRenderer, compareFunction: CompareFunction): number {\n    const gl = rhi.gl;\n\n    switch (compareFunction) {\n      case CompareFunction.Never:\n        return gl.NEVER;\n      case CompareFunction.Less:\n        return gl.LESS;\n      case CompareFunction.Equal:\n        return gl.EQUAL;\n      case CompareFunction.LessEqual:\n        return gl.LEQUAL;\n      case CompareFunction.Greater:\n        return gl.GREATER;\n      case CompareFunction.NotEqual:\n        return gl.NOTEQUAL;\n      case CompareFunction.GreaterEqual:\n        return gl.GEQUAL;\n      case CompareFunction.Always:\n        return gl.ALWAYS;\n    }\n  }\n\n  private static _getGLStencilOperation(rhi: IHardwareRenderer, compareFunction: StencilOperation): number {\n    const gl = rhi.gl;\n\n    switch (compareFunction) {\n      case StencilOperation.Keep:\n        return gl.KEEP;\n      case StencilOperation.Zero:\n        return gl.ZERO;\n      case StencilOperation.Replace:\n        return gl.REPLACE;\n      case StencilOperation.IncrementSaturate:\n        return gl.INCR;\n      case StencilOperation.DecrementSaturate:\n        return gl.DECR;\n      case StencilOperation.Invert:\n        return gl.INVERT;\n      case StencilOperation.IncrementWrap:\n        return gl.INCR_WRAP;\n      case StencilOperation.DecrementWrap:\n        return gl.DECR_WRAP;\n    }\n  }\n\n  /** Whether to enable stencil test. */\n  enabled: boolean = false;\n  /** Write the reference value of the stencil buffer. */\n  referenceValue: number = 0;\n  /** Specifying a bit-wise mask that is used to AND the reference value and the stored stencil value when the test is done. */\n  mask: number = 0xff;\n  /** Specifying a bit mask to enable or disable writing of individual bits in the stencil planes. */\n  writeMask: number = 0xff;\n  /** The comparison function of the reference value of the front face of the geometry and the current buffer storage value. */\n  compareFunctionFront: CompareFunction = CompareFunction.Always;\n  /** The comparison function of the reference value of the back of the geometry and the current buffer storage value. */\n  compareFunctionBack: CompareFunction = CompareFunction.Always;\n  /** specifying the function to use for front face when both the stencil test and the depth test pass. */\n  passOperationFront: StencilOperation = StencilOperation.Keep;\n  /** specifying the function to use for back face when both the stencil test and the depth test pass. */\n  passOperationBack: StencilOperation = StencilOperation.Keep;\n  /** specifying the function to use for front face when the stencil test fails. */\n  failOperationFront: StencilOperation = StencilOperation.Keep;\n  /** specifying the function to use for back face when the stencil test fails. */\n  failOperationBack: StencilOperation = StencilOperation.Keep;\n  /** specifying the function to use for front face when the stencil test passes, but the depth test fails. */\n  zFailOperationFront: StencilOperation = StencilOperation.Keep;\n  /** specifying the function to use for back face when the stencil test passes, but the depth test fails. */\n  zFailOperationBack: StencilOperation = StencilOperation.Keep;\n\n  /**\n   * @internal\n   */\n  _apply(hardwareRenderer: IHardwareRenderer, lastRenderState: RenderState): void {\n    this._platformApply(hardwareRenderer, lastRenderState.stencilState);\n  }\n\n  private _platformApply(rhi: IHardwareRenderer, lastState: StencilState): void {\n    const gl = <WebGLRenderingContext>rhi.gl;\n    const {\n      enabled,\n      referenceValue,\n      mask,\n      compareFunctionFront,\n      compareFunctionBack,\n      failOperationFront,\n      zFailOperationFront,\n      passOperationFront,\n      failOperationBack,\n      zFailOperationBack,\n      passOperationBack,\n      writeMask\n    } = this;\n\n    if (enabled != lastState.enabled) {\n      if (enabled) {\n        gl.enable(gl.STENCIL_TEST);\n      } else {\n        gl.disable(gl.STENCIL_TEST);\n      }\n      lastState.enabled = enabled;\n    }\n\n    if (enabled) {\n      // apply stencil func.\n      const referenceOrMaskChange = referenceValue !== lastState.referenceValue || mask !== lastState.mask;\n      if (referenceOrMaskChange || compareFunctionFront !== lastState.compareFunctionFront) {\n        gl.stencilFuncSeparate(\n          gl.FRONT,\n          StencilState._getGLCompareFunction(rhi, compareFunctionFront),\n          referenceValue,\n          mask\n        );\n        lastState.compareFunctionFront = compareFunctionFront;\n      }\n\n      if (referenceOrMaskChange || compareFunctionBack !== lastState.compareFunctionBack) {\n        gl.stencilFuncSeparate(gl.BACK, StencilState._getGLCompareFunction(rhi, compareFunctionBack), referenceValue, mask);\n        lastState.compareFunctionBack = this.compareFunctionBack;\n      }\n      if (referenceOrMaskChange) {\n        lastState.referenceValue = this.referenceValue;\n        lastState.mask = this.mask;\n      }\n\n      // apply stencil operation.\n      if (\n        failOperationFront !== lastState.failOperationFront ||\n        zFailOperationFront !== lastState.zFailOperationFront ||\n        passOperationFront !== lastState.passOperationFront\n      ) {\n        gl.stencilOpSeparate(\n          gl.FRONT,\n          StencilState._getGLStencilOperation(rhi, failOperationFront),\n          StencilState._getGLStencilOperation(rhi, zFailOperationFront),\n          StencilState._getGLStencilOperation(rhi, passOperationFront)\n        );\n        lastState.failOperationFront = failOperationFront;\n        lastState.zFailOperationFront = zFailOperationFront;\n        lastState.passOperationFront = passOperationFront;\n      }\n\n      if (\n        failOperationBack !== lastState.failOperationBack ||\n        zFailOperationBack !== lastState.zFailOperationBack ||\n        passOperationBack !== lastState.passOperationBack\n      ) {\n        gl.stencilOpSeparate(\n          gl.BACK,\n          StencilState._getGLStencilOperation(rhi, failOperationBack),\n          StencilState._getGLStencilOperation(rhi, zFailOperationBack),\n          StencilState._getGLStencilOperation(rhi, passOperationBack)\n        );\n        lastState.failOperationBack = failOperationBack;\n        lastState.zFailOperationBack = zFailOperationBack;\n        lastState.passOperationBack = passOperationBack;\n      }\n\n      // apply write mask.\n      if (writeMask !== lastState.writeMask) {\n        gl.stencilMask(writeMask);\n        lastState.writeMask = writeMask;\n      }\n    }\n  }\n}\n","import { Engine } from \"../../Engine\";\nimport { BlendState } from \"./BlendState\";\nimport { DepthState } from \"./DepthState\";\nimport { RasterState } from \"./RasterState\";\nimport { StencilState } from \"./StencilState\";\n\n/**\n * Render state.\n */\nexport class RenderState {\n  /** Blend state. */\n  readonly blendState: BlendState = new BlendState();\n  /** Depth state. */\n  readonly depthState: DepthState = new DepthState();\n  /** Stencil state. */\n  readonly stencilState: StencilState = new StencilState();\n  /** Raster state. */\n  readonly rasterState: RasterState = new RasterState();\n\n  /**\n   * @internal\n   */\n  _apply(engine: Engine, frontFaceInvert: boolean): void {\n    const hardwareRenderer = engine._hardwareRenderer;\n    const lastRenderState = engine._lastRenderState;\n    this.blendState._apply(hardwareRenderer, lastRenderState);\n    this.depthState._apply(hardwareRenderer, lastRenderState);\n    this.stencilState._apply(hardwareRenderer, lastRenderState);\n    this.rasterState._apply(hardwareRenderer, lastRenderState, frontFaceInvert);\n  }\n}\n","import { IClone } from \"@oasis-engine/design\";\nimport { RefObject } from \"../asset/RefObject\";\nimport { CloneManager } from \"../clone/CloneManager\";\nimport { Engine } from \"../Engine\";\nimport { MeshRenderElement } from \"../RenderPipeline/MeshRenderElement\";\nimport { SpriteElement } from \"../RenderPipeline/SpriteElement\";\nimport { ShaderDataGroup } from \"../shader/enums/ShaderDataGroup\";\nimport { Shader } from \"../shader/Shader\";\nimport { ShaderData } from \"../shader/ShaderData\";\nimport { RenderState } from \"../shader/state/RenderState\";\nimport { RenderQueueType } from \"./enums/RenderQueueType\";\n\n/**\n * Material.\n */\nexport class Material extends RefObject implements IClone {\n  /** Name. */\n  name: string;\n  /** Shader used by the material. */\n  shader: Shader;\n  /** Render queue type. */\n  renderQueueType: RenderQueueType = RenderQueueType.Opaque;\n  /** Shader data. */\n  readonly shaderData: ShaderData = new ShaderData(ShaderDataGroup.Material);\n  /** Render state. */\n  readonly renderState: RenderState = new RenderState(); // todo: later will as a part of shaderData when shader effect frame is OK, that is more powerful and flexible.\n\n  /**\n   * Create a material instance.\n   * @param engine - Engine to which the material belongs\n   * @param shader - Shader used by the material\n   */\n  constructor(engine: Engine, shader: Shader) {\n    super(engine);\n    this.shader = shader;\n  }\n\n  /**\n   * Clone and return the instance.\n   */\n  clone(): Material {\n    const dest = new Material(this._engine, this.shader);\n    this.cloneTo(dest);\n    return dest;\n  }\n\n  /**\n   * Clone to the target material.\n   * @param target - target material\n   */\n  cloneTo(target: Material): void {\n    target.shader = this.shader;\n    target.renderQueueType = this.renderQueueType;\n    this.shaderData.cloneTo(target.shaderData);\n    CloneManager.deepCloneObject(this.renderState, target.renderState);\n  }\n\n  /**\n   * @override\n   */\n  _addRefCount(value: number): void {\n    super._addRefCount(value);\n    this.shaderData._addRefCount(value);\n  }\n\n  /**\n   * @internal\n   * @todo:temporary solution\n   */\n  _preRender(renderElement: MeshRenderElement | SpriteElement) {}\n\n  /**\n   * @override\n   */\n  protected _onDestroy(): void {}\n}\n","/**\n * Class pool utils.\n */\nexport class ClassPool<T> {\n  private _elementPoolIndex: number = 0;\n  private _elementPool: T[] = [];\n  private _type: new () => T;\n\n  constructor(type: new () => T) {\n    this._type = type;\n  }\n\n  /**\n   * Get element from pool.\n   */\n  getFromPool(): T {\n    const { _elementPoolIndex: index, _elementPool: pool } = this;\n    this._elementPoolIndex++;\n    if (pool.length === index) {\n      const element = new this._type();\n      pool.push(element);\n      return element;\n    } else {\n      return pool[index];\n    }\n  }\n\n  /**\n   * Reset pool.\n   */\n  resetPool(): void {\n    this._elementPoolIndex = 0;\n  }\n}\n","import { Material } from \"../material/Material\";\nimport { Renderer } from \"../Renderer\";\n\nexport class RenderElement {\n  component: Renderer;\n  material: Material;\n  multiRenderData: boolean;\n}\n","import { Mesh } from \"../graphic/Mesh\";\nimport { SubMesh } from \"../graphic/SubMesh\";\nimport { Material } from \"../material/Material\";\nimport { Renderer } from \"../Renderer\";\nimport { RenderElement } from \"./RenderElement\";\n\n/**\n * Render element.\n */\nexport class MeshRenderElement extends RenderElement {\n  /** Mesh. */\n  mesh: Mesh;\n  /** Sub mesh. */\n  subMesh: SubMesh;\n\n  setValue(component: Renderer, mesh: Mesh, subMesh: SubMesh, material: Material): void {\n    this.component = component;\n    this.mesh = mesh;\n    this.subMesh = subMesh;\n    this.material = material;\n  }\n}\n","import { Matrix } from \"@oasis-engine/math\";\nimport { Camera } from \"../Camera\";\n\n/**\n * Rendering context.\n */\nexport class RenderContext {\n  /** @internal */\n  _camera: Camera;\n  /** @internal */\n  _viewProjectMatrix: Matrix = new Matrix();\n\n  /**\n   * @internal\n   */\n  _setContext(camera: Camera): void {\n    this._camera = camera;\n    Matrix.multiply(camera.projectionMatrix, camera.viewMatrix, this._viewProjectMatrix);\n  }\n}\n","import { RenderData2D } from \"../2d/data/RenderData2D\";\nimport { Material } from \"../material/Material\";\nimport { Renderer } from \"../Renderer\";\nimport { Texture2D } from \"../texture\";\nimport { RenderElement } from \"./RenderElement\";\n\nexport class SpriteElement extends RenderElement {\n  renderData: RenderData2D;\n  texture: Texture2D;\n\n  constructor() {\n    super();\n    this.multiRenderData = false;\n  }\n\n  setValue(component: Renderer, renderDate: RenderData2D, material: Material, texture: Texture2D): void {\n    this.component = component;\n    this.renderData = renderDate;\n    this.material = material;\n    this.texture = texture;\n  }\n}\n","import { RenderData2D } from \"../2d/data/RenderData2D\";\nimport { Material } from \"../material/Material\";\nimport { Renderer } from \"../Renderer\";\nimport { RenderElement } from \"./RenderElement\";\n\nexport class SpriteMaskElement extends RenderElement {\n  renderData: RenderData2D;\n  isAdd: boolean = true;\n\n  constructor() {\n    super();\n    this.multiRenderData = false;\n  }\n\n  setValue(component: Renderer, renderData: RenderData2D, material: Material): void {\n    this.component = component;\n    this.renderData = renderData;\n    this.material = material;\n  }\n}\n","/**\n * Sprite mask interaction.\n */\nexport enum SpriteMaskInteraction {\n  /** The sprite will not interact with the masking system. */\n  None,\n  /** The sprite will be visible only in areas where a mask is present. */\n  VisibleInsideMask,\n  /** The sprite will be visible only in areas where no mask is present. */\n  VisibleOutsideMask\n}\n","import { BoundingBox, Matrix, Vector3 } from \"@oasis-engine/math\";\nimport { BoolUpdateFlag } from \"./BoolUpdateFlag\";\nimport { Camera } from \"./Camera\";\nimport { deepClone, ignoreClone, shallowClone } from \"./clone/CloneManager\";\nimport { Component } from \"./Component\";\nimport { dependentComponents } from \"./ComponentsDependencies\";\nimport { Entity } from \"./Entity\";\nimport { Material } from \"./material/Material\";\nimport { RenderContext } from \"./RenderPipeline/RenderContext\";\nimport { Shader } from \"./shader\";\nimport { ShaderDataGroup } from \"./shader/enums/ShaderDataGroup\";\nimport { ShaderData } from \"./shader/ShaderData\";\nimport { ShaderMacroCollection } from \"./shader/ShaderMacroCollection\";\nimport { Transform } from \"./Transform\";\n\n/**\n * Basis for all renderers.\n * @decorator `@dependentComponents(Transform)`\n */\n@dependentComponents(Transform)\nexport class Renderer extends Component {\n  private static _localMatrixProperty = Shader.getPropertyByName(\"u_localMat\");\n  private static _worldMatrixProperty = Shader.getPropertyByName(\"u_modelMat\");\n  private static _mvMatrixProperty = Shader.getPropertyByName(\"u_MVMat\");\n  private static _mvpMatrixProperty = Shader.getPropertyByName(\"u_MVPMat\");\n  private static _mvInvMatrixProperty = Shader.getPropertyByName(\"u_MVInvMat\");\n  private static _normalMatrixProperty = Shader.getPropertyByName(\"u_normalMat\");\n\n  /** ShaderData related to renderer. */\n  @deepClone\n  readonly shaderData: ShaderData = new ShaderData(ShaderDataGroup.Renderer);\n  /** Whether it is clipped by the frustum, needs to be turned on camera.enableFrustumCulling. */\n  @ignoreClone\n  isCulled: boolean = false;\n\n  /** @internal */\n  @ignoreClone\n  _distanceForSort: number;\n  /** @internal */\n  @ignoreClone\n  _onUpdateIndex: number = -1;\n  /** @internal */\n  @ignoreClone\n  _rendererIndex: number = -1;\n  /** @internal */\n  @ignoreClone\n  _globalShaderMacro: ShaderMacroCollection = new ShaderMacroCollection();\n  /** @internal */\n  @ignoreClone\n  _transformChangeFlag: BoolUpdateFlag;\n  /** @internal */\n  @deepClone\n  _bounds: BoundingBox = new BoundingBox();\n\n  @ignoreClone\n  protected _overrideUpdate: boolean = false;\n  @shallowClone\n  protected _materials: Material[] = [];\n\n  @ignoreClone\n  private _mvMatrix: Matrix = new Matrix();\n  @ignoreClone\n  private _mvpMatrix: Matrix = new Matrix();\n  @ignoreClone\n  private _mvInvMatrix: Matrix = new Matrix();\n  @ignoreClone\n  private _normalMatrix: Matrix = new Matrix();\n  @ignoreClone\n  private _materialsInstanced: boolean[] = [];\n  @ignoreClone\n  private _priority: number = 0;\n\n  /**\n   * Material count.\n   */\n  get materialCount(): number {\n    return this._materials.length;\n  }\n\n  set materialCount(value: number) {\n    const materials = this._materials;\n    const materialsInstanced = this._materialsInstanced;\n\n    materials.length !== value && (materials.length = value);\n    materialsInstanced.length > value && (materialsInstanced.length = value);\n  }\n\n  /**\n   * The bounding volume of the renderer.\n   */\n  get bounds(): BoundingBox {\n    const changeFlag = this._transformChangeFlag;\n    if (changeFlag.flag) {\n      this._updateBounds(this._bounds);\n      changeFlag.flag = false;\n    }\n    return this._bounds;\n  }\n\n  /**\n   * The render priority of the renderer, lower values are rendered first and higher values are rendered last.\n   */\n  get priority(): number {\n    return this._priority;\n  }\n\n  set priority(value: number) {\n    this._priority = value;\n  }\n\n  /**\n   * @internal\n   */\n  constructor(entity: Entity) {\n    super(entity);\n    const prototype = Renderer.prototype;\n    this._overrideUpdate = this.update !== prototype.update;\n    this._transformChangeFlag = this.entity.transform.registerWorldChangeFlag();\n    this.shaderData._addRefCount(1);\n  }\n\n  /**\n   * Get the first instance material.\n   * @returns The first instance material\n   */\n  getInstanceMaterial(): Material | null;\n\n  /**\n   * Get the first instance material by index.\n   * @remarks Calling this function for the first time after the material is set will create an instance material to ensure that it is unique to the renderer.\n   * @param index - Material index\n   * @returns Instance material\n   */\n  getInstanceMaterial(index: number): Material | null;\n\n  getInstanceMaterial(index: number = 0): Material | null {\n    const materials = this._materials;\n    if (materials.length > index) {\n      const material = materials[index];\n      if (material) {\n        if (this._materialsInstanced[index]) {\n          return material;\n        } else {\n          return this._createInstanceMaterial(material, index);\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Get the first material.\n   * @returns The first material\n   */\n  getMaterial(): Material | null;\n\n  /**\n   * Get the first material by index.\n   * @param index - Material index\n   * @returns Material\n   */\n  getMaterial(index: number): Material | null;\n\n  getMaterial(index: number = 0): Material | null {\n    return this._materials[index] || null;\n  }\n\n  /**\n   * Set the first material.\n   * @param material - The first material\n   */\n  setMaterial(material: Material): void;\n\n  /**\n   * Set material by index.\n   * @param index - Material index\n   * @param material - The material\n   */\n  setMaterial(index: number, material: Material): void;\n\n  setMaterial(indexOrMaterial: number | Material, material: Material = null): void {\n    if (typeof indexOrMaterial === \"number\") {\n      this._setMaterial(indexOrMaterial, material);\n    } else {\n      this._setMaterial(0, indexOrMaterial);\n    }\n  }\n\n  /**\n   * Get all instance materials.\n   * @remarks Calling this function for the first time after the material is set will create an instance material to ensure that it is unique to the renderer.\n   * @returns All instance materials\n   */\n  getInstanceMaterials(): Readonly<Material[]> {\n    const materials = this._materials;\n    const materialsInstance = this._materialsInstanced;\n    for (let i = 0, n = materials.length; i < n; i++) {\n      if (!materialsInstance[i]) {\n        this._createInstanceMaterial(this._materials[i], i);\n      }\n    }\n    return materials;\n  }\n\n  /**\n   * Get all materials.\n   * @returns All materials\n   */\n  getMaterials(): Readonly<Material[]> {\n    return this._materials;\n  }\n\n  /**\n   * Set all materials.\n   * @param materials - All materials\n   */\n  setMaterials(materials: Material[]): void {\n    const count = materials.length;\n    const internalMaterials = this._materials;\n    const materialsInstanced = this._materialsInstanced;\n\n    for (let i = count, n = internalMaterials.length; i < n; i++) {\n      const internalMaterial = internalMaterials[i];\n      internalMaterial && internalMaterial._addRefCount(-1);\n    }\n\n    internalMaterials.length !== count && (internalMaterials.length = count);\n    materialsInstanced.length !== 0 && (materialsInstanced.length = 0);\n\n    for (let i = 0; i < count; i++) {\n      const internalMaterial = internalMaterials[i];\n      const material = materials[i];\n      if (internalMaterial !== material) {\n        internalMaterials[i] = material;\n        internalMaterial && internalMaterial._addRefCount(-1);\n        material && material._addRefCount(1);\n      }\n    }\n  }\n\n  update(deltaTime: number): void {}\n\n  /**\n   * @internal\n   */\n  _updateShaderData(context: RenderContext): void {\n    const shaderData = this.shaderData;\n    const worldMatrix = this.entity.transform.worldMatrix;\n    const mvMatrix = this._mvMatrix;\n    const mvpMatrix = this._mvpMatrix;\n    const mvInvMatrix = this._mvInvMatrix;\n    const normalMatrix = this._normalMatrix;\n\n    Matrix.multiply(context._camera.viewMatrix, worldMatrix, mvMatrix);\n    Matrix.multiply(context._viewProjectMatrix, worldMatrix, mvpMatrix);\n    Matrix.invert(mvMatrix, mvInvMatrix);\n    Matrix.invert(worldMatrix, normalMatrix);\n    normalMatrix.transpose();\n\n    shaderData.setMatrix(Renderer._localMatrixProperty, this.entity.transform.localMatrix);\n    shaderData.setMatrix(Renderer._worldMatrixProperty, worldMatrix);\n    shaderData.setMatrix(Renderer._mvMatrixProperty, mvMatrix);\n    shaderData.setMatrix(Renderer._mvpMatrixProperty, mvpMatrix);\n    shaderData.setMatrix(Renderer._mvInvMatrixProperty, mvInvMatrix);\n    shaderData.setMatrix(Renderer._normalMatrixProperty, normalMatrix);\n  }\n\n  _onEnable(): void {\n    const componentsManager = this.engine._componentsManager;\n    if (this._overrideUpdate) {\n      componentsManager.addOnUpdateRenderers(this);\n    }\n    componentsManager.addRenderer(this);\n  }\n\n  _onDisable(): void {\n    const componentsManager = this.engine._componentsManager;\n    if (this._overrideUpdate) {\n      componentsManager.removeOnUpdateRenderers(this);\n    }\n    componentsManager.removeRenderer(this);\n  }\n\n  /**\n   * @internal\n   */\n  _render(camera: Camera): void {\n    throw \"not implement\";\n  }\n\n  /**\n   * @internal\n   */\n  _onDestroy(): void {\n    const flag = this._transformChangeFlag;\n    if (flag) {\n      flag.destroy();\n      this._transformChangeFlag = null;\n    }\n\n    this.shaderData._addRefCount(-1);\n\n    const materials = this._materials;\n    for (let i = 0, n = materials.length; i < n; i++) {\n      materials[i]?._addRefCount(-1);\n    }\n  }\n\n  protected _updateBounds(worldBounds: BoundingBox): void {}\n\n  private _createInstanceMaterial(material: Material, index: number): Material {\n    const insMaterial: Material = material.clone();\n    insMaterial.name = insMaterial.name + \"(Instance)\";\n    material._addRefCount(-1);\n    insMaterial._addRefCount(1);\n    this._materialsInstanced[index] = true;\n    this._materials[index] = insMaterial;\n    return insMaterial;\n  }\n\n  private _setMaterial(index: number, material: Material): void {\n    const materials = this._materials;\n    if (index >= materials.length) {\n      materials.length = index + 1;\n    }\n\n    const internalMaterial = materials[index];\n    if (internalMaterial !== material) {\n      const materialsInstance = this._materialsInstanced;\n      index < materialsInstance.length && (materialsInstance[index] = false);\n\n      internalMaterial && internalMaterial._addRefCount(-1);\n      material && material._addRefCount(1);\n      materials[index] = material;\n    }\n  }\n}\n","/**\n *  Static interface implement decorator.\n *  https://stackoverflow.com/questions/13955157/how-to-define-static-property-in-typescript-interface\n */\nexport function StaticInterfaceImplement<T>() {\n  return <U extends T>(constructor: U) => {\n    constructor;\n  };\n}\n\n","import { BoundingBox, Matrix, Vector2, Vector3 } from \"@oasis-engine/math\";\nimport { SpriteMask } from \"../sprite\";\nimport { SpriteRenderer } from \"../sprite/SpriteRenderer\";\nimport { IAssembler } from \"./IAssembler\";\nimport { StaticInterfaceImplement } from \"./StaticInterfaceImplement\";\n\n/**\n * @internal\n */\n@StaticInterfaceImplement<IAssembler>()\nexport class SimpleSpriteAssembler {\n  static _rectangleTriangles: number[] = [0, 1, 2, 2, 1, 3];\n  static _worldMatrix: Matrix = new Matrix();\n\n  static resetData(renderer: SpriteRenderer | SpriteMask): void {\n    const { _renderData: renderData } = renderer;\n    const vertexCount = (renderData.vertexCount = 4);\n    const { positions, uvs } = renderData;\n    if (positions.length < vertexCount) {\n      for (let i = positions.length; i < vertexCount; i++) {\n        positions.push(new Vector3());\n        uvs.push(new Vector2());\n      }\n    }\n    renderData.triangles = SimpleSpriteAssembler._rectangleTriangles;\n  }\n\n  static updatePositions(renderer: SpriteRenderer | SpriteMask): void {\n    const { width, height, sprite } = renderer;\n    const { x: pivotX, y: pivotY } = sprite.pivot;\n    // Renderer's worldMatrix;\n    const { _worldMatrix: worldMatrix } = SimpleSpriteAssembler;\n    const { elements: wE } = worldMatrix;\n    // Parent's worldMatrix.\n    const { elements: pWE } = renderer.entity.transform.worldMatrix;\n    const sx = renderer.flipX ? -width : width;\n    const sy = renderer.flipY ? -height : height;\n    (wE[0] = pWE[0] * sx), (wE[1] = pWE[1] * sx), (wE[2] = pWE[2] * sx);\n    (wE[4] = pWE[4] * sy), (wE[5] = pWE[5] * sy), (wE[6] = pWE[6] * sy);\n    (wE[8] = pWE[8]), (wE[9] = pWE[9]), (wE[10] = pWE[10]);\n    wE[12] = pWE[12] - pivotX * wE[0] - pivotY * wE[4];\n    wE[13] = pWE[13] - pivotX * wE[1] - pivotY * wE[5];\n    wE[14] = pWE[14] - pivotX * wE[2] - pivotY * wE[6];\n\n    // ---------------\n    //  2 - 3\n    //  |   |\n    //  0 - 1\n    // ---------------\n    // Update positions.\n    const spritePositions = sprite._getPositions();\n    const { positions } = renderer._renderData;\n    for (let i = 0; i < 4; i++) {\n      const { x, y } = spritePositions[i];\n      positions[i].set(wE[0] * x + wE[4] * y + wE[12], wE[1] * x + wE[5] * y + wE[13], wE[2] * x + wE[6] * y + wE[14]);\n    }\n\n    BoundingBox.transform(sprite._getBounds(), worldMatrix, renderer._bounds);\n  }\n\n  static updateUVs(renderer: SpriteRenderer | SpriteMask): void {\n    const spriteUVs = renderer.sprite._getUVs();\n    const renderUVs = renderer._renderData.uvs;\n    const { x: left, y: bottom } = spriteUVs[0];\n    const { x: right, y: top } = spriteUVs[3];\n    renderUVs[0].set(left, bottom);\n    renderUVs[1].set(right, bottom);\n    renderUVs[2].set(left, top);\n    renderUVs[3].set(right, top);\n  }\n}\n","import { Color, Vector2, Vector3 } from \"@oasis-engine/math\";\n\n/**\n * @internal\n */\nexport class RenderData2D {\n  constructor(\n    public vertexCount: number,\n    public positions: Vector3[],\n    public uvs: Vector2[],\n    public triangles: number[] = null,\n    public color: Color = null\n  ) {}\n}\n","/**\n * Sprite Property Dirty Flag.\n */\nexport enum SpritePropertyDirtyFlag {\n  texture = 0x1,\n  size = 0x2,\n  atlasRotate = 0x4,\n  atlasRegion = 0x8,\n  atlasRegionOffset = 0x10,\n  region = 0x20,\n  pivot = 0x40,\n  border = 0x80\n}\n","/**\n * Sprite mask layer.\n */\nexport enum SpriteMaskLayer {\n  /** Mask layer 0. */\n  Layer0 = 0x1,\n  /** Mask layer 1. */\n  Layer1 = 0x2,\n  /** Mask layer 2. */\n  Layer2 = 0x4,\n  /** Mask layer 3. */\n  Layer3 = 0x8,\n  /** Mask layer 4. */\n  Layer4 = 0x10,\n  /** Mask layer 5. */\n  Layer5 = 0x20,\n  /** Mask layer 6. */\n  Layer6 = 0x40,\n  /** Mask layer 7. */\n  Layer7 = 0x80,\n  /** Mask layer 8. */\n  Layer8 = 0x100,\n  /** Mask layer 9. */\n  Layer9 = 0x200,\n  /** Mask layer 10. */\n  Layer10 = 0x400,\n  /** Mask layer 11. */\n  Layer11 = 0x800,\n  /** Mask layer 12. */\n  Layer12 = 0x1000,\n  /** Mask layer 13. */\n  Layer13 = 0x2000,\n  /** Mask layer 14. */\n  Layer14 = 0x4000,\n  /** Mask layer 15. */\n  Layer15 = 0x8000,\n  /** Mask layer 16. */\n  Layer16 = 0x10000,\n  /** Mask layer 17. */\n  Layer17 = 0x20000,\n  /** Mask layer 18. */\n  Layer18 = 0x40000,\n  /** Mask layer 19. */\n  Layer19 = 0x80000,\n  /** Mask layer 20. */\n  Layer20 = 0x100000,\n  /** Mask layer 21. */\n  Layer21 = 0x200000,\n  /** Mask layer 22. */\n  Layer22 = 0x400000,\n  /** Mask layer 23. */\n  Layer23 = 0x800000,\n  /** Mask layer 24. */\n  Layer24 = 0x1000000,\n  /** Mask layer 25. */\n  Layer25 = 0x2000000,\n  /** Mask layer 26. */\n  Layer26 = 0x4000000,\n  /** Mask layer 27. */\n  Layer27 = 0x8000000,\n  /** Mask layer 28. */\n  Layer28 = 0x10000000,\n  /** Mask layer 29. */\n  Layer29 = 0x20000000,\n  /** Mask layer 30. */\n  Layer30 = 0x40000000,\n  /** Mask layer 31. */\n  Layer31 = 0x80000000,\n  /** All mask layers. */\n  Everything = 0xffffffff\n}\n","import { BoundingBox } from \"@oasis-engine/math\";\nimport { Camera } from \"../../Camera\";\nimport { assignmentClone, ignoreClone } from \"../../clone/CloneManager\";\nimport { ICustomClone } from \"../../clone/ComponentCloner\";\nimport { Engine } from \"../../Engine\";\nimport { Entity } from \"../../Entity\";\nimport { ListenerUpdateFlag } from \"../../ListenerUpdateFlag\";\nimport { Renderer } from \"../../Renderer\";\nimport { SpriteMaskElement } from \"../../RenderPipeline/SpriteMaskElement\";\nimport { Shader } from \"../../shader/Shader\";\nimport { ShaderProperty } from \"../../shader/ShaderProperty\";\nimport { SimpleSpriteAssembler } from \"../assembler/SimpleSpriteAssembler\";\nimport { RenderData2D } from \"../data/RenderData2D\";\nimport { SpritePropertyDirtyFlag } from \"../enums/SpriteDirtyFlag\";\nimport { SpriteMaskLayer } from \"../enums/SpriteMaskLayer\";\nimport { Sprite } from \"./Sprite\";\n\n/**\n * A component for masking Sprites.\n */\nexport class SpriteMask extends Renderer implements ICustomClone {\n  /** @internal */\n  static _textureProperty: ShaderProperty = Shader.getPropertyByName(\"u_maskTexture\");\n  /** @internal */\n  static _alphaCutoffProperty: ShaderProperty = Shader.getPropertyByName(\"u_maskAlphaCutoff\");\n\n  /** The mask layers the sprite mask influence to. */\n  @assignmentClone\n  influenceLayers: number = SpriteMaskLayer.Everything;\n  /** @internal */\n  _maskElement: SpriteMaskElement;\n\n  /** @internal */\n  _renderData: RenderData2D;\n\n  @ignoreClone\n  private _sprite: Sprite = null;\n\n  @ignoreClone\n  private _width: number = undefined;\n  @ignoreClone\n  private _height: number = undefined;\n  @assignmentClone\n  private _flipX: boolean = false;\n  @assignmentClone\n  private _flipY: boolean = false;\n\n  @assignmentClone\n  private _alphaCutoff: number = 0.5;\n\n  @ignoreClone\n  private _dirtyFlag: number = 0;\n  @ignoreClone\n  private _spriteChangeFlag: ListenerUpdateFlag = null;\n\n  /**\n   * Render width.\n   */\n  get width(): number {\n    if (this._width === undefined && this._sprite) {\n      this.width = this._sprite.width;\n    }\n    return this._width;\n  }\n\n  set width(value: number) {\n    if (this._width !== value) {\n      this._width = value;\n      this._dirtyFlag |= DirtyFlag.Position;\n    }\n  }\n\n  /**\n   * Render height.\n   */\n  get height(): number {\n    if (this._height === undefined && this._sprite) {\n      this.height = this._sprite.height;\n    }\n    return this._height;\n  }\n\n  set height(value: number) {\n    if (this._height !== value) {\n      this._height = value;\n      this._dirtyFlag |= DirtyFlag.Position;\n    }\n  }\n\n  /**\n   * Flips the sprite on the X axis.\n   */\n  get flipX(): boolean {\n    return this._flipX;\n  }\n\n  set flipX(value: boolean) {\n    if (this._flipX !== value) {\n      this._flipX = value;\n      this._dirtyFlag |= DirtyFlag.Position;\n    }\n  }\n\n  /**\n   * Flips the sprite on the Y axis.\n   */\n  get flipY(): boolean {\n    return this._flipY;\n  }\n\n  set flipY(value: boolean) {\n    if (this._flipY !== value) {\n      this._flipY = value;\n      this._dirtyFlag |= DirtyFlag.Position;\n    }\n  }\n\n  /**\n   * The Sprite to render.\n   */\n  get sprite(): Sprite {\n    return this._sprite;\n  }\n\n  set sprite(value: Sprite | null) {\n    if (this._sprite !== value) {\n      this._sprite = value;\n      this._spriteChangeFlag && this._spriteChangeFlag.destroy();\n      if (value) {\n        this._spriteChangeFlag = value._registerUpdateFlag();\n        this._spriteChangeFlag.listener = this._onSpriteChange;\n        this._dirtyFlag |= DirtyFlag.All;\n        this.shaderData.setTexture(SpriteMask._textureProperty, value.texture);\n      } else {\n        this._spriteChangeFlag = null;\n        this.shaderData.setTexture(SpriteMask._textureProperty, null);\n      }\n    }\n  }\n\n  /**\n   * The minimum alpha value used by the mask to select the area of influence defined over the mask's sprite. Value between 0 and 1.\n   */\n  get alphaCutoff(): number {\n    return this._alphaCutoff;\n  }\n\n  set alphaCutoff(value: number) {\n    if (this._alphaCutoff !== value) {\n      this._alphaCutoff = value;\n      this.shaderData.setFloat(SpriteMask._alphaCutoffProperty, value);\n    }\n  }\n\n  /**\n   * The bounding volume of the spriteRenderer.\n   */\n  get bounds(): Readonly<BoundingBox> {\n    if (!this.sprite?.texture || !this.width || !this.height) {\n      return Engine._defaultBoundingBox;\n    } else if (this._transformChangeFlag.flag || this._dirtyFlag & DirtyFlag.Position) {\n      SimpleSpriteAssembler.updatePositions(this);\n      this._dirtyFlag &= ~DirtyFlag.Position;\n      this._transformChangeFlag.flag = false;\n    }\n    return this._bounds;\n  }\n\n  /**\n   * @internal\n   */\n  constructor(entity: Entity) {\n    super(entity);\n    this._renderData = new RenderData2D(4, [], []);\n    SimpleSpriteAssembler.resetData(this);\n    this.setMaterial(this._engine._spriteMaskDefaultMaterial);\n    this.shaderData.setFloat(SpriteMask._alphaCutoffProperty, this._alphaCutoff);\n    this._onSpriteChange = this._onSpriteChange.bind(this);\n  }\n\n  /**\n   * @override\n   * @inheritdoc\n   */\n  _onDestroy(): void {\n    this._sprite = null;\n    this._renderData = null;\n    if (this._spriteChangeFlag) {\n      this._spriteChangeFlag.destroy();\n      this._spriteChangeFlag = null;\n    }\n    super._onDestroy();\n  }\n\n  /**\n   * @override\n   * @inheritdoc\n   */\n  _render(camera: Camera): void {\n    if (!this.sprite?.texture || !this.width || !this.height) {\n      return;\n    }\n    // Update position.\n    if (this._transformChangeFlag.flag || this._dirtyFlag & DirtyFlag.Position) {\n      SimpleSpriteAssembler.updatePositions(this);\n      this._dirtyFlag &= ~DirtyFlag.Position;\n      this._transformChangeFlag.flag = false;\n    }\n\n    // Update uv.\n    if (this._dirtyFlag & DirtyFlag.UV) {\n      SimpleSpriteAssembler.updateUVs(this);\n      this._dirtyFlag &= ~DirtyFlag.UV;\n    }\n\n    const spriteMaskElementPool = this._engine._spriteMaskElementPool;\n    const maskElement = spriteMaskElementPool.getFromPool();\n    maskElement.setValue(this, this._renderData, this.getMaterial());\n    camera._renderPipeline._allSpriteMasks.add(this);\n    this._maskElement = maskElement;\n  }\n\n  /**\n   * @internal\n   */\n  _cloneTo(target: SpriteMask): void {\n    target.sprite = this._sprite;\n  }\n\n  private _onSpriteChange(dirtyFlag: SpritePropertyDirtyFlag): void {\n    switch (dirtyFlag) {\n      case SpritePropertyDirtyFlag.texture:\n        this.shaderData.setTexture(SpriteMask._textureProperty, this.sprite.texture);\n        break;\n      case SpritePropertyDirtyFlag.region:\n      case SpritePropertyDirtyFlag.atlasRegionOffset:\n        this._dirtyFlag |= DirtyFlag.All;\n        break;\n      case SpritePropertyDirtyFlag.atlasRegion:\n        this._dirtyFlag |= DirtyFlag.UV;\n        break;\n      default:\n        break;\n    }\n  }\n}\n\nenum DirtyFlag {\n  Position = 0x1,\n  UV = 0x2,\n  All = 0x3\n}\n","/**\n * Vertex element format.\n */\nexport enum VertexElementFormat {\n  /** 32-bit float */\n  Float,\n  /** Two-dimensional 32-bit float */\n  Vector2,\n  /** Three-dimensional 32-bit float */\n  Vector3,\n  /** Four-dimensional 32-bit float */\n  Vector4,\n  /** Four-dimensional 8-bit integer,range is [-128,127] */\n  Byte4,\n  /** Four-dimensional 8-bit Unsigned integer, range is [0,255] */\n  UByte4,\n  /** Four-dimensional 8-bit Normalized integer, range is [-1,1] */\n  NormalizedByte4,\n  /** Four-dimensional 8-bit Normalized unsigned integer, range is [0,1] */\n  NormalizedUByte4,\n  /** Two-dimensional 16-bit integer, range is[-32768, 32767] */\n  Short2,\n  /** Two-dimensional 16-bit Unsigned integer, range is [0, 65535] */\n  UShort2,\n  /** Two-dimensional 16-bit Unsigned integer, range is [-1, 1] */\n  NormalizedShort2,\n  /** Two-dimensional 16-bit Normalized unsigned integer, range is [0, 1] */\n  NormalizedUShort2,\n  /** Four-dimensional 16-bit integer, range is [-32768, 32767] */\n  Short4,\n  /** Four-dimensional 16-bit Unsigned integer, range is [0, 65535] */\n  UShort4,\n  /** Four-dimensional 16-bit Normalized integer, range is[-1, 1] */\n  NormalizedShort4,\n  /** Four-dimensional 16-bit Normalized unsigned integer, range is [0, 1] */\n  NormalizedUShort4\n}\n","/**\n * Buffer usage.\n */\nexport enum BufferUsage {\n  /** The buffer content are intended to be specified once, and used many times */\n  Static,\n  /** The buffer contents are intended to be respecified repeatedly, and used many times */\n  Dynamic,\n  /** The buffer contents are intended to be specified once, and used at most a few times */\n  Stream\n}\n","/**\n * Index format.\n */\nexport enum IndexFormat {\n  /** 8 bit */\n  UInt8,\n  /** 16 bit */\n  UInt16,\n  /** 32 bit */\n  UInt32\n}\n","import { BufferUsage } from \"./enums/BufferUsage\";\nimport { VertexElementFormat } from \"./enums/VertexElementFormat\";\nimport { DataType } from \"../base/Constant\";\nimport { IndexFormat } from \"./enums/IndexFormat\";\n\nexport interface ElementInfo {\n  size: number;\n  type: DataType;\n  normalized: boolean;\n}\n\nexport class BufferUtil {\n  /**\n   * @internal\n   */\n  static _getGLBufferUsage(gl: WebGLRenderingContext, bufferUsage: BufferUsage): number {\n    switch (bufferUsage) {\n      case BufferUsage.Static:\n        return gl.STATIC_DRAW;\n      case BufferUsage.Dynamic:\n        return gl.DYNAMIC_DRAW;\n      case BufferUsage.Stream:\n        return gl.STREAM_DRAW;\n    }\n  }\n\n  static _getGLIndexType(indexFormat: IndexFormat): DataType {\n    switch (indexFormat) {\n      case IndexFormat.UInt8:\n        return DataType.UNSIGNED_BYTE;\n      case IndexFormat.UInt16:\n        return DataType.UNSIGNED_SHORT;\n      case IndexFormat.UInt32:\n        return DataType.UNSIGNED_INT;\n    }\n  }\n\n  static _getGLIndexByteCount(indexFormat: IndexFormat): DataType {\n    switch (indexFormat) {\n      case IndexFormat.UInt8:\n        return 1;\n      case IndexFormat.UInt16:\n        return 2;\n      case IndexFormat.UInt32:\n        return 4;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static _getElementInfo(format: VertexElementFormat): ElementInfo {\n    let size: number;\n    let type: DataType;\n    let normalized: boolean = false;\n\n    switch (format) {\n      case VertexElementFormat.Float:\n        size = 1;\n        type = DataType.FLOAT;\n        break;\n      case VertexElementFormat.Vector2:\n        size = 2;\n        type = DataType.FLOAT;\n        break;\n      case VertexElementFormat.Vector3:\n        size = 3;\n        type = DataType.FLOAT;\n        break;\n      case VertexElementFormat.Vector4:\n        size = 4;\n        type = DataType.FLOAT;\n        break;\n      case VertexElementFormat.Byte4:\n        size = 4;\n        type = DataType.BYTE;\n        break;\n      case VertexElementFormat.UByte4:\n        size = 4;\n        type = DataType.UNSIGNED_BYTE;\n        break;\n      case VertexElementFormat.NormalizedByte4:\n        size = 4;\n        type = DataType.BYTE;\n        normalized = true;\n        break;\n      case VertexElementFormat.NormalizedUByte4:\n        size = 4;\n        type = DataType.UNSIGNED_BYTE;\n        normalized = true;\n        break;\n      case VertexElementFormat.Short2:\n        size = 2;\n        type = DataType.SHORT;\n        break;\n      case VertexElementFormat.UShort2:\n        size = 2;\n        type = DataType.UNSIGNED_SHORT;\n        break;\n      case VertexElementFormat.NormalizedShort2:\n        size = 2;\n        type = DataType.SHORT;\n        normalized = true;\n        break;\n      case VertexElementFormat.NormalizedUShort2:\n        size = 2;\n        type = DataType.UNSIGNED_SHORT;\n        normalized = true;\n        break;\n      case VertexElementFormat.Short4:\n        size = 4;\n        type = DataType.SHORT;\n        break;\n      case VertexElementFormat.UShort4:\n        size = 4;\n        type = DataType.UNSIGNED_SHORT;\n        break;\n      case VertexElementFormat.NormalizedShort4:\n        size = 4;\n        type = DataType.SHORT;\n        normalized = true;\n        break;\n      case VertexElementFormat.NormalizedUShort4:\n        size = 4;\n        type = DataType.UNSIGNED_SHORT;\n        normalized = true;\n        break;\n      default:\n        break;\n    }\n    return { size, type, normalized };\n  }\n}\n","import { BufferUtil, ElementInfo } from \"./BufferUtil\";\nimport { VertexElementFormat } from \"./enums/VertexElementFormat\";\n\n/**\n * Vertex element.\n */\nexport class VertexElement {\n  _glElementInfo: ElementInfo;\n\n  private _semantic: string;\n  private _offset: number;\n  private _format: VertexElementFormat;\n  private _bindingIndex: number;\n  private _instanceStepRate: number;\n\n  /**\n   * Vertex semantic.\n   */\n  get semantic(): string {\n    return this._semantic;\n  }\n\n  /**\n   * Vertex data byte offset.\n   */\n  get offset(): number {\n    return this._offset;\n  }\n\n  set offset(value: number) {\n    this._offset = value;\n  }\n\n  /**\n   * Vertex data format.\n   */\n  get format(): VertexElementFormat {\n    return this._format;\n  }\n\n  /**\n   * Vertex buffer binding index.\n   */\n  get bindingIndex(): number {\n    return this._bindingIndex;\n  }\n\n  set bindingIndex(value: number) {\n    this._bindingIndex = value;\n  }\n\n  /**\n   * Instance cadence, the number of instances drawn for each vertex in the buffer, non-instance elements must be 0.\n   */\n  get instanceStepRate(): number {\n    return this._instanceStepRate;\n  }\n\n  /**\n   * Create vertex element.\n   * @param semantic - Input vertex semantic\n   * @param offset - Vertex data byte offset\n   * @param format - Vertex data format\n   * @param bindingIndex - Vertex buffer binding index\n   * @param instanceStepRate - Instance cadence, the number of instances drawn for each vertex in the buffer, non-instance elements must be 0.\n   */\n  constructor(\n    semantic: string,\n    offset: number,\n    format: VertexElementFormat,\n    bindingIndex: number,\n    instanceStepRate: number = 0\n  ) {\n    this._semantic = semantic;\n    this._offset = offset;\n    this._format = format;\n    this._bindingIndex = bindingIndex;\n    this._glElementInfo = BufferUtil._getElementInfo(this.format);\n    this._instanceStepRate = Math.floor(instanceStepRate);\n  }\n}\n","/**\n * Buffer binding flag.\n */\nexport enum BufferBindFlag {\n  /** Vertex buffer binding flag */\n  VertexBuffer,\n  /** Index buffer binding flag */\n  IndexBuffer\n}\n","/**\n * Define update strategy when call bufferData/bufferSubData func.\n */\nexport enum SetDataOptions {\n  /** Can overwrite part of used buffer data and ensure correct rendering */\n  None,\n  /** Discard old buffer and create a new buffer, and won't affect the previous rendering */\n  Discard\n  ///** Need to ensure that the buffer data will not be overwritten, and won't interrupting rendering if setData immediately */\n  //NoOverwrite\n}\n","import { RefObject } from \"../asset/RefObject\";\nimport { Engine } from \"../Engine\";\nimport { IHardwareRenderer } from \"../renderingHardwareInterface/IHardwareRenderer\";\nimport { BufferUtil } from \"./BufferUtil\";\nimport { BufferBindFlag } from \"./enums/BufferBindFlag\";\nimport { BufferUsage } from \"./enums/BufferUsage\";\nimport { SetDataOptions } from \"./enums/SetDataOptions\";\n\n/**\n * Buffer.\n */\nexport class Buffer extends RefObject {\n  _glBindTarget: number;\n  _glBufferUsage: number;\n  _nativeBuffer: WebGLBuffer;\n\n  private _hardwareRenderer: IHardwareRenderer;\n  private _type: BufferBindFlag;\n  private _byteLength: number;\n  private _bufferUsage: BufferUsage;\n\n  /**\n   * Buffer binding flag.\n   */\n  get type(): BufferBindFlag {\n    return this._type;\n  }\n\n  /**\n   * Byte length.\n   */\n  get byteLength(): number {\n    return this._byteLength;\n  }\n\n  /**\n   * Buffer usage.\n   */\n  get bufferUsage(): BufferUsage {\n    return this._bufferUsage;\n  }\n\n  /**\n   * Create Buffer.\n   * @param engine - Engine\n   * @param type - Buffer binding flag\n   * @param byteLength - Byte length\n   * @param bufferUsage - Buffer usage\n   */\n  constructor(engine: Engine, type: BufferBindFlag, byteLength: number, bufferUsage?: BufferUsage);\n\n  /**\n   * Create Buffer.\n   * @param engine - Engine\n   * @param type - Buffer binding flag\n   * @param data - Byte\n   * @param bufferUsage - Buffer usage\n   */\n  constructor(engine: Engine, type: BufferBindFlag, data: ArrayBuffer | ArrayBufferView, bufferUsage?: BufferUsage);\n\n  constructor(\n    engine: Engine,\n    type: BufferBindFlag,\n    byteLengthOrData: number | ArrayBuffer | ArrayBufferView,\n    bufferUsage: BufferUsage = BufferUsage.Static\n  ) {\n    super(engine);\n    this._engine = engine;\n    this._type = type;\n    this._bufferUsage = bufferUsage;\n\n    const hardwareRenderer = engine._hardwareRenderer;\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = hardwareRenderer.gl;\n    const glBufferUsage = BufferUtil._getGLBufferUsage(gl, bufferUsage);\n    const glBindTarget = type === BufferBindFlag.VertexBuffer ? gl.ARRAY_BUFFER : gl.ELEMENT_ARRAY_BUFFER;\n\n    this._nativeBuffer = gl.createBuffer();\n    this._hardwareRenderer = hardwareRenderer;\n    this._glBufferUsage = glBufferUsage;\n    this._glBindTarget = glBindTarget;\n\n    this.bind();\n    if (typeof byteLengthOrData === \"number\") {\n      this._byteLength = byteLengthOrData;\n      gl.bufferData(glBindTarget, byteLengthOrData, glBufferUsage);\n    } else {\n      this._byteLength = byteLengthOrData.byteLength;\n      gl.bufferData(glBindTarget, byteLengthOrData, glBufferUsage);\n    }\n    gl.bindBuffer(glBindTarget, null);\n  }\n\n  /**\n   * Bind buffer.\n   */\n  bind(): void {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._hardwareRenderer.gl;\n    gl.bindBuffer(this._glBindTarget, this._nativeBuffer);\n  }\n\n  /**\n   * Set buffer data.\n   * @param data - Input buffer data\n   */\n  setData(data: ArrayBuffer | ArrayBufferView): void;\n\n  /**\n   * Set buffer data.\n   * @param data - Input buffer data\n   * @param bufferByteOffset - buffer byte offset\n   */\n  setData(data: ArrayBuffer | ArrayBufferView, bufferByteOffset: number): void;\n\n  /**\n   * Set buffer data.\n   * @param data - Input buffer data\n   * @param bufferByteOffset - Buffer byte offset\n   * @param dataOffset - Buffer byte offset\n   * @param dataLength - Data length\n   */\n  setData(data: ArrayBuffer | ArrayBufferView, bufferByteOffset: number, dataOffset: number, dataLength?: number): void;\n\n  /**\n   * Set buffer data.\n   * @param data - Input buffer data\n   * @param bufferByteOffset - Buffer byte offset\n   * @param dataOffset - Buffer byte offset\n   * @param dataLength - Data length\n   * @param options - Update strategy: None/Discard/NoOverwrite\n   */\n  setData(\n    data: ArrayBuffer | ArrayBufferView,\n    bufferByteOffset: number,\n    dataOffset: number,\n    dataLength: number,\n    options: SetDataOptions\n  ): void;\n\n  setData(\n    data: ArrayBuffer | ArrayBufferView,\n    bufferByteOffset: number = 0,\n    dataOffset: number = 0,\n    dataLength?: number,\n    options: SetDataOptions = SetDataOptions.None\n  ): void {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._hardwareRenderer.gl;\n    const isWebGL2: boolean = this._hardwareRenderer.isWebGL2;\n    const glBindTarget: number = this._glBindTarget;\n    this.bind();\n\n    if (options === SetDataOptions.Discard) {\n      gl.bufferData(glBindTarget, this._byteLength, this._glBufferUsage);\n    }\n\n    // TypeArray is BYTES_PER_ELEMENT, unTypeArray is 1\n    const byteSize = (<Uint8Array>data).BYTES_PER_ELEMENT || 1;\n    const dataByteLength = dataLength ? byteSize * dataLength : data.byteLength;\n\n    if (dataOffset !== 0 || dataByteLength < data.byteLength) {\n      const isArrayBufferView = (<ArrayBufferView>data).byteOffset !== undefined;\n      if (isWebGL2 && isArrayBufferView) {\n        gl.bufferSubData(glBindTarget, bufferByteOffset, <ArrayBufferView>data, dataOffset, dataByteLength / byteSize);\n      } else {\n        const subData = new Uint8Array(\n          isArrayBufferView ? (<ArrayBufferView>data).buffer : <ArrayBuffer>data,\n          dataOffset * byteSize,\n          dataByteLength\n        );\n        gl.bufferSubData(glBindTarget, bufferByteOffset, subData);\n      }\n    } else {\n      gl.bufferSubData(glBindTarget, bufferByteOffset, data);\n    }\n    gl.bindBuffer(glBindTarget, null);\n  }\n\n  /**\n   * Get buffer data.\n   * @param data - Output buffer data\n   */\n  getData(data: ArrayBufferView): void;\n\n  /**\n   * Get buffer data.\n   * @param data - Output buffer data\n   * @param bufferByteOffset - Buffer byte offset\n   */\n  getData(data: ArrayBufferView, bufferByteOffset: number): void;\n\n  /**\n   * Get buffer data.\n   * @param data - Output buffer data\n   * @param bufferByteOffset - Buffer byte offset\n   * @param dataOffset - Output data offset\n   * @param dataLength - Output data length\n   */\n  getData(data: ArrayBufferView, bufferByteOffset: number, dataOffset: number, dataLength: number): void;\n\n  getData(data: ArrayBufferView, bufferByteOffset: number = 0, dataOffset: number = 0, dataLength?: number): void {\n    const isWebGL2: boolean = this._hardwareRenderer.isWebGL2;\n\n    if (isWebGL2) {\n      const gl: WebGLRenderingContext & WebGL2RenderingContext = this._hardwareRenderer.gl;\n      this.bind();\n      gl.getBufferSubData(this._glBindTarget, bufferByteOffset, data, dataOffset, dataLength);\n    } else {\n      throw \"Buffer is write-only on WebGL1.0 platforms.\";\n    }\n  }\n\n  /**\n   * @override\n   * Destroy.\n   */\n  _onDestroy() {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._hardwareRenderer.gl;\n    gl.deleteBuffer(this._nativeBuffer);\n    this._nativeBuffer = null;\n    this._hardwareRenderer = null;\n  }\n\n  /**\n   * @deprecated\n   */\n  resize(dataLength: number) {\n    this.bind();\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._hardwareRenderer.gl;\n    gl.bufferData(this._glBindTarget, dataLength, this._glBufferUsage);\n    this._byteLength = dataLength;\n  }\n}\n","/**\n * Mesh topology.\n */\nexport enum MeshTopology {\n  /** Draws a single dot */\n  Points = 0,\n  /** Draws a line between a pair of vertices */\n  Lines = 1,\n  /** Draws a straight line to the next vertex, and connects the last vertex back to the first */\n  LineLoop = 2,\n  /** Draws a straight line to the next vertex. */\n  LineStrip = 3,\n  /** Draws a triangle for a group of three vertices */\n  Triangles = 4,\n  /** Draws a triangle strip */\n  TriangleStrip = 5,\n  /** Draws a triangle fan */\n  TriangleFan = 6\n}\n","import { IndexFormat } from \"./enums/IndexFormat\";\nimport { Buffer } from \"./Buffer\";\n\n/**\n * Index buffer binding.\n */\nexport class IndexBufferBinding {\n  /** @internal */\n  _buffer: Buffer;\n  /** @internal */\n  _format: IndexFormat;\n\n  /**\n   * Index buffer.\n   */\n  get buffer(): Buffer {\n    return this._buffer;\n  }\n\n  /**\n   * Index buffer format.\n   */\n  get format(): IndexFormat {\n    return this._format;\n  }\n\n  /**\n   * Create index buffer binding.\n   * @param buffer - Index buffer\n   * @param format - Index buffer format\n   */\n  constructor(buffer: Buffer, format: IndexFormat) {\n    this._buffer = buffer;\n    this._format = format;\n  }\n}\n","import { MeshTopology } from \"./enums/MeshTopology\";\n\n/**\n * Sub-mesh, mainly contains drawing information.\n */\nexport class SubMesh {\n  /** Start drawing offset. */\n  start: number;\n  /** Drawing count. */\n  count: number;\n  /** Drawing topology. */\n  topology: MeshTopology;\n\n  /**\n   * Create a sub-mesh.\n   * @param start - Start drawing offset\n   * @param count - Drawing count\n   * @param topology - Drawing topology\n   */\n  constructor(start: number = 0, count: number = 0, topology: MeshTopology = MeshTopology.Triangles) {\n    this.start = start;\n    this.count = count;\n    this.topology = topology;\n  }\n}\n","import { IPlatformPrimitive } from \"@oasis-engine/design/types/renderingHardwareInterface/IPlatformPrimitive\";\nimport { BoundingBox } from \"@oasis-engine/math\";\nimport { RefObject } from \"../asset/RefObject\";\nimport { BoolUpdateFlag } from \"../BoolUpdateFlag\";\nimport { Engine } from \"../Engine\";\nimport { BufferUtil } from \"../graphic/BufferUtil\";\nimport { MeshTopology } from \"../graphic/enums/MeshTopology\";\nimport { IndexBufferBinding } from \"../graphic/IndexBufferBinding\";\nimport { SubMesh } from \"../graphic/SubMesh\";\nimport { VertexBufferBinding } from \"../graphic/VertexBufferBinding\";\nimport { VertexElement } from \"../graphic/VertexElement\";\nimport { ShaderProgram } from \"../shader/ShaderProgram\";\nimport { UpdateFlagManager } from \"../UpdateFlagManager\";\n\n/**\n * Mesh.\n */\nexport abstract class Mesh extends RefObject {\n  /** Name. */\n  name: string;\n  /** The bounding volume of the mesh. */\n  readonly bounds: BoundingBox = new BoundingBox();\n\n  _vertexElementMap: Record<string, VertexElement> = {};\n  _glIndexType: number;\n  _glIndexByteCount: number;\n  _platformPrimitive: IPlatformPrimitive;\n\n  /** @internal */\n  _instanceCount: number = 0;\n  /** @internal */\n  _vertexBufferBindings: VertexBufferBinding[] = [];\n  /** @internal */\n  _indexBufferBinding: IndexBufferBinding = null;\n  /** @internal */\n  _vertexElements: VertexElement[] = [];\n  /** @internal */\n  _enableVAO: boolean = true;\n\n  private _subMeshes: SubMesh[] = [];\n  private _updateFlagManager: UpdateFlagManager = new UpdateFlagManager();\n\n  /**\n   * First sub-mesh. Rendered using the first material.\n   */\n  get subMesh(): SubMesh | null {\n    return this._subMeshes[0] || null;\n  }\n\n  /**\n   * A collection of sub-mesh, each sub-mesh can be rendered with an independent material.\n   */\n  get subMeshes(): Readonly<SubMesh[]> {\n    return this._subMeshes;\n  }\n\n  /**\n   * Create mesh.\n   * @param engine - Engine\n   * @param name - Mesh name\n   */\n  constructor(engine: Engine, name?: string) {\n    super(engine);\n    this.name = name;\n    this._platformPrimitive = this._engine._hardwareRenderer.createPlatformPrimitive(this);\n  }\n\n  /**\n   * Add sub-mesh, each sub-mesh can correspond to an independent material.\n   * @param subMesh - Start drawing offset, if the index buffer is set, it means the offset in the index buffer, if not set, it means the offset in the vertex buffer\n   * @returns Sub-mesh\n   */\n  addSubMesh(subMesh: SubMesh): SubMesh;\n\n  /**\n   * Add sub-mesh, each sub-mesh can correspond to an independent material.\n   * @param start - Start drawing offset, if the index buffer is set, it means the offset in the index buffer, if not set, it means the offset in the vertex buffer\n   * @param count - Drawing count, if the index buffer is set, it means the count in the index buffer, if not set, it means the count in the vertex buffer\n   * @param topology - Drawing topology, default is MeshTopology.Triangles\n   * @returns Sub-mesh\n   */\n  addSubMesh(start: number, count: number, topology?: MeshTopology): SubMesh;\n\n  addSubMesh(\n    startOrSubMesh: number | SubMesh,\n    count?: number,\n    topology: MeshTopology = MeshTopology.Triangles\n  ): SubMesh {\n    if (typeof startOrSubMesh === \"number\") {\n      startOrSubMesh = new SubMesh(startOrSubMesh, count, topology);\n    }\n    this._subMeshes.push(startOrSubMesh);\n    return startOrSubMesh;\n  }\n\n  /**\n   * Remove sub-mesh.\n   * @param subMesh - Sub-mesh needs to be removed\n   */\n  removeSubMesh(subMesh: SubMesh): void {\n    const subMeshes = this._subMeshes;\n    const index = subMeshes.indexOf(subMesh);\n    if (index !== -1) {\n      subMeshes.splice(index, 1);\n    }\n  }\n\n  /**\n   * Clear all sub-mesh.\n   */\n  clearSubMesh(): void {\n    this._subMeshes.length = 0;\n  }\n\n  /**\n   * Register update flag, update flag will be true if the vertex element changes.\n   * @returns Update flag\n   */\n  registerUpdateFlag(): BoolUpdateFlag {\n    return this._updateFlagManager.createFlag(BoolUpdateFlag);\n  }\n\n  /**\n   * @internal\n   */\n  _clearVertexElements(): void {\n    this._vertexElements.length = 0;\n    const vertexElementMap = this._vertexElementMap;\n    for (const k in vertexElementMap) {\n      delete vertexElementMap[k];\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _addVertexElement(element: VertexElement): void {\n    const { semantic } = element;\n    this._vertexElementMap[semantic] = element;\n    this._vertexElements.push(element);\n    this._updateFlagManager.dispatch();\n  }\n\n  /**\n   * @internal\n   */\n  _setVertexBufferBinding(index: number, binding: VertexBufferBinding): void {\n    if (this._getRefCount() > 0) {\n      const lastBinding = this._vertexBufferBindings[index];\n      lastBinding && lastBinding._buffer._addRefCount(-1);\n      binding._buffer._addRefCount(1);\n    }\n    this._vertexBufferBindings[index] = binding;\n  }\n\n  /**\n   * @internal\n   */\n  _draw(shaderProgram: ShaderProgram, subMesh: SubMesh): void {\n    this._platformPrimitive.draw(shaderProgram, subMesh);\n  }\n\n  /**\n   * @override\n   */\n  _addRefCount(value: number): void {\n    super._addRefCount(value);\n    const vertexBufferBindings = this._vertexBufferBindings;\n    for (let i = 0, n = vertexBufferBindings.length; i < n; i++) {\n      vertexBufferBindings[i]._buffer._addRefCount(value);\n    }\n  }\n\n  /**\n   * @override\n   * Destroy.\n   */\n  _onDestroy(): void {\n    this._vertexBufferBindings = null;\n    this._indexBufferBinding = null;\n    this._vertexElements = null;\n    this._vertexElementMap = null;\n    this._platformPrimitive.destroy();\n  }\n\n  protected _setVertexElements(elements: VertexElement[]): void {\n    this._clearVertexElements();\n    for (let i = 0, n = elements.length; i < n; i++) {\n      this._addVertexElement(elements[i]);\n    }\n  }\n\n  protected _setIndexBufferBinding(binding: IndexBufferBinding | null): void {\n    if (binding) {\n      this._indexBufferBinding = binding;\n      this._glIndexType = BufferUtil._getGLIndexType(binding.format);\n      this._glIndexByteCount = BufferUtil._getGLIndexByteCount(binding.format);\n    } else {\n      this._indexBufferBinding = null;\n      this._glIndexType = undefined;\n    }\n  }\n}\n","import { Buffer } from \"./Buffer\";\n\n/**\n * Vertex buffer binding.\n */\nexport class VertexBufferBinding {\n  /** @internal */\n  _buffer: Buffer;\n  /** @internal */\n  _stride: number;\n\n  /**\n   * Vertex buffer.\n   */\n  get buffer(): Buffer {\n    return this._buffer;\n  }\n\n  /**\n   * Vertex buffer stride.\n   */\n  get stride(): number {\n    return this._stride;\n  }\n\n  /**\n   * Create vertex buffer.\n   * @param buffer - Vertex buffer\n   * @param stride - Vertex buffer stride\n   */\n  constructor(buffer: Buffer, stride: number) {\n    this._buffer = buffer;\n    this._stride = stride;\n  }\n}\n","/**\n * Render buffer depth format enumeration.\n */\nexport enum RenderBufferDepthFormat {\n  /** Render to depth buffer,engine will automatically select the supported precision. */\n  Depth,\n  /** Render to depth stencil buffer, engine will automatically select the supported precision. */\n  DepthStencil,\n  /** Render to stencil buffer. */\n  Stencil,\n\n  /** Force 16-bit depth buffer. */\n  Depth16,\n  /** Force 24-bit depth buffer. */\n  Depth24,\n  /** Force 32-bit depth buffer. */\n  Depth32,\n  /** Force 16-bit depth + 8-bit stencil buffer. */\n  Depth24Stencil8,\n  /** Force 32-bit depth + 8-bit stencil buffer. */\n  Depth32Stencil8\n}\n","/**\n * Define the face of the cube texture.\n */\nexport enum TextureCubeFace {\n  /** Positive X face for a cube-mapped texture. */\n  PositiveX = 0,\n  /** Negative X face for a cube-mapped texture. */\n  NegativeX = 1,\n  /** Positive Y face for a cube-mapped texture. */\n  PositiveY = 2,\n  /** Negative Y face for a cube-mapped texture. */\n  NegativeY = 3,\n  /** Positive Z face for a cube-mapped texture. */\n  PositiveZ = 4,\n  /** Negative Z face for a cube-mapped texture. */\n  NegativeZ = 5\n}\n","/**\n * The filter mode of the texture.\n */\nexport enum TextureFilterMode {\n  /** Point filtering. */\n  Point = 0,\n  /** Bilinear filtering. */\n  Bilinear = 1,\n  /** Trilinear filtering. */\n  Trilinear = 2\n}\n","/**\n * Texture format enumeration.\n */\nexport enum TextureFormat {\n  /** RGB format,8 bits per channel. */\n  R8G8B8,\n  /** RGBA format,8 bits per channel. */\n  R8G8B8A8,\n  /** RGBA format,4 bits per channel. */\n  R4G4B4A4,\n  /** RGBA format,5 bits in R channel,5 bits in G channel,5 bits in B channel, 1 bit in A channel. */\n  R5G5B5A1,\n  /** RGB format,5 bits in R channel,6 bits in G channel,5 bits in B channel. */\n  R5G6B5,\n  /** Transparent format,8 bits. */\n  Alpha8,\n  /** Luminance/alpha in RGB channel, alpha in A channel. */\n  LuminanceAlpha,\n  /** RGBA format,16 bits per channel. */\n  R16G16B16A16,\n  /** RGBA format,32 bits per channel. */\n  R32G32B32A32,\n\n  /** RGB compressed format。*/\n  DXT1,\n  /** RGBA compressed format。*/\n  DXT5,\n  /** RGB compressed format,4 bits per pixel。*/\n  ETC1_RGB,\n  /** RGB compressed format,4 bits per pixel。*/\n  ETC2_RGB,\n  /** RGBA compressed format,5 bits per pixel,4 bit in RGB, 1 bit in A. */\n  ETC2_RGBA5,\n  /** RGB compressed format,8 bits per pixel. */\n  ETC2_RGBA8,\n  /** RGB compressed format,2 bits per pixel. */\n  PVRTC_RGB2,\n  /** RGBA compressed format,2 bits per pixel. */\n  PVRTC_RGBA2,\n  /** RGB compressed format,4 bits per pixel. */\n  PVRTC_RGB4,\n  /** RGBA compressed format,4 bits per pixel. */\n  PVRTC_RGBA4,\n  /** RGB(A) compressed format,128 bits per 4x4 pixel block. */\n  ASTC_4x4,\n  /** RGB(A) compressed format,128 bits per 5x5 pixel block. */\n  ASTC_5x5,\n  /** RGB(A) compressed format,128 bits per 6x6 pixel block. */\n  ASTC_6x6,\n  /** RGB(A) compressed format,128 bits per 8x8 pixel block. */\n  ASTC_8x8,\n  /** RGB(A) compressed format,128 bits per 10x10 pixel block. */\n  ASTC_10x10,\n  /** RGB(A) compressed format,128 bits per 12x12 pixel block. */\n  ASTC_12x12,\n\n  /** Render to depth buffer,engine will automatically select the supported precision. */\n  Depth,\n  /** Render to depth stencil buffer, engine will automatically select the supported precision. */\n  DepthStencil,\n  /** Render to stencil buffer. */\n  Stencil,\n  /** Force 16-bit depth buffer. */\n  Depth16,\n  /** Force 24-bit depth buffer. */\n  Depth24,\n  /** Force 32-bit depth buffer. */\n  Depth32,\n  /** Force 16-bit depth + 8-bit stencil buffer. */\n  Depth24Stencil8,\n  /** Force 32-bit depth + 8-bit stencil buffer. */\n  Depth32Stencil8\n}\n","/**\n * Wrapping mode of the texture.\n */\nexport enum TextureWrapMode {\n  /** Clamping mode. use the color of edge pixels beyond the texture boundary. */\n  Clamp = 0,\n  /** Repeating mode. tiling will be repeated if it exceeds the texture boundary. */\n  Repeat = 1,\n  /** Mirror repeat mode. tiling will be mirrored and repeated if it exceeds the texture boundary. */\n  Mirror = 2\n}\n","import { EngineObject } from \"../base\";\nimport { Engine } from \"../Engine\";\nimport { IPlatformRenderTarget } from \"../renderingHardwareInterface\";\nimport { RenderBufferDepthFormat } from \"./enums/RenderBufferDepthFormat\";\nimport { TextureCubeFace } from \"./enums/TextureCubeFace\";\nimport { Texture } from \"./Texture\";\n\n/**\n * The render target used for off-screen rendering.\n */\nexport class RenderTarget extends EngineObject {\n  /** @internal */\n  _platformRenderTarget: IPlatformRenderTarget;\n\n  /** @internal */\n  _depth: Texture | RenderBufferDepthFormat | null;\n  /** @internal */\n  _antiAliasing: number;\n\n  private _autoGenerateMipmaps: boolean = true;\n  private _width: number;\n  private _height: number;\n  private _colorTextures: Texture[];\n  private _depthTexture: Texture | null;\n\n  /**\n   * Whether to automatically generate multi-level textures.\n   */\n  get autoGenerateMipmaps(): boolean {\n    return this._autoGenerateMipmaps;\n  }\n\n  set autoGenerateMipmaps(value: boolean) {\n    this._autoGenerateMipmaps = value;\n  }\n\n  /**\n   * Render target width.\n   */\n  get width(): number {\n    return this._width;\n  }\n\n  /**\n   * Render target height.\n   */\n  get height(): number {\n    return this._height;\n  }\n\n  /**\n   * Render color texture count.\n   */\n  get colorTextureCount(): number {\n    return this._colorTextures.length;\n  }\n\n  /**\n   * Depth texture.\n   */\n  get depthTexture(): Texture | null {\n    return this._depthTexture;\n  }\n\n  /**\n   * Anti-aliasing level.\n   * @remarks If the anti-aliasing level set is greater than the maximum level supported by the hardware, the maximum level of the hardware will be used.\n   */\n  get antiAliasing(): number {\n    return this._antiAliasing;\n  }\n\n  /**\n   * Create a render target through color texture and depth format.\n   * @param engine - Define the engine to use for this off-screen rendering\n   * @param width - Render target width\n   * @param height - Render target height\n   * @param colorTexture - Render color texture\n   * @param depthFormat - Depth format. default RenderBufferDepthFormat.Depth, engine will automatically select the supported precision\n   * @param antiAliasing - Anti-aliasing level, default is 1\n   */\n  constructor(\n    engine: Engine,\n    width: number,\n    height: number,\n    colorTexture: Texture,\n    depthFormat?: RenderBufferDepthFormat | null,\n    antiAliasing?: number\n  );\n\n  /**\n   * Create a render target through color texture and depth format.\n   * @remarks If the color texture is not transmitted, only the depth texture is generated.\n   * @param engine - Define the engine to use for this off-screen rendering\n   * @param width - Render target width\n   * @param height - Render target height\n   * @param colorTexture - Render color texture\n   * @param depthTexture - Render depth texture\n   * @param antiAliasing - Anti-aliasing level, default is 1\n   */\n  constructor(\n    engine: Engine,\n    width: number,\n    height: number,\n    colorTexture: Texture | null,\n    depthTexture: Texture,\n    antiAliasing?: number\n  );\n\n  /**\n   * Create a render target with color texture array and depth format.\n   * @param engine - Define the engine to use for this off-screen rendering\n   * @param width - Render target width\n   * @param height - Render target height\n   * @param colorTextures - Render color texture array\n   * @param depthFormat - Depth format. default RenderBufferDepthFormat.Depth,engine will automatically select the supported precision\n   * @param antiAliasing - Anti-aliasing level, default is 1\n   */\n  constructor(\n    engine: Engine,\n    width: number,\n    height: number,\n    colorTextures: Texture[],\n    depthFormat?: RenderBufferDepthFormat | null,\n    antiAliasing?: number\n  );\n\n  /**\n   * Create a render target with color texture array and depth texture.\n   * @param engine - Define the engine to use for this off-screen rendering\n   * @param width - Render target width\n   * @param height - Render target height\n   * @param colorTextures - Render color texture array\n   * @param depthTexture - Depth texture\n   * @param antiAliasing - Anti-aliasing level, default is 1\n   */\n  constructor(\n    engine: Engine,\n    width: number,\n    height: number,\n    colorTextures: Texture[],\n    depthTexture: Texture,\n    antiAliasing?: number\n  );\n\n  /**\n   * @internal\n   */\n  constructor(\n    engine: Engine,\n    width: number,\n    height: number,\n    renderTexture: Texture | Array<Texture> | null,\n    depth: Texture | RenderBufferDepthFormat | null = RenderBufferDepthFormat.Depth,\n    antiAliasing: number = 1\n  ) {\n    super(engine);\n\n    this._width = width;\n    this._height = height;\n    this._antiAliasing = antiAliasing;\n    this._depth = depth;\n\n    if (renderTexture) {\n      this._colorTextures = renderTexture instanceof Array ? renderTexture.slice() : [renderTexture];\n    } else {\n      this._colorTextures = [];\n    }\n\n    if (depth instanceof Texture) {\n      this._depthTexture = depth;\n    }\n\n    this._platformRenderTarget = engine._hardwareRenderer.createPlatformRenderTarget(this);\n  }\n\n  /**\n   *\n   * Get the render color texture by index.\n   * @param index\n   */\n  getColorTexture(index: number = 0): Texture | null {\n    return this._colorTextures[index];\n  }\n\n  /**\n   * Generate the mipmap of each attachment texture of the renderTarget according to the configuration.\n   */\n  generateMipmaps(): void {\n    if (this._autoGenerateMipmaps) {\n      const colorTextures = this._colorTextures;\n      for (let i = 0, n = colorTextures.length; i < n; i++) {\n        const colorTexture = colorTextures[i];\n        colorTexture.generateMipmaps();\n      }\n      this._depthTexture && this._depthTexture.generateMipmaps();\n    }\n  }\n\n  /**\n   * Destroy render target.\n   */\n  destroy() {\n    this._platformRenderTarget.destroy();\n    this._colorTextures.length = 0;\n    this._depthTexture = null;\n    this._depth = null;\n  }\n\n  /**\n   * @internal\n   */\n  _setRenderTargetInfo(faceIndex: TextureCubeFace, mipLevel: number): void {\n    this._platformRenderTarget.setRenderTargetInfo(faceIndex, mipLevel);\n  }\n\n  /**\n   * @internal\n   */\n  _blitRenderTarget(): void {\n    this._platformRenderTarget.blitRenderTarget();\n  }\n}\n","import { Engine } from \"../Engine\";\nimport { IPlatformTexture2D } from \"../renderingHardwareInterface\";\nimport { TextureFilterMode } from \"./enums/TextureFilterMode\";\nimport { TextureFormat } from \"./enums/TextureFormat\";\nimport { TextureWrapMode } from \"./enums/TextureWrapMode\";\nimport { Texture } from \"./Texture\";\n\n/**\n * Two-dimensional texture.\n */\nexport class Texture2D extends Texture {\n  /**\n   * Create Texture2D.\n   * @param engine - Define the engine to use to render this texture\n   * @param width - Texture width\n   * @param height - Texture height\n   * @param format - Texture format. default  `TextureFormat.R8G8B8A8`\n   * @param mipmap - Whether to use multi-level texture\n   */\n  constructor(\n    engine: Engine,\n    width: number,\n    height: number,\n    format: TextureFormat = TextureFormat.R8G8B8A8,\n    mipmap: boolean = true\n  ) {\n    super(engine);\n    this._mipmap = mipmap;\n    this._width = width;\n    this._height = height;\n    this._format = format;\n    this._mipmapCount = this._getMipmapCount();\n\n    this._platformTexture = engine._hardwareRenderer.createPlatformTexture2D(this);\n\n    this.filterMode = TextureFilterMode.Bilinear;\n    this.wrapModeU = this.wrapModeV = TextureWrapMode.Repeat;\n  }\n\n  /**\n   * Setting pixels data through color buffer data, designated area and texture mipmapping level,it's also applicable to compressed formats.\n   * @remarks If it is the WebGL1.0 platform and the texture format is compressed, the first upload must be filled with textures.\n   * @param colorBuffer - Color buffer data\n   * @param mipLevel - Texture mipmapping level\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   * @param width - Data width. if it's empty, width is the width corresponding to mipLevel minus x , width corresponding to mipLevel is Math.max(1, this.width >> mipLevel)\n   * @param height - Data height. if it's empty, height is the height corresponding to mipLevel minus y , height corresponding to mipLevel is Math.max(1, this.height >> mipLevel)\n   */\n  setPixelBuffer(\n    colorBuffer: ArrayBufferView,\n    mipLevel: number = 0,\n    x: number = 0,\n    y: number = 0,\n    width?: number,\n    height?: number\n  ): void {\n    (this._platformTexture as IPlatformTexture2D).setPixelBuffer(colorBuffer, mipLevel, x, y, width, height);\n  }\n\n  /**\n   * Setting pixels data through TexImageSource, designated area and texture mipmapping level.\n   * @param imageSource - The source of texture\n   * @param mipLevel - Texture mipmapping level\n   * @param flipY - Whether to flip the Y axis\n   * @param premultiplyAlpha - Whether to premultiply the transparent channel\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   */\n  setImageSource(\n    imageSource: TexImageSource | OffscreenCanvas,\n    mipLevel: number = 0,\n    flipY: boolean = false,\n    premultiplyAlpha: boolean = false,\n    x: number = 0,\n    y: number = 0\n  ): void {\n    (this._platformTexture as IPlatformTexture2D).setImageSource(imageSource, mipLevel, flipY, premultiplyAlpha, x, y);\n  }\n\n  /**\n   * Get pixel color buffer.\n   * @param out - Color buffer\n   */\n  getPixelBuffer(out: ArrayBufferView): void;\n\n  /**\n   * Get the pixel color buffer according to the specified mip level.\n   * @param mipLevel - Tet mip level want to get\n   * @param out - Color buffer\n   */\n  getPixelBuffer(mipLevel: number, out: ArrayBufferView): void;\n\n  /**\n   * Get the pixel color buffer according to the specified area.\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   * @param width - Area width\n   * @param height - Area height\n   * @param out - Color buffer\n   */\n  getPixelBuffer(x: number, y: number, width: number, height: number, out: ArrayBufferView): void;\n\n  /**\n   * Get the pixel color buffer according to the specified area and mip level.\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   * @param width - Area width\n   * @param height - Area height\n   * @param mipLevel - Tet mip level want to get\n   * @param out - Color buffer\n   */\n  getPixelBuffer(x: number, y: number, width: number, height: number, mipLevel: number, out: ArrayBufferView): void;\n\n  getPixelBuffer(\n    xOrMipLevelOrOut: number | ArrayBufferView,\n    yOrMipLevel?: number | ArrayBufferView,\n    width?: number,\n    height?: number,\n    mipLevelOrOut?: number | ArrayBufferView,\n    out?: ArrayBufferView\n  ): void {\n    const argsLength = arguments.length;\n    if (argsLength === 1) {\n      (this._platformTexture as IPlatformTexture2D).getPixelBuffer(\n        0,\n        0,\n        this._width,\n        this._height,\n        0,\n        <ArrayBufferView>xOrMipLevelOrOut\n      );\n    } else if (argsLength === 2) {\n      (this._platformTexture as IPlatformTexture2D).getPixelBuffer(\n        0,\n        0,\n        this._width >> (<number>xOrMipLevelOrOut),\n        this._height >> (<number>xOrMipLevelOrOut),\n        <number>xOrMipLevelOrOut,\n        <ArrayBufferView>yOrMipLevel\n      );\n    } else if (argsLength === 5) {\n      (this._platformTexture as IPlatformTexture2D).getPixelBuffer(\n        <number>xOrMipLevelOrOut,\n        <number>yOrMipLevel,\n        width,\n        height,\n        0,\n        <ArrayBufferView>mipLevelOrOut\n      );\n    } else if (argsLength === 6) {\n      (this._platformTexture as IPlatformTexture2D).getPixelBuffer(\n        <number>xOrMipLevelOrOut,\n        <number>yOrMipLevel,\n        width,\n        height,\n        <number>mipLevelOrOut,\n        out\n      );\n    }\n  }\n}\n","import { Engine } from \"../Engine\";\nimport { IPlatformTexture2DArray } from \"../renderingHardwareInterface\";\nimport { TextureFilterMode } from \"./enums/TextureFilterMode\";\nimport { TextureFormat } from \"./enums/TextureFormat\";\nimport { TextureWrapMode } from \"./enums/TextureWrapMode\";\nimport { Texture } from \"./Texture\";\n\n/**\n * Two-dimensional texture array.\n */\nexport class Texture2DArray extends Texture {\n  private readonly _length: number;\n\n  /**\n   * The length of the texture.\n   */\n  get length(): number {\n    return this._length;\n  }\n\n  /**\n   * Create Texture2D Array.\n   * @param engine - Define the engine to use to render this texture\n   * @param width - Texture width\n   * @param height - Texture height\n   * @param length - Texture length\n   * @param format - Texture format. default `TextureFormat.R8G8B8A8`\n   * @param mipmap - Whether to use multi-level texture\n   */\n  constructor(\n    engine: Engine,\n    width: number,\n    height: number,\n    length: number,\n    format: TextureFormat = TextureFormat.R8G8B8A8,\n    mipmap: boolean = true\n  ) {\n    super(engine);\n    this._mipmap = mipmap;\n    this._width = width;\n    this._height = height;\n    this._length = length;\n    this._format = format;\n    this._mipmapCount = this._getMipmapCount();\n\n    this._platformTexture = engine._hardwareRenderer.createPlatformTexture2DArray(this);\n\n    this.filterMode = TextureFilterMode.Bilinear;\n    this.wrapModeU = this.wrapModeV = TextureWrapMode.Repeat;\n  }\n\n  /**\n   * Setting pixels data through color buffer data, designated area and texture mipmapping level,it's also applicable to compressed formats.\n   * @remarks If it is the WebGL1.0 platform and the texture format is compressed, the first upload must be filled with textures.\n   * @param offsetIndex - The texture array element offset index\n   * @param colorBuffer - Color buffer data\n   * @param mipLevel - Texture mipmapping level\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   * @param width - Data width. if it's empty, width is the width corresponding to mipLevel minus x , width corresponding to mipLevel is Math.max(1, this.width >> mipLevel)\n   * @param height - Data height. if it's empty, height is the height corresponding to mipLevel minus y , height corresponding to mipLevel is Math.max(1, this.height >> mipLevel)\n   * @param length - Data length. if it's empty, length is the length of Texture2DArray.length\n   */\n  setPixelBuffer(\n    offsetIndex: number,\n    colorBuffer: ArrayBufferView,\n    mipLevel: number = 0,\n    x: number = 0,\n    y: number = 0,\n    width?: number,\n    height?: number,\n    length?: number\n  ): void {\n    (this._platformTexture as IPlatformTexture2DArray).setPixelBuffer(\n      offsetIndex,\n      colorBuffer,\n      mipLevel,\n      x,\n      y,\n      width,\n      height,\n      length\n    );\n  }\n\n  /**\n   * Setting pixels data through TexImageSource, designated area and texture mipmapping level.\n   * @param elementIndex - The texture array element index\n   * @param imageSource - The source of texture\n   * @param mipLevel - Texture mipmapping level\n   * @param flipY - Whether to flip the Y axis\n   * @param premultiplyAlpha - Whether to premultiply the transparent channel\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   */\n  setImageSource(\n    elementIndex: number,\n    imageSource: TexImageSource | OffscreenCanvas,\n    mipLevel: number = 0,\n    flipY: boolean = false,\n    premultiplyAlpha: boolean = false,\n    x: number = 0,\n    y: number = 0\n  ): void {\n    (this._platformTexture as IPlatformTexture2DArray).setImageSource(\n      elementIndex,\n      imageSource,\n      mipLevel,\n      flipY,\n      premultiplyAlpha,\n      x,\n      y\n    );\n  }\n\n  /**\n   * Get pixel color buffer.\n   * @param elementIndex - The texture array element index\n   * @param out - Color buffer\n   */\n  getPixelBuffer(elementIndex: number, out: ArrayBufferView): void;\n\n  /**\n   * Get the pixel color buffer according to the specified mip level.\n   * @param elementIndex - The texture array element index\n   * @param mipLevel - Tet mip level want to get\n   * @param out - Color buffer\n   */\n  getPixelBuffer(elementIndex: number, mipLevel: number, out: ArrayBufferView): void;\n\n  /**\n   * Get the pixel color buffer according to the specified area.\n   * @param elementIndex - The texture array element index\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   * @param width - Area width\n   * @param height - Area height\n   * @param out - Color buffer\n   */\n  getPixelBuffer(elementIndex: number, x: number, y: number, width: number, height: number, out: ArrayBufferView): void;\n\n  /**\n   * Get the pixel color buffer according to the specified area and mip level.\n   * @param elementIndex - The texture array element index\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   * @param width - Area width\n   * @param height - Area height\n   * @param mipLevel - Tet mip level want to get\n   * @param out - Color buffer\n   */\n  getPixelBuffer(\n    elementIndex: number,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    mipLevel: number,\n    out: ArrayBufferView\n  ): void;\n\n  getPixelBuffer(\n    elementIndex: number,\n    xOrMipLevelOrOut: number | ArrayBufferView,\n    yOrMipLevel?: number | ArrayBufferView,\n    width?: number,\n    height?: number,\n    mipLevelOrOut?: number | ArrayBufferView,\n    out?: ArrayBufferView\n  ): void {\n    const argsLength = arguments.length;\n    if (argsLength === 1) {\n      (this._platformTexture as IPlatformTexture2DArray).getPixelBuffer(\n        elementIndex,\n        0,\n        0,\n        this._width,\n        this._height,\n        0,\n        <ArrayBufferView>xOrMipLevelOrOut\n      );\n    } else if (argsLength === 2) {\n      (this._platformTexture as IPlatformTexture2DArray).getPixelBuffer(\n        elementIndex,\n        0,\n        0,\n        this._width >> (<number>xOrMipLevelOrOut),\n        this._height >> (<number>xOrMipLevelOrOut),\n        <number>xOrMipLevelOrOut,\n        <ArrayBufferView>yOrMipLevel\n      );\n    } else if (argsLength === 5) {\n      (this._platformTexture as IPlatformTexture2DArray).getPixelBuffer(\n        elementIndex,\n        <number>xOrMipLevelOrOut,\n        <number>yOrMipLevel,\n        width,\n        height,\n        0,\n        <ArrayBufferView>mipLevelOrOut\n      );\n    } else if (argsLength === 6) {\n      (this._platformTexture as IPlatformTexture2DArray).getPixelBuffer(\n        elementIndex,\n        <number>xOrMipLevelOrOut,\n        <number>yOrMipLevel,\n        width,\n        height,\n        <number>mipLevelOrOut,\n        out\n      );\n    }\n  }\n}\n","import { Engine } from \"../Engine\";\nimport { IPlatformTextureCube } from \"../renderingHardwareInterface\";\nimport { TextureCubeFace } from \"./enums/TextureCubeFace\";\nimport { TextureFilterMode } from \"./enums/TextureFilterMode\";\nimport { TextureFormat } from \"./enums/TextureFormat\";\nimport { TextureWrapMode } from \"./enums/TextureWrapMode\";\nimport { Texture } from \"./Texture\";\n\n/**\n * Cube texture.\n */\nexport class TextureCube extends Texture {\n  /**\n   * Create TextureCube.\n   * @param engine - Define the engine to use to render this texture\n   * @param size - Texture size. texture width must be equal to height in cube texture\n   * @param format - Texture format,default TextureFormat.R8G8B8A8\n   * @param mipmap - Whether to use multi-level texture\n   */\n  constructor(engine: Engine, size: number, format: TextureFormat = TextureFormat.R8G8B8A8, mipmap: boolean = true) {\n    super(engine);\n\n    this._mipmap = mipmap;\n    this._width = size;\n    this._height = size;\n    this._format = format;\n    this._mipmapCount = this._getMipmapCount();\n\n    this._platformTexture = engine._hardwareRenderer.createPlatformTextureCube(this);\n\n    this.filterMode = TextureFilterMode.Bilinear;\n    this.wrapModeU = this.wrapModeV = TextureWrapMode.Clamp;\n  }\n\n  /**\n   * Setting pixels data through cube face,color buffer data, designated area and texture mipmapping level,it's also applicable to compressed formats.\n   * @remarks When compressed texture is in WebGL1, the texture must be filled first before writing the sub-region\n   * @param face - Cube face\n   * @param colorBuffer - Color buffer data\n   * @param mipLevel - Texture mipmapping level\n   * @param x - X coordinate of area start\n   * @param y -  Y coordinate of area start\n   * @param width - Data width.if it's empty, width is the width corresponding to mipLevel minus x , width corresponding to mipLevel is Math.max(1, this.width >> mipLevel)\n   * @param height - Data height.if it's empty, height is the height corresponding to mipLevel minus y , height corresponding to mipLevel is Math.max(1, this.height >> mipLevel)\n   */\n  setPixelBuffer(\n    face: TextureCubeFace,\n    colorBuffer: ArrayBufferView,\n    mipLevel: number = 0,\n    x: number = 0,\n    y: number = 0,\n    width?: number,\n    height?: number\n  ): void {\n    (this._platformTexture as IPlatformTextureCube).setPixelBuffer(face, colorBuffer, mipLevel, x, y, width, height);\n  }\n\n  /**\n   * Setting pixels data through cube face, TexImageSource, designated area and texture mipmapping level.\n   * @param face - Cube face\n   * @param imageSource - The source of texture\n   * @param mipLevel - Texture mipmapping level\n   * @param flipY - Whether to flip the Y axis\n   * @param premultiplyAlpha - Whether to premultiply the transparent channel\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   */\n  setImageSource(\n    face: TextureCubeFace,\n    imageSource: TexImageSource | OffscreenCanvas,\n    mipLevel: number = 0,\n    flipY: boolean = false,\n    premultiplyAlpha: boolean = false,\n    x: number = 0,\n    y: number = 0\n  ): void {\n    (this._platformTexture as IPlatformTextureCube).setImageSource(\n      face,\n      imageSource,\n      mipLevel,\n      flipY,\n      premultiplyAlpha,\n      x,\n      y\n    );\n  }\n\n  /**\n   * Get pixel color buffer.\n   * @param out - Color buffer\n   */\n  getPixelBuffer(face: TextureCubeFace, out: ArrayBufferView): void;\n\n  /**\n   * Get the pixel color buffer according to the specified mip level.\n   * @param mipLevel - Tet mip level want to get\n   * @param out - Color buffer\n   */\n  getPixelBuffer(face: TextureCubeFace, mipLevel: number, out: ArrayBufferView): void;\n\n  /**\n   * Get the pixel color buffer according to the specified area.\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   * @param width - Area width\n   * @param height - Area height\n   * @param out - Color buffer\n   */\n  getPixelBuffer(\n    face: TextureCubeFace,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    out: ArrayBufferView\n  ): void;\n\n  /**\n   * Get the pixel color buffer according to the specified area and mip level.\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   * @param width - Area width\n   * @param height - Area height\n   * @param mipLevel - Tet mip level want to get\n   * @param out - Color buffer\n   */\n  getPixelBuffer(\n    face: TextureCubeFace,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    mipLevel: number,\n    out: ArrayBufferView\n  ): void;\n\n  getPixelBuffer(\n    face: TextureCubeFace,\n    xOrMipLevelOrOut: number | ArrayBufferView,\n    yOrMipLevel?: number | ArrayBufferView,\n    width?: number,\n    height?: number,\n    mipLevelOrOut?: number | ArrayBufferView,\n    out?: ArrayBufferView\n  ): void {\n    const argsLength = arguments.length;\n    if (argsLength === 2) {\n      (this._platformTexture as IPlatformTextureCube).getPixelBuffer(\n        face,\n        0,\n        0,\n        this._width,\n        this._height,\n        0,\n        <ArrayBufferView>xOrMipLevelOrOut\n      );\n    } else if (argsLength === 3) {\n      (this._platformTexture as IPlatformTextureCube).getPixelBuffer(\n        face,\n        0,\n        0,\n        this._width >> (<number>xOrMipLevelOrOut),\n        this._height >> (<number>xOrMipLevelOrOut),\n        <number>xOrMipLevelOrOut,\n        <ArrayBufferView>yOrMipLevel\n      );\n    } else if (argsLength === 6) {\n      (this._platformTexture as IPlatformTextureCube).getPixelBuffer(\n        face,\n        <number>xOrMipLevelOrOut,\n        <number>yOrMipLevel,\n        width,\n        height,\n        0,\n        <ArrayBufferView>mipLevelOrOut\n      );\n    } else if (argsLength === 7) {\n      (this._platformTexture as IPlatformTextureCube).getPixelBuffer(\n        face,\n        <number>xOrMipLevelOrOut,\n        <number>yOrMipLevel,\n        width,\n        height,\n        <number>mipLevelOrOut,\n        out\n      );\n    }\n  }\n}\n","import { Vector2, Vector3 } from \"@oasis-engine/math\";\nimport { BoolUpdateFlag } from \"../BoolUpdateFlag\";\nimport { Engine } from \"../Engine\";\nimport { Buffer } from \"../graphic/Buffer\";\nimport { BufferBindFlag } from \"../graphic/enums/BufferBindFlag\";\nimport { BufferUsage } from \"../graphic/enums/BufferUsage\";\nimport { VertexElementFormat } from \"../graphic/enums/VertexElementFormat\";\nimport { VertexBufferBinding } from \"../graphic/VertexBufferBinding\";\nimport { VertexElement } from \"../graphic/VertexElement\";\nimport { ListenerUpdateFlag } from \"../ListenerUpdateFlag\";\nimport { Shader } from \"../shader/Shader\";\nimport { ShaderData } from \"../shader/ShaderData\";\nimport { Texture2DArray, TextureFilterMode, TextureFormat } from \"../texture\";\nimport { BlendShape } from \"./BlendShape\";\nimport { ModelMesh } from \"./ModelMesh\";\nimport { SkinnedMeshRenderer } from \"./SkinnedMeshRenderer\";\n\n/**\n * @internal\n */\nexport class BlendShapeManager {\n  private static _blendShapeMacro = Shader.getMacroByName(\"OASIS_BLENDSHAPE\");\n  private static _blendShapeTextureMacro = Shader.getMacroByName(\"OASIS_BLENDSHAPE_TEXTURE\");\n  private static _blendShapeNormalMacro = Shader.getMacroByName(\"OASIS_BLENDSHAPE_NORMAL\");\n  private static _blendShapeTangentMacro = Shader.getMacroByName(\"OASIS_BLENDSHAPE_TANGENT\");\n\n  private static _blendShapeWeightsProperty = Shader.getPropertyByName(\"u_blendShapeWeights\");\n  private static _blendShapeTextureProperty = Shader.getPropertyByName(\"u_blendShapeTexture\");\n  private static _blendShapeTextureInfoProperty = Shader.getPropertyByName(\"u_blendShapeTextureInfo\");\n\n  /** @internal */\n  _blendShapeCount: number = 0;\n  /** @internal */\n  _blendShapes: BlendShape[] = [];\n  /** @internal */\n  _blendShapeNames: string[];\n  /** @internal */\n  _layoutDirtyListener: ListenerUpdateFlag = new ListenerUpdateFlag();\n  /** @internal */\n  _subDataDirtyFlags: BoolUpdateFlag[] = [];\n  /** @internal */\n  _vertexTexture: Texture2DArray;\n  /** @internal */\n  _vertexBuffers: Buffer[] = [];\n  /** @internal */\n  _vertices: Float32Array;\n\n  private _useBlendNormal: boolean = false;\n  private _useBlendTangent: boolean = false;\n  private _vertexElementCount: number = 0;\n  private _vertexElementOffset: number;\n  private _storeInVertexBufferInfo: Vector2[] = [];\n  private _maxCountSingleVertexBuffer: number = 0;\n  private readonly _engine: Engine;\n  private readonly _modelMesh: ModelMesh;\n  private readonly _lastCreateHostInfo: Vector3 = new Vector3(0, 0, 0);\n  private readonly _canUseTextureStoreData: boolean = true;\n  private readonly _dataTextureInfo: Vector3 = new Vector3();\n\n  constructor(engine: Engine, modelMesh: ModelMesh) {\n    this._engine = engine;\n    this._modelMesh = modelMesh;\n    this._canUseTextureStoreData = this._engine._hardwareRenderer.capability.canUseFloatTextureBlendShape;\n    this._layoutDirtyListener.listener = this._updateLayoutChange.bind(this);\n  }\n\n  /**\n   * @internal\n   */\n  _addBlendShape(blendShape: BlendShape): void {\n    this._blendShapes.push(blendShape);\n    this._blendShapeCount++;\n\n    blendShape._addLayoutChangeFlag(this._layoutDirtyListener);\n    this._updateLayoutChange(blendShape);\n\n    this._subDataDirtyFlags.push(blendShape._createSubDataDirtyFlag());\n  }\n\n  /**\n   * @internal\n   */\n  _clearBlendShapes(): void {\n    this._useBlendNormal = false;\n    this._useBlendTangent = false;\n    this._vertexElementCount = 0;\n    this._blendShapes.length = 0;\n    this._blendShapeCount = 0;\n\n    this._layoutDirtyListener.clearFromManagers();\n    const subDataDirtyFlags = this._subDataDirtyFlags;\n    for (let i = 0, n = subDataDirtyFlags.length; i < n; i++) {\n      subDataDirtyFlags[i].destroy();\n    }\n    subDataDirtyFlags.length = 0;\n  }\n\n  /**\n   * @internal\n   */\n  _updateShaderData(shaderData: ShaderData, skinnedMeshRenderer: SkinnedMeshRenderer): void {\n    let blendShapeCount = this._blendShapeCount;\n    if (blendShapeCount > 0) {\n      shaderData.enableMacro(BlendShapeManager._blendShapeMacro);\n      if (this._useTextureMode()) {\n        shaderData.enableMacro(BlendShapeManager._blendShapeTextureMacro);\n        shaderData.setTexture(BlendShapeManager._blendShapeTextureProperty, this._vertexTexture);\n        shaderData.setVector3(BlendShapeManager._blendShapeTextureInfoProperty, this._dataTextureInfo);\n        shaderData.setFloatArray(BlendShapeManager._blendShapeWeightsProperty, skinnedMeshRenderer.blendShapeWeights);\n      } else {\n        const maxBlendCount = this._getVertexBufferModeSupportCount();\n        if (blendShapeCount > maxBlendCount) {\n          let condensedBlendShapeWeights = skinnedMeshRenderer._condensedBlendShapeWeights;\n          if (!condensedBlendShapeWeights) {\n            condensedBlendShapeWeights = new Float32Array(maxBlendCount);\n            skinnedMeshRenderer._condensedBlendShapeWeights = condensedBlendShapeWeights;\n          }\n          this._filterCondensedBlendShapeWeights(skinnedMeshRenderer.blendShapeWeights, condensedBlendShapeWeights);\n          shaderData.setFloatArray(BlendShapeManager._blendShapeWeightsProperty, condensedBlendShapeWeights);\n          this._modelMesh._enableVAO = false;\n          blendShapeCount = maxBlendCount;\n        } else {\n          shaderData.setFloatArray(\n            BlendShapeManager._blendShapeWeightsProperty,\n            skinnedMeshRenderer.blendShapeWeights\n          );\n          this._modelMesh._enableVAO = true;\n        }\n        shaderData.disableMacro(BlendShapeManager._blendShapeTextureMacro);\n      }\n      shaderData.enableMacro(\"OASIS_BLENDSHAPE_COUNT\", blendShapeCount.toString());\n\n      if (this._useBlendNormal) {\n        shaderData.enableMacro(BlendShapeManager._blendShapeNormalMacro);\n      } else {\n        shaderData.disableMacro(BlendShapeManager._blendShapeNormalMacro);\n      }\n      if (this._useBlendTangent) {\n        shaderData.enableMacro(BlendShapeManager._blendShapeTangentMacro);\n      } else {\n        shaderData.disableMacro(BlendShapeManager._blendShapeTangentMacro);\n      }\n    } else {\n      shaderData.disableMacro(BlendShapeManager._blendShapeMacro);\n      shaderData.disableMacro(\"OASIS_BLENDSHAPE_COUNT\");\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _useTextureMode(): boolean {\n    if (!this._canUseTextureStoreData) {\n      return false;\n    }\n    return this._blendShapeCount > this._getVertexBufferModeSupportCount();\n  }\n\n  /**\n   * @internal\n   */\n  _layoutOrCountChange(): boolean {\n    const last = this._lastCreateHostInfo;\n    return last.x !== this._blendShapeCount || !!last.y !== this._useBlendNormal || !!last.z !== this._useBlendTangent;\n  }\n\n  /**\n   * @internal\n   */\n  _vertexElementsNeedUpdate(): boolean {\n    const maxSupportCount = this._getVertexBufferModeSupportCount();\n    const info = this._lastCreateHostInfo;\n    return (\n      Math.min(info.x, maxSupportCount) !== Math.min(this._blendShapeCount, maxSupportCount) ||\n      !!info.y !== this._useBlendNormal ||\n      !!info.z !== this._useBlendTangent\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _needUpdateData(): boolean {\n    const subDataDirtyFlags = this._subDataDirtyFlags;\n    for (let i = 0, n = subDataDirtyFlags.length; i < n; i++) {\n      if (subDataDirtyFlags[i].flag) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @internal\n   */\n  _addVertexElements(modelMesh: ModelMesh): void {\n    let offset = 0;\n    this._vertexElementOffset = modelMesh._vertexElements.length;\n    for (let i = 0, n = Math.min(this._blendShapeCount, this._getVertexBufferModeSupportCount()); i < n; i++) {\n      modelMesh._addVertexElement(new VertexElement(`POSITION_BS${i}`, offset, VertexElementFormat.Vector3, 1));\n      offset += 12;\n      if (this._useBlendNormal) {\n        modelMesh._addVertexElement(new VertexElement(`NORMAL_BS${i}`, offset, VertexElementFormat.Vector3, 1));\n        offset += 12;\n      }\n      if (this._useBlendTangent) {\n        modelMesh._addVertexElement(new VertexElement(`TANGENT_BS${i}`, offset, VertexElementFormat.Vector3, 1));\n        offset += 12;\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _update(vertexCountChange: boolean, noLongerAccessible: boolean): void {\n    const { vertexCount } = this._modelMesh;\n    const useTexture = this._useTextureMode();\n    const createHost = this._layoutOrCountChange() || vertexCountChange;\n\n    if (createHost) {\n      if (useTexture) {\n        this._createTextureArray(vertexCount);\n      } else {\n        this._createVertexBuffers(vertexCount, noLongerAccessible);\n      }\n      this._lastCreateHostInfo.set(this._blendShapeCount, +this._useBlendNormal, +this._useBlendTangent);\n    }\n    if (this._needUpdateData()) {\n      if (useTexture) {\n        this._updateTextureArray(vertexCount, createHost);\n      } else {\n        this._updateVertexBuffers(vertexCount, createHost);\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _releaseMemoryCache(): void {\n    const { _blendShapes: blendShapes } = this;\n    const { length: blendShapeCount } = blendShapes;\n\n    const blendShapeNamesMap = new Array<string>(blendShapeCount);\n    for (let i = 0; i < blendShapeCount; i++) {\n      blendShapeNamesMap[i] = blendShapes[i].name;\n    }\n    this._blendShapeNames = blendShapeNamesMap;\n\n    this._layoutDirtyListener.destroy();\n    const dataChangedFlags = this._subDataDirtyFlags;\n    for (let i = 0, n = dataChangedFlags.length; i < n; i++) {\n      dataChangedFlags[i].destroy();\n    }\n\n    this._layoutDirtyListener = null;\n    this._subDataDirtyFlags = null;\n    this._blendShapes = null;\n    this._vertices = null;\n  }\n\n  private _createVertexBuffers(vertexCount: number, noLongerAccessible: boolean): void {\n    const {\n      _engine: engine,\n      _modelMesh: modelMesh,\n      _blendShapeCount: blendShapeCount,\n      _vertexBuffers: vertexBuffers\n    } = this;\n    const vertexFloatCount = this._vertexElementCount * 3;\n    const vertexByteCount = vertexFloatCount * 4;\n    const maxCountSingleBuffer = Math.floor(255 / vertexByteCount); // 255: Attribute MaxStride\n    const bufferCount = Math.ceil(blendShapeCount / maxCountSingleBuffer);\n    const floatCount = vertexFloatCount * vertexCount * Math.min(maxCountSingleBuffer, blendShapeCount);\n\n    vertexBuffers.length = bufferCount;\n    this._vertices = new Float32Array(floatCount);\n    this._maxCountSingleVertexBuffer = maxCountSingleBuffer;\n    this._storeInVertexBufferInfo.length = blendShapeCount;\n\n    for (let i = 0; i < bufferCount; i++) {\n      const lastIndex = bufferCount - 1;\n      const containCount = i === lastIndex ? blendShapeCount - lastIndex * maxCountSingleBuffer : maxCountSingleBuffer;\n      const stride = containCount * vertexByteCount;\n      const byteLength = stride * vertexCount;\n\n      const usage = noLongerAccessible ? BufferUsage.Static : BufferUsage.Dynamic;\n\n      const blendShapeBuffer = new Buffer(engine, BufferBindFlag.VertexBuffer, byteLength, usage);\n      modelMesh._setVertexBufferBinding(i + 1, new VertexBufferBinding(blendShapeBuffer, stride));\n      vertexBuffers[i] = blendShapeBuffer;\n    }\n  }\n\n  private _createTextureArray(vertexCount: number): void {\n    const maxTextureSize = this._engine._hardwareRenderer.capability.maxTextureSize;\n    const vertexPixelStride = this._vertexElementCount;\n\n    let textureWidth = vertexPixelStride * vertexCount;\n    let textureHeight = 1;\n    if (textureWidth > maxTextureSize) {\n      textureHeight = Math.ceil(textureWidth / maxTextureSize);\n      textureWidth = maxTextureSize;\n    }\n\n    let blendShapeDataTexture = this._vertexTexture;\n    const blendShapeCount = this._blendShapes.length;\n\n    blendShapeDataTexture && blendShapeDataTexture.destroy();\n\n    blendShapeDataTexture = new Texture2DArray(\n      this._engine,\n      textureWidth,\n      textureHeight,\n      blendShapeCount,\n      TextureFormat.R32G32B32A32,\n      false\n    );\n    blendShapeDataTexture.filterMode = TextureFilterMode.Point;\n\n    this._vertices = new Float32Array(blendShapeCount * textureWidth * textureHeight * 4);\n    this._vertexTexture = blendShapeDataTexture;\n    this._dataTextureInfo.set(vertexPixelStride, textureWidth, textureHeight);\n  }\n\n  /**\n   * @internal\n   */\n  _updateVertexBuffers(vertexCount: number, force: boolean): void {\n    const { _blendShapes: blendShapes, _maxCountSingleVertexBuffer: maxCountSingleBuffer } = this;\n    const { _vertices: vertices, _vertexBuffers: vertexBuffers, _storeInVertexBufferInfo: storeInfos } = this;\n\n    const subDataDirtyFlags = this._subDataDirtyFlags;\n    const blendShapeFloatStride = this._vertexElementCount * 3;\n    const blendShapeByteStride = blendShapeFloatStride * 4;\n\n    // @todo: should fix bug when dataChangedFlag is true\n    for (let i = 0, n = blendShapes.length; i < n; i++) {\n      const dataChangedFlag = subDataDirtyFlags[i];\n      if (force || dataChangedFlag.flag) {\n        const { frames } = blendShapes[i];\n        const frameCount = frames.length;\n        const endFrame = frames[frameCount - 1];\n        if (frameCount > 0 && endFrame.deltaPositions.length !== vertexCount) {\n          throw \"BlendShape frame deltaPositions length must same with mesh vertexCount.\";\n        }\n\n        const bufferIndex = Math.floor(i / maxCountSingleBuffer);\n        const indexInBuffer = i % maxCountSingleBuffer;\n        const buffer = vertexBuffers[bufferIndex];\n        const bufferFloatStride = buffer.byteLength / (vertexCount * 4);\n\n        let offset = indexInBuffer * blendShapeFloatStride;\n\n        let storeInfo = storeInfos[i];\n        storeInfo || (storeInfos[i] = storeInfo = new Vector2());\n        storeInfo.set(bufferIndex + 1, indexInBuffer * blendShapeByteStride); // BlendShape buffer is start from 1\n\n        const { deltaPositions } = endFrame;\n        for (let j = 0; j < vertexCount; j++) {\n          const start = offset + bufferFloatStride * j;\n          const deltaPosition = deltaPositions[j];\n          if (deltaPosition) {\n            vertices[start] = deltaPosition.x;\n            vertices[start + 1] = deltaPosition.y;\n            vertices[start + 2] = deltaPosition.z;\n          }\n        }\n        offset += 3;\n\n        if (this._useBlendNormal) {\n          const { deltaNormals } = endFrame;\n          if (deltaNormals) {\n            for (let j = 0; j < vertexCount; j++) {\n              const start = offset + bufferFloatStride * j;\n              const deltaNormal = deltaNormals[j];\n              if (deltaNormal) {\n                vertices[start] = deltaNormal.x;\n                vertices[start + 1] = deltaNormal.y;\n                vertices[start + 2] = deltaNormal.z;\n              }\n            }\n          }\n          offset += 3;\n        }\n\n        if (this._useBlendTangent) {\n          const { deltaTangents } = endFrame;\n          if (deltaTangents) {\n            for (let j = 0; j < vertexCount; j++) {\n              const start = offset + bufferFloatStride * j;\n              const deltaTangent = deltaTangents[j];\n              if (deltaTangent) {\n                vertices[start] = deltaTangent.x;\n                vertices[start + 1] = deltaTangent.y;\n                vertices[start + 2] = deltaTangent.z;\n              }\n            }\n          }\n          offset += 3;\n        }\n\n        if (indexInBuffer === maxCountSingleBuffer - 1 || i === n - 1) {\n          // @todo: can optimize in setData\n          buffer.setData(vertices, 0, 0, buffer.byteLength / 4);\n        }\n\n        dataChangedFlag.flag = false;\n      }\n    }\n  }\n\n  private _updateTextureArray(vertexCount: number, force: boolean): void {\n    const {\n      _blendShapes: blendShapes,\n      _vertexTexture: vertexTexture,\n      _vertices: vertices,\n      _subDataDirtyFlags: subDataDirtyFlags\n    } = this;\n\n    for (let i = 0, n = blendShapes.length; i < n; i++) {\n      const subDirtyFlag = subDataDirtyFlags[i];\n      const subBlendShapeDataStride = vertexTexture.width * vertexTexture.height * 4;\n      if (force || subDirtyFlag.flag) {\n        const { frames } = blendShapes[i];\n        const frameCount = frames.length;\n        const endFrame = frames[frameCount - 1];\n        if (frameCount > 0 && endFrame.deltaPositions.length !== vertexCount) {\n          throw \"BlendShape frame deltaPositions length must same with mesh vertexCount.\";\n        }\n\n        const { deltaPositions, deltaNormals, deltaTangents } = endFrame;\n        let offset = i * subBlendShapeDataStride;\n        for (let j = 0; j < vertexCount; j++) {\n          const position = deltaPositions[j];\n          vertices[offset] = position.x;\n          vertices[offset + 1] = position.y;\n          vertices[offset + 2] = position.z;\n          offset += 4;\n\n          if (deltaNormals) {\n            const normal = deltaNormals[j];\n            vertices[offset] = normal.x;\n            vertices[offset + 1] = normal.y;\n            vertices[offset + 2] = normal.z;\n            offset += 4;\n          }\n\n          if (deltaTangents) {\n            const tangent = deltaTangents[j];\n            vertices[offset] = tangent.x;\n            vertices[offset + 1] = tangent.y;\n            vertices[offset + 2] = tangent.z;\n            offset += 4;\n          }\n        }\n        subDirtyFlag.flag = false;\n      }\n    }\n    vertexTexture.setPixelBuffer(0, vertices);\n  }\n\n  private _updateLayoutChange(blendShape: BlendShape): void {\n    const notFirst = this._blendShapeCount > 1;\n    let vertexElementCount = 1;\n    let useBlendNormal = blendShape._useBlendShapeNormal;\n    let useBlendTangent = blendShape._useBlendShapeTangent;\n    if (notFirst) {\n      useBlendNormal &&= this._useBlendNormal;\n      useBlendTangent &&= this._useBlendTangent;\n    }\n\n    useBlendNormal && vertexElementCount++;\n    useBlendTangent && vertexElementCount++;\n\n    this._useBlendNormal = useBlendNormal;\n    this._useBlendTangent = useBlendTangent;\n    this._vertexElementCount = vertexElementCount;\n  }\n\n  private _attributeModeUpdateVertexElement(\n    vertexElements: VertexElement[],\n    vertexBufferStoreInfo: Vector2[],\n    index: number,\n    condensedIndex: number\n  ): void {\n    let elementOffset = this._vertexElementOffset + this._vertexElementCount * condensedIndex;\n\n    let { x: bufferIndex, y: offset } = vertexBufferStoreInfo[index];\n    const vertexElement = vertexElements[elementOffset];\n    vertexElement.bindingIndex = bufferIndex;\n    vertexElement.offset = offset;\n    if (this._useBlendNormal) {\n      const vertexElement = vertexElements[++elementOffset];\n      offset += 12;\n      vertexElement.bindingIndex = bufferIndex;\n      vertexElement.offset = offset;\n    }\n    if (this._useBlendTangent) {\n      const vertexElement = vertexElements[++elementOffset];\n      offset += 12;\n      vertexElement.bindingIndex = bufferIndex;\n      vertexElement.offset = offset;\n    }\n  }\n\n  private _getVertexBufferModeSupportCount(): number {\n    if (this._useBlendNormal || this._useBlendTangent) {\n      return 4;\n    } else {\n      return 8;\n    }\n  }\n\n  private _filterCondensedBlendShapeWeights(\n    blendShapeWeights: Float32Array,\n    condensedBlendShapeWeights: Float32Array\n  ): void {\n    const condensedWeightsCount = condensedBlendShapeWeights.length;\n    const vertexElements = this._modelMesh._vertexElements;\n    const vertexBufferStoreInfo = this._storeInVertexBufferInfo;\n    let thresholdWeight = Number.POSITIVE_INFINITY;\n    let thresholdIndex: number;\n    for (let i = 0, n = Math.min(blendShapeWeights.length, this._blendShapeCount); i < n; i++) {\n      const weight = blendShapeWeights[i];\n      if (i < condensedWeightsCount) {\n        this._attributeModeUpdateVertexElement(vertexElements, vertexBufferStoreInfo, i, i);\n        condensedBlendShapeWeights[i] = weight;\n        if (weight < thresholdWeight) {\n          thresholdWeight = weight;\n          thresholdIndex = i;\n        }\n      } else if (weight > thresholdWeight) {\n        this._attributeModeUpdateVertexElement(vertexElements, vertexBufferStoreInfo, i, thresholdIndex);\n        condensedBlendShapeWeights[thresholdIndex] = weight;\n\n        thresholdWeight = Number.POSITIVE_INFINITY;\n        for (let j = 0; j < condensedWeightsCount; j++) {\n          const condensedWeight = condensedBlendShapeWeights[j];\n          if (condensedWeight < thresholdWeight) {\n            thresholdWeight = condensedWeight;\n            thresholdIndex = j;\n          }\n        }\n      }\n    }\n  }\n}\n","import { Color, Vector2, Vector3, Vector4 } from \"@oasis-engine/math\";\nimport { Engine } from \"../Engine\";\nimport { IndexBufferBinding } from \"../graphic\";\nimport { Buffer } from \"../graphic/Buffer\";\nimport { BufferBindFlag } from \"../graphic/enums/BufferBindFlag\";\nimport { BufferUsage } from \"../graphic/enums/BufferUsage\";\nimport { IndexFormat } from \"../graphic/enums/IndexFormat\";\nimport { VertexElementFormat } from \"../graphic/enums/VertexElementFormat\";\nimport { Mesh } from \"../graphic/Mesh\";\nimport { VertexBufferBinding } from \"../graphic/VertexBufferBinding\";\nimport { VertexElement } from \"../graphic/VertexElement\";\nimport { BlendShape } from \"./BlendShape\";\nimport { BlendShapeManager } from \"./BlendShapeManager\";\n\n/**\n * Mesh containing common vertex elements of the model.\n */\nexport class ModelMesh extends Mesh {\n  /** @internal */\n  _blendShapeManager: BlendShapeManager;\n\n  private _vertexCount: number = 0;\n  private _accessible: boolean = true;\n  private _verticesFloat32: Float32Array | null = null;\n  private _verticesUint8: Uint8Array | null = null;\n  private _indices: Uint8Array | Uint16Array | Uint32Array | null = null;\n  private _indicesFormat: IndexFormat = null;\n  private _vertexSlotChanged: boolean = true;\n  private _vertexChangeFlag: number = 0;\n  private _indicesChangeFlag: boolean = false;\n  private _vertexStrideFloat: number = 0;\n  private _lastUploadVertexCount: number = -1;\n\n  private _positions: Vector3[] = [];\n  private _normals: Vector3[] | null = null;\n  private _colors: Color[] | null = null;\n  private _tangents: Vector4[] | null = null;\n  private _uv: Vector2[] | null = null;\n  private _uv1: Vector2[] | null = null;\n  private _uv2: Vector2[] | null = null;\n  private _uv3: Vector2[] | null = null;\n  private _uv4: Vector2[] | null = null;\n  private _uv5: Vector2[] | null = null;\n  private _uv6: Vector2[] | null = null;\n  private _uv7: Vector2[] | null = null;\n  private _boneWeights: Vector4[] | null = null;\n  private _boneIndices: Vector4[] | null = null;\n\n  /**\n   * Whether to access data of the mesh.\n   */\n  get accessible(): boolean {\n    return this._accessible;\n  }\n\n  /**\n   * Vertex count of current mesh.\n   */\n  get vertexCount(): number {\n    return this._vertexCount;\n  }\n\n  /**\n   * BlendShapes of this ModelMesh.\n   */\n  get blendShapes(): Readonly<BlendShape[]> {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n    return this._blendShapeManager._blendShapes;\n  }\n\n  /**\n   * BlendShape count of this ModelMesh.\n   */\n  get blendShapeCount(): number {\n    return this._blendShapeManager._blendShapeCount;\n  }\n\n  /**\n   * Create a model mesh.\n   * @param engine - Engine to which the mesh belongs\n   * @param name - Mesh name\n   */\n  constructor(engine: Engine, name?: string) {\n    super(engine);\n    this.name = name;\n    this._blendShapeManager = new BlendShapeManager(engine, this);\n  }\n\n  /**\n   * Set positions for the mesh.\n   * @param positions - The positions for the mesh.\n   */\n  setPositions(positions: Vector3[]): void {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n\n    this._positions = positions;\n    this._vertexCount = positions.length;\n    this._vertexChangeFlag |= ValueChanged.Position;\n  }\n\n  /**\n   * Get positions for the mesh.\n   * @remarks Please call the setPositions() method after modification to ensure that the modification takes effect.\n   */\n  getPositions(): Vector3[] | null {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n\n    return this._positions;\n  }\n\n  /**\n   * Set per-vertex normals for the mesh.\n   * @param normals - The normals for the mesh.\n   */\n  setNormals(normals: Vector3[] | null): void {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n\n    if (normals.length !== this._vertexCount) {\n      throw \"The array provided needs to be the same size as vertex count.\";\n    }\n\n    this._vertexSlotChanged = !!this._normals !== !!normals;\n    this._vertexChangeFlag |= ValueChanged.Normal;\n    this._normals = normals;\n  }\n\n  /**\n   * Get normals for the mesh.\n   * @remarks Please call the setNormals() method after modification to ensure that the modification takes effect.\n   */\n  getNormals(): Vector3[] | null {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n    return this._normals;\n  }\n\n  /**\n   * Set per-vertex colors for the mesh.\n   * @param colors - The colors for the mesh.\n   */\n  setColors(colors: Color[] | null): void {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n\n    if (colors.length !== this._vertexCount) {\n      throw \"The array provided needs to be the same size as vertex count.\";\n    }\n\n    this._vertexSlotChanged = !!this._colors !== !!colors;\n    this._vertexChangeFlag |= ValueChanged.Color;\n    this._colors = colors;\n  }\n\n  /**\n   * Get colors for the mesh.\n   * @remarks Please call the setColors() method after modification to ensure that the modification takes effect.\n   */\n  getColors(): Color[] | null {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n    return this._colors;\n  }\n\n  /**\n   * Set per-vertex bone weights for the mesh.\n   * @param boneWeights - The bone weights for the mesh.\n   */\n  setBoneWeights(boneWeights: Vector4[] | null): void {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n\n    if (boneWeights.length !== this._vertexCount) {\n      throw \"The array provided needs to be the same size as vertex count.\";\n    }\n\n    this._vertexSlotChanged = boneWeights != null;\n    this._vertexChangeFlag |= ValueChanged.BoneWeight;\n    this._boneWeights = boneWeights;\n  }\n\n  /**\n   * Get weights for the mesh.\n   * @remarks Please call the setWeights() method after modification to ensure that the modification takes effect.\n   */\n  getBoneWeights(): Vector4[] | null {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n    return this._boneWeights;\n  }\n\n  /**\n   * Set per-vertex bone indices for the mesh.\n   * @param boneIndices - The bone indices for the mesh.\n   */\n  setBoneIndices(boneIndices: Vector4[] | null): void {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n\n    if (boneIndices.length !== this._vertexCount) {\n      throw \"The array provided needs to be the same size as vertex count.\";\n    }\n\n    this._vertexSlotChanged = !!this._boneIndices !== !!boneIndices;\n    this._vertexChangeFlag |= ValueChanged.BoneIndex;\n    this._boneIndices = boneIndices;\n  }\n\n  /**\n   * Get joints for the mesh.\n   * @remarks Please call the setBoneIndices() method after modification to ensure that the modification takes effect.\n   */\n  getBoneIndices(): Vector4[] | null {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n    return this._boneIndices;\n  }\n\n  /**\n   * Set per-vertex tangents for the mesh.\n   * @param tangents - The tangents for the mesh.\n   */\n  setTangents(tangents: Vector4[] | null): void {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n\n    if (tangents.length !== this._vertexCount) {\n      throw \"The array provided needs to be the same size as vertex count.\";\n    }\n\n    this._vertexSlotChanged = !!this._tangents !== !!tangents;\n    this._vertexChangeFlag |= ValueChanged.Tangent;\n    this._tangents = tangents;\n  }\n\n  /**\n   * Get tangents for the mesh.\n   * @remarks Please call the setTangents() method after modification to ensure that the modification takes effect.\n   */\n  getTangents(): Vector4[] | null {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n    return this._tangents;\n  }\n\n  /**\n   * Set per-vertex uv for the mesh.\n   * @param uv - The uv for the mesh.\n   */\n  setUVs(uv: Vector2[] | null): void;\n  /**\n   * Set per-vertex uv for the mesh by channelIndex.\n   * @param uv - The uv for the mesh.\n   * @param channelIndex - The index of uv channels, in [0 ~ 7] range.\n   */\n  setUVs(uv: Vector2[] | null, channelIndex: number): void;\n  setUVs(uv: Vector2[] | null, channelIndex?: number): void {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n\n    if (uv.length !== this._vertexCount) {\n      throw \"The array provided needs to be the same size as vertex count.\";\n    }\n\n    channelIndex = channelIndex ?? 0;\n    switch (channelIndex) {\n      case 0:\n        this._vertexSlotChanged = !!this._uv !== !!uv;\n        this._vertexChangeFlag |= ValueChanged.UV;\n        this._uv = uv;\n        break;\n      case 1:\n        this._vertexSlotChanged = !!this._uv1 !== !!uv;\n        this._vertexChangeFlag |= ValueChanged.UV1;\n        this._uv1 = uv;\n        break;\n      case 2:\n        this._vertexSlotChanged = !!this._uv2 !== !!uv;\n        this._vertexChangeFlag |= ValueChanged.UV2;\n        this._uv2 = uv;\n        break;\n      case 3:\n        this._vertexSlotChanged = !!this._uv3 !== !!uv;\n        this._vertexChangeFlag |= ValueChanged.UV3;\n        this._uv3 = uv;\n        break;\n      case 4:\n        this._vertexSlotChanged = !!this._uv4 !== !!uv;\n        this._vertexChangeFlag |= ValueChanged.UV4;\n        this._uv4 = uv;\n        break;\n      case 5:\n        this._vertexSlotChanged = !!this._uv5 !== !!uv;\n        this._vertexChangeFlag |= ValueChanged.UV5;\n        this._uv5 = uv;\n        break;\n      case 6:\n        this._vertexSlotChanged = !!this._uv6 !== !!uv;\n        this._vertexChangeFlag |= ValueChanged.UV6;\n        this._uv6 = uv;\n        break;\n      case 7:\n        this._vertexSlotChanged = !!this._uv7 !== !!uv;\n        this._vertexChangeFlag |= ValueChanged.UV7;\n        this._uv7 = uv;\n        break;\n      default:\n        throw \"The index of channel needs to be in range [0 - 7].\";\n    }\n  }\n\n  /**\n   * Get uv for the mesh.\n   * @remarks Please call the setUV() method after modification to ensure that the modification takes effect.\n   */\n  getUVs(): Vector2[] | null;\n  /**\n   * Get uv for the mesh by channelIndex.\n   * @param channelIndex - The index of uv channels, in [0 ~ 7] range.\n   * @remarks Please call the setUV() method after modification to ensure that the modification takes effect.\n   */\n  getUVs(channelIndex: number): Vector2[] | null;\n  getUVs(channelIndex?: number): Vector2[] | null {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n    channelIndex = channelIndex ?? 0;\n    switch (channelIndex) {\n      case 0:\n        return this._uv;\n      case 1:\n        return this._uv1;\n      case 2:\n        return this._uv2;\n      case 3:\n        return this._uv3;\n      case 4:\n        return this._uv4;\n      case 5:\n        return this._uv5;\n      case 6:\n        return this._uv6;\n      case 7:\n        return this._uv7;\n    }\n    throw \"The index of channel needs to be in range [0 - 7].\";\n  }\n\n  /**\n   * Set indices for the mesh.\n   * @param indices - The indices for the mesh.\n   */\n  setIndices(indices: Uint8Array | Uint16Array | Uint32Array): void {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n\n    if (this._indices !== indices) {\n      this._indices = indices;\n      if (indices instanceof Uint8Array) {\n        this._indicesFormat = IndexFormat.UInt8;\n      } else if (indices instanceof Uint16Array) {\n        this._indicesFormat = IndexFormat.UInt16;\n      } else if (indices instanceof Uint32Array) {\n        this._indicesFormat = IndexFormat.UInt32;\n      }\n    }\n\n    this._indicesChangeFlag = true;\n  }\n\n  /**\n   * Get indices for the mesh.\n   */\n  getIndices(): Uint8Array | Uint16Array | Uint32Array {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n    return this._indices;\n  }\n\n  /**\n   * Add a BlendShape for this ModelMesh.\n   * @param blendShape - The BlendShape\n   */\n  addBlendShape(blendShape: BlendShape): void {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n\n    this._blendShapeManager._addBlendShape(blendShape);\n  }\n\n  /**\n   * Clear all BlendShapes.\n   */\n  clearBlendShapes(): void {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n    this._blendShapeManager._clearBlendShapes();\n  }\n\n  /**\n   * Get name of BlendShape by given index.\n   * @param index - The index of BlendShape\n   * @returns The name of BlendShape\n   */\n  getBlendShapeName(index: number): string {\n    if (this._accessible) {\n      const blendShapes = this._blendShapeManager._blendShapes;\n      return blendShapes[index].name;\n    } else {\n      return this._blendShapeManager._blendShapeNames[index];\n    }\n  }\n\n  /**\n   * Upload Mesh Data to GPU.\n   * @param noLongerAccessible - Whether to access data later. If true, you'll never access data anymore (free memory cache)\n   */\n  uploadData(noLongerAccessible: boolean): void {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n\n    const { _vertexCount: vertexCount } = this;\n    const vertexElementChanged = this._updateVertexElements();\n    const vertexCountChange = this._lastUploadVertexCount !== vertexCount;\n\n    // Vertex count change\n    const vertexBuffer = this._vertexBufferBindings[0]?._buffer;\n    if (vertexCountChange) {\n      vertexBuffer?.destroy();\n      const elementCount = this._vertexStrideFloat;\n      const vertexFloatCount = elementCount * vertexCount;\n      const vertices = new Float32Array(vertexFloatCount);\n      this._verticesFloat32 = vertices;\n      this._verticesUint8 = new Uint8Array(vertices.buffer);\n      this._updateVertices(vertices, true);\n\n      const newVertexBuffer = new Buffer(\n        this._engine,\n        BufferBindFlag.VertexBuffer,\n        vertices,\n        noLongerAccessible ? BufferUsage.Static : BufferUsage.Dynamic\n      );\n\n      this._setVertexBufferBinding(0, new VertexBufferBinding(newVertexBuffer, elementCount * 4));\n      this._lastUploadVertexCount = vertexCount;\n    } else {\n      if (this._vertexChangeFlag & ValueChanged.All) {\n        const vertices = this._verticesFloat32;\n        this._updateVertices(vertices, vertexElementChanged);\n        vertexBuffer.setData(vertices);\n      }\n    }\n\n    const { _indices: indices } = this;\n    const indexBuffer = this._indexBufferBinding?._buffer;\n    if (indices) {\n      if (!indexBuffer || indices.byteLength != indexBuffer.byteLength) {\n        indexBuffer?.destroy();\n        const newIndexBuffer = new Buffer(this._engine, BufferBindFlag.IndexBuffer, indices);\n        this._setIndexBufferBinding(new IndexBufferBinding(newIndexBuffer, this._indicesFormat));\n        this._indicesChangeFlag = false;\n      } else if (this._indicesChangeFlag) {\n        indexBuffer.setData(indices);\n        if (this._indexBufferBinding._format !== this._indicesFormat) {\n          this._setIndexBufferBinding(new IndexBufferBinding(indexBuffer, this._indicesFormat));\n        }\n        this._indicesChangeFlag = false;\n      }\n    } else if (indexBuffer) {\n      indexBuffer.destroy();\n      this._setIndexBufferBinding(null);\n    }\n\n    const { _blendShapeManager: blendShapeManager } = this;\n    blendShapeManager._blendShapeCount > 0 && blendShapeManager._update(vertexCountChange, noLongerAccessible);\n\n    if (noLongerAccessible) {\n      this._accessible = false;\n      this._releaseCache();\n    }\n  }\n\n  /**\n   * @override\n   * @internal\n   */\n  _onDestroy(): void {\n    super._onDestroy();\n    this._accessible && this._releaseCache();\n  }\n\n  private _updateVertexElements(): boolean {\n    const blendShapeManager = this._blendShapeManager;\n    const attributeMode = !blendShapeManager._useTextureMode();\n\n    if (this._vertexSlotChanged || (attributeMode && blendShapeManager._vertexElementsNeedUpdate())) {\n      let offset = 12;\n      let elementCount = 3;\n      this._clearVertexElements();\n      this._addVertexElement(POSITION_VERTEX_ELEMENT);\n\n      if (this._normals) {\n        this._addVertexElement(new VertexElement(\"NORMAL\", offset, VertexElementFormat.Vector3, 0));\n        offset += 12;\n        elementCount += 3;\n      }\n      if (this._colors) {\n        this._addVertexElement(new VertexElement(\"COLOR_0\", offset, VertexElementFormat.Vector4, 0));\n        offset += 16;\n        elementCount += 4;\n      }\n      if (this._boneWeights) {\n        this._addVertexElement(new VertexElement(\"WEIGHTS_0\", offset, VertexElementFormat.Vector4, 0));\n        offset += 16;\n        elementCount += 4;\n      }\n      if (this._boneIndices) {\n        this._addVertexElement(new VertexElement(\"JOINTS_0\", offset, VertexElementFormat.UByte4, 0));\n        offset += 4;\n        elementCount += 1;\n      }\n      if (this._tangents) {\n        this._addVertexElement(new VertexElement(\"TANGENT\", offset, VertexElementFormat.Vector4, 0));\n        offset += 16;\n        elementCount += 4;\n      }\n      if (this._uv) {\n        this._addVertexElement(new VertexElement(\"TEXCOORD_0\", offset, VertexElementFormat.Vector2, 0));\n        offset += 8;\n        elementCount += 2;\n      }\n      if (this._uv1) {\n        this._addVertexElement(new VertexElement(\"TEXCOORD_1\", offset, VertexElementFormat.Vector2, 0));\n        offset += 8;\n        elementCount += 2;\n      }\n      if (this._uv2) {\n        this._addVertexElement(new VertexElement(\"TEXCOORD_2\", offset, VertexElementFormat.Vector2, 0));\n        offset += 8;\n        elementCount += 2;\n      }\n      if (this._uv3) {\n        this._addVertexElement(new VertexElement(\"TEXCOORD_3\", offset, VertexElementFormat.Vector2, 0));\n        offset += 8;\n        elementCount += 2;\n      }\n      if (this._uv4) {\n        this._addVertexElement(new VertexElement(\"TEXCOORD_4\", offset, VertexElementFormat.Vector2, 0));\n        offset += 8;\n        elementCount += 2;\n      }\n      if (this._uv5) {\n        this._addVertexElement(new VertexElement(\"TEXCOORD_5\", offset, VertexElementFormat.Vector2, 0));\n        offset += 8;\n        elementCount += 2;\n      }\n      if (this._uv6) {\n        this._addVertexElement(new VertexElement(\"TEXCOORD_6\", offset, VertexElementFormat.Vector2, 0));\n        offset += 8;\n        elementCount += 2;\n      }\n      if (this._uv7) {\n        this._addVertexElement(new VertexElement(\"TEXCOORD_7\", offset, VertexElementFormat.Vector2, 0));\n        offset += 8;\n        elementCount += 2;\n      }\n      if (attributeMode) {\n        blendShapeManager._blendShapeCount > 0 && blendShapeManager._addVertexElements(this);\n      }\n      this._vertexSlotChanged = false;\n      this._vertexStrideFloat = elementCount;\n      return true;\n    }\n    return false;\n  }\n\n  private _updateVertices(vertices: Float32Array, force: boolean): void {\n    // prettier-ignore\n    const { _vertexStrideFloat,_vertexCount, _positions, _normals, _colors, _vertexChangeFlag, _boneWeights, _boneIndices, _tangents, _uv, _uv1, _uv2, _uv3, _uv4, _uv5, _uv6, _uv7 } = this;\n\n    force && (this._vertexChangeFlag = ValueChanged.All);\n\n    if (_vertexChangeFlag & ValueChanged.Position) {\n      for (let i = 0; i < _vertexCount; i++) {\n        const start = _vertexStrideFloat * i;\n        const position = _positions[i];\n        vertices[start] = position.x;\n        vertices[start + 1] = position.y;\n        vertices[start + 2] = position.z;\n      }\n    }\n\n    let offset = 3;\n\n    if (_normals) {\n      if (_vertexChangeFlag & ValueChanged.Normal) {\n        for (let i = 0; i < _vertexCount; i++) {\n          const start = _vertexStrideFloat * i + offset;\n          const normal = _normals[i];\n          if (normal) {\n            vertices[start] = normal.x;\n            vertices[start + 1] = normal.y;\n            vertices[start + 2] = normal.z;\n          }\n        }\n      }\n      offset += 3;\n    }\n\n    if (_colors) {\n      if (_vertexChangeFlag & ValueChanged.Color) {\n        for (let i = 0; i < _vertexCount; i++) {\n          const start = _vertexStrideFloat * i + offset;\n          const color = _colors[i];\n          if (color) {\n            vertices[start] = color.r;\n            vertices[start + 1] = color.g;\n            vertices[start + 2] = color.b;\n            vertices[start + 3] = color.a;\n          }\n        }\n      }\n      offset += 4;\n    }\n\n    if (_boneWeights) {\n      if (_vertexChangeFlag & ValueChanged.BoneWeight) {\n        for (let i = 0; i < _vertexCount; i++) {\n          const start = _vertexStrideFloat * i + offset;\n          const weight = _boneWeights[i];\n          if (weight) {\n            vertices[start] = weight.x;\n            vertices[start + 1] = weight.y;\n            vertices[start + 2] = weight.z;\n            vertices[start + 3] = weight.w;\n          }\n        }\n      }\n      offset += 4;\n    }\n\n    if (_boneIndices) {\n      if (_vertexChangeFlag & ValueChanged.BoneIndex) {\n        const { _verticesUint8 } = this;\n        for (let i = 0; i < _vertexCount; i++) {\n          const start = _vertexStrideFloat * i + offset;\n          const joint = _boneIndices[i];\n          if (joint) {\n            const internalStart = start * 4;\n            _verticesUint8[internalStart] = joint.x;\n            _verticesUint8[internalStart + 1] = joint.y;\n            _verticesUint8[internalStart + 2] = joint.z;\n            _verticesUint8[internalStart + 3] = joint.w;\n          }\n        }\n      }\n      offset += 1;\n    }\n\n    if (_tangents) {\n      if (_vertexChangeFlag & ValueChanged.Tangent) {\n        for (let i = 0; i < _vertexCount; i++) {\n          const start = _vertexStrideFloat * i + offset;\n          const tangent = _tangents[i];\n          if (tangent) {\n            vertices[start] = tangent.x;\n            vertices[start + 1] = tangent.y;\n            vertices[start + 2] = tangent.z;\n            vertices[start + 3] = tangent.w;\n          }\n        }\n      }\n      offset += 4;\n    }\n    if (_uv) {\n      if (_vertexChangeFlag & ValueChanged.UV) {\n        for (let i = 0; i < _vertexCount; i++) {\n          const start = _vertexStrideFloat * i + offset;\n          const uv = _uv[i];\n          if (uv) {\n            vertices[start] = uv.x;\n            vertices[start + 1] = uv.y;\n          }\n        }\n      }\n      offset += 2;\n    }\n    if (_uv1) {\n      if (_vertexChangeFlag & ValueChanged.UV1) {\n        for (let i = 0; i < _vertexCount; i++) {\n          const start = _vertexStrideFloat * i + offset;\n          const uv = _uv1[i];\n          if (uv) {\n            vertices[start] = uv.x;\n            vertices[start + 1] = uv.y;\n          }\n        }\n      }\n      offset += 2;\n    }\n    if (_uv2) {\n      if (_vertexChangeFlag & ValueChanged.UV2) {\n        for (let i = 0; i < _vertexCount; i++) {\n          const start = _vertexStrideFloat * i + offset;\n          const uv = _uv2[i];\n          if (uv) {\n            vertices[start] = uv.x;\n            vertices[start + 1] = uv.y;\n          }\n        }\n      }\n      offset += 2;\n    }\n    if (_uv3) {\n      if (_vertexChangeFlag & ValueChanged.UV3) {\n        for (let i = 0; i < _vertexCount; i++) {\n          const start = _vertexStrideFloat * i + offset;\n          const uv = _uv3[i];\n          if (uv) {\n            vertices[start] = uv.x;\n            vertices[start + 1] = uv.y;\n          }\n        }\n      }\n      offset += 2;\n    }\n    if (_uv4) {\n      if (_vertexChangeFlag & ValueChanged.UV4) {\n        for (let i = 0; i < _vertexCount; i++) {\n          const start = _vertexStrideFloat * i + offset;\n          const uv = _uv4[i];\n          if (uv) {\n            vertices[start] = uv.x;\n            vertices[start + 1] = uv.y;\n          }\n        }\n      }\n      offset += 2;\n    }\n    if (_uv5) {\n      if (_vertexChangeFlag & ValueChanged.UV5) {\n        for (let i = 0; i < _vertexCount; i++) {\n          const start = _vertexStrideFloat * i + offset;\n          const uv = _uv5[i];\n          if (uv) {\n            vertices[start] = uv.x;\n            vertices[start + 1] = uv.y;\n          }\n        }\n      }\n      offset += 2;\n    }\n    if (_uv6) {\n      if (_vertexChangeFlag & ValueChanged.UV6) {\n        for (let i = 0; i < _vertexCount; i++) {\n          const start = _vertexStrideFloat * i + offset;\n          const uv = _uv6[i];\n          if (uv) {\n            vertices[start] = uv.x;\n            vertices[start + 1] = uv.y;\n          }\n        }\n      }\n      offset += 2;\n    }\n    if (_uv7) {\n      if (_vertexChangeFlag & ValueChanged.UV7) {\n        for (let i = 0; i < _vertexCount; i++) {\n          const start = _vertexStrideFloat * i + offset;\n          const uv = _uv7[i];\n          if (uv) {\n            vertices[start] = uv.x;\n            vertices[start + 1] = uv.y;\n          }\n        }\n      }\n      offset += 2;\n    }\n    this._vertexChangeFlag = 0;\n  }\n\n  private _releaseCache(): void {\n    this._verticesUint8 = null;\n    this._indices = null;\n    this._verticesFloat32 = null;\n    this._positions.length = 0;\n    this._tangents = null;\n    this._normals = null;\n    this._colors = null;\n    this._uv = null;\n    this._uv1 = null;\n    this._uv2 = null;\n    this._uv3 = null;\n    this._uv4 = null;\n    this._uv5 = null;\n    this._uv6 = null;\n    this._uv7 = null;\n    this._blendShapeManager._releaseMemoryCache();\n  }\n}\n\nconst POSITION_VERTEX_ELEMENT = new VertexElement(\"POSITION\", 0, VertexElementFormat.Vector3, 0);\n\nenum ValueChanged {\n  Position = 0x1,\n  Normal = 0x2,\n  Color = 0x4,\n  Tangent = 0x8,\n  BoneWeight = 0x10,\n  BoneIndex = 0x20,\n  UV = 0x40,\n  UV1 = 0x80,\n  UV2 = 0x100,\n  UV3 = 0x200,\n  UV4 = 0x400,\n  UV5 = 0x800,\n  UV6 = 0x1000,\n  UV7 = 0x2000,\n  All = 0xffff\n}\n","import { Matrix } from \"@oasis-engine/math\";\nimport { EngineObject } from \"../base/EngineObject\";\nimport { Entity } from \"../Entity\";\n\n/**\n * Mesh skin data, equal glTF skins define\n */\nexport class Skin extends EngineObject {\n  public inverseBindMatrices: Matrix[];\n  public joints: string[];\n  public skeleton: string;\n  /**\n   * Constructor of skin\n   * @param name - name\n   */\n  constructor(public name: string) {\n    super(null);\n    this.inverseBindMatrices = []; // inverse bind matrix array\n    this.joints = []; // joints name array, element type: string\n    this.skeleton = \"none\"; // root bone name\n  }\n}\n","import { BoundingBox } from \"@oasis-engine/math\";\nimport { Logger } from \"../base/Logger\";\nimport { BoolUpdateFlag } from \"../BoolUpdateFlag\";\nimport { Camera } from \"../Camera\";\nimport { ignoreClone } from \"../clone/CloneManager\";\nimport { ICustomClone } from \"../clone/ComponentCloner\";\nimport { Entity } from \"../Entity\";\nimport { Mesh } from \"../graphic/Mesh\";\nimport { Renderer } from \"../Renderer\";\nimport { Shader } from \"../shader/Shader\";\n\n/**\n * MeshRenderer Component.\n */\nexport class MeshRenderer extends Renderer implements ICustomClone {\n  private static _uvMacro = Shader.getMacroByName(\"O3_HAS_UV\");\n  private static _uv1Macro = Shader.getMacroByName(\"O3_HAS_UV1\");\n  private static _normalMacro = Shader.getMacroByName(\"O3_HAS_NORMAL\");\n  private static _tangentMacro = Shader.getMacroByName(\"O3_HAS_TANGENT\");\n  private static _vertexColorMacro = Shader.getMacroByName(\"O3_HAS_VERTEXCOLOR\");\n\n  /** @internal */\n  @ignoreClone\n  _mesh: Mesh;\n  @ignoreClone\n  private _meshUpdateFlag: BoolUpdateFlag;\n\n  /**\n   * @internal\n   */\n  constructor(entity: Entity) {\n    super(entity);\n  }\n\n  /**\n   * Mesh assigned to the renderer.\n   */\n  get mesh() {\n    return this._mesh;\n  }\n\n  set mesh(mesh: Mesh) {\n    if (this._mesh !== mesh) {\n      this._setMesh(mesh);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _render(camera: Camera): void {\n    const mesh = this._mesh;\n    if (mesh) {\n      if (this._meshUpdateFlag.flag) {\n        const shaderData = this.shaderData;\n        const vertexElements = mesh._vertexElements;\n\n        shaderData.disableMacro(MeshRenderer._uvMacro);\n        shaderData.disableMacro(MeshRenderer._uv1Macro);\n        shaderData.disableMacro(MeshRenderer._normalMacro);\n        shaderData.disableMacro(MeshRenderer._tangentMacro);\n        shaderData.disableMacro(MeshRenderer._vertexColorMacro);\n\n        for (let i = 0, n = vertexElements.length; i < n; i++) {\n          const { semantic } = vertexElements[i];\n          switch (semantic) {\n            case \"TEXCOORD_0\":\n              shaderData.enableMacro(MeshRenderer._uvMacro);\n              break;\n            case \"TEXCOORD_1\":\n              shaderData.enableMacro(MeshRenderer._uv1Macro);\n              break;\n            case \"NORMAL\":\n              shaderData.enableMacro(MeshRenderer._normalMacro);\n              break;\n            case \"TANGENT\":\n              shaderData.enableMacro(MeshRenderer._tangentMacro);\n              break;\n            case \"COLOR_0\":\n              shaderData.enableMacro(MeshRenderer._vertexColorMacro);\n              break;\n          }\n        }\n        this._meshUpdateFlag.flag = false;\n      }\n\n      const subMeshes = mesh.subMeshes;\n      const renderPipeline = camera._renderPipeline;\n      const renderElementPool = this._engine._renderElementPool;\n      for (let i = 0, n = subMeshes.length; i < n; i++) {\n        const material = this._materials[i];\n        if (material) {\n          const element = renderElementPool.getFromPool();\n          element.setValue(this, mesh, subMeshes[i], material);\n          renderPipeline.pushPrimitive(element);\n        }\n      }\n    } else {\n      Logger.error(\"mesh is null.\");\n    }\n  }\n\n  /**\n   * @internal\n   * @override\n   */\n  _onDestroy() {\n    super._onDestroy();\n    const mesh = this._mesh;\n    if (mesh && !mesh.destroyed) {\n      mesh._addRefCount(-1);\n      this._mesh = null;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _cloneTo(target: MeshRenderer): void {\n    target.mesh = this._mesh;\n  }\n\n  /**\n   * @override\n   */\n  protected _updateBounds(worldBounds: BoundingBox): void {\n    const mesh = this._mesh;\n    if (mesh) {\n      const localBounds = mesh.bounds;\n      const worldMatrix = this._entity.transform.worldMatrix;\n      BoundingBox.transform(localBounds, worldMatrix, worldBounds);\n    } else {\n      worldBounds.min.set(0, 0, 0);\n      worldBounds.max.set(0, 0, 0);\n    }\n  }\n\n  protected _setMesh(mesh: Mesh): void {\n    const lastMesh = this._mesh;\n    if (lastMesh) {\n      lastMesh._addRefCount(-1);\n      this._meshUpdateFlag.destroy();\n    }\n    if (mesh) {\n      mesh._addRefCount(1);\n      this._meshUpdateFlag = mesh.registerUpdateFlag();\n    }\n    this._mesh = mesh;\n  }\n}\n","import { Matrix } from \"@oasis-engine/math\";\nimport { Logger } from \"../base/Logger\";\nimport { ignoreClone } from \"../clone/CloneManager\";\nimport { Entity } from \"../Entity\";\nimport { RenderContext } from \"../RenderPipeline/RenderContext\";\nimport { Shader } from \"../shader\";\nimport { TextureFilterMode } from \"../texture/enums/TextureFilterMode\";\nimport { TextureFormat } from \"../texture/enums/TextureFormat\";\nimport { Texture2D } from \"../texture/Texture2D\";\nimport { MeshRenderer } from \"./MeshRenderer\";\nimport { ModelMesh } from \"./ModelMesh\";\nimport { Skin } from \"./Skin\";\n\n/**\n * SkinnedMeshRenderer.\n */\nexport class SkinnedMeshRenderer extends MeshRenderer {\n  private static _jointCountProperty = Shader.getPropertyByName(\"u_jointCount\");\n  private static _jointSamplerProperty = Shader.getPropertyByName(\"u_jointSampler\");\n  private static _jointMatrixProperty = Shader.getPropertyByName(\"u_jointMatrix\");\n\n  private static _maxJoints: number = 0;\n\n  @ignoreClone\n  public matrixPalette: Float32Array;\n  @ignoreClone\n  public jointNodes: Entity[];\n  @ignoreClone\n  public jointTexture: Texture2D;\n\n  @ignoreClone\n  private _hasInitJoints: boolean = false;\n  @ignoreClone\n  private _mat: Matrix;\n  @ignoreClone\n  /** Whether to use joint texture. Automatically used when the device can't support the maximum number of bones. */\n  private _useJointTexture: boolean = false;\n  private _skin: Skin;\n  @ignoreClone\n  private _blendShapeWeights: Float32Array;\n\n  /** @internal */\n  @ignoreClone\n  _condensedBlendShapeWeights: Float32Array;\n\n  /**\n   * The weights of the BlendShapes.\n   * @remarks Array index is BlendShape index.\n   */\n  get blendShapeWeights(): Float32Array {\n    this._checkBlendShapeWeightLength();\n    return this._blendShapeWeights;\n  }\n\n  set blendShapeWeights(value: Float32Array) {\n    this._checkBlendShapeWeightLength();\n    const blendShapeWeights = this._blendShapeWeights;\n    if (value.length <= blendShapeWeights.length) {\n      blendShapeWeights.set(value);\n    } else {\n      for (let i = 0, n = blendShapeWeights.length; i < n; i++) {\n        blendShapeWeights[i] = value[i];\n      }\n    }\n  }\n\n  /**\n   * Constructor of SkinnedMeshRenderer\n   * @param entity - Entity\n   */\n  constructor(entity: Entity) {\n    super(entity);\n    this._mat = new Matrix();\n    this._skin = null;\n  }\n\n  /**\n   * @internal\n   */\n  _updateShaderData(context: RenderContext) {\n    super._updateShaderData(context);\n\n    const shaderData = this.shaderData;\n    if (!this._useJointTexture && this.matrixPalette) {\n      shaderData.setFloatArray(SkinnedMeshRenderer._jointMatrixProperty, this.matrixPalette);\n    }\n\n    const mesh = <ModelMesh>this.mesh;\n    mesh._blendShapeManager._updateShaderData(shaderData, this);\n  }\n\n  /**\n   * Skin Object.\n   */\n  get skin() {\n    return this._skin;\n  }\n\n  set skin(skin) {\n    this._skin = skin;\n  }\n\n  _initJoints() {\n    if (!this._skin) return;\n    const skin = this._skin;\n\n    const joints = skin.joints;\n    const jointNodes = [];\n    for (let i = joints.length - 1; i >= 0; i--) {\n      jointNodes[i] = this.findByNodeName(this.entity, joints[i]);\n    } // end of for\n    this.matrixPalette = new Float32Array(jointNodes.length * 16);\n    this.jointNodes = jointNodes;\n\n    /** Whether to use a skeleton texture */\n    const rhi = this.entity.engine._hardwareRenderer;\n    if (!rhi) return;\n    const maxAttribUniformVec4 = rhi.renderStates.getParameter(rhi.gl.MAX_VERTEX_UNIFORM_VECTORS);\n    const maxJoints = Math.floor((maxAttribUniformVec4 - 30) / 4);\n    const shaderData = this.shaderData;\n    const jointCount = jointNodes.length;\n\n    if (jointCount) {\n      shaderData.enableMacro(\"O3_HAS_SKIN\");\n      shaderData.setInt(SkinnedMeshRenderer._jointCountProperty, jointCount);\n      if (jointCount > maxJoints) {\n        if (rhi.canIUseMoreJoints) {\n          this._useJointTexture = true;\n        } else {\n          Logger.error(\n            `component's joints count(${jointCount}) greater than device's MAX_VERTEX_UNIFORM_VECTORS number ${maxAttribUniformVec4}, and don't support jointTexture in this device. suggest joint count less than ${maxJoints}.`,\n            this\n          );\n        }\n      } else {\n        const maxJoints = Math.max(SkinnedMeshRenderer._maxJoints, jointCount);\n        SkinnedMeshRenderer._maxJoints = maxJoints;\n        shaderData.disableMacro(\"O3_USE_JOINT_TEXTURE\");\n        shaderData.enableMacro(\"O3_JOINTS_NUM\", maxJoints.toString());\n      }\n    } else {\n      shaderData.disableMacro(\"O3_HAS_SKIN\");\n    }\n  }\n\n  private findByNodeName(entity: Entity, nodeName: string) {\n    if (!entity) return null;\n\n    const n = entity.findByName(nodeName);\n\n    if (n) return n;\n\n    return this.findByNodeName(entity.parent, nodeName);\n  }\n\n  /**\n   * @internal\n   */\n  update() {\n    if (!this._hasInitJoints) {\n      this._initJoints();\n      this._hasInitJoints = true;\n    }\n    if (this._skin) {\n      const joints = this.jointNodes;\n      const ibms = this._skin.inverseBindMatrices;\n      const matrixPalette = this.matrixPalette;\n      const worldToLocal = this.entity.getInvModelMatrix();\n\n      const mat = this._mat;\n      for (let i = joints.length - 1; i >= 0; i--) {\n        mat.identity();\n        if (joints[i]) {\n          Matrix.multiply(joints[i].transform.worldMatrix, ibms[i], mat);\n        } else {\n          mat.copyFrom(ibms[i]);\n        }\n        Matrix.multiply(worldToLocal, mat, mat);\n        matrixPalette.set(mat.elements, i * 16);\n      }\n      if (this._useJointTexture) {\n        this.createJointTexture();\n      }\n    }\n  }\n\n  /**\n   * Generate joint texture.\n   * Format: (4 * RGBA) * jointCont\n   */\n  createJointTexture(): void {\n    if (!this.jointTexture) {\n      const engine = this.engine;\n      const rhi = engine._hardwareRenderer;\n      if (!rhi) return;\n      this.jointTexture = new Texture2D(engine, 4, this.jointNodes.length, TextureFormat.R32G32B32A32, false);\n      this.jointTexture.filterMode = TextureFilterMode.Point;\n      this.shaderData.enableMacro(\"O3_USE_JOINT_TEXTURE\");\n      this.shaderData.setTexture(SkinnedMeshRenderer._jointSamplerProperty, this.jointTexture);\n    }\n    this.jointTexture.setPixelBuffer(this.matrixPalette);\n  }\n\n  /**\n   * @internal\n   */\n  _cloneTo(target: SkinnedMeshRenderer): void {\n    super._cloneTo(target);\n    this._blendShapeWeights && (target._blendShapeWeights = this._blendShapeWeights.slice());\n  }\n\n  private _checkBlendShapeWeightLength(): void {\n    const mesh = <ModelMesh>this._mesh;\n    const newBlendShapeCount = mesh ? mesh.blendShapeCount : 0;\n    const lastBlendShapeWeights = this._blendShapeWeights;\n    if (lastBlendShapeWeights) {\n      if (lastBlendShapeWeights.length !== newBlendShapeCount) {\n        const newBlendShapeWeights = new Float32Array(newBlendShapeCount);\n        if (newBlendShapeCount > lastBlendShapeWeights.length) {\n          newBlendShapeWeights.set(lastBlendShapeWeights);\n        } else {\n          for (let i = 0, n = lastBlendShapeWeights.length; i < n; i++) {\n            lastBlendShapeWeights[i] = newBlendShapeWeights[i];\n          }\n        }\n        this._blendShapeWeights = newBlendShapeWeights;\n      }\n    } else {\n      this._blendShapeWeights = new Float32Array(newBlendShapeCount);\n    }\n  }\n}\n","import { Vector2, Vector3 } from \"@oasis-engine/math\";\nimport { GLCapabilityType } from \"../base/Constant\";\nimport { Engine } from \"../Engine\";\nimport { ModelMesh } from \"./ModelMesh\";\n\n/**\n * Used to generate common primitive meshes.\n */\nexport class PrimitiveMesh {\n  /**\n   * Create a sphere mesh.\n   * @param engine - Engine\n   * @param radius - Sphere radius\n   * @param segments - Number of segments\n   * @param noLongerAccessible - No longer access the vertices of the mesh after creation\n   * @returns Sphere model mesh\n   */\n  static createSphere(\n    engine: Engine,\n    radius: number = 0.5,\n    segments: number = 18,\n    noLongerAccessible: boolean = true\n  ): ModelMesh {\n    const mesh = new ModelMesh(engine);\n    segments = Math.max(2, Math.floor(segments));\n\n    const count = segments + 1;\n    const vertexCount = count * count;\n    const rectangleCount = segments * segments;\n    const indices = PrimitiveMesh._generateIndices(engine, vertexCount, rectangleCount * 6);\n    const thetaRange = Math.PI;\n    const alphaRange = thetaRange * 2;\n    const countReciprocal = 1.0 / count;\n    const segmentsReciprocal = 1.0 / segments;\n\n    const positions: Vector3[] = new Array(vertexCount);\n    const normals: Vector3[] = new Array(vertexCount);\n    const uvs: Vector2[] = new Array(vertexCount);\n\n    for (let i = 0; i < vertexCount; ++i) {\n      const x = i % count;\n      const y = (i * countReciprocal) | 0;\n      const u = x * segmentsReciprocal;\n      const v = y * segmentsReciprocal;\n      const alphaDelta = u * alphaRange;\n      const thetaDelta = v * thetaRange;\n      const sinTheta = Math.sin(thetaDelta);\n\n      let posX = -radius * Math.cos(alphaDelta) * sinTheta;\n      let posY = radius * Math.cos(thetaDelta);\n      let posZ = radius * Math.sin(alphaDelta) * sinTheta;\n\n      // Position\n      positions[i] = new Vector3(posX, posY, posZ);\n      // Normal\n      normals[i] = new Vector3(posX, posY, posZ);\n      // Texcoord\n      uvs[i] = new Vector2(u, v);\n    }\n\n    let offset = 0;\n    for (let i = 0; i < rectangleCount; ++i) {\n      const x = i % segments;\n      const y = (i * segmentsReciprocal) | 0;\n\n      const a = y * count + x;\n      const b = a + 1;\n      const c = a + count;\n      const d = c + 1;\n\n      indices[offset++] = b;\n      indices[offset++] = a;\n      indices[offset++] = d;\n      indices[offset++] = a;\n      indices[offset++] = c;\n      indices[offset++] = d;\n    }\n\n    const { bounds } = mesh;\n    bounds.min.set(-radius, -radius, -radius);\n    bounds.max.set(radius, radius, radius);\n\n    PrimitiveMesh._initialize(mesh, positions, normals, uvs, indices, noLongerAccessible);\n    return mesh;\n  }\n\n  /**\n   * Create a cuboid mesh.\n   * @param engine - Engine\n   * @param width - Cuboid width\n   * @param height - Cuboid height\n   * @param depth - Cuboid depth\n   * @param noLongerAccessible - No longer access the vertices of the mesh after creation\n   * @returns Cuboid model mesh\n   */\n  static createCuboid(\n    engine: Engine,\n    width: number = 1,\n    height: number = 1,\n    depth: number = 1,\n    noLongerAccessible: boolean = true\n  ): ModelMesh {\n    const mesh = new ModelMesh(engine);\n\n    const halfWidth: number = width / 2;\n    const halfHeight: number = height / 2;\n    const halfDepth: number = depth / 2;\n\n    const positions: Vector3[] = new Array(24);\n    const normals: Vector3[] = new Array(24);\n    const uvs: Vector2[] = new Array(24);\n\n    // Up\n    positions[0] = new Vector3(-halfWidth, halfHeight, -halfDepth);\n    positions[1] = new Vector3(halfWidth, halfHeight, -halfDepth);\n    positions[2] = new Vector3(halfWidth, halfHeight, halfDepth);\n    positions[3] = new Vector3(-halfWidth, halfHeight, halfDepth);\n    normals[0] = new Vector3(0, 1, 0);\n    normals[1] = new Vector3(0, 1, 0);\n    normals[2] = new Vector3(0, 1, 0);\n    normals[3] = new Vector3(0, 1, 0);\n    uvs[0] = new Vector2(0, 0);\n    uvs[1] = new Vector2(1, 0);\n    uvs[2] = new Vector2(1, 1);\n    uvs[3] = new Vector2(0, 1);\n    // Down\n    positions[4] = new Vector3(-halfWidth, -halfHeight, -halfDepth);\n    positions[5] = new Vector3(halfWidth, -halfHeight, -halfDepth);\n    positions[6] = new Vector3(halfWidth, -halfHeight, halfDepth);\n    positions[7] = new Vector3(-halfWidth, -halfHeight, halfDepth);\n    normals[4] = new Vector3(0, -1, 0);\n    normals[5] = new Vector3(0, -1, 0);\n    normals[6] = new Vector3(0, -1, 0);\n    normals[7] = new Vector3(0, -1, 0);\n    uvs[4] = new Vector2(0, 1);\n    uvs[5] = new Vector2(1, 1);\n    uvs[6] = new Vector2(1, 0);\n    uvs[7] = new Vector2(0, 0);\n    // Left\n    positions[8] = new Vector3(-halfWidth, halfHeight, -halfDepth);\n    positions[9] = new Vector3(-halfWidth, halfHeight, halfDepth);\n    positions[10] = new Vector3(-halfWidth, -halfHeight, halfDepth);\n    positions[11] = new Vector3(-halfWidth, -halfHeight, -halfDepth);\n    normals[8] = new Vector3(-1, 0, 0);\n    normals[9] = new Vector3(-1, 0, 0);\n    normals[10] = new Vector3(-1, 0, 0);\n    normals[11] = new Vector3(-1, 0, 0);\n    uvs[8] = new Vector2(0, 0);\n    uvs[9] = new Vector2(1, 0);\n    uvs[10] = new Vector2(1, 1);\n    uvs[11] = new Vector2(0, 1);\n    // Right\n    positions[12] = new Vector3(halfWidth, halfHeight, -halfDepth);\n    positions[13] = new Vector3(halfWidth, halfHeight, halfDepth);\n    positions[14] = new Vector3(halfWidth, -halfHeight, halfDepth);\n    positions[15] = new Vector3(halfWidth, -halfHeight, -halfDepth);\n    normals[12] = new Vector3(1, 0, 0);\n    normals[13] = new Vector3(1, 0, 0);\n    normals[14] = new Vector3(1, 0, 0);\n    normals[15] = new Vector3(1, 0, 0);\n    uvs[12] = new Vector2(1, 0);\n    uvs[13] = new Vector2(0, 0);\n    uvs[14] = new Vector2(0, 1);\n    uvs[15] = new Vector2(1, 1);\n    // Front\n    positions[16] = new Vector3(-halfWidth, halfHeight, halfDepth);\n    positions[17] = new Vector3(halfWidth, halfHeight, halfDepth);\n    positions[18] = new Vector3(halfWidth, -halfHeight, halfDepth);\n    positions[19] = new Vector3(-halfWidth, -halfHeight, halfDepth);\n    normals[16] = new Vector3(0, 0, 1);\n    normals[17] = new Vector3(0, 0, 1);\n    normals[18] = new Vector3(0, 0, 1);\n    normals[19] = new Vector3(0, 0, 1);\n    uvs[16] = new Vector2(0, 0);\n    uvs[17] = new Vector2(1, 0);\n    uvs[18] = new Vector2(1, 1);\n    uvs[19] = new Vector2(0, 1);\n    // Back\n    positions[20] = new Vector3(-halfWidth, halfHeight, -halfDepth);\n    positions[21] = new Vector3(halfWidth, halfHeight, -halfDepth);\n    positions[22] = new Vector3(halfWidth, -halfHeight, -halfDepth);\n    positions[23] = new Vector3(-halfWidth, -halfHeight, -halfDepth);\n    normals[20] = new Vector3(0, 0, -1);\n    normals[21] = new Vector3(0, 0, -1);\n    normals[22] = new Vector3(0, 0, -1);\n    normals[23] = new Vector3(0, 0, -1);\n    uvs[20] = new Vector2(1, 0);\n    uvs[21] = new Vector2(0, 0);\n    uvs[22] = new Vector2(0, 1);\n    uvs[23] = new Vector2(1, 1);\n\n    const indices = new Uint16Array(36);\n\n    // prettier-ignore\n    // Up\n    indices[0] = 0, indices[1] = 2, indices[2] = 1, indices[3] = 2, indices[4] = 0, indices[5] = 3,\n    // Down\n    indices[6] = 4, indices[7] = 6, indices[8] = 7, indices[9] = 6, indices[10] = 4, indices[11] = 5,\n    // Left\n    indices[12] = 8, indices[13] = 10, indices[14] = 9, indices[15] = 10, indices[16] = 8, indices[17] = 11,\n    // Right\n    indices[18] = 12, indices[19] = 14, indices[20] = 15, indices[21] = 14, indices[22] = 12, indices[23] = 13,\n    // Front\n    indices[24] = 16, indices[25] = 18, indices[26] = 17, indices[27] = 18, indices[28] = 16, indices[29] = 19,\n    // Back\n    indices[30] = 20, indices[31] = 22, indices[32] = 23, indices[33] = 22, indices[34] = 20, indices[35] = 21;\n\n    const { bounds } = mesh;\n    bounds.min.set(-halfWidth, -halfHeight, -halfDepth);\n    bounds.max.set(halfWidth, halfHeight, halfDepth);\n\n    PrimitiveMesh._initialize(mesh, positions, normals, uvs, indices, noLongerAccessible);\n    return mesh;\n  }\n\n  /**\n   * Create a plane mesh.\n   * @param engine - Engine\n   * @param width - Plane width\n   * @param height - Plane height\n   * @param horizontalSegments - Plane horizontal segments\n   * @param verticalSegments - Plane vertical segments\n   * @param noLongerAccessible - No longer access the vertices of the mesh after creation\n   * @returns Plane model mesh\n   */\n  static createPlane(\n    engine: Engine,\n    width: number = 1,\n    height: number = 1,\n    horizontalSegments: number = 1,\n    verticalSegments: number = 1,\n    noLongerAccessible: boolean = true\n  ): ModelMesh {\n    const mesh = new ModelMesh(engine);\n    horizontalSegments = Math.max(1, Math.floor(horizontalSegments));\n    verticalSegments = Math.max(1, Math.floor(verticalSegments));\n\n    const horizontalCount = horizontalSegments + 1;\n    const verticalCount = verticalSegments + 1;\n    const halfWidth = width / 2;\n    const halfHeight = height / 2;\n    const gridWidth = width / horizontalSegments;\n    const gridHeight = height / verticalSegments;\n    const vertexCount = horizontalCount * verticalCount;\n    const rectangleCount = verticalSegments * horizontalSegments;\n    const indices = PrimitiveMesh._generateIndices(engine, vertexCount, rectangleCount * 6);\n    const horizontalCountReciprocal = 1.0 / horizontalCount;\n    const horizontalSegmentsReciprocal = 1.0 / horizontalSegments;\n    const verticalSegmentsReciprocal = 1.0 / verticalSegments;\n\n    const positions: Vector3[] = new Array(vertexCount);\n    const normals: Vector3[] = new Array(vertexCount);\n    const uvs: Vector2[] = new Array(vertexCount);\n\n    for (let i = 0; i < vertexCount; ++i) {\n      const x = i % horizontalCount;\n      const z = (i * horizontalCountReciprocal) | 0;\n\n      // Position\n      positions[i] = new Vector3(x * gridWidth - halfWidth, 0, z * gridHeight - halfHeight);\n      // Normal\n      normals[i] = new Vector3(0, 1, 0);\n      // Texcoord\n      uvs[i] = new Vector2(x * horizontalSegmentsReciprocal, z * verticalSegmentsReciprocal);\n    }\n\n    let offset = 0;\n    for (let i = 0; i < rectangleCount; ++i) {\n      const x = i % horizontalSegments;\n      const y = (i * horizontalSegmentsReciprocal) | 0;\n\n      const a = y * horizontalCount + x;\n      const b = a + 1;\n      const c = a + horizontalCount;\n      const d = c + 1;\n\n      indices[offset++] = a;\n      indices[offset++] = c;\n      indices[offset++] = b;\n      indices[offset++] = c;\n      indices[offset++] = d;\n      indices[offset++] = b;\n    }\n\n    const { bounds } = mesh;\n    bounds.min.set(-halfWidth, 0, -halfHeight);\n    bounds.max.set(halfWidth, 0, halfHeight);\n\n    PrimitiveMesh._initialize(mesh, positions, normals, uvs, indices, noLongerAccessible);\n    return mesh;\n  }\n\n  /**\n   * Create a cylinder mesh.\n   * @param engine - Engine\n   * @param radiusTop - The radius of top cap\n   * @param radiusBottom - The radius of bottom cap\n   * @param height - The height of torso\n   * @param radialSegments - Cylinder radial segments\n   * @param heightSegments - Cylinder height segments\n   * @param noLongerAccessible - No longer access the vertices of the mesh after creation\n   * @returns Cylinder model mesh\n   */\n  static createCylinder(\n    engine: Engine,\n    radiusTop: number = 0.5,\n    radiusBottom: number = 0.5,\n    height: number = 2,\n    radialSegments: number = 20,\n    heightSegments: number = 1,\n    noLongerAccessible: boolean = true\n  ): ModelMesh {\n    const mesh = new ModelMesh(engine);\n    radialSegments = Math.floor(radialSegments);\n    heightSegments = Math.floor(heightSegments);\n\n    const radialCount = radialSegments + 1;\n    const verticalCount = heightSegments + 1;\n    const halfHeight = height * 0.5;\n    const unitHeight = height / heightSegments;\n    const torsoVertexCount = radialCount * verticalCount;\n    const torsoRectangleCount = radialSegments * heightSegments;\n    const capTriangleCount = radialSegments * 2;\n    const totalVertexCount = torsoVertexCount + 2 + capTriangleCount;\n    const indices = PrimitiveMesh._generateIndices(\n      engine,\n      totalVertexCount,\n      torsoRectangleCount * 6 + capTriangleCount * 3\n    );\n    const radialCountReciprocal = 1.0 / radialCount;\n    const radialSegmentsReciprocal = 1.0 / radialSegments;\n    const heightSegmentsReciprocal = 1.0 / heightSegments;\n\n    const positions: Vector3[] = new Array(totalVertexCount);\n    const normals: Vector3[] = new Array(totalVertexCount);\n    const uvs: Vector2[] = new Array(totalVertexCount);\n\n    let indicesOffset = 0;\n\n    // Create torso\n    const thetaStart = Math.PI;\n    const thetaRange = Math.PI * 2;\n    const radiusDiff = radiusBottom - radiusTop;\n    const slope = radiusDiff / height;\n    const radiusSlope = radiusDiff / heightSegments;\n\n    for (let i = 0; i < torsoVertexCount; ++i) {\n      const x = i % radialCount;\n      const y = (i * radialCountReciprocal) | 0;\n      const u = x * radialSegmentsReciprocal;\n      const v = y * heightSegmentsReciprocal;\n      const theta = thetaStart + u * thetaRange;\n      const sinTheta = Math.sin(theta);\n      const cosTheta = Math.cos(theta);\n      const radius = radiusBottom - y * radiusSlope;\n\n      let posX = radius * sinTheta;\n      let posY = y * unitHeight - halfHeight;\n      let posZ = radius * cosTheta;\n\n      // Position\n      positions[i] = new Vector3(posX, posY, posZ);\n      // Normal\n      normals[i] = new Vector3(sinTheta, slope, cosTheta);\n      // Texcoord\n      uvs[i] = new Vector2(u, 1 - v);\n    }\n\n    for (let i = 0; i < torsoRectangleCount; ++i) {\n      const x = i % radialSegments;\n      const y = (i * radialSegmentsReciprocal) | 0;\n\n      const a = y * radialCount + x;\n      const b = a + 1;\n      const c = a + radialCount;\n      const d = c + 1;\n\n      indices[indicesOffset++] = b;\n      indices[indicesOffset++] = c;\n      indices[indicesOffset++] = a;\n      indices[indicesOffset++] = b;\n      indices[indicesOffset++] = d;\n      indices[indicesOffset++] = c;\n    }\n\n    // Bottom position\n    positions[torsoVertexCount] = new Vector3(0, -halfHeight, 0);\n    // Bottom normal\n    normals[torsoVertexCount] = new Vector3(0, -1, 0);\n    // Bottom texcoord\n    uvs[torsoVertexCount] = new Vector2(0.5, 0.5);\n\n    // Top position\n    positions[torsoVertexCount + 1] = new Vector3(0, halfHeight, 0);\n    // Top normal\n    normals[torsoVertexCount + 1] = new Vector3(0, 1, 0);\n    // Top texcoord\n    uvs[torsoVertexCount + 1] = new Vector2(0.5, 0.5);\n\n    // Add cap vertices\n    let offset = torsoVertexCount + 2;\n\n    const diameterTopReciprocal = 1.0 / (radiusTop * 2);\n    const diameterBottomReciprocal = 1.0 / (radiusBottom * 2);\n    const positionStride = radialCount * heightSegments;\n    for (let i = 0; i < radialSegments; ++i) {\n      const curPosBottom = positions[i];\n      let curPosX = curPosBottom.x;\n      let curPosZ = curPosBottom.z;\n\n      // Bottom position\n      positions[offset] = new Vector3(curPosX, -halfHeight, curPosZ);\n      // Bottom normal\n      normals[offset] = new Vector3(0, -1, 0);\n      // Bottom texcoord\n      uvs[offset++] = new Vector2(curPosX * diameterBottomReciprocal + 0.5, 0.5 - curPosZ * diameterBottomReciprocal);\n\n      const curPosTop = positions[i + positionStride];\n      curPosX = curPosTop.x;\n      curPosZ = curPosTop.z;\n\n      // Top position\n      positions[offset] = new Vector3(curPosX, halfHeight, curPosZ);\n      // Top normal\n      normals[offset] = new Vector3(0, 1, 0);\n      // Top texcoord\n      uvs[offset++] = new Vector2(curPosX * diameterTopReciprocal + 0.5, curPosZ * diameterTopReciprocal + 0.5);\n    }\n\n    // Add cap indices\n    const topCapIndex = torsoVertexCount + 1;\n    const bottomIndiceIndex = torsoVertexCount + 2;\n    const topIndiceIndex = bottomIndiceIndex + 1;\n    for (let i = 0; i < radialSegments; ++i) {\n      const firstStride = i * 2;\n      const secondStride = i === radialSegments - 1 ? 0 : firstStride + 2;\n\n      // Bottom\n      indices[indicesOffset++] = torsoVertexCount;\n      indices[indicesOffset++] = bottomIndiceIndex + secondStride;\n      indices[indicesOffset++] = bottomIndiceIndex + firstStride;\n\n      // Top\n      indices[indicesOffset++] = topCapIndex;\n      indices[indicesOffset++] = topIndiceIndex + firstStride;\n      indices[indicesOffset++] = topIndiceIndex + secondStride;\n    }\n\n    const { bounds } = mesh;\n    const radiusMax = Math.max(radiusTop, radiusBottom);\n    bounds.min.set(-radiusMax, -halfHeight, -radiusMax);\n    bounds.max.set(radiusMax, halfHeight, radiusMax);\n\n    PrimitiveMesh._initialize(mesh, positions, normals, uvs, indices, noLongerAccessible);\n    return mesh;\n  }\n\n  /**\n   * Create a torus mesh.\n   * @param engine - Engine\n   * @param radius - Torus radius\n   * @param tubeRadius - Torus tube\n   * @param radialSegments - Torus radial segments\n   * @param tubularSegments - Torus tubular segments\n   * @param arc - Central angle\n   * @param noLongerAccessible - No longer access the vertices of the mesh after creation\n   * @returns Torus model mesh\n   */\n  static createTorus(\n    engine: Engine,\n    radius: number = 0.5,\n    tubeRadius: number = 0.1,\n    radialSegments: number = 30,\n    tubularSegments: number = 30,\n    arc: number = 360,\n    noLongerAccessible: boolean = true\n  ): ModelMesh {\n    const mesh = new ModelMesh(engine);\n    radialSegments = Math.floor(radialSegments);\n    tubularSegments = Math.floor(tubularSegments);\n\n    const vertexCount = (radialSegments + 1) * (tubularSegments + 1);\n    const rectangleCount = radialSegments * tubularSegments;\n    const indices = PrimitiveMesh._generateIndices(engine, vertexCount, rectangleCount * 6);\n\n    const positions: Vector3[] = new Array(vertexCount);\n    const normals: Vector3[] = new Array(vertexCount);\n    const uvs: Vector2[] = new Array(vertexCount);\n\n    arc = (arc / 180) * Math.PI;\n\n    let offset = 0;\n\n    for (let i = 0; i <= radialSegments; i++) {\n      for (let j = 0; j <= tubularSegments; j++) {\n        const u = (j / tubularSegments) * arc;\n        const v = (i / radialSegments) * Math.PI * 2;\n        const cosV = Math.cos(v);\n        const sinV = Math.sin(v);\n        const cosU = Math.cos(u);\n        const sinU = Math.sin(u);\n\n        const position = new Vector3(\n          (radius + tubeRadius * cosV) * cosU,\n          (radius + tubeRadius * cosV) * sinU,\n          tubeRadius * sinV\n        );\n        positions[offset] = position;\n\n        const centerX = radius * cosU;\n        const centerY = radius * sinU;\n        normals[offset] = new Vector3(position.x - centerX, position.y - centerY, position.z).normalize();\n\n        uvs[offset++] = new Vector2(j / tubularSegments, i / radialSegments);\n      }\n    }\n\n    offset = 0;\n    for (let i = 1; i <= radialSegments; i++) {\n      for (let j = 1; j <= tubularSegments; j++) {\n        const a = (tubularSegments + 1) * i + j - 1;\n        const b = (tubularSegments + 1) * (i - 1) + j - 1;\n        const c = (tubularSegments + 1) * (i - 1) + j;\n        const d = (tubularSegments + 1) * i + j;\n\n        indices[offset++] = a;\n        indices[offset++] = b;\n        indices[offset++] = d;\n\n        indices[offset++] = b;\n        indices[offset++] = c;\n        indices[offset++] = d;\n      }\n    }\n\n    const { bounds } = mesh;\n    const outerRadius = radius + tubeRadius;\n    bounds.min.set(-outerRadius, -outerRadius, -tubeRadius);\n    bounds.max.set(outerRadius, outerRadius, tubeRadius);\n\n    PrimitiveMesh._initialize(mesh, positions, normals, uvs, indices, noLongerAccessible);\n    return mesh;\n  }\n\n  /**\n   * Create a cone mesh.\n   * @param engine - Engine\n   * @param radius - The radius of cap\n   * @param height - The height of torso\n   * @param radialSegments - Cylinder radial segments\n   * @param heightSegments - Cylinder height segments\n   * @param noLongerAccessible - No longer access the vertices of the mesh after creation\n   * @returns Cone model mesh\n   */\n  static createCone(\n    engine: Engine,\n    radius: number = 0.5,\n    height: number = 2,\n    radialSegments: number = 20,\n    heightSegments: number = 1,\n    noLongerAccessible: boolean = true\n  ): ModelMesh {\n    const mesh = new ModelMesh(engine);\n    radialSegments = Math.floor(radialSegments);\n    heightSegments = Math.floor(heightSegments);\n\n    const radialCount = radialSegments + 1;\n    const verticalCount = heightSegments + 1;\n    const halfHeight = height * 0.5;\n    const unitHeight = height / heightSegments;\n    const torsoVertexCount = radialCount * verticalCount;\n    const torsoRectangleCount = radialSegments * heightSegments;\n    const totalVertexCount = torsoVertexCount + 1 + radialSegments;\n    const indices = PrimitiveMesh._generateIndices(\n      engine,\n      totalVertexCount,\n      torsoRectangleCount * 6 + radialSegments * 3\n    );\n    const radialCountReciprocal = 1.0 / radialCount;\n    const radialSegmentsReciprocal = 1.0 / radialSegments;\n    const heightSegmentsReciprocal = 1.0 / heightSegments;\n\n    const positions: Vector3[] = new Array(totalVertexCount);\n    const normals: Vector3[] = new Array(totalVertexCount);\n    const uvs: Vector2[] = new Array(totalVertexCount);\n\n    let indicesOffset = 0;\n\n    // Create torso\n    const thetaStart = Math.PI;\n    const thetaRange = Math.PI * 2;\n    const slope = radius / height;\n\n    for (let i = 0; i < torsoVertexCount; ++i) {\n      const x = i % radialCount;\n      const y = (i * radialCountReciprocal) | 0;\n      const u = x * radialSegmentsReciprocal;\n      const v = y * heightSegmentsReciprocal;\n      const theta = thetaStart + u * thetaRange;\n      const sinTheta = Math.sin(theta);\n      const cosTheta = Math.cos(theta);\n      const curRadius = radius - y * radius;\n\n      let posX = curRadius * sinTheta;\n      let posY = y * unitHeight - halfHeight;\n      let posZ = curRadius * cosTheta;\n\n      // Position\n      positions[i] = new Vector3(posX, posY, posZ);\n      // Normal\n      normals[i] = new Vector3(sinTheta, slope, cosTheta);\n      // Texcoord\n      uvs[i] = new Vector2(u, 1 - v);\n    }\n\n    for (let i = 0; i < torsoRectangleCount; ++i) {\n      const x = i % radialSegments;\n      const y = (i * radialSegmentsReciprocal) | 0;\n\n      const a = y * radialCount + x;\n      const b = a + 1;\n      const c = a + radialCount;\n      const d = c + 1;\n\n      indices[indicesOffset++] = b;\n      indices[indicesOffset++] = c;\n      indices[indicesOffset++] = a;\n      indices[indicesOffset++] = b;\n      indices[indicesOffset++] = d;\n      indices[indicesOffset++] = c;\n    }\n\n    // Bottom position\n    positions[torsoVertexCount] = new Vector3(0, -halfHeight, 0);\n    // Bottom normal\n    normals[torsoVertexCount] = new Vector3(0, -1, 0);\n    // Bottom texcoord\n    uvs[torsoVertexCount] = new Vector2(0.5, 0.5);\n\n    // Add bottom cap vertices\n    let offset = torsoVertexCount + 1;\n    const diameterBottomReciprocal = 1.0 / (radius * 2);\n    for (let i = 0; i < radialSegments; ++i) {\n      const curPos = positions[i];\n      let curPosX = curPos.x;\n      let curPosZ = curPos.z;\n\n      // Bottom position\n      positions[offset] = new Vector3(curPosX, -halfHeight, curPosZ);\n      // Bottom normal\n      normals[offset] = new Vector3(0, -1, 0);\n      // Bottom texcoord\n      uvs[offset++] = new Vector2(curPosX * diameterBottomReciprocal + 0.5, 0.5 - curPosZ * diameterBottomReciprocal);\n    }\n\n    const bottomIndiceIndex = torsoVertexCount + 1;\n    for (let i = 0; i < radialSegments; ++i) {\n      const firstStride = i;\n      const secondStride = i === radialSegments - 1 ? 0 : firstStride + 1;\n\n      // Bottom\n      indices[indicesOffset++] = torsoVertexCount;\n      indices[indicesOffset++] = bottomIndiceIndex + secondStride;\n      indices[indicesOffset++] = bottomIndiceIndex + firstStride;\n    }\n\n    const { bounds } = mesh;\n    bounds.min.set(-radius, -halfHeight, -radius);\n    bounds.max.set(radius, halfHeight, radius);\n\n    PrimitiveMesh._initialize(mesh, positions, normals, uvs, indices, noLongerAccessible);\n    return mesh;\n  }\n\n  /**\n   * Create a capsule mesh.\n   * @param engine - Engine\n   * @param radius - The radius of the two hemispherical ends\n   * @param height - The height of the cylindrical part, measured between the centers of the hemispherical ends\n   * @param radialSegments - Hemispherical end radial segments\n   * @param heightSegments - Cylindrical part height segments\n   * @param noLongerAccessible - No longer access the vertices of the mesh after creation\n   * @returns Capsule model mesh\n   */\n  static createCapsule(\n    engine: Engine,\n    radius: number = 0.5,\n    height: number = 2,\n    radialSegments: number = 6,\n    heightSegments: number = 1,\n    noLongerAccessible: boolean = true\n  ): ModelMesh {\n    const mesh = new ModelMesh(engine);\n\n    radialSegments = Math.max(2, Math.floor(radialSegments));\n    heightSegments = Math.floor(heightSegments);\n\n    const radialCount = radialSegments + 1;\n    const verticalCount = heightSegments + 1;\n    const halfHeight = height * 0.5;\n    const unitHeight = height / heightSegments;\n    const torsoVertexCount = radialCount * verticalCount;\n    const torsoRectangleCount = radialSegments * heightSegments;\n\n    const capVertexCount = radialCount * radialCount;\n    const capRectangleCount = radialSegments * radialSegments;\n\n    const totalVertexCount = torsoVertexCount + 2 * capVertexCount;\n    const indices = PrimitiveMesh._generateIndices(\n      engine,\n      totalVertexCount,\n      (torsoRectangleCount + 2 * capRectangleCount) * 6\n    );\n\n    const radialCountReciprocal = 1.0 / radialCount;\n    const radialSegmentsReciprocal = 1.0 / radialSegments;\n    const heightSegmentsReciprocal = 1.0 / heightSegments;\n\n    const thetaStart = Math.PI;\n    const thetaRange = Math.PI * 2;\n\n    const positions = new Array<Vector3>(totalVertexCount);\n    const normals = new Array<Vector3>(totalVertexCount);\n    const uvs = new Array<Vector2>(totalVertexCount);\n\n    let indicesOffset = 0;\n\n    // create torso\n    for (let i = 0; i < torsoVertexCount; ++i) {\n      const x = i % radialCount;\n      const y = (i * radialCountReciprocal) | 0;\n      const u = x * radialSegmentsReciprocal;\n      const v = y * heightSegmentsReciprocal;\n      const theta = thetaStart + u * thetaRange;\n      const sinTheta = Math.sin(theta);\n      const cosTheta = Math.cos(theta);\n\n      positions[i] = new Vector3(radius * sinTheta, y * unitHeight - halfHeight, radius * cosTheta);\n      normals[i] = new Vector3(sinTheta, 0, cosTheta);\n      uvs[i] = new Vector2(u, 1 - v);\n    }\n\n    for (let i = 0; i < torsoRectangleCount; ++i) {\n      const x = i % radialSegments;\n      const y = (i * radialSegmentsReciprocal) | 0;\n\n      const a = y * radialCount + x;\n      const b = a + 1;\n      const c = a + radialCount;\n      const d = c + 1;\n\n      indices[indicesOffset++] = b;\n      indices[indicesOffset++] = c;\n      indices[indicesOffset++] = a;\n      indices[indicesOffset++] = b;\n      indices[indicesOffset++] = d;\n      indices[indicesOffset++] = c;\n    }\n\n    PrimitiveMesh._createCapsuleCap(\n      radius,\n      height,\n      radialSegments,\n      thetaRange,\n      torsoVertexCount,\n      1,\n      positions,\n      normals,\n      uvs,\n      indices,\n      indicesOffset\n    );\n\n    PrimitiveMesh._createCapsuleCap(\n      radius,\n      height,\n      radialSegments,\n      -thetaRange,\n      torsoVertexCount + capVertexCount,\n      -1,\n      positions,\n      normals,\n      uvs,\n      indices,\n      indicesOffset + 6 * capRectangleCount\n    );\n\n    const { bounds } = mesh;\n    bounds.min.set(-radius, -radius - halfHeight, -radius);\n    bounds.max.set(radius, radius + halfHeight, radius);\n\n    PrimitiveMesh._initialize(mesh, positions, normals, uvs, indices, noLongerAccessible);\n    return mesh;\n  }\n\n  private static _initialize(\n    mesh: ModelMesh,\n    positions: Vector3[],\n    normals: Vector3[],\n    uvs: Vector2[],\n    indices: Uint16Array | Uint32Array,\n    noLongerAccessible: boolean\n  ) {\n    mesh.setPositions(positions);\n    mesh.setNormals(normals);\n    mesh.setUVs(uvs);\n    mesh.setIndices(indices);\n\n    mesh.uploadData(noLongerAccessible);\n    mesh.addSubMesh(0, indices.length);\n  }\n\n  private static _generateIndices(engine: Engine, vertexCount: number, indexCount: number): Uint16Array | Uint32Array {\n    let indices: Uint16Array | Uint32Array = null;\n    if (vertexCount > 65535) {\n      if (engine._hardwareRenderer.canIUse(GLCapabilityType.elementIndexUint)) {\n        indices = new Uint32Array(indexCount);\n      } else {\n        throw Error(\"The vertex count is over limit.\");\n      }\n    } else {\n      indices = new Uint16Array(indexCount);\n    }\n    return indices;\n  }\n\n  private static _createCapsuleCap(\n    radius: number,\n    height: number,\n    radialSegments: number,\n    capAlphaRange: number,\n    offset: number,\n    posIndex: number,\n    positions: Vector3[],\n    normals: Vector3[],\n    uvs: Vector2[],\n    indices: Uint16Array | Uint32Array,\n    indicesOffset: number\n  ) {\n    const radialCount = radialSegments + 1;\n    const halfHeight = height * 0.5 * posIndex;\n    const capVertexCount = radialCount * radialCount;\n    const capRectangleCount = radialSegments * radialSegments;\n    const radialCountReciprocal = 1.0 / radialCount;\n    const radialSegmentsReciprocal = 1.0 / radialSegments;\n\n    for (let i = 0; i < capVertexCount; ++i) {\n      const x = i % radialCount;\n      const y = (i * radialCountReciprocal) | 0;\n      const u = x * radialSegmentsReciprocal;\n      const v = y * radialSegmentsReciprocal;\n      const alphaDelta = u * capAlphaRange;\n      const thetaDelta = (v * Math.PI) / 2;\n      const sinTheta = Math.sin(thetaDelta);\n\n      const posX = -radius * Math.cos(alphaDelta) * sinTheta;\n      const posY = radius * Math.cos(thetaDelta) * posIndex + halfHeight;\n      const posZ = radius * Math.sin(alphaDelta) * sinTheta;\n\n      const index = i + offset;\n      positions[index] = new Vector3(posX, posY, posZ);\n      normals[index] = new Vector3(posX, posY - halfHeight, posZ);\n      uvs[index] = new Vector2(u, v);\n    }\n\n    for (let i = 0; i < capRectangleCount; ++i) {\n      const x = i % radialSegments;\n      const y = (i * radialSegmentsReciprocal) | 0;\n\n      const a = y * radialCount + x + offset;\n      const b = a + 1;\n      const c = a + radialCount;\n      const d = c + 1;\n\n      indices[indicesOffset++] = b;\n      indices[indicesOffset++] = a;\n      indices[indicesOffset++] = d;\n      indices[indicesOffset++] = a;\n      indices[indicesOffset++] = c;\n      indices[indicesOffset++] = d;\n    }\n  }\n}\n","import { IndexBufferBinding, IndexFormat, Mesh, Buffer, VertexBufferBinding, VertexElement } from \"../graphic\";\n\n/**\n * BufferMesh.\n */\nexport class BufferMesh extends Mesh {\n  /**\n   * Instanced count, disable instanced drawing when set zero.\n   */\n  get instanceCount(): number {\n    return this._instanceCount;\n  }\n\n  set instanceCount(value: number) {\n    this._instanceCount = value;\n  }\n\n  /**\n   * Vertex buffer binding collection.\n   */\n  get vertexBufferBindings(): Readonly<VertexBufferBinding[]> {\n    return this._vertexBufferBindings;\n  }\n\n  /**\n   * Index buffer binding.\n   */\n  get indexBufferBinding(): IndexBufferBinding {\n    return this._indexBufferBinding;\n  }\n\n  /**\n   * Vertex element collection.\n   */\n  get vertexElements(): Readonly<VertexElement[]> {\n    return this._vertexElements;\n  }\n\n  /**\n   * Set vertex elements.\n   * @param elements - Vertex element collection\n   */\n  setVertexElements(elements: VertexElement[]): void {\n    this._setVertexElements(elements);\n  }\n\n  /**\n   * Set vertex buffer binding.\n   * @param vertexBufferBindings - Vertex buffer binding\n   * @param index - Vertex buffer index, the default value is 0\n   */\n  setVertexBufferBinding(vertexBufferBindings: VertexBufferBinding, index?: number): void;\n\n  /**\n   * Set vertex buffer binding.\n   * @param vertexBuffer - Vertex buffer\n   * @param stride - Vertex buffer data stride\n   * @param index - Vertex buffer index, the default value is 0\n   */\n  setVertexBufferBinding(vertexBuffer: Buffer, stride: number, index?: number): void;\n\n  setVertexBufferBinding(\n    bufferOrBinding: Buffer | VertexBufferBinding,\n    strideOrFirstIndex: number = 0,\n    index: number = 0\n  ): void {\n    let binding = <VertexBufferBinding>bufferOrBinding;\n    const isBinding = binding.buffer !== undefined;\n    isBinding || (binding = new VertexBufferBinding(<Buffer>bufferOrBinding, strideOrFirstIndex));\n\n    const bindings = this._vertexBufferBindings;\n    bindings.length <= index && (bindings.length = index + 1);\n    this._setVertexBufferBinding(isBinding ? strideOrFirstIndex : index, binding);\n  }\n\n  /**\n   * Set vertex buffer binding.\n   * @param vertexBufferBindings - Vertex buffer binding\n   * @param firstIndex - First vertex buffer index, the default value is 0\n   */\n  setVertexBufferBindings(vertexBufferBindings: VertexBufferBinding[], firstIndex: number = 0): void {\n    const bindings = this._vertexBufferBindings;\n    const count = vertexBufferBindings.length;\n    const needLength = firstIndex + count;\n    bindings.length < needLength && (bindings.length = needLength);\n    for (let i = 0; i < count; i++) {\n      this._setVertexBufferBinding(firstIndex + i, vertexBufferBindings[i]);\n    }\n  }\n\n  /**\n   * Set index buffer binding.\n   * @param buffer - Index buffer\n   * @param format - Index buffer format\n   */\n  setIndexBufferBinding(buffer: Buffer, format: IndexFormat): void;\n\n  /**\n   * Set index buffer binding.\n   * @param bufferBinding - Index buffer binding\n   * @remarks When bufferBinding is null, it will clear IndexBufferBinding\n   */\n  setIndexBufferBinding(bufferBinding: IndexBufferBinding | null): void;\n\n  setIndexBufferBinding(bufferOrBinding: Buffer | IndexBufferBinding | null, format?: IndexFormat): void {\n    let binding = <IndexBufferBinding>bufferOrBinding;\n    if (binding) {\n      const isBinding = binding.buffer !== undefined;\n      isBinding || (binding = new IndexBufferBinding(<Buffer>bufferOrBinding, format));\n    }\n    this._setIndexBufferBinding(binding);\n  }\n}\n","import { Vector3 } from \"@oasis-engine/math\";\n\n/**\n * BlendShapeFrame.\n */\nexport class BlendShapeFrame {\n  /** Weight of BlendShapeFrame. */\n  readonly weight: number;\n  /** Delta positions for the frame being added. */\n  readonly deltaPositions: Readonly<Readonly<Vector3>[]>;\n  /** Delta normals for the frame being added. */\n  readonly deltaNormals: Readonly<Readonly<Vector3[]> | null>;\n  /** Delta tangents for the frame being added. */\n  readonly deltaTangents: Readonly<Readonly<Vector3[]> | null>;\n\n  /**\n   * Create a BlendShapeFrame.\n   * @param weight - Weight of BlendShapeFrame\n   * @param deltaPositions - Delta positions for the frame being added\n   * @param deltaNormals - Delta normals for the frame being added\n   * @param deltaTangents - Delta tangents for the frame being added\n   */\n  constructor(\n    weight: number,\n    deltaPositions: Vector3[],\n    deltaNormals: Vector3[] = null,\n    deltaTangents: Vector3[] = null\n  ) {\n    if (deltaNormals && deltaNormals.length !== deltaPositions.length) {\n      throw \"deltaNormals length must same with deltaPositions length.\";\n    }\n\n    if (deltaTangents && deltaTangents.length !== deltaPositions.length) {\n      throw \"deltaTangents length must same with deltaPositions length.\";\n    }\n\n    this.weight = weight;\n    this.deltaPositions = deltaPositions;\n    this.deltaNormals = deltaNormals;\n    this.deltaTangents = deltaTangents;\n  }\n}\n","import { Vector3 } from \"@oasis-engine/math\";\nimport { BoolUpdateFlag } from \"../BoolUpdateFlag\";\nimport { UpdateFlag } from \"../UpdateFlag\";\nimport { UpdateFlagManager } from \"../UpdateFlagManager\";\nimport { BlendShapeFrame } from \"./BlendShapeFrame\";\n\n/**\n * BlendShape.\n */\nexport class BlendShape {\n  /** Name of BlendShape. */\n  name: string;\n\n  /** @internal */\n  _useBlendShapeNormal: boolean = true;\n  /** @internal */\n  _useBlendShapeTangent: boolean = true;\n\n  private _layoutChangeManager: UpdateFlagManager = new UpdateFlagManager();\n  private _dataChangeManager: UpdateFlagManager = new UpdateFlagManager();\n  private _frames: BlendShapeFrame[] = [];\n\n  /**\n   * Frames of BlendShape.\n   */\n  get frames(): Readonly<BlendShapeFrame[]> {\n    return this._frames;\n  }\n\n  /**\n   * Create a BlendShape.\n   * @param name - BlendShape name.\n   */\n  constructor(name: string) {\n    this.name = name;\n  }\n\n  /**\n   * Add a BlendShapeFrame by weight, deltaPositions, deltaNormals and deltaTangents.\n   * @param weight - Weight of BlendShapeFrame\n   * @param deltaPositions - Delta positions for the frame being added\n   * @param deltaNormals - Delta normals for the frame being added\n   * @param deltaTangents - Delta tangents for the frame being added\n   */\n  addFrame(\n    weight: number,\n    deltaPositions: Vector3[],\n    deltaNormals?: Vector3[],\n    deltaTangents?: Vector3[]\n  ): BlendShapeFrame;\n\n  /**\n   * Add a BlendShapeFrame.\n   * @param frame - The BlendShapeFrame.\n   */\n  addFrame(frame: BlendShapeFrame): void;\n\n  addFrame(\n    frameOrWeight: BlendShapeFrame | number,\n    deltaPositions?: Vector3[],\n    deltaNormals?: Vector3[],\n    deltaTangents?: Vector3[]\n  ): void | BlendShapeFrame {\n    if (typeof frameOrWeight === \"number\") {\n      const frame = new BlendShapeFrame(frameOrWeight, deltaPositions, deltaNormals, deltaTangents);\n      this._addFrame(frame);\n      return frame;\n    } else {\n      this._addFrame(frameOrWeight);\n    }\n  }\n\n  /**\n   * Clear all frames.\n   */\n  clearFrames(): void {\n    this._frames.length = 0;\n    this._updateUseNormalAndTangent(true, true);\n    this._dataChangeManager.dispatch();\n  }\n\n  /**\n   * @internal\n   */\n  _addLayoutChangeFlag(flag: UpdateFlag): void {\n    this._layoutChangeManager.addFlag(flag);\n  }\n\n  /**\n   * @internal\n   */\n  _addDataDirtyFlag(flag: UpdateFlag): void {\n    this._dataChangeManager.addFlag(flag);\n  }\n\n  /**\n   * @internal\n   */\n  _createSubDataDirtyFlag(): BoolUpdateFlag {\n    return this._dataChangeManager.createFlag(BoolUpdateFlag);\n  }\n\n  private _addFrame(frame: BlendShapeFrame): void {\n    const frames = this._frames;\n    const frameCount = frames.length;\n    if (frameCount > 0 && frame.deltaPositions.length !== frames[frameCount - 1].deltaPositions.length) {\n      throw \"Frame's deltaPositions length must same with before frame deltaPositions length.\";\n    }\n    this._frames.push(frame);\n\n    this._updateUseNormalAndTangent(!!frame.deltaNormals, !!frame.deltaTangents);\n    this._dataChangeManager.dispatch();\n  }\n\n  private _updateUseNormalAndTangent(useNormal: boolean, useTangent: boolean): void {\n    const useBlendShapeNormal = this._useBlendShapeNormal && useNormal;\n    const useBlendShapeTangent = this._useBlendShapeTangent && useTangent;\n    if (this._useBlendShapeNormal !== useBlendShapeNormal || this._useBlendShapeTangent !== useBlendShapeTangent) {\n      this._useBlendShapeNormal = useBlendShapeNormal;\n      this._useBlendShapeTangent = useBlendShapeTangent;\n      this._layoutChangeManager.dispatch(this);\n    }\n  }\n}\n","import { Camera } from \"../Camera\";\nimport { Engine } from \"../Engine\";\nimport { Buffer, BufferBindFlag, BufferUsage, IndexFormat, MeshTopology, SubMesh, VertexElement } from \"../graphic\";\nimport { Material } from \"../material\";\nimport { BufferMesh } from \"../mesh\";\nimport { ClassPool } from \"./ClassPool\";\nimport { SpriteElement } from \"./SpriteElement\";\nimport { SpriteMaskElement } from \"./SpriteMaskElement\";\nimport { TextRenderElement } from \"./TextRenderElement\";\n\ntype Element = SpriteElement | SpriteMaskElement;\n\nexport abstract class Basic2DBatcher {\n  /** The maximum number of vertex. */\n  static MAX_VERTEX_COUNT: number = 4096;\n  static _canUploadSameBuffer: boolean = true;\n\n  /** @internal */\n  _engine: Engine;\n  /** @internal */\n  _subMeshPool: ClassPool<SubMesh> = new ClassPool(SubMesh);\n  /** @internal */\n  _batchedQueue: Element[] = [];\n  /** @internal */\n  _meshes: BufferMesh[] = [];\n  /** @internal */\n  _meshCount: number = 1;\n  /** @internal */\n  _vertexBuffers: Buffer[] = [];\n  /** @internal */\n  _indiceBuffers: Buffer[] = [];\n  /** @internal */\n  _vertices: Float32Array;\n  /** @internal */\n  _indices: Uint16Array;\n  /** @internal */\n  _flushId: number = 0;\n  /** @internal */\n  _vertexCount: number = 0;\n  /** @internal */\n  _elementCount: number = 0;\n\n  constructor(engine: Engine) {\n    this._engine = engine;\n\n    const { MAX_VERTEX_COUNT } = Basic2DBatcher;\n    this._vertices = new Float32Array(MAX_VERTEX_COUNT * 9);\n    this._indices = new Uint16Array(MAX_VERTEX_COUNT * 3);\n\n    const { _meshes, _meshCount } = this;\n    for (let i = 0; i < _meshCount; i++) {\n      _meshes[i] = this._createMesh(engine, i);\n    }\n  }\n\n  drawElement(\n    element: SpriteMaskElement | SpriteElement | TextRenderElement,\n    camera: Camera,\n    replaceMaterial: Material\n  ): void {\n    if (element.multiRenderData) {\n      const elements = (<TextRenderElement>element).charElements;\n      for (let i = 0, n = elements.length; i < n; ++i) {\n        this._drawSubElement(elements[i], camera, replaceMaterial);\n      }\n    } else {\n      this._drawSubElement(<SpriteMaskElement | SpriteElement>element, camera, replaceMaterial);\n    }\n  }\n\n  private _drawSubElement(element: SpriteMaskElement | SpriteElement, camera: Camera, replaceMaterial: Material) {\n    const len = element.renderData.vertexCount;\n    if (this._vertexCount + len > Basic2DBatcher.MAX_VERTEX_COUNT) {\n      this.flush(camera, replaceMaterial);\n    }\n\n    this._vertexCount += len;\n    this._batchedQueue[this._elementCount++] = element;\n  }\n\n  flush(camera: Camera, replaceMaterial: Material): void {\n    const batchedQueue = this._batchedQueue;\n\n    if (batchedQueue.length === 0) {\n      return;\n    }\n    this._updateData(this._engine);\n    this.drawBatches(camera, replaceMaterial);\n\n    if (!Basic2DBatcher._canUploadSameBuffer) {\n      this._flushId++;\n    }\n\n    batchedQueue.length = 0;\n    this._subMeshPool.resetPool();\n    this._vertexCount = 0;\n    this._elementCount = 0;\n  }\n\n  clear(): void {\n    this._flushId = 0;\n    this._vertexCount = 0;\n    this._elementCount = 0;\n    this._batchedQueue.length = 0;\n  }\n\n  destroy(): void {\n    this._batchedQueue = null;\n\n    const { _meshes: meshes, _vertexBuffers: vertexBuffers, _indiceBuffers: indiceBuffers } = this;\n\n    for (let i = 0, n = meshes.length; i < n; ++i) {\n      meshes[i].destroy();\n    }\n    this._meshes = null;\n\n    for (let i = 0, n = vertexBuffers.length; i < n; ++i) {\n      vertexBuffers[i].destroy();\n    }\n    this._vertexBuffers = null;\n\n    for (let i = 0, n = indiceBuffers.length; i < n; ++i) {\n      indiceBuffers[i].destroy();\n    }\n    this._indiceBuffers = null;\n  }\n\n  private _createMesh(engine: Engine, index: number): BufferMesh {\n    const { MAX_VERTEX_COUNT } = Basic2DBatcher;\n    const mesh = new BufferMesh(engine, `BufferMesh${index}`);\n\n    const vertexElements: VertexElement[] = [];\n    const vertexStride = this.createVertexElements(vertexElements);\n\n    // vertices\n    this._vertexBuffers[index] = new Buffer(\n      engine,\n      BufferBindFlag.VertexBuffer,\n      MAX_VERTEX_COUNT * 4 * vertexStride,\n      BufferUsage.Dynamic\n    );\n    // indices\n    this._indiceBuffers[index] = new Buffer(\n      engine,\n      BufferBindFlag.IndexBuffer,\n      MAX_VERTEX_COUNT * 3,\n      BufferUsage.Dynamic\n    );\n    mesh.setVertexBufferBinding(this._vertexBuffers[index], vertexStride);\n    mesh.setIndexBufferBinding(this._indiceBuffers[index], IndexFormat.UInt16);\n    mesh.setVertexElements(vertexElements);\n\n    return mesh;\n  }\n\n  private _updateData(engine: Engine): void {\n    const { _meshes, _flushId } = this;\n\n    if (!Basic2DBatcher._canUploadSameBuffer && this._meshCount <= _flushId) {\n      this._meshCount++;\n      _meshes[_flushId] = this._createMesh(engine, _flushId);\n    }\n\n    const { _batchedQueue: batchedQueue, _vertices: vertices, _indices: indices } = this;\n    const mesh = _meshes[_flushId];\n    mesh.clearSubMesh();\n\n    let vertexIndex = 0;\n    let indiceIndex = 0;\n    let vertexStartIndex = 0;\n    let vertexCount = 0;\n    let curIndiceStartIndex = 0;\n    let curMeshIndex = 0;\n    let preElement: Element = null;\n    for (let i = 0, len = batchedQueue.length; i < len; i++) {\n      const curElement = batchedQueue[i];\n\n      // Batch vertex\n      vertexIndex = this.updateVertices(curElement, vertices, vertexIndex);\n\n      // Batch indice\n      const { triangles } = curElement.renderData;\n      const triangleNum = triangles.length;\n      for (let j = 0; j < triangleNum; j++) {\n        indices[indiceIndex++] = triangles[j] + curIndiceStartIndex;\n      }\n\n      curIndiceStartIndex += curElement.renderData.vertexCount;\n\n      if (preElement === null) {\n        vertexCount += triangleNum;\n      } else {\n        if (this.canBatch(preElement, curElement)) {\n          vertexCount += triangleNum;\n        } else {\n          mesh.addSubMesh(this._getSubMeshFromPool(vertexStartIndex, vertexCount));\n          vertexStartIndex += vertexCount;\n          vertexCount = triangleNum;\n          batchedQueue[curMeshIndex++] = preElement;\n        }\n      }\n\n      preElement = curElement;\n    }\n\n    mesh.addSubMesh(this._getSubMeshFromPool(vertexStartIndex, vertexCount));\n    batchedQueue[curMeshIndex] = preElement;\n\n    this._vertexBuffers[_flushId].setData(vertices, 0, 0, vertexIndex);\n    this._indiceBuffers[_flushId].setData(indices, 0, 0, indiceIndex);\n  }\n\n  private _getSubMeshFromPool(start: number, count: number): SubMesh {\n    const subMesh = this._subMeshPool.getFromPool();\n    subMesh.start = start;\n    subMesh.count = count;\n    subMesh.topology = MeshTopology.Triangles;\n    return subMesh;\n  }\n\n  /**\n   * @internal\n   */\n  abstract createVertexElements(vertexElements: VertexElement[]): number;\n\n  /**\n   * @internal\n   */\n  abstract canBatch(preElement: Element, curElement: Element): boolean;\n\n  /**\n   * @internal\n   */\n  abstract updateVertices(element: Element, vertices: Float32Array, vertexIndex: number): number;\n\n  /**\n   * @internal\n   */\n  abstract drawBatches(camera: Camera, replaceMaterial: Material): void;\n}\n","import { SpriteMask } from \"../2d/sprite/SpriteMask\";\nimport { Camera } from \"../Camera\";\nimport { Engine } from \"../Engine\";\nimport { VertexElementFormat } from \"../graphic/enums/VertexElementFormat\";\nimport { VertexElement } from \"../graphic/VertexElement\";\nimport { StencilOperation } from \"../shader/enums/StencilOperation\";\nimport { Shader } from \"../shader/Shader\";\nimport { ShaderMacroCollection } from \"../shader/ShaderMacroCollection\";\nimport { Basic2DBatcher } from \"./Basic2DBatcher\";\nimport { SpriteMaskElement } from \"./SpriteMaskElement\";\n\nexport class SpriteMaskBatcher extends Basic2DBatcher {\n  createVertexElements(vertexElements: VertexElement[]): number {\n    vertexElements[0] = new VertexElement(\"POSITION\", 0, VertexElementFormat.Vector3, 0);\n    vertexElements[1] = new VertexElement(\"TEXCOORD_0\", 12, VertexElementFormat.Vector2, 0);\n    return 20;\n  }\n\n  canBatch(preElement: SpriteMaskElement, curElement: SpriteMaskElement): boolean {\n    if (preElement.isAdd !== curElement.isAdd) {\n      return false;\n    }\n\n    // Compare renderer property\n    const preShaderData = (<SpriteMask>preElement.component).shaderData;\n    const curShaderData = (<SpriteMask>curElement.component).shaderData;\n    const textureProperty = SpriteMask._textureProperty;\n    const alphaCutoffProperty = SpriteMask._alphaCutoffProperty;\n\n    return (\n      preShaderData.getTexture(textureProperty) === curShaderData.getTexture(textureProperty) &&\n      preShaderData.getTexture(alphaCutoffProperty) === curShaderData.getTexture(alphaCutoffProperty)\n    );\n  }\n\n  updateVertices(element: SpriteMaskElement, vertices: Float32Array, vertexIndex: number): number {\n    const { positions, uvs, vertexCount } = element.renderData;\n    for (let i = 0; i < vertexCount; i++) {\n      const curPos = positions[i];\n      const curUV = uvs[i];\n      vertices[vertexIndex++] = curPos.x;\n      vertices[vertexIndex++] = curPos.y;\n      vertices[vertexIndex++] = curPos.z;\n      vertices[vertexIndex++] = curUV.x;\n      vertices[vertexIndex++] = curUV.y;\n    }\n\n    return vertexIndex;\n  }\n\n  drawBatches(camera: Camera): void {\n    const { _engine: engine, _batchedQueue: batchedQueue } = this;\n    const mesh = this._meshes[this._flushId];\n    const subMeshes = mesh.subMeshes;\n    const sceneData = camera.scene.shaderData;\n    const cameraData = camera.shaderData;\n\n    for (let i = 0, len = subMeshes.length; i < len; i++) {\n      const subMesh = subMeshes[i];\n      const spriteMaskElement = <SpriteMaskElement>batchedQueue[i];\n\n      if (!subMesh || !spriteMaskElement) {\n        return;\n      }\n\n      const renderer = <SpriteMask>spriteMaskElement.component;\n      const material = spriteMaskElement.material;\n\n      const compileMacros = Shader._compileMacros;\n      // union render global macro and material self macro.\n      ShaderMacroCollection.unionCollection(\n        renderer._globalShaderMacro,\n        material.shaderData._macroCollection,\n        compileMacros\n      );\n\n      // Update stencil state\n      const stencilState = material.renderState.stencilState;\n      const op = spriteMaskElement.isAdd ? StencilOperation.IncrementSaturate : StencilOperation.DecrementSaturate;\n      stencilState.passOperationFront = op;\n      stencilState.passOperationBack = op;\n\n      const program = material.shader._getShaderProgram(engine, compileMacros);\n      if (!program.isValid) {\n        return;\n      }\n\n      program.bind();\n      program.groupingOtherUniformBlock();\n      program.uploadAll(program.sceneUniformBlock, sceneData);\n      program.uploadAll(program.cameraUniformBlock, cameraData);\n      program.uploadAll(program.rendererUniformBlock, renderer.shaderData);\n      program.uploadAll(program.materialUniformBlock, material.shaderData);\n\n      material.renderState._apply(engine, false);\n\n      engine._hardwareRenderer.drawPrimitive(mesh, subMesh, program);\n    }\n  }\n}\n","import { SpriteMaskInteraction } from \"../2d/enums/SpriteMaskInteraction\";\nimport { SpriteRenderer } from \"../2d/sprite/SpriteRenderer\";\nimport { Camera } from \"../Camera\";\nimport { Engine } from \"../Engine\";\nimport { SpriteMaskBatcher } from \"./SpriteMaskBatcher\";\n\n/**\n * @internal\n */\nexport class SpriteMaskManager {\n  _batcher: SpriteMaskBatcher;\n\n  private _preMaskLayer: number = 0;\n\n  constructor(engine: Engine) {\n    this._batcher = new SpriteMaskBatcher(engine);\n  }\n\n  clear(): void {\n    this._preMaskLayer = 0;\n    this._batcher.clear();\n  }\n\n  preRender(camera: Camera, renderer: SpriteRenderer): void {\n    if (renderer.maskInteraction === SpriteMaskInteraction.None) {\n      return;\n    }\n\n    this._batcher.clear();\n    this._processMasksDiff(camera, renderer);\n    this._batcher.flush(camera, null);\n  }\n\n  postRender(renderer: SpriteRenderer): void {\n    if (renderer.maskInteraction === SpriteMaskInteraction.None) {\n      return;\n    }\n\n    this._preMaskLayer = renderer.maskLayer;\n  }\n\n  destroy(): void {\n    this._batcher.destroy();\n    this._batcher = null;\n  }\n\n  private _processMasksDiff(camera: Camera, renderer: SpriteRenderer): void {\n    const preMaskLayer = this._preMaskLayer;\n    const curMaskLayer = renderer.maskLayer;\n    if (preMaskLayer !== curMaskLayer) {\n      const allMasks = camera._renderPipeline._allSpriteMasks;\n      const commonLayer = preMaskLayer & curMaskLayer;\n      const addLayer = curMaskLayer & ~preMaskLayer;\n      const reduceLayer = preMaskLayer & ~curMaskLayer;\n\n      const allMaskElements = allMasks._elements;\n      for (let i = 0, n = allMasks.length; i < n; i++) {\n        const mask = allMaskElements[i];\n        const influenceLayers = mask.influenceLayers;\n\n        if (influenceLayers & commonLayer) {\n          continue;\n        }\n\n        if (influenceLayers & addLayer) {\n          const maskRenderElement = mask._maskElement;\n          maskRenderElement.isAdd = true;\n          this._batcher.drawElement(maskRenderElement, camera, null);\n          continue;\n        }\n\n        if (influenceLayers & reduceLayer) {\n          const maskRenderElement = mask._maskElement;\n          maskRenderElement.isAdd = false;\n          this._batcher.drawElement(maskRenderElement, camera, null);\n        }\n      }\n    }\n  }\n}\n","import { RenderElement } from \"./RenderElement\";\nimport { SpriteElement } from \"./SpriteElement\";\n\nexport class TextRenderElement extends RenderElement {\n  charElements: SpriteElement[] = [];\n\n  constructor() {\n    super();\n    this.multiRenderData = true;\n  }\n}\n","/**\n * The Background mode enumeration.\n */\nexport enum BackgroundMode {\n  /* Solid color. */\n  SolidColor,\n  /* Sky. */\n  Sky,\n  /** Texture */\n  Texture\n}\n","/**\n * Filling mode of background texture.\n */\nexport enum BackgroundTextureFillMode {\n  /* Maintain the aspect ratio and scale the texture to fit the width of the canvas. */\n  AspectFitWidth,\n  /* Maintain the aspect ratio and scale the texture to fit the height of the canvas. */\n  AspectFitHeight,\n  /* Scale the texture fully fills the canvas. */\n  Fill\n}\n","import { Matrix } from \"@oasis-engine/math\";\nimport { Mesh } from \"../graphic\";\nimport { Material } from \"../material\";\n\n/**\n * Sky.\n */\nexport class Sky {\n  /** Material of the sky. */\n  material: Material;\n  /** Mesh of the sky. */\n  mesh: Mesh;\n  /** @internal */\n  _matrix: Matrix = new Matrix();\n}\n","import { Color, Vector2, Vector3 } from \"@oasis-engine/math\";\nimport { ModelMesh } from \".\";\nimport { Engine } from \"./Engine\";\nimport { BackgroundMode } from \"./enums/BackgroundMode\";\nimport { BackgroundTextureFillMode } from \"./enums/BackgroundTextureFillMode\";\nimport { Sky } from \"./sky/Sky\";\nimport { Texture2D } from \"./texture\";\n\n/**\n * Background of scene.\n */\nexport class Background {\n  /**\n   * Background mode.\n   * @defaultValue `BackgroundMode.SolidColor`\n   * @remarks If using `BackgroundMode.Sky` mode and material or mesh of the `sky` is not defined, it will downgrade to `BackgroundMode.SolidColor`.\n   */\n  mode: BackgroundMode = BackgroundMode.SolidColor;\n\n  /**\n   * Background solid color.\n   * @defaultValue `new Color(0.25, 0.25, 0.25, 1.0)`\n   * @remarks When `mode` is `BackgroundMode.SolidColor`, the property will take effects.\n   */\n  solidColor: Color = new Color(0.25, 0.25, 0.25, 1.0);\n\n  /**\n   * Background sky.\n   * @remarks When `mode` is `BackgroundMode.Sky`, the property will take effects.\n   */\n  readonly sky: Sky = new Sky();\n\n  /** @internal */\n  _textureFillMode: BackgroundTextureFillMode = BackgroundTextureFillMode.AspectFitHeight;\n\n  /** @internal */\n  _mesh: ModelMesh;\n\n  private _texture: Texture2D = null;\n\n  /**\n   * Background texture.\n   * @remarks When `mode` is `BackgroundMode.Texture`, the property will take effects.\n   */\n  get texture(): Texture2D {\n    return this._texture;\n  }\n\n  set texture(value: Texture2D) {\n    if (this._texture !== value) {\n      this._texture = value;\n      this._engine._backgroundTextureMaterial.shaderData.setTexture(\"u_baseTexture\", value);\n    }\n  }\n\n  /**\n   * @internal\n   * Background texture fill mode.\n   * @remarks When `mode` is `BackgroundMode.Texture`, the property will take effects.\n   * @defaultValue `BackgroundTextureFillMode.FitHeight`\n   */\n  get textureFillMode(): BackgroundTextureFillMode {\n    return this._textureFillMode;\n  }\n\n  set textureFillMode(value: BackgroundTextureFillMode) {\n    if (value !== this._textureFillMode) {\n      this._textureFillMode = value;\n      this._resizeBackgroundTexture();\n    }\n  }\n\n  /**\n   * Constructor of Background.\n   * @param _engine Engine Which the background belongs to.\n   */\n  constructor(private _engine: Engine) {\n    this._mesh = this._createPlane(_engine);\n  }\n\n  /**\n   * @internal\n   */\n  _resizeBackgroundTexture(): void {\n    if (!this._texture) {\n      return;\n    }\n    const { canvas } = this._engine;\n    const { width, height } = canvas;\n    const { _mesh:_backgroundTextureMesh } = this;\n    const positions = _backgroundTextureMesh.getPositions();\n\n    switch (this._textureFillMode) {\n      case BackgroundTextureFillMode.Fill:\n        positions[0].set(-1, -1, 1);\n        positions[1].set(1, -1, 1);\n        positions[2].set(-1, 1, 1);\n        positions[3].set(1, 1, 1);\n        break;\n      case BackgroundTextureFillMode.AspectFitWidth:\n        const fitWidthScale = (this._texture.height * width) / this.texture.width / height;\n        positions[0].set(-1, -fitWidthScale, 1);\n        positions[1].set(1, -fitWidthScale, 1);\n        positions[2].set(-1, fitWidthScale, 1);\n        positions[3].set(1, fitWidthScale, 1);\n        break;\n      case BackgroundTextureFillMode.AspectFitHeight:\n        const fitHeightScale = (this._texture.width * height) / this.texture.height / width;\n        positions[0].set(-fitHeightScale, -1, 1);\n        positions[1].set(fitHeightScale, -1, 1);\n        positions[2].set(-fitHeightScale, 1, 1);\n        positions[3].set(fitHeightScale, 1, 1);\n        break;\n    }\n    _backgroundTextureMesh.setPositions(positions);\n    _backgroundTextureMesh.uploadData(false);\n  }\n\n  private _createPlane(\n    engine: Engine,\n  ): ModelMesh {\n    const mesh = new ModelMesh(engine);\n    mesh.isGCIgnored = true;\n    const indices = new Uint8Array([1, 2, 0, 1, 3, 2]);\n\n    const positions: Vector3[] = new Array(4);\n    const uvs: Vector2[] = new Array(4);\n\n    for (let i = 0; i < 4; ++i) {\n      positions[i] = new Vector3();\n      uvs[i] = new Vector2(i % 2, 1 - ((i * 0.5) | 0));\n    }\n\n    mesh.setPositions(positions);\n    mesh.setUVs(uvs);\n    mesh.setIndices(indices);\n\n    mesh.uploadData(false);\n    mesh.addSubMesh(0, indices.length);\n    return mesh;\n  }\n}\n","/**\n * Diffuse mode.\n */\nexport enum DiffuseMode {\n  /** Solid color mode. */\n  SolidColor,\n\n  /**\n   * SH mode\n   * @remarks\n   * Use SH3 to represent irradiance environment maps efficiently, allowing for interactive rendering of diffuse objects under distant illumination.\n   */\n  SphericalHarmonics\n}\n","import { Color, SphericalHarmonics3 } from \"@oasis-engine/math\";\nimport { Scene } from \"../Scene\";\nimport { Shader, ShaderData } from \"../shader\";\nimport { ShaderMacro } from \"../shader/ShaderMacro\";\nimport { ShaderProperty } from \"../shader/ShaderProperty\";\nimport { TextureCube } from \"../texture\";\nimport { DiffuseMode } from \"./enums/DiffuseMode\";\n\n/**\n * Ambient light.\n */\nexport class AmbientLight {\n  private static _shMacro: ShaderMacro = Shader.getMacroByName(\"O3_USE_SH\");\n  private static _specularMacro: ShaderMacro = Shader.getMacroByName(\"O3_USE_SPECULAR_ENV\");\n  private static _decodeRGBMMacro: ShaderMacro = Shader.getMacroByName(\"O3_DECODE_ENV_RGBM\");\n\n  private static _diffuseColorProperty: ShaderProperty = Shader.getPropertyByName(\"u_envMapLight.diffuse\");\n  private static _diffuseSHProperty: ShaderProperty = Shader.getPropertyByName(\"u_env_sh\");\n  private static _diffuseIntensityProperty: ShaderProperty = Shader.getPropertyByName(\"u_envMapLight.diffuseIntensity\");\n  private static _specularTextureProperty: ShaderProperty = Shader.getPropertyByName(\"u_env_specularSampler\");\n  private static _specularIntensityProperty: ShaderProperty = Shader.getPropertyByName(\n    \"u_envMapLight.specularIntensity\"\n  );\n  private static _mipLevelProperty: ShaderProperty = Shader.getPropertyByName(\"u_envMapLight.mipMapLevel\");\n\n  private _diffuseSphericalHarmonics: SphericalHarmonics3;\n  private _diffuseSolidColor: Color = new Color(0.212, 0.227, 0.259);\n  private _diffuseIntensity: number = 1.0;\n  private _specularTexture: TextureCube;\n  private _specularIntensity: number = 1.0;\n  private _diffuseMode: DiffuseMode = DiffuseMode.SolidColor;\n  private _shArray: Float32Array = new Float32Array(27);\n  private _scenes: Scene[] = [];\n  private _specularTextureDecodeRGBM: boolean = false;\n\n  /**\n   * Whether to decode from specularTexture with RGBM format.\n   */\n  get specularTextureDecodeRGBM(): boolean {\n    return this._specularTextureDecodeRGBM;\n  }\n\n  set specularTextureDecodeRGBM(value: boolean) {\n    this._specularTextureDecodeRGBM = value;\n\n    const scenes = this._scenes;\n    for (let i = 0, n = scenes.length; i < n; i++) {\n      this._setSpecularTextureDecodeRGBM(scenes[i].shaderData);\n    }\n  }\n\n  /**\n   * Diffuse mode of ambient light.\n   */\n  get diffuseMode(): DiffuseMode {\n    return this._diffuseMode;\n  }\n\n  set diffuseMode(value: DiffuseMode) {\n    this._diffuseMode = value;\n\n    const scenes = this._scenes;\n    for (let i = 0, n = scenes.length; i < n; i++) {\n      this._setDiffuseMode(scenes[i].shaderData);\n    }\n  }\n\n  /**\n   * Diffuse reflection solid color.\n   * @remarks Effective when diffuse reflection mode is `DiffuseMode.SolidColor`.\n   */\n  get diffuseSolidColor(): Color {\n    return this._diffuseSolidColor;\n  }\n\n  set diffuseSolidColor(value: Color) {\n    if (value !== this._diffuseSolidColor) {\n      this._diffuseSolidColor.copyFrom(value);\n    }\n  }\n\n  /**\n   * Diffuse reflection spherical harmonics 3.\n   * @remarks Effective when diffuse reflection mode is `DiffuseMode.SphericalHarmonics`.\n   */\n  get diffuseSphericalHarmonics(): SphericalHarmonics3 {\n    return this._diffuseSphericalHarmonics;\n  }\n\n  set diffuseSphericalHarmonics(value: SphericalHarmonics3) {\n    this._diffuseSphericalHarmonics = value;\n    if (value) {\n      this._preComputeSH(value, this._shArray);\n      const scenes = this._scenes;\n      for (let i = 0, n = scenes.length; i < n; i++) {\n        scenes[i].shaderData.setFloatArray(AmbientLight._diffuseSHProperty, this._shArray);\n      }\n    }\n  }\n\n  /**\n   * Diffuse reflection intensity.\n   */\n  get diffuseIntensity(): number {\n    return this._diffuseIntensity;\n  }\n\n  set diffuseIntensity(value: number) {\n    this._diffuseIntensity = value;\n\n    const scenes = this._scenes;\n    for (let i = 0, n = scenes.length; i < n; i++) {\n      scenes[i].shaderData.setFloat(AmbientLight._diffuseIntensityProperty, value);\n    }\n  }\n\n  /**\n   * Specular reflection texture.\n   * @remarks This texture must be baked from @oasis-engine/baker\n   */\n  get specularTexture(): TextureCube {\n    return this._specularTexture;\n  }\n\n  set specularTexture(value: TextureCube) {\n    this._specularTexture = value;\n\n    const scenes = this._scenes;\n    for (let i = 0, n = scenes.length; i < n; i++) {\n      this._setSpecularTexture(scenes[i].shaderData);\n    }\n  }\n\n  /**\n   * Specular reflection intensity.\n   */\n  get specularIntensity(): number {\n    return this._specularIntensity;\n  }\n\n  set specularIntensity(value: number) {\n    this._specularIntensity = value;\n\n    for (let i = 0, n = this._scenes.length; i < n; i++) {\n      this._scenes[i].shaderData.setFloat(AmbientLight._specularIntensityProperty, value);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _addToScene(scene: Scene): void {\n    this._scenes.push(scene);\n\n    const shaderData = scene.shaderData;\n    shaderData.setColor(AmbientLight._diffuseColorProperty, this._diffuseSolidColor);\n    shaderData.setFloat(AmbientLight._diffuseIntensityProperty, this._diffuseIntensity);\n    shaderData.setFloat(AmbientLight._specularIntensityProperty, this._specularIntensity);\n    shaderData.setFloatArray(AmbientLight._diffuseSHProperty, this._shArray);\n\n    this._setDiffuseMode(shaderData);\n    this._setSpecularTextureDecodeRGBM(shaderData);\n    this._setSpecularTexture(shaderData);\n  }\n\n  /**\n   * @internal\n   */\n  _removeFromScene(scene: Scene): void {\n    const scenes = this._scenes;\n    const index = scenes.indexOf(scene);\n    scenes.splice(index, 1);\n  }\n\n  private _setDiffuseMode(sceneShaderData: ShaderData): void {\n    if (this._diffuseMode === DiffuseMode.SphericalHarmonics) {\n      sceneShaderData.enableMacro(AmbientLight._shMacro);\n    } else {\n      sceneShaderData.disableMacro(AmbientLight._shMacro);\n    }\n  }\n\n  private _setSpecularTexture(sceneShaderData: ShaderData): void {\n    if (this._specularTexture) {\n      sceneShaderData.setTexture(AmbientLight._specularTextureProperty, this._specularTexture);\n      sceneShaderData.setFloat(AmbientLight._mipLevelProperty, this._specularTexture.mipmapCount - 1);\n      sceneShaderData.enableMacro(AmbientLight._specularMacro);\n    } else {\n      sceneShaderData.disableMacro(AmbientLight._specularMacro);\n    }\n  }\n\n  private _setSpecularTextureDecodeRGBM(sceneShaderData: ShaderData): void {\n    if (this._specularTextureDecodeRGBM) {\n      sceneShaderData.enableMacro(AmbientLight._decodeRGBMMacro);\n    } else {\n      sceneShaderData.disableMacro(AmbientLight._decodeRGBMMacro);\n    }\n  }\n\n  private _preComputeSH(sh: SphericalHarmonics3, out: Float32Array): void {\n    /**\n     * Basis constants\n     *\n     * 0: 1/2 * Math.sqrt(1 / Math.PI)\n     *\n     * 1: -1/2 * Math.sqrt(3 / Math.PI)\n     * 2: 1/2 * Math.sqrt(3 / Math.PI)\n     * 3: -1/2 * Math.sqrt(3 / Math.PI)\n     *\n     * 4: 1/2 * Math.sqrt(15 / Math.PI)\n     * 5: -1/2 * Math.sqrt(15 / Math.PI)\n     * 6: 1/4 * Math.sqrt(5 / Math.PI)\n     * 7: -1/2 * Math.sqrt(15 / Math.PI)\n     * 8: 1/4 * Math.sqrt(15 / Math.PI)\n     */\n\n    /**\n     * Convolution kernel\n     *\n     * 0: Math.PI\n     * 1: (2 * Math.PI) / 3\n     * 2: Math.PI / 4\n     */\n\n    const src = sh.coefficients;\n\n    // l0\n    out[0] = src[0] * 0.886227; // kernel0 * basis0 = 0.886227\n    out[1] = src[1] * 0.886227;\n    out[2] = src[2] * 0.886227;\n\n    // l1\n    out[3] = src[3] * -1.023327; // kernel1 * basis1 = -1.023327;\n    out[4] = src[4] * -1.023327;\n    out[5] = src[5] * -1.023327;\n    out[6] = src[6] * 1.023327; // kernel1 * basis2 = 1.023327\n    out[7] = src[7] * 1.023327;\n    out[8] = src[8] * 1.023327;\n    out[9] = src[9] * -1.023327; // kernel1 * basis3 = -1.023327\n    out[10] = src[10] * -1.023327;\n    out[11] = src[11] * -1.023327;\n\n    // l2\n    out[12] = src[12] * 0.858086; // kernel2 * basis4 = 0.858086\n    out[13] = src[13] * 0.858086;\n    out[14] = src[14] * 0.858086;\n    out[15] = src[15] * -0.858086; // kernel2 * basis5 = -0.858086\n    out[16] = src[16] * -0.858086;\n    out[17] = src[17] * -0.858086;\n    out[18] = src[18] * 0.247708; // kernel2 * basis6 = 0.247708\n    out[19] = src[19] * 0.247708;\n    out[20] = src[20] * 0.247708;\n    out[21] = src[21] * -0.858086; // kernel2 * basis7 = -0.858086\n    out[22] = src[22] * -0.858086;\n    out[23] = src[23] * -0.858086;\n    out[24] = src[24] * 0.429042; // kernel2 * basis8 = 0.429042\n    out[25] = src[25] * 0.429042;\n    out[26] = src[26] * 0.429042;\n  }\n}\n","import { Camera } from \"./Camera\";\nimport { Scene } from \"./Scene\";\n\n/**\n * Scene feature plug-in.\n * @deprecated\n */\nexport abstract class SceneFeature {\n  /**\n   * Callback before every scene update.\n   * @param scene - Scene\n   */\n  public preUpdate(scene: Scene): void {}\n\n  /**\n   * Callback after every scene update.\n   * @param scene - Scene\n   */\n  public postUpdate(scene: Scene): void {}\n\n  /**\n   * Callback before scene rendering.\n   * @param scene - Scene\n   * @param camera - Camera\n   */\n  public preRender(scene: Scene, camera: Camera): void {}\n\n  /**\n   * Callback after scene rendering.\n   * @param scene - Scene\n   * @param camera - Camera\n   */\n  public postRender(scene: Scene, camera: Camera): void {}\n\n  /**\n   * Callback after the scene is destroyed.\n   * @param scene - Scene\n   */\n  public destroy(scene: Scene): void {}\n}\n","import { Matrix } from \"@oasis-engine/math\";\nimport { Component } from \"../Component\";\nimport { LightFeature } from \"./LightFeature\";\n\n/**\n * Light base class.\n */\nexport class Light extends Component {\n  /**\n   * Each type of light source is at most 10, beyond which it will not take effect.\n   * */\n  protected static _maxLight: number = 10;\n\n  private _viewMat: Matrix;\n  private _inverseViewMat: Matrix;\n\n  /**\n   * Mount to the current Scene.\n   * @internal\n   * @override\n   */\n  _onEnable() {\n    this.scene.findFeature(LightFeature).attachRenderLight(this);\n  }\n\n  /**\n   * Unmount from the current Scene.\n   * @internal\n   * @override\n   */\n  _onDisable() {\n    this.scene.findFeature(LightFeature).detachRenderLight(this);\n  }\n\n  /**\n   * View matrix.\n   */\n  get viewMatrix() {\n    if (!this._viewMat) this._viewMat = new Matrix();\n    Matrix.invert(this.entity.transform.worldMatrix, this._viewMat);\n    return this._viewMat;\n  }\n\n  /**\n   * Inverse view matrix.\n   */\n  get inverseViewMatrix() {\n    if (!this._inverseViewMat) this._inverseViewMat = new Matrix();\n    Matrix.invert(this.viewMatrix, this._inverseViewMat);\n    return this._inverseViewMat;\n  }\n}\n","import { Color, Vector3 } from \"@oasis-engine/math\";\nimport { Shader } from \"../shader\";\nimport { ShaderData } from \"../shader/ShaderData\";\nimport { ShaderProperty } from \"../shader/ShaderProperty\";\nimport { Light } from \"./Light\";\n\n/**\n * Directional light.\n */\nexport class DirectLight extends Light {\n  private static _colorProperty: ShaderProperty = Shader.getPropertyByName(\"u_directLightColor\");\n  private static _directionProperty: ShaderProperty = Shader.getPropertyByName(\"u_directLightDirection\");\n\n  private static _combinedData = {\n    color: new Float32Array(3 * Light._maxLight),\n    direction: new Float32Array(3 * Light._maxLight)\n  };\n\n  /**\n   * @internal\n   */\n  static _updateShaderData(shaderData: ShaderData): void {\n    const data = DirectLight._combinedData;\n\n    shaderData.setFloatArray(DirectLight._colorProperty, data.color);\n    shaderData.setFloatArray(DirectLight._directionProperty, data.direction);\n  }\n\n  color: Color = new Color(1, 1, 1, 1);\n  intensity: number = 1;\n\n  private _forward: Vector3 = new Vector3();\n  private _lightColor: Color = new Color(1, 1, 1, 1);\n  private _reverseDirection: Vector3 = new Vector3();\n\n  /**\n   * Get direction.\n   */\n  get direction(): Vector3 {\n    this.entity.transform.getWorldForward(this._forward);\n    return this._forward;\n  }\n\n  /**\n   * Get the final light color.\n   */\n  get lightColor(): Color {\n    this._lightColor.r = this.color.r * this.intensity;\n    this._lightColor.g = this.color.g * this.intensity;\n    this._lightColor.b = this.color.b * this.intensity;\n    this._lightColor.a = this.color.a * this.intensity;\n    return this._lightColor;\n  }\n\n  /**\n   * Get the opposite direction of the directional light direction.\n   */\n  get reverseDirection(): Vector3 {\n    Vector3.scale(this.direction, -1, this._reverseDirection);\n    return this._reverseDirection;\n  }\n\n  /**\n   * @internal\n   */\n  _appendData(lightIndex: number): void {\n    const colorStart = lightIndex * 3;\n    const directionStart = lightIndex * 3;\n    const lightColor = this.lightColor;\n    const direction = this.direction;\n\n    const data = DirectLight._combinedData;\n\n    data.color[colorStart] = lightColor.r;\n    data.color[colorStart + 1] = lightColor.g;\n    data.color[colorStart + 2] = lightColor.b;\n    data.direction[directionStart] = direction.x;\n    data.direction[directionStart + 1] = direction.y;\n    data.direction[directionStart + 2] = direction.z;\n  }\n}\n","import { Color, Vector3 } from \"@oasis-engine/math\";\nimport { Shader } from \"../shader\";\nimport { ShaderData } from \"../shader/ShaderData\";\nimport { ShaderProperty } from \"../shader/ShaderProperty\";\nimport { Light } from \"./Light\";\n\n/**\n * Point light.\n */\nexport class PointLight extends Light {\n  private static _colorProperty: ShaderProperty = Shader.getPropertyByName(\"u_pointLightColor\");\n  private static _positionProperty: ShaderProperty = Shader.getPropertyByName(\"u_pointLightPosition\");\n  private static _distanceProperty: ShaderProperty = Shader.getPropertyByName(\"u_pointLightDistance\");\n\n  private static _combinedData = {\n    color: new Float32Array(3 * Light._maxLight),\n    position: new Float32Array(3 * Light._maxLight),\n    distance: new Float32Array(Light._maxLight)\n  };\n\n  /**\n   * @internal\n   */\n  static _updateShaderData(shaderData: ShaderData): void {\n    const data = PointLight._combinedData;\n\n    shaderData.setFloatArray(PointLight._colorProperty, data.color);\n    shaderData.setFloatArray(PointLight._positionProperty, data.position);\n    shaderData.setFloatArray(PointLight._distanceProperty, data.distance);\n  }\n  /** Light color. */\n  color: Color = new Color(1, 1, 1, 1);\n  /** Light intensity. */\n  intensity: number = 1.0;\n  /** Defines a distance cutoff at which the light's intensity must be considered zero. */\n  distance: number = 100;\n\n  private _lightColor: Color = new Color(1, 1, 1, 1);\n\n  /**\n   * Get light position.\n   */\n  get position(): Vector3 {\n    return this.entity.transform.worldPosition;\n  }\n\n  /**\n   * Get the final light color.\n   */\n  get lightColor(): Color {\n    this._lightColor.r = this.color.r * this.intensity;\n    this._lightColor.g = this.color.g * this.intensity;\n    this._lightColor.b = this.color.b * this.intensity;\n    this._lightColor.a = this.color.a * this.intensity;\n    return this._lightColor;\n  }\n\n  /**\n   * @internal\n   */\n  _appendData(lightIndex: number): void {\n    const colorStart = lightIndex * 3;\n    const positionStart = lightIndex * 3;\n    const distanceStart = lightIndex;\n\n    const lightColor = this.lightColor;\n    const lightPosition = this.position;\n\n    const data = PointLight._combinedData;\n\n    data.color[colorStart] = lightColor.r;\n    data.color[colorStart + 1] = lightColor.g;\n    data.color[colorStart + 2] = lightColor.b;\n    data.position[positionStart] = lightPosition.x;\n    data.position[positionStart + 1] = lightPosition.y;\n    data.position[positionStart + 2] = lightPosition.z;\n    data.distance[distanceStart] = this.distance;\n  }\n}\n","import { Color, Vector3 } from \"@oasis-engine/math\";\nimport { Shader } from \"../shader\";\nimport { ShaderData } from \"../shader/ShaderData\";\nimport { ShaderProperty } from \"../shader/ShaderProperty\";\nimport { Light } from \"./Light\";\n\n/**\n * Spot light.\n */\nexport class SpotLight extends Light {\n  private static _colorProperty: ShaderProperty = Shader.getPropertyByName(\"u_spotLightColor\");\n  private static _positionProperty: ShaderProperty = Shader.getPropertyByName(\"u_spotLightPosition\");\n  private static _directionProperty: ShaderProperty = Shader.getPropertyByName(\"u_spotLightDirection\");\n  private static _distanceProperty: ShaderProperty = Shader.getPropertyByName(\"u_spotLightDistance\");\n  private static _angleCosProperty: ShaderProperty = Shader.getPropertyByName(\"u_spotLightAngleCos\");\n  private static _penumbraCosProperty: ShaderProperty = Shader.getPropertyByName(\"u_spotLightPenumbraCos\");\n\n  private static _combinedData = {\n    color: new Float32Array(3 * Light._maxLight),\n    position: new Float32Array(3 * Light._maxLight),\n    direction: new Float32Array(3 * Light._maxLight),\n    distance: new Float32Array(Light._maxLight),\n    angleCos: new Float32Array(Light._maxLight),\n    penumbraCos: new Float32Array(Light._maxLight)\n  };\n\n  /**\n   * @internal\n   */\n  static _updateShaderData(shaderData: ShaderData): void {\n    const data = SpotLight._combinedData;\n\n    shaderData.setFloatArray(SpotLight._colorProperty, data.color);\n    shaderData.setFloatArray(SpotLight._positionProperty, data.position);\n    shaderData.setFloatArray(SpotLight._directionProperty, data.direction);\n    shaderData.setFloatArray(SpotLight._distanceProperty, data.distance);\n    shaderData.setFloatArray(SpotLight._angleCosProperty, data.angleCos);\n    shaderData.setFloatArray(SpotLight._penumbraCosProperty, data.penumbraCos);\n  }\n\n  /** Light color. */\n  color: Color = new Color(1, 1, 1, 1);\n  /** Light intensity. */\n  intensity: number = 1.0;\n  /** Defines a distance cutoff at which the light's intensity must be considered zero. */\n  distance: number = 100;\n  /** Angle, in radians, from centre of spotlight where falloff begins. */\n  angle: number = Math.PI / 6;\n  /** Angle, in radians, from falloff begins to ends. */\n  penumbra: number = Math.PI / 12;\n\n  private _forward: Vector3 = new Vector3();\n  private _lightColor: Color = new Color(1, 1, 1, 1);\n  private _inverseDirection: Vector3 = new Vector3();\n\n  /**\n   * Get light position.\n   */\n  get position(): Vector3 {\n    return this.entity.transform.worldPosition;\n  }\n\n  /**\n   * Get light direction.\n   */\n  get direction(): Vector3 {\n    this.entity.transform.getWorldForward(this._forward);\n    return this._forward;\n  }\n\n  /**\n   * Get the opposite direction of the spotlight.\n   */\n  get reverseDirection(): Vector3 {\n    Vector3.scale(this.direction, -1, this._inverseDirection);\n    return this._inverseDirection;\n  }\n\n  /**\n   * Get the final light color.\n   */\n  get lightColor(): Color {\n    this._lightColor.r = this.color.r * this.intensity;\n    this._lightColor.g = this.color.g * this.intensity;\n    this._lightColor.b = this.color.b * this.intensity;\n    this._lightColor.a = this.color.a * this.intensity;\n    return this._lightColor;\n  }\n\n  /**\n   * @internal\n   */\n  _appendData(lightIndex: number): void {\n    const colorStart = lightIndex * 3;\n    const positionStart = lightIndex * 3;\n    const directionStart = lightIndex * 3;\n    const distanceStart = lightIndex;\n    const penumbraCosStart = lightIndex;\n    const angleCosStart = lightIndex;\n\n    const color = this.lightColor;\n    const position = this.position;\n    const direction = this.direction;\n\n    const data = SpotLight._combinedData;\n\n    data.color[colorStart] = color.r;\n    data.color[colorStart + 1] = color.g;\n    data.color[colorStart + 2] = color.b;\n    data.position[positionStart] = position.x;\n    data.position[positionStart + 1] = position.y;\n    data.position[positionStart + 2] = position.z;\n    data.direction[directionStart] = direction.x;\n    data.direction[directionStart + 1] = direction.y;\n    data.direction[directionStart + 2] = direction.z;\n    data.distance[distanceStart] = this.distance;\n    data.angleCos[angleCosStart] = Math.cos(this.angle);\n    data.penumbraCos[penumbraCosStart] = Math.cos(this.angle + this.penumbra);\n  }\n}\n","import { Logger } from \"../base/Logger\";\nimport { SceneFeature } from \"../SceneFeature\";\nimport { ShaderData } from \"../shader/ShaderData\";\nimport { DirectLight } from \"./DirectLight\";\nimport { Light } from \"./Light\";\nimport { PointLight } from \"./PointLight\";\nimport { SpotLight } from \"./SpotLight\";\n\n/**\n * Determine whether there are lights in the scene.\n * @returns Has light\n */\nexport function hasLight(): boolean {\n  return this.findFeature(LightFeature).visibleLights.length > 0;\n}\n\n/**\n * Light plug-in.\n */\nexport class LightFeature extends SceneFeature {\n  visibleLights: Light[];\n\n  constructor() {\n    super();\n    this.visibleLights = [];\n  }\n\n  /**\n   * Register a light object to the current scene.\n   * @param light\n   */\n  attachRenderLight(light: Light): void {\n    const index = this.visibleLights.indexOf(light);\n    if (index == -1) {\n      this.visibleLights.push(light);\n    } else {\n      Logger.warn(\"Light already attached.\");\n    }\n  }\n\n  /**\n   * Remove a light object from the current scene.\n   * @param light\n   */\n  detachRenderLight(light: Light): void {\n    const index = this.visibleLights.indexOf(light);\n    if (index != -1) {\n      this.visibleLights.splice(index, 1);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _updateShaderData(shaderData: ShaderData) {\n    /**\n     * ambientLight and envMapLight only use the last one in the scene\n     * */\n    let directLightCount = 0;\n    let pointLightCount = 0;\n    let spotLightCount = 0;\n\n    let lights = this.visibleLights;\n    for (let i = 0, len = lights.length; i < len; i++) {\n      const light = lights[i];\n      if (light instanceof DirectLight) {\n        light._appendData(directLightCount++);\n      } else if (light instanceof PointLight) {\n        light._appendData(pointLightCount++);\n      } else if (light instanceof SpotLight) {\n        light._appendData(spotLightCount++);\n      }\n    }\n\n    if (directLightCount) {\n      DirectLight._updateShaderData(shaderData);\n      shaderData.enableMacro(\"O3_DIRECT_LIGHT_COUNT\", directLightCount.toString());\n    } else {\n      shaderData.disableMacro(\"O3_DIRECT_LIGHT_COUNT\");\n    }\n\n    if (pointLightCount) {\n      PointLight._updateShaderData(shaderData);\n      shaderData.enableMacro(\"O3_POINT_LIGHT_COUNT\", pointLightCount.toString());\n    } else {\n      shaderData.disableMacro(\"O3_POINT_LIGHT_COUNT\");\n    }\n\n    if (spotLightCount) {\n      SpotLight._updateShaderData(shaderData);\n      shaderData.enableMacro(\"O3_SPOT_LIGHT_COUNT\", spotLightCount.toString());\n    } else {\n      shaderData.disableMacro(\"O3_SPOT_LIGHT_COUNT\");\n    }\n  }\n}\n","import { Background } from \"./Background\";\nimport { EngineObject, Logger } from \"./base\";\nimport { Camera } from \"./Camera\";\nimport { Engine } from \"./Engine\";\nimport { Entity } from \"./Entity\";\nimport { FeatureManager } from \"./FeatureManager\";\nimport { AmbientLight } from \"./lighting/AmbientLight\";\nimport { LightFeature } from \"./lighting/LightFeature\";\nimport { SceneFeature } from \"./SceneFeature\";\nimport { ShaderDataGroup } from \"./shader/enums/ShaderDataGroup\";\nimport { ShaderData } from \"./shader/ShaderData\";\nimport { ShaderMacroCollection } from \"./shader/ShaderMacroCollection\";\n\n/**\n * Scene.\n */\nexport class Scene extends EngineObject {\n  static sceneFeatureManager = new FeatureManager<SceneFeature>();\n\n  /** Scene name. */\n  name: string;\n\n  /** The background of the scene. */\n  readonly background: Background = new Background(this._engine);\n\n  /** Scene-related shader data. */\n  readonly shaderData: ShaderData = new ShaderData(ShaderDataGroup.Scene);\n\n  /** @internal */\n  _activeCameras: Camera[] = [];\n  /** @internal */\n  _isActiveInEngine: boolean = false;\n  /** @internal */\n  _globalShaderMacro: ShaderMacroCollection = new ShaderMacroCollection();\n  /** @internal */\n  _rootEntities: Entity[] = [];\n\n  private _ambientLight: AmbientLight;\n\n  /**\n   * Ambient light.\n   */\n  get ambientLight(): AmbientLight {\n    return this._ambientLight;\n  }\n\n  set ambientLight(value: AmbientLight) {\n    if (!value) {\n      Logger.warn(\"The scene must have one ambient light\");\n      return;\n    }\n\n    const lastAmbientLight = this._ambientLight;\n    if (lastAmbientLight !== value) {\n      lastAmbientLight && lastAmbientLight._removeFromScene(this);\n      value._addToScene(this);\n      this._ambientLight = value;\n    }\n  }\n\n  /**\n   * Count of root entities.\n   */\n  get rootEntitiesCount(): number {\n    return this._rootEntities.length;\n  }\n\n  /**\n   * Root entity collection.\n   */\n  get rootEntities(): Readonly<Entity[]> {\n    return this._rootEntities;\n  }\n\n  /**\n   * Create scene.\n   * @param engine - Engine\n   * @param name - Name\n   */\n  constructor(engine: Engine, name?: string) {\n    super(engine);\n    this.name = name || \"\";\n\n    const shaderData = this.shaderData;\n    Scene.sceneFeatureManager.addObject(this);\n    shaderData._addRefCount(1);\n    this.ambientLight = new AmbientLight();\n    engine.sceneManager._allScenes.push(this);\n  }\n\n  /**\n   * Create root entity.\n   * @param name - Entity name\n   * @returns Entity\n   */\n  createRootEntity(name?: string): Entity {\n    const entity = new Entity(this._engine, name);\n    this.addRootEntity(entity);\n    return entity;\n  }\n\n  /**\n   * Append an entity.\n   * @param entity - The root entity to add\n   */\n  addRootEntity(entity: Entity): void;\n\n  /**\n   * Append an entity.\n   * @param index - specified index\n   * @param entity - The root entity to add\n   */\n  addRootEntity(index: number, entity: Entity): void;\n\n  addRootEntity(indexOrChild: number | Entity, entity?: Entity): void {\n    let index: number;\n    if (typeof indexOrChild === \"number\") {\n      index = indexOrChild;\n    } else {\n      index = undefined;\n      entity = indexOrChild;\n    }\n\n    const isRoot = entity._isRoot;\n    // let entity become root\n    if (!isRoot) {\n      entity._isRoot = true;\n      entity._removeFromParent();\n    }\n\n    // add or remove from scene's rootEntities\n    const oldScene = entity._scene;\n    if (oldScene !== this) {\n      if (oldScene && isRoot) {\n        oldScene._removeFromEntityList(entity);\n      }\n      this._addToRootEntityList(index, entity);\n      Entity._traverseSetOwnerScene(entity, this);\n    } else if (!isRoot) {\n      this._addToRootEntityList(index, entity);\n    }\n\n    // process entity active/inActive\n    if (this._isActiveInEngine) {\n      !entity._isActiveInHierarchy && entity._isActive && entity._processActive();\n    } else {\n      entity._isActiveInHierarchy && entity._processInActive();\n    }\n  }\n\n  /**\n   * Remove an entity.\n   * @param entity - The root entity to remove\n   */\n  removeRootEntity(entity: Entity): void {\n    if (entity._isRoot && entity._scene == this) {\n      this._removeFromEntityList(entity);\n      entity._isRoot = false;\n      this._isActiveInEngine && entity._isActiveInHierarchy && entity._processInActive();\n      Entity._traverseSetOwnerScene(entity, null);\n    }\n  }\n\n  /**\n   * Get root entity from index.\n   * @param index - Index\n   * @returns Entity\n   */\n  getRootEntity(index: number = 0): Entity | null {\n    return this._rootEntities[index];\n  }\n\n  /**\n   * Find entity globally by name.\n   * @param name - Entity name\n   * @returns Entity\n   */\n  findEntityByName(name: string): Entity | null {\n    const children = this._rootEntities;\n    for (let i = children.length - 1; i >= 0; i--) {\n      const child = children[i];\n      if (child.name === name) {\n        return child;\n      }\n    }\n\n    for (let i = children.length - 1; i >= 0; i--) {\n      const child = children[i];\n      const entity = child.findByName(name);\n      if (entity) {\n        return entity;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Find entity globally by name,use ‘/’ symbol as a path separator.\n   * @param path - Entity's path\n   * @returns Entity\n   */\n  findEntityByPath(path: string): Entity | null {\n    const splits = path.split(\"/\").filter(Boolean);\n    for (let i = 0, n = this.rootEntitiesCount; i < n; i++) {\n      let findEntity = this.getRootEntity(i);\n      if (findEntity.name != splits[0]) continue;\n      for (let j = 1, m = splits.length; j < m; ++j) {\n        findEntity = Entity._findChildByName(findEntity, splits[j]);\n        if (!findEntity) break;\n      }\n      return findEntity;\n    }\n    return null;\n  }\n\n  /**\n   * Destroy this scene.\n   */\n  destroy(): void {\n    if (this._destroyed) {\n      return;\n    }\n\n    this._destroy();\n\n    const allScenes = this.engine.sceneManager._allScenes;\n    allScenes.splice(allScenes.indexOf(this), 1);\n  }\n\n  /**\n   * @internal\n   */\n  _attachRenderCamera(camera: Camera): void {\n    const index = this._activeCameras.indexOf(camera);\n    if (index === -1) {\n      this._activeCameras.push(camera);\n    } else {\n      Logger.warn(\"Camera already attached.\");\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _detachRenderCamera(camera: Camera): void {\n    const index = this._activeCameras.indexOf(camera);\n    if (index !== -1) {\n      this._activeCameras.splice(index, 1);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _processActive(active: boolean): void {\n    this._isActiveInEngine = active;\n    const rootEntities = this._rootEntities;\n    for (let i = rootEntities.length - 1; i >= 0; i--) {\n      const entity = rootEntities[i];\n      if (entity._isActive) {\n        active ? entity._processActive() : entity._processInActive();\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _updateShaderData(): void {\n    this.findFeature(LightFeature)._updateShaderData(this.shaderData);\n    // union scene and camera macro.\n    ShaderMacroCollection.unionCollection(\n      this.engine._macroCollection,\n      this.shaderData._macroCollection,\n      this._globalShaderMacro\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _removeFromEntityList(entity: Entity): void {\n    const rootEntities = this._rootEntities;\n    let index = entity._siblingIndex;\n    rootEntities.splice(index, 1);\n    for (let n = rootEntities.length; index < n; index++) {\n      rootEntities[index]._siblingIndex--;\n    }\n    entity._siblingIndex = -1;\n  }\n\n  /**\n   * @internal\n   */\n  _destroy(): void {\n    this._isActiveInEngine && (this._engine.sceneManager.activeScene = null);\n    Scene.sceneFeatureManager.callFeatureMethod(this, \"destroy\", [this]);\n    for (let i = 0, n = this.rootEntitiesCount; i < n; i++) {\n      this._rootEntities[i].destroy();\n    }\n    this._rootEntities.length = 0;\n    this._activeCameras.length = 0;\n    (Scene.sceneFeatureManager as any)._objects = [];\n    this.shaderData._addRefCount(-1);\n  }\n\n  private _addToRootEntityList(index: number, rootEntity: Entity): void {\n    const rootEntities = this._rootEntities;\n    const rootEntityCount = rootEntities.length;\n    if (index === undefined) {\n      rootEntity._siblingIndex = rootEntityCount;\n      rootEntities.push(rootEntity);\n    } else {\n      if (index < 0 || index > rootEntityCount) {\n        throw `The index ${index} is out of child list bounds ${rootEntityCount}`;\n      }\n      rootEntity._siblingIndex = index;\n      rootEntities.splice(index, 0, rootEntity);\n      for (let i = index + 1, n = rootEntityCount + 1; i < n; i++) {\n        rootEntities[i]._siblingIndex++;\n      }\n    }\n  }\n\n  //-----------------------------------------@deprecated-----------------------------------\n  static registerFeature(Feature: new () => SceneFeature) {\n    Scene.sceneFeatureManager.registerFeature(Feature);\n  }\n\n  findFeature<T extends SceneFeature>(Feature: { new (): T }): T {\n    return Scene.sceneFeatureManager.findFeature(this, Feature) as T;\n  }\n\n  features: SceneFeature[] = [];\n}\n","import { AssetPromise } from \"./asset/AssetPromise\";\nimport { Engine } from \"./Engine\";\nimport { Scene } from \"./Scene\";\n\n/**\n * Scene manager.\n */\nexport class SceneManager {\n  /** @internal */\n  _allScenes: Scene[] = [];\n  /** @internal */\n  _activeScene: Scene;\n\n  /**\n   * Get the activated scene.\n   */\n  get activeScene(): Scene {\n    return this._activeScene;\n  }\n\n  set activeScene(scene: Scene) {\n    const oldScene = this._activeScene;\n    if (oldScene !== scene) {\n      oldScene && oldScene._processActive(false);\n      scene && scene._processActive(true);\n      this._activeScene = scene;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  constructor(public readonly engine: Engine) {}\n\n  /**\n   * Load and activate scene.\n   * @param url - the path of the scene\n   * @param destroyOldScene - whether to destroy old scene information\n   * @returns scene promise\n   */\n  loadScene(url: string, destroyOldScene: boolean = true): AssetPromise<Scene> {\n    const scenePromise = this.engine.resourceManager.load<Scene>(url);\n    scenePromise.then((scene: Scene) => {\n      const oldScene: Scene = this._activeScene;\n      this.activeScene = scene;\n      if (oldScene && destroyOldScene) {\n        oldScene.destroy();\n      }\n    });\n    return scenePromise;\n  }\n\n  /**\n   * Merge the source scene into the target scene.\n   * @remarks the global information of destScene will be used after the merge, and the lightingMap information will be merged.\n   * @param sourceScene - source scene\n   * @param destScene - target scene\n   */\n  mergeScenes(sourceScene: Scene, destScene: Scene): void {\n    const oldRootEntities = sourceScene.rootEntities;\n    for (let i: number = 0, n: number = oldRootEntities.length; i < n; i++) {\n      destScene.addRootEntity(oldRootEntities[i]);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _destroyAllScene(): void {\n    const allScenes = this._allScenes;\n    for (let i = 0, n = allScenes.length; i < n; i++) {\n      allScenes[i]._destroy();\n    }\n    allScenes.length = 0;\n  }\n}\n","import blinnPhongFs from \"../shaderlib/extra/blinn-phong.fs.glsl\";\nimport blinnPhongVs from \"../shaderlib/extra/blinn-phong.vs.glsl\";\nimport particleFs from \"../shaderlib/extra/particle.fs.glsl\";\nimport particleVs from \"../shaderlib/extra/particle.vs.glsl\";\nimport pbrFs from \"../shaderlib/extra/pbr.fs.glsl\";\nimport pbrSpecularFs from \"../shaderlib/extra/pbr-specular.fs.glsl\";\nimport pbrVs from \"../shaderlib/extra/pbr.vs.glsl\";\nimport shadowMapFs from \"../shaderlib/extra/shadow-map.fs.glsl\";\nimport shadowMapVs from \"../shaderlib/extra/shadow-map.vs.glsl\";\nimport shadowFs from \"../shaderlib/extra/shadow.fs.glsl\";\nimport skyboxFs from \"../shaderlib/extra/skybox.fs.glsl\";\nimport skyboxVs from \"../shaderlib/extra/skybox.vs.glsl\";\nimport spriteMaskFs from \"../shaderlib/extra/sprite-mask.fs.glsl\";\nimport spriteMaskVs from \"../shaderlib/extra/sprite-mask.vs.glsl\";\nimport spriteFs from \"../shaderlib/extra/sprite.fs.glsl\";\nimport spriteVs from \"../shaderlib/extra/sprite.vs.glsl\";\nimport unlitFs from \"../shaderlib/extra/unlit.fs.glsl\";\nimport unlitVs from \"../shaderlib/extra/unlit.vs.glsl\";\nimport backgroundTextureVs from \"../shaderlib/extra/background-texture.vs.glsl\";\nimport backgroundTextureFs from \"../shaderlib/extra/background-texture.fs.glsl\";\nimport { Shader } from \"./Shader\";\n\n/**\n * Internal shader pool.\n * @internal\n */\nexport class ShaderPool {\n  static init(): void {\n    Shader.create(\"blinn-phong\", blinnPhongVs, blinnPhongFs);\n    Shader.create(\"pbr\", pbrVs, pbrFs);\n    Shader.create(\"pbr-specular\", pbrVs, pbrSpecularFs);\n    Shader.create(\"unlit\", unlitVs, unlitFs);\n    Shader.create(\"shadow-map\", shadowMapVs, shadowMapFs);\n    Shader.create(\"shadow\", shadowMapVs, shadowFs);\n    Shader.create(\"skybox\", skyboxVs, skyboxFs);\n    Shader.create(\"particle-shader\", particleVs, particleFs);\n    Shader.create(\"SpriteMask\", spriteMaskVs, spriteMaskFs);\n    Shader.create(\"Sprite\", spriteVs, spriteFs);\n    Shader.create(\"background-texture\", backgroundTextureVs, backgroundTextureFs);\n  }\n}\n","import { ShaderMacroCollection } from \"./ShaderMacroCollection\";\nimport { ShaderProgram } from \"./ShaderProgram\";\n\n/**\n * Shader program pool.\n * @internal\n */\nexport class ShaderProgramPool {\n  private _cacheHierarchy: number = 1;\n  private _cacheMap: object = Object.create(null);\n  private _lastQueryMap: Record<number, ShaderProgram>;\n  private _lastQueryKey: number;\n\n  /**\n   * Get shader program by macro collection.\n   * @param macros - macro collection\n   * @returns shader program\n   */\n  get(macros: ShaderMacroCollection): ShaderProgram | null {\n    let cacheMap = this._cacheMap;\n    const maskLength = macros._length;\n    if (maskLength > this._cacheHierarchy) {\n      this._resizeCacheMapHierarchy(cacheMap, 0, maskLength);\n    }\n\n    const mask = macros._mask;\n    const endIndex = macros._length - 1;\n    const maxEndIndex = this._cacheHierarchy - 1;\n    for (let i = 0; i < maxEndIndex; i++) {\n      const subMask = endIndex < i ? 0 : mask[i];\n      let subCacheShaders: object = cacheMap[subMask];\n      subCacheShaders || (cacheMap[subMask] = subCacheShaders = Object.create(null));\n      cacheMap = subCacheShaders;\n    }\n\n    const cacheKey = endIndex < maxEndIndex ? 0 : mask[maxEndIndex];\n    const shader = (<Record<number, ShaderProgram>>cacheMap)[cacheKey];\n    if (!shader) {\n      this._lastQueryKey = cacheKey;\n      this._lastQueryMap = <Record<number, ShaderProgram>>cacheMap;\n    }\n    return shader;\n  }\n\n  /**\n   * Cache the shader program.\n   *\n   * @remarks\n   * The method must return an empty value after calling get() to run normally.\n   *\n   * @param shaderProgram - shader program\n   */\n  cache(shaderProgram: ShaderProgram): void {\n    this._lastQueryMap[this._lastQueryKey] = shaderProgram;\n  }\n\n  private _resizeCacheMapHierarchy(cacheMap: object, hierarchy: number, resizeLength: number): void {\n    // only expand but not shrink.\n    const end = this._cacheHierarchy - 1;\n    if (hierarchy == end) {\n      for (let k in cacheMap) {\n        const shader: ShaderProgram = cacheMap[k];\n        for (let i = 0, n = resizeLength - end; i < n; i++) {\n          if (i == n - 1) {\n            cacheMap[0] = shader;\n          } else {\n            cacheMap = cacheMap[i == 0 ? k : 0] = Object.create(null);\n          }\n        }\n      }\n      this._cacheHierarchy = resizeLength;\n    } else {\n      for (let k in cacheMap) {\n        this._resizeCacheMapHierarchy(cacheMap[k], ++hierarchy, resizeLength);\n      }\n    }\n  }\n}\n","import { BoundingBox, Color, Vector3 } from \"@oasis-engine/math\";\nimport { ColorSpace } from \".\";\nimport { ResourceManager } from \"./asset/ResourceManager\";\nimport { Event, EventDispatcher, Logger, Time } from \"./base\";\nimport { Canvas } from \"./Canvas\";\nimport { ComponentsManager } from \"./ComponentsManager\";\nimport { EngineFeature } from \"./EngineFeature\";\nimport { EngineSettings } from \"./EngineSettings\";\nimport { Entity } from \"./Entity\";\nimport { FeatureManager } from \"./FeatureManager\";\nimport { InputManager } from \"./input/InputManager\";\nimport { RenderQueueType } from \"./material/enums/RenderQueueType\";\nimport { Material } from \"./material/Material\";\nimport { PhysicsManager } from \"./physics\";\nimport { IHardwareRenderer } from \"./renderingHardwareInterface/IHardwareRenderer\";\nimport { ClassPool } from \"./RenderPipeline/ClassPool\";\nimport { MeshRenderElement } from \"./RenderPipeline/MeshRenderElement\";\nimport { RenderContext } from \"./RenderPipeline/RenderContext\";\nimport { SpriteElement } from \"./RenderPipeline/SpriteElement\";\nimport { SpriteMaskElement } from \"./RenderPipeline/SpriteMaskElement\";\nimport { SpriteMaskManager } from \"./RenderPipeline/SpriteMaskManager\";\nimport { TextRenderElement } from \"./RenderPipeline/TextRenderElement\";\nimport { Scene } from \"./Scene\";\nimport { SceneManager } from \"./SceneManager\";\nimport { CompareFunction } from \"./shader\";\nimport { BlendFactor } from \"./shader/enums/BlendFactor\";\nimport { BlendOperation } from \"./shader/enums/BlendOperation\";\nimport { ColorWriteMask } from \"./shader/enums/ColorWriteMask\";\nimport { CullMode } from \"./shader/enums/CullMode\";\nimport { Shader } from \"./shader/Shader\";\nimport { ShaderMacro } from \"./shader/ShaderMacro\";\nimport { ShaderMacroCollection } from \"./shader/ShaderMacroCollection\";\nimport { ShaderPool } from \"./shader/ShaderPool\";\nimport { ShaderProgramPool } from \"./shader/ShaderProgramPool\";\nimport { RenderState } from \"./shader/state/RenderState\";\nimport { Texture2D, Texture2DArray, TextureCube, TextureCubeFace, TextureFormat } from \"./texture\";\n\n/** TODO: delete */\nconst engineFeatureManager = new FeatureManager<EngineFeature>();\nShaderPool.init();\n\n/**\n * Engine.\n */\nexport class Engine extends EventDispatcher {\n  /** @internal */\n  static _gammaMacro: ShaderMacro = Shader.getMacroByName(\"OASIS_COLORSPACE_GAMMA\");\n  /** @internal Conversion of space units to pixel units for 2D. */\n  static _pixelsPerUnit: number = 100;\n  /** @internal */\n  static _defaultBoundingBox: BoundingBox = new BoundingBox(new Vector3(0, 0, 0), new Vector3(0, 0, 0));\n\n  /** Physics manager of Engine. */\n  readonly physicsManager: PhysicsManager;\n  readonly inputManager: InputManager;\n\n  _componentsManager: ComponentsManager = new ComponentsManager();\n  _hardwareRenderer: IHardwareRenderer;\n  _lastRenderState: RenderState = new RenderState();\n  _renderElementPool: ClassPool<MeshRenderElement> = new ClassPool(MeshRenderElement);\n  _spriteElementPool: ClassPool<SpriteElement> = new ClassPool(SpriteElement);\n  _spriteMaskElementPool: ClassPool<SpriteMaskElement> = new ClassPool(SpriteMaskElement);\n  _textElementPool: ClassPool<TextRenderElement> = new ClassPool(TextRenderElement);\n  _spriteDefaultMaterial: Material;\n  _spriteMaskDefaultMaterial: Material;\n  _renderContext: RenderContext = new RenderContext();\n\n  /* @internal */\n  _magentaTexture2D: Texture2D;\n  /* @internal */\n  _magentaTextureCube: TextureCube;\n  /* @internal */\n  _magentaTexture2DArray: Texture2DArray;\n  /* @internal */\n  _magentaMaterial: Material;\n  /* @internal */\n  _backgroundTextureMaterial: Material;\n  /* @internal */\n  _renderCount: number = 0;\n  /* @internal */\n  _shaderProgramPools: ShaderProgramPool[] = [];\n  /** @internal */\n  _spriteMaskManager: SpriteMaskManager;\n  /** @internal */\n  _canSpriteBatch: boolean = true;\n  /** @internal @todo: temporary solution */\n  _macroCollection: ShaderMacroCollection = new ShaderMacroCollection();\n\n  protected _canvas: Canvas;\n\n  private _settings: EngineSettings = {};\n  private _resourceManager: ResourceManager = new ResourceManager(this);\n  private _sceneManager: SceneManager = new SceneManager(this);\n  private _vSyncCount: number = 1;\n  private _targetFrameRate: number = 60;\n  private _time: Time = new Time();\n  private _isPaused: boolean = true;\n  private _requestId: number;\n  private _timeoutId: number;\n  private _vSyncCounter: number = 1;\n  private _targetFrameInterval: number = 1000 / 60;\n  private _destroyed: boolean = false;\n  private _waittingDestroy: boolean = false;\n\n  private _animate = () => {\n    if (this._vSyncCount) {\n      this._requestId = requestAnimationFrame(this._animate);\n      if (this._vSyncCounter++ % this._vSyncCount === 0) {\n        this.update();\n        this._vSyncCounter = 1;\n      }\n    } else {\n      this._timeoutId = window.setTimeout(this._animate, this._targetFrameInterval);\n      this.update();\n    }\n  };\n\n  /**\n   * Settings of Engine.\n   */\n  get settings(): Readonly<EngineSettings> {\n    return this._settings;\n  }\n\n  /**\n   * The canvas to use for rendering.\n   */\n  get canvas(): Canvas {\n    return this._canvas;\n  }\n\n  /**\n   * Get the resource manager.\n   */\n  get resourceManager(): ResourceManager {\n    return this._resourceManager;\n  }\n\n  /**\n   * Get the scene manager.\n   */\n  get sceneManager(): SceneManager {\n    return this._sceneManager;\n  }\n\n  /**\n   * Get the Time class.\n   */\n  get time(): Time {\n    return this._time;\n  }\n\n  /**\n   * Whether the engine is paused.\n   */\n  get isPaused(): boolean {\n    return this._isPaused;\n  }\n\n  /**\n   * The number of vertical synchronization means the number of vertical blanking for one frame.\n   * @remarks 0 means that the vertical synchronization is turned off.\n   */\n  get vSyncCount(): number {\n    return this._vSyncCount;\n  }\n\n  set vSyncCount(value: number) {\n    this._vSyncCount = Math.max(0, Math.floor(value));\n  }\n\n  /**\n   * Set the target frame rate you want to achieve.\n   * @remarks\n   * It only takes effect when vSyncCount = 0 (ie, vertical synchronization is turned off).\n   * The larger the value, the higher the target frame rate, Number.POSITIVE_INFINITY represents the infinite target frame rate.\n   */\n  get targetFrameRate(): number {\n    return this._targetFrameRate;\n  }\n\n  set targetFrameRate(value: number) {\n    value = Math.max(0.000001, value);\n    this._targetFrameRate = value;\n    this._targetFrameInterval = 1000 / value;\n  }\n\n  /**\n   * Indicates whether the engine is destroyed.\n   */\n  get destroyed(): boolean {\n    return this._destroyed;\n  }\n\n  /**\n   * Create engine.\n   * @param canvas - The canvas to use for rendering\n   * @param hardwareRenderer - Graphics API renderer\n   */\n  constructor(canvas: Canvas, hardwareRenderer: IHardwareRenderer, settings?: EngineSettings) {\n    super();\n    this._hardwareRenderer = hardwareRenderer;\n    this._hardwareRenderer.init(canvas);\n\n    this.physicsManager = new PhysicsManager(this);\n\n    this._canvas = canvas;\n    // @todo delete\n    engineFeatureManager.addObject(this);\n    this._sceneManager.activeScene = new Scene(this, \"DefaultScene\");\n\n    this._spriteMaskManager = new SpriteMaskManager(this);\n    this._spriteDefaultMaterial = this._createSpriteMaterial();\n    this._spriteMaskDefaultMaterial = this._createSpriteMaskMaterial();\n\n    this.inputManager = new InputManager(this);\n\n    const magentaPixel = new Uint8Array([255, 0, 255, 255]);\n\n    const magentaTexture2D = new Texture2D(this, 1, 1, TextureFormat.R8G8B8A8, false);\n    magentaTexture2D.setPixelBuffer(magentaPixel);\n    magentaTexture2D.isGCIgnored = true;\n\n    const magentaTextureCube = new TextureCube(this, 1, TextureFormat.R8G8B8A8, false);\n    magentaTextureCube.setPixelBuffer(TextureCubeFace.PositiveX, magentaPixel);\n    magentaTextureCube.setPixelBuffer(TextureCubeFace.NegativeX, magentaPixel);\n    magentaTextureCube.setPixelBuffer(TextureCubeFace.PositiveY, magentaPixel);\n    magentaTextureCube.setPixelBuffer(TextureCubeFace.NegativeY, magentaPixel);\n    magentaTextureCube.setPixelBuffer(TextureCubeFace.PositiveZ, magentaPixel);\n    magentaTextureCube.setPixelBuffer(TextureCubeFace.NegativeZ, magentaPixel);\n    magentaTextureCube.isGCIgnored = true;\n\n    this._magentaTexture2D = magentaTexture2D;\n    this._magentaTextureCube = magentaTextureCube;\n\n    if (hardwareRenderer.isWebGL2) {\n      const magentaTexture2DArray = new Texture2DArray(this, 1, 1, 1, TextureFormat.R8G8B8A8, false);\n      magentaTexture2DArray.setPixelBuffer(0, magentaPixel);\n      magentaTexture2DArray.isGCIgnored = true;\n      this._magentaTexture2DArray = magentaTexture2DArray;\n    }\n\n    const magentaMaterial = new Material(this, Shader.find(\"unlit\"));\n    magentaMaterial.shaderData.setColor(\"u_baseColor\", new Color(1.0, 0.0, 1.01, 1.0));\n    this._magentaMaterial = magentaMaterial;\n\n    const backgroundTextureMaterial = new Material(this, Shader.find(\"background-texture\"));\n    backgroundTextureMaterial.isGCIgnored = true;\n    backgroundTextureMaterial.renderState.depthState.compareFunction = CompareFunction.LessEqual;\n    this._backgroundTextureMaterial = backgroundTextureMaterial;\n\n    const colorSpace = settings?.colorSpace || ColorSpace.Linear;\n    colorSpace === ColorSpace.Gamma && this._macroCollection.enable(Engine._gammaMacro);\n    this._settings.colorSpace = colorSpace;\n  }\n\n  /**\n   * Create an entity.\n   * @param name - The name of the entity\n   * @returns Entity\n   */\n  createEntity(name?: string): Entity {\n    return new Entity(this, name);\n  }\n\n  /**\n   * Pause the engine.\n   */\n  pause(): void {\n    this._isPaused = true;\n    cancelAnimationFrame(this._requestId);\n    clearTimeout(this._timeoutId);\n  }\n\n  /**\n   * Resume the engine.\n   */\n  resume(): void {\n    if (!this._isPaused) return;\n    this._isPaused = false;\n    this.time.reset();\n    this._requestId = requestAnimationFrame(this._animate);\n  }\n\n  /**\n   * Update the engine loop manually. If you call engine.run(), you generally don't need to call this function.\n   */\n  update(): void {\n    const time = this._time;\n    const deltaTime = time.deltaTime;\n\n    time.tick();\n    this._renderElementPool.resetPool();\n    this._spriteElementPool.resetPool();\n    this._spriteMaskElementPool.resetPool();\n    this._textElementPool.resetPool();\n\n    engineFeatureManager.callFeatureMethod(this, \"preTick\", [this, this._sceneManager._activeScene]);\n\n    const scene = this._sceneManager._activeScene;\n    const componentsManager = this._componentsManager;\n    if (scene) {\n      scene._activeCameras.sort((camera1, camera2) => camera1.priority - camera2.priority);\n\n      componentsManager.callScriptOnStart();\n      this.physicsManager._initialized && this.physicsManager._update(deltaTime / 1000.0);\n      this.inputManager._update();\n      componentsManager.callScriptOnUpdate(deltaTime);\n      componentsManager.callAnimationUpdate(deltaTime);\n      componentsManager.callScriptOnLateUpdate(deltaTime);\n      this._render(scene);\n    }\n\n    engineFeatureManager.callFeatureMethod(this, \"postTick\", [this, this._sceneManager._activeScene]);\n\n    // Engine is complete delayed destruction mechanism\n    if (this._waittingDestroy) {\n      this._sceneManager._destroyAllScene();\n    }\n    componentsManager.handlingInvalidScripts();\n    if (this._waittingDestroy) {\n      this._destroy();\n    }\n  }\n\n  /**\n   * Execution engine loop.\n   */\n  run(): void {\n    // @todo: delete\n    engineFeatureManager.callFeatureMethod(this, \"preLoad\", [this]);\n    this.resume();\n    this.trigger(new Event(\"run\", this));\n  }\n\n  /**\n   * Destroy engine.\n   * @remarks The timing of engine destruction is at the end of the current frame\n   */\n  destroy(): void {\n    if (this._destroyed) {\n      return;\n    }\n    this._waittingDestroy = true;\n  }\n\n  /**\n   * @internal\n   */\n  _destroy(): void {\n    this._resourceManager._destroy();\n    this._magentaTexture2D.destroy(true);\n    this._magentaTextureCube.destroy(true);\n    this.inputManager._destroy();\n    this.trigger(new Event(\"shutdown\", this));\n    engineFeatureManager.callFeatureMethod(this, \"shutdown\", [this]);\n\n    // -- cancel animation\n    this.pause();\n\n    this._animate = null;\n\n    this._sceneManager = null;\n    this._resourceManager = null;\n\n    this._canvas = null;\n\n    this.features = [];\n    this._time = null;\n\n    // delete mask manager\n    this._spriteMaskManager.destroy();\n\n    // todo: delete\n    (engineFeatureManager as any)._objects = [];\n    this.removeAllEventListeners();\n    this._waittingDestroy = false;\n    this._destroyed = true;\n  }\n\n  /**\n   * @internal\n   */\n  _getShaderProgramPool(shader: Shader): ShaderProgramPool {\n    const index = shader._shaderId;\n    const shaderProgramPools = this._shaderProgramPools;\n    let pool = shaderProgramPools[index];\n    if (!pool) {\n      const length = index + 1;\n      if (length < shaderProgramPools.length) {\n        shaderProgramPools.length = length;\n      }\n      shaderProgramPools[index] = pool = new ShaderProgramPool();\n    }\n    return pool;\n  }\n\n  _render(scene: Scene): void {\n    const cameras = scene._activeCameras;\n    const componentsManager = this._componentsManager;\n    const deltaTime = this.time.deltaTime;\n    componentsManager.callRendererOnUpdate(deltaTime);\n\n    scene._updateShaderData();\n\n    if (cameras.length > 0) {\n      for (let i = 0, n = cameras.length; i < n; i++) {\n        const camera = cameras[i];\n        componentsManager.callCameraOnBeginRender(camera);\n        Scene.sceneFeatureManager.callFeatureMethod(scene, \"preRender\", [scene, camera]); //TODO: will be removed\n        camera.render();\n        Scene.sceneFeatureManager.callFeatureMethod(scene, \"postRender\", [scene, camera]); //TODO: will be removed\n        componentsManager.callCameraOnEndRender(camera);\n      }\n    } else {\n      Logger.debug(\"NO active camera.\");\n    }\n  }\n\n  private _createSpriteMaterial(): Material {\n    const material = new Material(this, Shader.find(\"Sprite\"));\n    const renderState = material.renderState;\n    const target = renderState.blendState.targetBlendState;\n    target.enabled = true;\n    target.sourceColorBlendFactor = BlendFactor.SourceAlpha;\n    target.destinationColorBlendFactor = BlendFactor.OneMinusSourceAlpha;\n    target.sourceAlphaBlendFactor = BlendFactor.One;\n    target.destinationAlphaBlendFactor = BlendFactor.OneMinusSourceAlpha;\n    target.colorBlendOperation = target.alphaBlendOperation = BlendOperation.Add;\n    renderState.depthState.writeEnabled = false;\n    renderState.rasterState.cullMode = CullMode.Off;\n    material.renderQueueType = RenderQueueType.Transparent;\n    material.isGCIgnored = true;\n    return material;\n  }\n\n  private _createSpriteMaskMaterial(): Material {\n    const material = new Material(this, Shader.find(\"SpriteMask\"));\n    const renderState = material.renderState;\n    renderState.blendState.targetBlendState.colorWriteMask = ColorWriteMask.None;\n    renderState.rasterState.cullMode = CullMode.Off;\n    renderState.stencilState.enabled = true;\n    renderState.depthState.enabled = false;\n    material.isGCIgnored = true;\n    return material;\n  }\n\n  //-----------------------------------------@deprecated-----------------------------------\n\n  findFeature(Feature) {\n    return engineFeatureManager.findFeature(this, Feature);\n  }\n\n  static registerFeature(Feature: new () => EngineFeature): void {\n    engineFeatureManager.registerFeature(Feature);\n  }\n\n  features: EngineFeature[] = [];\n}\n","/**\n * System info.\n */\nexport class SystemInfo {\n  /**\n   * The pixel ratio of the device.\n   */\n  static get devicePixelRatio(): number {\n    return window.devicePixelRatio;\n  }\n\n  /**\n   * @internal\n   */\n  static _isIos(): boolean {\n    if (!window) {\n      return false;\n    }\n\n    const ua = window.navigator.userAgent.toLocaleLowerCase();\n    return /iphone|ipad|ipod/.test(ua);\n  }\n}\n","import { Engine } from \"./Engine\";\nimport { Scene } from \"./Scene\";\n\n/**\n * Engine feature plug-in.\n * @deprecated\n */\nexport class EngineFeature {\n  /**\n   * Callback before the engine main loop runs,used to load resource.\n   * @param engine - Engine\n   */\n  public preLoad(engine: Engine): void {}\n\n  /**\n   * Callback before every engine tick.\n   * @param engine - Engine\n   * @param currentScene - Scene\n   */\n  public preTick(engine: Engine, currentScene: Scene): void {}\n\n  /**\n   * Callback after every engine tick.\n   * @param  engine - Engine\n   */\n  public postTick(engine: Engine, currentScene: Scene): void {}\n\n  /**\n   * Callback after the engine is destroyed.\n   * @param engine - Engine\n   */\n  public shutdown(engine: Engine): void {}\n}\n","import { Camera } from \"./Camera\";\nimport { ignoreClone } from \"./clone/CloneManager\";\nimport { Component } from \"./Component\";\nimport { ColliderShape } from \"./physics\";\n\n/**\n * Script class, used for logic writing.\n */\nexport class Script extends Component {\n  /** @internal */\n  @ignoreClone\n  _started: boolean = false;\n  /** @internal */\n  @ignoreClone\n  _onStartIndex: number = -1;\n  /** @internal */\n  @ignoreClone\n  _onUpdateIndex: number = -1;\n  /** @internal */\n  @ignoreClone\n  _onLateUpdateIndex: number = -1;\n  /** @internal */\n  @ignoreClone\n  _onPhysicsUpdateIndex: number = -1;\n  /** @internal */\n  @ignoreClone\n  _onPreRenderIndex: number = -1;\n  /** @internal */\n  @ignoreClone\n  _onPostRenderIndex: number = -1;\n  @ignoreClone\n  _entityScriptsIndex: number = -1;\n  @ignoreClone\n  _waitHandlingInValid: boolean = false;\n\n  /**\n   * Called when be enabled first time, only once.\n   */\n  onAwake(): void {}\n\n  /**\n   * Called when be enabled.\n   */\n  onEnable(): void {}\n\n  /**\n   * Called before the frame-level loop start for the first time, only once.\n   */\n  onStart(): void {}\n\n  /**\n   * The main loop, called frame by frame.\n   * @param deltaTime - The deltaTime when the script update.\n   */\n  onUpdate(deltaTime: number): void {}\n\n  /**\n   * Called after the onUpdate finished, called frame by frame.\n   * @param deltaTime - The deltaTime when the script update.\n   */\n  onLateUpdate(deltaTime: number): void {}\n\n  /**\n   * Called before camera rendering, called per camera.\n   * @param camera - Current camera.\n   */\n  onBeginRender(camera: Camera): void {}\n\n  /**\n   * Called after camera rendering, called per camera.\n   * @param camera - Current camera.\n   */\n  onEndRender(camera: Camera): void {}\n\n  /**\n   * Called before physics calculations, the number of times is related to the physical update frequency.\n   */\n  onPhysicsUpdate(): void {}\n\n  /**\n   * Called when the collision enter.\n   * @param other - ColliderShape\n   */\n  onTriggerEnter(other: ColliderShape): void {}\n\n  /**\n   * Called when the collision stay.\n   * @remarks onTriggerStay is called every frame while the collision stay.\n   * @param other - ColliderShape\n   */\n  onTriggerExit(other: ColliderShape): void {}\n\n  /**\n   * Called when the collision exit.\n   * @param other - ColliderShape\n   */\n  onTriggerStay(other: ColliderShape): void {}\n\n  /**\n   * Called when the collision enter.\n   * @param other - ColliderShape\n   */\n  onCollisionEnter(other: ColliderShape): void {}\n\n  /**\n   * Called when the collision stay.\n   * @remarks onTriggerStay is called every frame while the collision stay.\n   * @param other - ColliderShape\n   */\n  onCollisionExit(other: ColliderShape): void {}\n\n  /**\n   * Called when the collision exit.\n   * @param other - ColliderShape\n   */\n  onCollisionStay(other: ColliderShape): void {}\n\n  /**\n   * Called when the pointer is down while over the ColliderShape.\n   */\n  onPointerDown(): void {}\n\n  /**\n   * Called when the pointer is up while over the ColliderShape.\n   */\n  onPointerUp(): void {}\n\n  /**\n   * Called when the pointer is down and up with the same collider.\n   */\n  onPointerClick(): void {}\n\n  /**\n   * Called when the pointer is enters the ColliderShape.\n   */\n  onPointerEnter(): void {}\n\n  /**\n   * Called when the pointer is no longer over the ColliderShape.\n   */\n  onPointerExit(): void {}\n\n  /**\n   * Called when the pointer is down while over the ColliderShape and is still holding down.\n   * @remarks onPointerDrag is called every frame while the pointer is down.\n   */\n  onPointerDrag(): void {}\n\n  /**\n   * Called when be disabled.\n   */\n  onDisable(): void {}\n\n  /**\n   * Called at the end of the destroyed frame.\n   */\n  onDestroy(): void {}\n\n  /**\n   * @internal\n   * @inheritDoc\n   * @override\n   */\n  _onAwake(): void {\n    this.onAwake();\n  }\n\n  /**\n   * @internal\n   * @inheritDoc\n   * @override\n   */\n  _onEnable(): void {\n    if (this._waitHandlingInValid) {\n      this._waitHandlingInValid = false;\n    } else {\n      const { _componentsManager: componentsManager } = this.engine;\n      const { prototype } = Script;\n      if (!this._started) {\n        componentsManager.addOnStartScript(this);\n      }\n      if (this.onUpdate !== prototype.onUpdate) {\n        componentsManager.addOnUpdateScript(this);\n      }\n      if (this.onLateUpdate !== prototype.onLateUpdate) {\n        componentsManager.addOnLateUpdateScript(this);\n      }\n      if (this.onPhysicsUpdate !== prototype.onPhysicsUpdate) {\n        componentsManager.addOnPhysicsUpdateScript(this);\n      }\n      this._entity._addScript(this);\n    }\n\n    this.onEnable();\n  }\n\n  /**\n   * @internal\n   * @inheritDoc\n   * @override\n   */\n  _onDisable(): void {\n    this._waitHandlingInValid = true;\n    this._engine._componentsManager.addDisableScript(this);\n    this.onDisable();\n  }\n\n  /**\n   * @internal\n   * @inheritDoc\n   * @override\n   */\n  _onDestroy(): void {\n    this._engine._componentsManager.addDestroyScript(this);\n  }\n\n  /**\n   * @internal\n   */\n  _handlingInValid(): void {\n    const componentsManager = this.engine._componentsManager;\n    const { prototype } = Script;\n    if (this.onUpdate !== prototype.onUpdate) {\n      componentsManager.removeOnUpdateScript(this);\n    }\n    if (this.onLateUpdate !== prototype.onLateUpdate) {\n      componentsManager.removeOnLateUpdateScript(this);\n    }\n    if (this.onPhysicsUpdate !== prototype.onPhysicsUpdate) {\n      componentsManager.removeOnPhysicsUpdateScript(this);\n    }\n\n    this._entity._removeScript(this);\n    this._waitHandlingInValid = false;\n  }\n}\n","import { Color } from \"@oasis-engine/math\";\nimport { Camera } from \"../Camera\";\nimport { CameraClearFlags } from \"../enums/CameraClearFlags\";\nimport { Layer } from \"../Layer\";\nimport { Material } from \"../material/Material\";\nimport { RenderTarget } from \"../texture/RenderTarget\";\nimport { RenderQueue } from \"./RenderQueue\";\n\nlet passNum = 0;\n\n/**\n * RenderPass.\n */\nclass RenderPass {\n  public name: string;\n  public enabled: boolean;\n  public priority: number;\n  public renderTarget: RenderTarget;\n  public replaceMaterial: Material;\n  public mask: Layer;\n  public renderOverride: boolean;\n  public clearFlags: CameraClearFlags | undefined;\n  public clearColor: Color | undefined;\n\n  /**\n   * Create a RenderPass.\n   * @param name - Pass name\n   * @param priority - Priority, less than 0 before the default pass, greater than 0 after the default pass\n   * @param renderTarget - The specified Render Target\n   * @param replaceMaterial -  Replaced material\n   * @param mask - Perform bit and operations with Entity.Layer to filter the objects that this Pass needs to render\n   */\n  constructor(\n    name = `RENDER_PASS${passNum++}`,\n    priority = 0,\n    renderTarget = null,\n    replaceMaterial = null,\n    mask = null\n  ) {\n    this.name = name;\n    this.enabled = true;\n    this.priority = priority;\n    this.renderTarget = renderTarget;\n    this.replaceMaterial = replaceMaterial;\n    this.mask = mask || Layer.Everything;\n    this.renderOverride = false; // If renderOverride is set to true, you need to implement the render method\n  }\n\n  /**\n   * Rendering callback, will be executed if renderOverride is set to true.\n   * @param camera - Camera\n   * @param opaqueQueue - Opaque queue\n   * @param alphaTestQueue - Alpha test queue\n   * @param transparentQueue - Transparent queue\n   */\n  render(camera: Camera, opaqueQueue: RenderQueue, alphaTestQueue: RenderQueue, transparentQueue: RenderQueue) {}\n\n  /**\n   * Post rendering callback.\n   * @param camera - Camera\n   * @param opaqueQueue - Opaque queue\n   * @param alphaTestQueue - Alpha test queue\n   * @param transparentQueue - Transparent queue\n   */\n  preRender(camera: Camera, opaqueQueue: RenderQueue, alphaTestQueue: RenderQueue, transparentQueue: RenderQueue) {}\n\n  /**\n   * Post rendering callback.\n   * @param camera - Camera\n   * @param opaqueQueue - Opaque queue\n   * @param alphaTestQueue - Alpha test queue\n   * @param transparentQueue - Transparent queue\n   */\n  postRender(camera: Camera, opaqueQueue: RenderQueue, alphaTestQueue: RenderQueue, transparentQueue: RenderQueue) {}\n}\n\nexport { RenderPass };\n","import { SpriteMaskInteraction } from \"../2d/enums/SpriteMaskInteraction\";\nimport { SpriteRenderer } from \"../2d/sprite/SpriteRenderer\";\nimport { Camera } from \"../Camera\";\nimport { Engine } from \"../Engine\";\nimport { VertexElementFormat } from \"../graphic/enums/VertexElementFormat\";\nimport { VertexElement } from \"../graphic/VertexElement\";\nimport { Material } from \"../material\";\nimport { Shader } from \"../shader/Shader\";\nimport { ShaderMacroCollection } from \"../shader/ShaderMacroCollection\";\nimport { ShaderProperty } from \"../shader/ShaderProperty\";\nimport { Basic2DBatcher } from \"./Basic2DBatcher\";\nimport { SpriteElement } from \"./SpriteElement\";\n\n/**\n * @internal\n */\nexport class SpriteBatcher extends Basic2DBatcher {\n  private static _textureProperty: ShaderProperty = Shader.getPropertyByName(\"u_spriteTexture\");\n\n  createVertexElements(vertexElements: VertexElement[]): number {\n    vertexElements[0] = new VertexElement(\"POSITION\", 0, VertexElementFormat.Vector3, 0);\n    vertexElements[1] = new VertexElement(\"TEXCOORD_0\", 12, VertexElementFormat.Vector2, 0);\n    vertexElements[2] = new VertexElement(\"COLOR_0\", 20, VertexElementFormat.Vector4, 0);\n    return 36;\n  }\n\n  canBatch(preElement: SpriteElement, curElement: SpriteElement): boolean {\n    if (!this._engine._canSpriteBatch) {\n      return false;\n    }\n\n    const preRenderer = <SpriteRenderer>preElement.component;\n    const curRenderer = <SpriteRenderer>curElement.component;\n\n    // Compare mask\n    if (!this.checkBatchWithMask(preRenderer, curRenderer)) {\n      return false;\n    }\n\n    // Compare texture\n    if (preElement.texture !== curElement.texture) {\n      return false;\n    }\n\n    // Compare material\n    return preElement.material === curElement.material;\n  }\n\n  checkBatchWithMask(left: SpriteRenderer, right: SpriteRenderer): boolean {\n    const leftMaskInteraction = left.maskInteraction;\n\n    if (leftMaskInteraction !== right.maskInteraction) {\n      return false;\n    }\n    if (leftMaskInteraction === SpriteMaskInteraction.None) {\n      return true;\n    }\n    return left.maskLayer === right.maskLayer;\n  }\n\n  updateVertices(element: SpriteElement, vertices: Float32Array, vertexIndex: number): number {\n    const { positions, uvs, color, vertexCount } = element.renderData;\n    for (let i = 0; i < vertexCount; i++) {\n      const curPos = positions[i];\n      const curUV = uvs[i];\n      vertices[vertexIndex++] = curPos.x;\n      vertices[vertexIndex++] = curPos.y;\n      vertices[vertexIndex++] = curPos.z;\n      vertices[vertexIndex++] = curUV.x;\n      vertices[vertexIndex++] = curUV.y;\n      vertices[vertexIndex++] = color.r;\n      vertices[vertexIndex++] = color.g;\n      vertices[vertexIndex++] = color.b;\n      vertices[vertexIndex++] = color.a;\n    }\n\n    return vertexIndex;\n  }\n\n  drawBatches(camera: Camera, replaceMaterial: Material): void {\n    const { _engine: engine, _batchedQueue: batchedQueue } = this;\n    const mesh = this._meshes[this._flushId];\n    const subMeshes = mesh.subMeshes;\n    const maskManager = engine._spriteMaskManager;\n    const sceneData = camera.scene.shaderData;\n    const cameraData = camera.shaderData;\n\n    for (let i = 0, len = subMeshes.length; i < len; i++) {\n      const subMesh = subMeshes[i];\n      const spriteElement = <SpriteElement>batchedQueue[i];\n\n      if (!subMesh || !spriteElement) {\n        return;\n      }\n\n      const renderer = <SpriteRenderer>spriteElement.component;\n      const material = spriteElement.material;\n      maskManager.preRender(camera, renderer);\n\n      const compileMacros = Shader._compileMacros;\n      // union render global macro and material self macro.\n      ShaderMacroCollection.unionCollection(\n        renderer._globalShaderMacro,\n        material.shaderData._macroCollection,\n        compileMacros\n      );\n\n      // @todo: temporary solution\n      (replaceMaterial || material)._preRender(spriteElement);\n      const program = (replaceMaterial || material).shader._getShaderProgram(engine, compileMacros);\n      if (!program.isValid) {\n        return;\n      }\n\n      renderer.shaderData.setTexture(SpriteBatcher._textureProperty, spriteElement.texture);\n\n      program.bind();\n      program.groupingOtherUniformBlock();\n      program.uploadAll(program.sceneUniformBlock, sceneData);\n      program.uploadAll(program.cameraUniformBlock, cameraData);\n      program.uploadAll(program.rendererUniformBlock, renderer.shaderData);\n      program.uploadAll(program.materialUniformBlock, material.shaderData);\n\n      material.renderState._apply(engine, false);\n\n      engine._hardwareRenderer.drawPrimitive(mesh, subMesh, program);\n\n      maskManager.postRender(renderer);\n    }\n  }\n\n  destroy(): void {\n    this._batchedQueue = null;\n\n    const { _meshes: meshes, _vertexBuffers: vertexBuffers, _indiceBuffers: indiceBuffers } = this;\n\n    for (let i = 0, n = meshes.length; i < n; ++i) {\n      meshes[i].destroy();\n    }\n    this._meshes = null;\n\n    for (let i = 0, n = vertexBuffers.length; i < n; ++i) {\n      vertexBuffers[i].destroy();\n    }\n    this._vertexBuffers = null;\n\n    for (let i = 0, n = indiceBuffers.length; i < n; ++i) {\n      indiceBuffers[i].destroy();\n    }\n    this._indiceBuffers = null;\n  }\n}\n","import { Camera } from \"../Camera\";\nimport { Engine } from \"../Engine\";\nimport { Layer } from \"../Layer\";\nimport { Material } from \"../material/Material\";\nimport { Shader } from \"../shader\";\nimport { ShaderMacroCollection } from \"../shader/ShaderMacroCollection\";\nimport { MeshRenderElement } from \"./MeshRenderElement\";\nimport { RenderElement } from \"./RenderElement\";\nimport { SpriteBatcher } from \"./SpriteBatcher\";\nimport { SpriteElement } from \"./SpriteElement\";\n\n/**\n * Render queue.\n */\nexport class RenderQueue {\n  /**\n   * @internal\n   */\n  static _compareFromNearToFar(a: RenderElement, b: RenderElement): number {\n    return a.component.priority - b.component.priority || a.component._distanceForSort - b.component._distanceForSort;\n  }\n\n  /**\n   * @internal\n   */\n  static _compareFromFarToNear(a: RenderElement, b: RenderElement): number {\n    return a.component.priority - b.component.priority || b.component._distanceForSort - a.component._distanceForSort;\n  }\n\n  readonly items: RenderElement[] = [];\n  private _spriteBatcher: SpriteBatcher;\n\n  constructor(engine: Engine) {\n    this._spriteBatcher = new SpriteBatcher(engine);\n  }\n\n  /**\n   * Push a render element.\n   */\n  pushPrimitive(element: RenderElement): void {\n    this.items.push(element);\n  }\n\n  render(camera: Camera, replaceMaterial: Material, mask: Layer) {\n    const items = this.items;\n    if (items.length === 0) {\n      return;\n    }\n\n    const { engine, scene } = camera;\n    const renderCount = engine._renderCount;\n    const rhi = engine._hardwareRenderer;\n    const sceneData = scene.shaderData;\n    const cameraData = camera.shaderData;\n\n    for (let i = 0, n = items.length; i < n; i++) {\n      const item = items[i];\n      const renderPassFlag = item.component.entity.layer;\n\n      if (!(renderPassFlag & mask)) {\n        continue;\n      }\n\n      if (!!(item as MeshRenderElement).mesh) {\n        this._spriteBatcher.flush(camera, replaceMaterial);\n\n        const compileMacros = Shader._compileMacros;\n        const element = <MeshRenderElement>item;\n        const renderer = element.component;\n        const material = element.material.destroyed ? engine._magentaMaterial : element.material;\n        const rendererData = renderer.shaderData;\n        const materialData = material.shaderData;\n\n        // @todo: temporary solution\n        (replaceMaterial || material)._preRender(element);\n\n        // union render global macro and material self macro.\n        ShaderMacroCollection.unionCollection(\n          renderer._globalShaderMacro,\n          materialData._macroCollection,\n          compileMacros\n        );\n\n        const program = (replaceMaterial || material).shader._getShaderProgram(engine, compileMacros);\n        if (!program.isValid) {\n          continue;\n        }\n\n        const switchProgram = program.bind();\n        const switchRenderCount = renderCount !== program._uploadRenderCount;\n\n        if (switchRenderCount) {\n          program.groupingOtherUniformBlock();\n          program.uploadAll(program.sceneUniformBlock, sceneData);\n          program.uploadAll(program.cameraUniformBlock, cameraData);\n          program.uploadAll(program.rendererUniformBlock, rendererData);\n          program.uploadAll(program.materialUniformBlock, materialData);\n          // UnGroup textures should upload default value, texture uint maybe change by logic of texture bind.\n          program.uploadUnGroupTextures();\n          program._uploadCamera = camera;\n          program._uploadRenderer = renderer;\n          program._uploadMaterial = material;\n          program._uploadRenderCount = renderCount;\n        } else {\n          if (program._uploadCamera !== camera) {\n            program.uploadAll(program.cameraUniformBlock, cameraData);\n            program._uploadCamera = camera;\n          } else if (switchProgram) {\n            program.uploadTextures(program.cameraUniformBlock, cameraData);\n          }\n\n          if (program._uploadRenderer !== renderer) {\n            program.uploadAll(program.rendererUniformBlock, rendererData);\n            program._uploadRenderer = renderer;\n          } else if (switchProgram) {\n            program.uploadTextures(program.rendererUniformBlock, rendererData);\n          }\n\n          if (program._uploadMaterial !== material) {\n            program.uploadAll(program.materialUniformBlock, materialData);\n            program._uploadMaterial = material;\n          } else if (switchProgram) {\n            program.uploadTextures(program.materialUniformBlock, materialData);\n          }\n\n          // We only consider switchProgram case, because UnGroup texture's value is always default.\n          if (switchProgram) {\n            program.uploadUnGroupTextures();\n          }\n        }\n        material.renderState._apply(engine, renderer.entity.transform._isFrontFaceInvert());\n\n        rhi.drawPrimitive(element.mesh, element.subMesh, program);\n      } else {\n        const spriteElement = <SpriteElement>item;\n        this._spriteBatcher.drawElement(spriteElement, camera, replaceMaterial);\n      }\n    }\n\n    this._spriteBatcher.flush(camera, replaceMaterial);\n  }\n\n  /**\n   * Clear collection.\n   */\n  clear(): void {\n    this.items.length = 0;\n    this._spriteBatcher.clear();\n  }\n\n  /**\n   * Destroy internal resources.\n   */\n  destroy(): void {\n    this._spriteBatcher.destroy();\n    this._spriteBatcher = null;\n  }\n\n  /**\n   * Sort the elements.\n   */\n  sort(compareFunc: Function): void {\n    this._quickSort(this.items, 0, this.items.length, compareFunc);\n  }\n\n  /**\n   * @remarks\n   * Modified based on v8.\n   * https://github.com/v8/v8/blob/7.2-lkgr/src/js/array.js\n   */\n  private _quickSort<T>(a: T[], from: number, to: number, compareFunc: Function): void {\n    while (true) {\n      // Insertion sort is faster for short arrays.\n      if (to - from <= 10) {\n        this._insertionSort(a, from, to, compareFunc);\n        return;\n      }\n      const third_index = (from + to) >> 1;\n      // Find a pivot as the median of first, last and middle element.\n      let v0 = a[from];\n      let v1 = a[to - 1];\n      let v2 = a[third_index];\n      const c01 = compareFunc(v0, v1);\n      if (c01 > 0) {\n        // v1 < v0, so swap them.\n        const tmp = v0;\n        v0 = v1;\n        v1 = tmp;\n      } // v0 <= v1.\n      const c02 = compareFunc(v0, v2);\n      if (c02 >= 0) {\n        // v2 <= v0 <= v1.\n        const tmp = v0;\n        v0 = v2;\n        v2 = v1;\n        v1 = tmp;\n      } else {\n        // v0 <= v1 && v0 < v2\n        const c12 = compareFunc(v1, v2);\n        if (c12 > 0) {\n          // v0 <= v2 < v1\n          const tmp = v1;\n          v1 = v2;\n          v2 = tmp;\n        }\n      }\n      // v0 <= v1 <= v2\n      a[from] = v0;\n      a[to - 1] = v2;\n      const pivot = v1;\n      let low_end = from + 1; // Upper bound of elements lower than pivot.\n      let high_start = to - 1; // Lower bound of elements greater than pivot.\n      a[third_index] = a[low_end];\n      a[low_end] = pivot;\n\n      // From low_end to i are elements equal to pivot.\n      // From i to high_start are elements that haven't been compared yet.\n      partition: for (let i = low_end + 1; i < high_start; i++) {\n        let element = a[i];\n        let order = compareFunc(element, pivot);\n        if (order < 0) {\n          a[i] = a[low_end];\n          a[low_end] = element;\n          low_end++;\n        } else if (order > 0) {\n          do {\n            high_start--;\n            if (high_start == i) break partition;\n            const top_elem = a[high_start];\n            order = compareFunc(top_elem, pivot);\n          } while (order > 0);\n          a[i] = a[high_start];\n          a[high_start] = element;\n          if (order < 0) {\n            element = a[i];\n            a[i] = a[low_end];\n            a[low_end] = element;\n            low_end++;\n          }\n        }\n      }\n      if (to - high_start < low_end - from) {\n        this._quickSort(a, high_start, to, compareFunc);\n        to = low_end;\n      } else {\n        this._quickSort(a, from, low_end, compareFunc);\n        from = high_start;\n      }\n    }\n  }\n\n  private _insertionSort<T>(a: T[], from: number, to: number, compareFunc: Function): void {\n    for (let i = from + 1; i < to; i++) {\n      let j;\n      const element = a[i];\n      for (j = i - 1; j >= from; j--) {\n        const tmp = a[j];\n        const order = compareFunc(tmp, element);\n        if (order > 0) {\n          a[j + 1] = tmp;\n        } else {\n          break;\n        }\n      }\n      a[j + 1] = element;\n    }\n  }\n}\n","import { Matrix, Vector2 } from \"@oasis-engine/math\";\nimport { Background } from \"..\";\nimport { SpriteMask } from \"../2d/sprite/SpriteMask\";\nimport { Logger } from \"../base/Logger\";\nimport { Camera } from \"../Camera\";\nimport { DisorderedArray } from \"../DisorderedArray\";\nimport { Engine } from \"../Engine\";\nimport { BackgroundMode } from \"../enums/BackgroundMode\";\nimport { BackgroundTextureFillMode } from \"../enums/BackgroundTextureFillMode\";\nimport { CameraClearFlags } from \"../enums/CameraClearFlags\";\nimport { Layer } from \"../Layer\";\nimport { RenderQueueType } from \"../material/enums/RenderQueueType\";\nimport { Material } from \"../material/Material\";\nimport { Shader } from \"../shader/Shader\";\nimport { ShaderMacroCollection } from \"../shader/ShaderMacroCollection\";\nimport { Sky } from \"../sky/Sky\";\nimport { TextureCubeFace } from \"../texture/enums/TextureCubeFace\";\nimport { RenderTarget } from \"../texture/RenderTarget\";\nimport { RenderContext } from \"./RenderContext\";\nimport { RenderElement } from \"./RenderElement\";\nimport { RenderPass } from \"./RenderPass\";\nimport { RenderQueue } from \"./RenderQueue\";\n\n/**\n * Basic render pipeline.\n */\nexport class BasicRenderPipeline {\n  /** @internal */\n  _opaqueQueue: RenderQueue;\n  /** @internal */\n  _transparentQueue: RenderQueue;\n  /** @internal */\n  _alphaTestQueue: RenderQueue;\n  /** @internal */\n  _allSpriteMasks: DisorderedArray<SpriteMask> = new DisorderedArray();\n\n  private _camera: Camera;\n  private _defaultPass: RenderPass;\n  private _renderPassArray: Array<RenderPass>;\n  private _lastCanvasSize = new Vector2();\n\n  /**\n   * Create a basic render pipeline.\n   * @param camera - Camera\n   */\n  constructor(camera: Camera) {\n    this._camera = camera;\n    const { engine } = camera;\n    this._opaqueQueue = new RenderQueue(engine);\n    this._alphaTestQueue = new RenderQueue(engine);\n    this._transparentQueue = new RenderQueue(engine);\n\n    this._renderPassArray = [];\n    this._defaultPass = new RenderPass(\"default\", 0, null, null, 0);\n    this.addRenderPass(this._defaultPass);\n  }\n\n  /**\n   * Default render pass.\n   */\n  get defaultRenderPass() {\n    return this._defaultPass;\n  }\n\n  /**\n   * Add render pass.\n   * @param nameOrPass - The name of this Pass or RenderPass object. When it is a name, the following parameters need to be provided\n   * @param priority - Priority, less than 0 before the default pass, greater than 0 after the default pass\n   * @param renderTarget - The specified Render Target\n   * @param replaceMaterial -  Replaced material\n   * @param mask - Perform bit and operations with Entity.Layer to filter the objects that this Pass needs to render\n   */\n  addRenderPass(\n    nameOrPass: string | RenderPass,\n    priority: number = null,\n    renderTarget: RenderTarget = null,\n    replaceMaterial: Material = null,\n    mask: Layer = null\n  ) {\n    if (typeof nameOrPass === \"string\") {\n      const renderPass = new RenderPass(nameOrPass, priority, renderTarget, replaceMaterial, mask);\n      this._renderPassArray.push(renderPass);\n    } else if (nameOrPass instanceof RenderPass) {\n      this._renderPassArray.push(nameOrPass);\n    }\n\n    this._renderPassArray.sort(function (p1, p2) {\n      return p1.priority - p2.priority;\n    });\n  }\n\n  /**\n   * Remove render pass by name or render pass object.\n   * @param nameOrPass - Render pass name or render pass object\n   */\n  removeRenderPass(nameOrPass: string | RenderPass): void {\n    let pass: RenderPass;\n    if (typeof nameOrPass === \"string\") pass = this.getRenderPass(nameOrPass);\n    else if (nameOrPass instanceof RenderPass) pass = nameOrPass;\n    if (pass) {\n      const idx = this._renderPassArray.indexOf(pass);\n      this._renderPassArray.splice(idx, 1);\n    }\n  }\n\n  /**\n   * Get render pass by name.\n   * @param  name - Render pass name\n   */\n  getRenderPass(name: string) {\n    for (let i = 0, len = this._renderPassArray.length; i < len; i++) {\n      const pass = this._renderPassArray[i];\n      if (pass.name === name) return pass;\n    }\n\n    return null;\n  }\n\n  /**\n   * Destroy internal resources.\n   */\n  destroy(): void {\n    this._opaqueQueue.destroy();\n    this._alphaTestQueue.destroy();\n    this._transparentQueue.destroy();\n    this._allSpriteMasks = null;\n    this._renderPassArray = null;\n    this._defaultPass = null;\n    this._camera = null;\n  }\n\n  /**\n   * Perform scene rendering.\n   * @param context - Render context\n   * @param cubeFace - Render surface of cube texture\n   * @param mipLevel - Set mip level the data want to write\n   */\n  render(context: RenderContext, cubeFace?: TextureCubeFace, mipLevel?: number) {\n    const camera = this._camera;\n    const opaqueQueue = this._opaqueQueue;\n    const alphaTestQueue = this._alphaTestQueue;\n    const transparentQueue = this._transparentQueue;\n\n    camera.engine._spriteMaskManager.clear();\n\n    opaqueQueue.clear();\n    alphaTestQueue.clear();\n    transparentQueue.clear();\n    this._allSpriteMasks.length = 0;\n\n    camera.engine._componentsManager.callRender(context);\n    opaqueQueue.sort(RenderQueue._compareFromNearToFar);\n    alphaTestQueue.sort(RenderQueue._compareFromNearToFar);\n    transparentQueue.sort(RenderQueue._compareFromFarToNear);\n\n    for (let i = 0, len = this._renderPassArray.length; i < len; i++) {\n      this._drawRenderPass(this._renderPassArray[i], camera, cubeFace, mipLevel);\n    }\n  }\n\n  private _drawRenderPass(pass: RenderPass, camera: Camera, cubeFace?: TextureCubeFace, mipLevel?: number) {\n    pass.preRender(camera, this._opaqueQueue, this._alphaTestQueue, this._transparentQueue);\n\n    if (pass.enabled) {\n      const { engine, scene } = camera;\n      const { background } = scene;\n      const rhi = engine._hardwareRenderer;\n      const renderTarget = camera.renderTarget || pass.renderTarget;\n      rhi.activeRenderTarget(renderTarget, camera, mipLevel); // change viewport with mip level\n      renderTarget?._setRenderTargetInfo(cubeFace, mipLevel);\n      const clearFlags = pass.clearFlags ?? camera.clearFlags;\n      const color = pass.clearColor ?? background.solidColor;\n      if (clearFlags !== CameraClearFlags.None) {\n        rhi.clearRenderTarget(camera.engine, clearFlags, color);\n      }\n\n      if (pass.renderOverride) {\n        pass.render(camera, this._opaqueQueue, this._alphaTestQueue, this._transparentQueue);\n      } else {\n        this._opaqueQueue.render(camera, pass.replaceMaterial, pass.mask);\n        this._alphaTestQueue.render(camera, pass.replaceMaterial, pass.mask);\n        if (camera.clearFlags & CameraClearFlags.Color) {\n          if (background.mode === BackgroundMode.Sky) {\n            this._drawSky(engine, camera, background.sky);\n          } else if (background.mode === BackgroundMode.Texture && background.texture) {\n            this._drawBackgroundTexture(engine, background);\n          }\n        }\n        this._transparentQueue.render(camera, pass.replaceMaterial, pass.mask);\n      }\n\n      renderTarget?._blitRenderTarget();\n      renderTarget?.generateMipmaps();\n    }\n\n    pass.postRender(camera, this._opaqueQueue, this._alphaTestQueue, this._transparentQueue);\n  }\n\n  /**\n   * Push a render element to the render queue.\n   * @param element - Render element\n   */\n  pushPrimitive(element: RenderElement): void {\n    switch (element.material.renderQueueType) {\n      case RenderQueueType.Transparent:\n        this._transparentQueue.pushPrimitive(element);\n        break;\n      case RenderQueueType.AlphaTest:\n        this._alphaTestQueue.pushPrimitive(element);\n        break;\n      case RenderQueueType.Opaque:\n        this._opaqueQueue.pushPrimitive(element);\n        break;\n    }\n  }\n\n  private _drawBackgroundTexture(engine: Engine, background: Background) {\n    const rhi = engine._hardwareRenderer;\n    const { _backgroundTextureMaterial, canvas } = engine;\n    const mesh = background._mesh;\n\n    if (\n      (this._lastCanvasSize.x !== canvas.width || this._lastCanvasSize.y !== canvas.height) &&\n      background._textureFillMode !== BackgroundTextureFillMode.Fill\n    ) {\n      this._lastCanvasSize.set(canvas.width, canvas.height);\n      background._resizeBackgroundTexture();\n    }\n\n    const program = _backgroundTextureMaterial.shader._getShaderProgram(engine, Shader._compileMacros);\n    program.bind();\n    program.uploadAll(program.materialUniformBlock, _backgroundTextureMaterial.shaderData);\n    program.uploadUnGroupTextures();\n\n    _backgroundTextureMaterial.renderState._apply(engine, false);\n    rhi.drawPrimitive(mesh, mesh.subMesh, program);\n  }\n\n  private _drawSky(engine: Engine, camera: Camera, sky: Sky): void {\n    const { material, mesh, _matrix } = sky;\n    if (!material) {\n      Logger.warn(\"The material of sky is not defined.\");\n      return;\n    }\n    if (!mesh) {\n      Logger.warn(\"The mesh of sky is not defined.\");\n      return;\n    }\n\n    const rhi = engine._hardwareRenderer;\n    const { shaderData, shader, renderState } = material;\n\n    const compileMacros = Shader._compileMacros;\n    ShaderMacroCollection.unionCollection(camera._globalShaderMacro, shaderData._macroCollection, compileMacros);\n\n    const { viewMatrix, projectionMatrix } = camera;\n    _matrix.copyFrom(viewMatrix);\n    const e = _matrix.elements;\n    e[12] = e[13] = e[14] = 0;\n    Matrix.multiply(projectionMatrix, _matrix, _matrix);\n    shaderData.setMatrix(\"u_mvpNoscale\", _matrix);\n\n    const program = shader._getShaderProgram(engine, compileMacros);\n    program.bind();\n    program.groupingOtherUniformBlock();\n    program.uploadAll(program.materialUniformBlock, shaderData);\n    program.uploadUnGroupTextures();\n\n    renderState._apply(engine, false);\n    rhi.drawPrimitive(mesh, mesh.subMesh, program);\n  }\n}\n","import { BoundingFrustum, MathUtil, Matrix, Ray, Vector2, Vector3, Vector4 } from \"@oasis-engine/math\";\nimport { Logger } from \"./base\";\nimport { BoolUpdateFlag } from \"./BoolUpdateFlag\";\nimport { deepClone, ignoreClone } from \"./clone/CloneManager\";\nimport { Component } from \"./Component\";\nimport { dependentComponents } from \"./ComponentsDependencies\";\nimport { Entity } from \"./Entity\";\nimport { CameraClearFlags } from \"./enums/CameraClearFlags\";\nimport { Layer } from \"./Layer\";\nimport { BasicRenderPipeline } from \"./RenderPipeline/BasicRenderPipeline\";\nimport { RenderContext } from \"./RenderPipeline/RenderContext\";\nimport { ShaderDataGroup } from \"./shader/enums/ShaderDataGroup\";\nimport { Shader } from \"./shader/Shader\";\nimport { ShaderData } from \"./shader/ShaderData\";\nimport { ShaderMacroCollection } from \"./shader/ShaderMacroCollection\";\nimport { TextureCubeFace } from \"./texture/enums/TextureCubeFace\";\nimport { RenderTarget } from \"./texture/RenderTarget\";\nimport { Transform } from \"./Transform\";\n\nclass MathTemp {\n  static tempVec4 = new Vector4();\n  static tempVec3 = new Vector3();\n  static tempVec2 = new Vector2();\n}\n\n/**\n * Camera component, as the entrance to the three-dimensional world.\n * @decorator `@dependentComponents(Transform)`\n */\n@dependentComponents(Transform)\nexport class Camera extends Component {\n  private static _viewMatrixProperty = Shader.getPropertyByName(\"u_viewMat\");\n  private static _projectionMatrixProperty = Shader.getPropertyByName(\"u_projMat\");\n  private static _vpMatrixProperty = Shader.getPropertyByName(\"u_VPMat\");\n  private static _inverseViewMatrixProperty = Shader.getPropertyByName(\"u_viewInvMat\");\n  private static _inverseProjectionMatrixProperty = Shader.getPropertyByName(\"u_projInvMat\");\n  private static _cameraPositionProperty = Shader.getPropertyByName(\"u_cameraPos\");\n\n  /** Shader data. */\n  readonly shaderData: ShaderData = new ShaderData(ShaderDataGroup.Camera);\n\n  /** Rendering priority - A Camera with higher priority will be rendered on top of a camera with lower priority. */\n  priority: number = 0;\n\n  /** Whether to enable frustum culling, it is enabled by default. */\n  enableFrustumCulling: boolean = true;\n\n  /**\n   * Determining what to clear when rendering by a Camera.\n   * @defaultValue `CameraClearFlags.All`\n   */\n  clearFlags: CameraClearFlags = CameraClearFlags.All;\n\n  /**\n   * Culling mask - which layers the camera renders.\n   * @remarks Support bit manipulation, corresponding to Entity's layer.\n   */\n  cullingMask: Layer = Layer.Everything;\n\n  /** @internal */\n  _globalShaderMacro: ShaderMacroCollection = new ShaderMacroCollection();\n  /** @internal */\n  @deepClone\n  _frustum: BoundingFrustum = new BoundingFrustum();\n  /** @internal */\n  @ignoreClone\n  _renderPipeline: BasicRenderPipeline;\n\n  private _isOrthographic: boolean = false;\n  private _isProjMatSetting = false;\n  private _nearClipPlane: number = 0.1;\n  private _farClipPlane: number = 100;\n  private _fieldOfView: number = 45;\n  private _orthographicSize: number = 10;\n  private _isProjectionDirty = true;\n  private _isInvProjMatDirty: boolean = true;\n  private _isFrustumProjectDirty: boolean = true;\n  private _customAspectRatio: number | undefined = undefined;\n  private _renderTarget: RenderTarget = null;\n\n  @ignoreClone\n  private _frustumViewChangeFlag: BoolUpdateFlag;\n  @ignoreClone\n  private _transform: Transform;\n  @ignoreClone\n  private _isViewMatrixDirty: BoolUpdateFlag;\n  @ignoreClone\n  private _isInvViewProjDirty: BoolUpdateFlag;\n  @deepClone\n  private _projectionMatrix: Matrix = new Matrix();\n  @deepClone\n  private _viewMatrix: Matrix = new Matrix();\n  @deepClone\n  private _viewport: Vector4 = new Vector4(0, 0, 1, 1);\n  @deepClone\n  private _inverseProjectionMatrix: Matrix = new Matrix();\n  @deepClone\n  private _lastAspectSize: Vector2 = new Vector2(0, 0);\n  @deepClone\n  private _invViewProjMat: Matrix = new Matrix();\n\n  /**\n   * Near clip plane - the closest point to the camera when rendering occurs.\n   */\n  get nearClipPlane(): number {\n    return this._nearClipPlane;\n  }\n\n  set nearClipPlane(value: number) {\n    this._nearClipPlane = value;\n    this._projMatChange();\n  }\n\n  /**\n   * Far clip plane - the furthest point to the camera when rendering occurs.\n   */\n  get farClipPlane(): number {\n    return this._farClipPlane;\n  }\n\n  set farClipPlane(value: number) {\n    this._farClipPlane = value;\n    this._projMatChange();\n  }\n\n  /**\n   * The camera's view angle. activating when camera use perspective projection.\n   */\n  get fieldOfView(): number {\n    return this._fieldOfView;\n  }\n\n  set fieldOfView(value: number) {\n    this._fieldOfView = value;\n    this._projMatChange();\n  }\n\n  /**\n   * Aspect ratio. The default is automatically calculated by the viewport's aspect ratio. If it is manually set,\n   * the manual value will be kept. Call resetAspectRatio() to restore it.\n   */\n  get aspectRatio(): number {\n    const canvas = this._entity.engine.canvas;\n    return this._customAspectRatio ?? (canvas.width * this._viewport.z) / (canvas.height * this._viewport.w);\n  }\n\n  set aspectRatio(value: number) {\n    this._customAspectRatio = value;\n    this._projMatChange();\n  }\n\n  /**\n   * Viewport, normalized expression, the upper left corner is (0, 0), and the lower right corner is (1, 1).\n   * @remarks Re-assignment is required after modification to ensure that the modification takes effect.\n   */\n  get viewport(): Vector4 {\n    return this._viewport;\n  }\n\n  set viewport(value: Vector4) {\n    if (value !== this._viewport) {\n      this._viewport.copyFrom(value);\n    }\n    this._projMatChange();\n  }\n\n  /**\n   * Whether it is orthogonal, the default is false. True will use orthographic projection, false will use perspective projection.\n   */\n  get isOrthographic(): boolean {\n    return this._isOrthographic;\n  }\n\n  set isOrthographic(value: boolean) {\n    this._isOrthographic = value;\n    this._projMatChange();\n  }\n\n  /**\n   * Half the size of the camera in orthographic mode.\n   */\n  get orthographicSize(): number {\n    return this._orthographicSize;\n  }\n\n  set orthographicSize(value: number) {\n    this._orthographicSize = value;\n    this._projMatChange();\n  }\n\n  /**\n   * View matrix.\n   */\n  get viewMatrix(): Readonly<Matrix> {\n    if (this._isViewMatrixDirty.flag) {\n      this._isViewMatrixDirty.flag = false;\n      // Ignore scale.\n      Matrix.rotationTranslation(\n        this._transform.worldRotationQuaternion,\n        this._transform.worldPosition,\n        this._viewMatrix\n      );\n      this._viewMatrix.invert();\n    }\n    return this._viewMatrix;\n  }\n\n  /**\n   * The projection matrix is ​​calculated by the relevant parameters of the camera by default.\n   * If it is manually set, the manual value will be maintained. Call resetProjectionMatrix() to restore it.\n   */\n  set projectionMatrix(value: Matrix) {\n    this._projectionMatrix = value;\n    this._isProjMatSetting = true;\n    this._projMatChange();\n  }\n\n  get projectionMatrix(): Matrix {\n    const canvas = this._entity.engine.canvas;\n    if (\n      (!this._isProjectionDirty || this._isProjMatSetting) &&\n      this._lastAspectSize.x === canvas.width &&\n      this._lastAspectSize.y === canvas.height\n    ) {\n      return this._projectionMatrix;\n    }\n    this._isProjectionDirty = false;\n    this._lastAspectSize.x = canvas.width;\n    this._lastAspectSize.y = canvas.height;\n    const aspectRatio = this.aspectRatio;\n    if (!this._isOrthographic) {\n      Matrix.perspective(\n        MathUtil.degreeToRadian(this._fieldOfView),\n        aspectRatio,\n        this._nearClipPlane,\n        this._farClipPlane,\n        this._projectionMatrix\n      );\n    } else {\n      const width = this._orthographicSize * aspectRatio;\n      const height = this._orthographicSize;\n      Matrix.ortho(-width, width, -height, height, this._nearClipPlane, this._farClipPlane, this._projectionMatrix);\n    }\n    return this._projectionMatrix;\n  }\n\n  /**\n   * Whether to enable HDR.\n   * @todo When render pipeline modification\n   */\n  get enableHDR(): boolean {\n    console.log(\"not implementation\");\n    return false;\n  }\n\n  set enableHDR(value: boolean) {\n    console.log(\"not implementation\");\n  }\n\n  /**\n   * RenderTarget. After setting, it will be rendered to the renderTarget. If it is empty, it will be rendered to the main canvas.\n   */\n  get renderTarget(): RenderTarget | null {\n    return this._renderTarget;\n  }\n\n  set renderTarget(value: RenderTarget | null) {\n    this._renderTarget = value;\n  }\n\n  /**\n   * @internal\n   */\n  constructor(entity: Entity) {\n    super(entity);\n\n    const transform = this.entity.transform;\n    this._transform = transform;\n    this._isViewMatrixDirty = transform.registerWorldChangeFlag();\n    this._isInvViewProjDirty = transform.registerWorldChangeFlag();\n    this._frustumViewChangeFlag = transform.registerWorldChangeFlag();\n    this._renderPipeline = new BasicRenderPipeline(this);\n    this.shaderData._addRefCount(1);\n  }\n\n  /**\n   * Restore the automatic calculation of projection matrix through fieldOfView, nearClipPlane and farClipPlane.\n   */\n  resetProjectionMatrix(): void {\n    this._isProjMatSetting = false;\n    this._projMatChange();\n  }\n\n  /**\n   * Restore the automatic calculation of the aspect ratio through the viewport aspect ratio.\n   */\n  resetAspectRatio(): void {\n    this._customAspectRatio = undefined;\n    this._projMatChange();\n  }\n\n  /**\n   * Transform a point from world space to viewport space.\n   * @param point - Point in world space\n   * @param out - Point in viewport space, X and Y are the camera viewport space coordinates, Z is in world space units from the plane that camera forward is normal to\n   * @returns Point in viewport space\n   */\n  worldToViewportPoint(point: Vector3, out: Vector3): Vector3 {\n    const cameraPoint = MathTemp.tempVec3;\n    const viewportPoint = MathTemp.tempVec4;\n\n    Vector3.transformCoordinate(point, this.viewMatrix, cameraPoint);\n    Vector3.transformToVec4(cameraPoint, this.projectionMatrix, viewportPoint);\n\n    const w = viewportPoint.w;\n    out.set((viewportPoint.x / w + 1.0) * 0.5, (1.0 - viewportPoint.y / w) * 0.5, -cameraPoint.z);\n    return out;\n  }\n\n  /**\n   * Transform a point from viewport space to world space.\n   * @param point - Point in viewport space, X and Y are the camera viewport space coordinates, Z is in world space units from the plane that camera forward is normal to\n   * @param out - Point in world space\n   * @returns Point in world space\n   */\n  viewportToWorldPoint(point: Vector3, out: Vector3): Vector3 {\n    const { nearClipPlane, farClipPlane } = this;\n    const nf = 1 / (nearClipPlane - farClipPlane);\n\n    let z: number;\n    if (this.isOrthographic) {\n      z = -point.z * 2 * nf;\n      z += (farClipPlane + nearClipPlane) * nf;\n    } else {\n      const pointZ = point.z;\n      z = -pointZ * (nearClipPlane + farClipPlane) * nf;\n      z += 2 * nearClipPlane * farClipPlane * nf;\n      z = z / pointZ;\n    }\n\n    this._innerViewportToWorldPoint(point.x, point.y, (z + 1.0) / 2.0, this._getInvViewProjMat(), out);\n    return out;\n  }\n\n  /**\n   * Generate a ray by a point in viewport.\n   * @param point - Point in viewport space, X and Y are the camera viewport space coordinates\n   * @param out - Ray\n   * @returns Ray\n   */\n  viewportPointToRay(point: Vector2, out: Ray): Ray {\n    const invViewProjMat = this._getInvViewProjMat();\n    // Use the intersection of the near clipping plane as the origin point.\n    const origin = this._innerViewportToWorldPoint(point.x, point.y, 0.0, invViewProjMat, out.origin);\n    // Use the intersection of the far clipping plane as the origin point.\n    const direction = this._innerViewportToWorldPoint(point.x, point.y, 1.0, invViewProjMat, out.direction);\n    Vector3.subtract(direction, origin, direction);\n    direction.normalize();\n    return out;\n  }\n\n  /**\n   * Transform the X and Y coordinates of a point from screen space to viewport space\n   * @param point - Point in screen space\n   * @param out - Point in viewport space\n   * @returns Point in viewport space\n   */\n  screenToViewportPoint<T extends Vector2 | Vector3>(point: Vector3 | Vector2, out: T): T {\n    const canvas = this.engine.canvas;\n    const viewport = this.viewport;\n    out.x = (point.x / canvas.width - viewport.x) / viewport.z;\n    out.y = (point.y / canvas.height - viewport.y) / viewport.w;\n    (<Vector3>point).z !== undefined && ((<Vector3>out).z = (<Vector3>point).z);\n    return out;\n  }\n\n  /**\n   * Transform the X and Y coordinates of a point from viewport space to screen space.\n   * @param point - Point in viewport space\n   * @param out - Point in screen space\n   * @returns Point in screen space\n   */\n  viewportToScreenPoint<T extends Vector2 | Vector3 | Vector4>(point: T, out: T): T {\n    const canvas = this.engine.canvas;\n    const viewport = this.viewport;\n    out.x = (viewport.x + point.x * viewport.z) * canvas.width;\n    out.y = (viewport.y + point.y * viewport.w) * canvas.height;\n    (<Vector3>point).z !== undefined && ((<Vector3>out).z = (<Vector3>point).z);\n    return out;\n  }\n\n  /**\n   * Transform a point from world space to screen space.\n   * @param point - Point in world space\n   * @param out - Point of screen space\n   * @returns Point of screen space\n   */\n  worldToScreenPoint(point: Vector3, out: Vector3): Vector3 {\n    this.worldToViewportPoint(point, out);\n    return this.viewportToScreenPoint(out, out);\n  }\n\n  /**\n   * Transform a point from screen space to world space.\n   *\n   * @param point - Screen space point, the top-left of the screen is (0,0), the right-bottom is (pixelWidth,pixelHeight), The z position is in world units from the camera\n   * @param out - Point in world space\n   * @returns Point in world space\n   */\n  screenToWorldPoint(point: Vector3, out: Vector3): Vector3 {\n    this.screenToViewportPoint(point, out);\n    return this.viewportToWorldPoint(out, out);\n  }\n\n  /**\n   * Generate a ray by a point in screen.\n   * @param point - Point in screen space, the top-left of the screen is (0,0), the right-bottom is (pixelWidth,pixelHeight)\n   * @param out - Ray\n   * @returns Ray\n   */\n  screenPointToRay(point: Vector2, out: Ray): Ray {\n    const viewportPoint = MathTemp.tempVec2;\n    this.screenToViewportPoint(point, viewportPoint);\n    return this.viewportPointToRay(viewportPoint, out);\n  }\n\n  /**\n   * Manually call the rendering of the camera.\n   * @param cubeFace - Cube rendering surface collection\n   * @param mipLevel - Set mip level the data want to write, only take effect in webgl2.0\n   */\n  render(cubeFace?: TextureCubeFace, mipLevel: number = 0): void {\n    // compute cull frustum.\n    const context = this.engine._renderContext;\n    context._setContext(this);\n    if (this.enableFrustumCulling && (this._frustumViewChangeFlag.flag || this._isFrustumProjectDirty)) {\n      this._frustum.calculateFromMatrix(context._viewProjectMatrix);\n      this._frustumViewChangeFlag.flag = false;\n      this._isFrustumProjectDirty = false;\n    }\n\n    this._updateShaderData(context);\n\n    // union scene and camera macro.\n    ShaderMacroCollection.unionCollection(\n      this.scene._globalShaderMacro,\n      this.shaderData._macroCollection,\n      this._globalShaderMacro\n    );\n\n    if (mipLevel > 0 && !this.engine._hardwareRenderer.isWebGL2) {\n      mipLevel = 0;\n      Logger.error(\"mipLevel only take effect in WebGL2.0\");\n    }\n    this._renderPipeline.render(context, cubeFace, mipLevel);\n    this._engine._renderCount++;\n  }\n\n  /**\n   * @override\n   * @inheritdoc\n   */\n  _onEnable(): void {\n    this.entity.scene._attachRenderCamera(this);\n  }\n\n  /**\n   * @override\n   * @inheritdoc\n   */\n  _onDisable(): void {\n    this.entity.scene._detachRenderCamera(this);\n  }\n\n  /**\n   * @override\n   * @inheritdoc\n   */\n  _onDestroy(): void {\n    this._renderPipeline?.destroy();\n    this._isInvViewProjDirty.destroy();\n    this._isViewMatrixDirty.destroy();\n    this.shaderData._addRefCount(-1);\n  }\n\n  private _projMatChange(): void {\n    this._isFrustumProjectDirty = true;\n    this._isProjectionDirty = true;\n    this._isInvProjMatDirty = true;\n    this._isInvViewProjDirty.flag = true;\n  }\n\n  private _innerViewportToWorldPoint(x: number, y: number, z: number, invViewProjMat: Matrix, out: Vector3): Vector3 {\n    // Depth is a normalized value, 0 is nearPlane, 1 is farClipPlane.\n    // Transform to clipping space matrix\n    const clipPoint = MathTemp.tempVec3;\n    clipPoint.set(x * 2 - 1, 1 - y * 2, z * 2 - 1);\n    Vector3.transformCoordinate(clipPoint, invViewProjMat, out);\n    return out;\n  }\n\n  private _updateShaderData(context: RenderContext): void {\n    const shaderData = this.shaderData;\n    shaderData.setMatrix(Camera._viewMatrixProperty, this.viewMatrix);\n    shaderData.setMatrix(Camera._projectionMatrixProperty, this.projectionMatrix);\n    shaderData.setMatrix(Camera._vpMatrixProperty, context._viewProjectMatrix);\n    shaderData.setMatrix(Camera._inverseViewMatrixProperty, this._transform.worldMatrix);\n    shaderData.setMatrix(Camera._inverseProjectionMatrixProperty, this._getInverseProjectionMatrix());\n    shaderData.setVector3(Camera._cameraPositionProperty, this._transform.worldPosition);\n  }\n\n  /**\n   * The inverse matrix of view projection matrix.\n   */\n  private _getInvViewProjMat(): Matrix {\n    if (this._isInvViewProjDirty.flag) {\n      this._isInvViewProjDirty.flag = false;\n      Matrix.multiply(this._transform.worldMatrix, this._getInverseProjectionMatrix(), this._invViewProjMat);\n    }\n    return this._invViewProjMat;\n  }\n\n  /**\n   * The inverse of the projection matrix.\n   */\n  private _getInverseProjectionMatrix(): Readonly<Matrix> {\n    if (this._isInvProjMatDirty) {\n      this._isInvProjMatDirty = false;\n      Matrix.invert(this.projectionMatrix, this._inverseProjectionMatrix);\n    }\n    return this._inverseProjectionMatrix;\n  }\n}\n","import { AssetPromise } from \"./AssetPromise\";\n\nconst mimeType = {\n  json: \"json\",\n  gltf: \"json\",\n  mtl: \"json\",\n  prefab: \"json\",\n  txt: \"text\",\n  bin: \"arraybuffer\",\n  png: \"image\",\n  webp: \"image\",\n  jpg: \"image\"\n};\n\nconst defaultRetryCount = 1;\nconst defaultTimeout = Infinity;\nconst defaultInterval = 500;\n\nexport type RequestConfig = {\n  type?: XMLHttpRequestResponseType | \"image\";\n  retryCount?: number;\n  retryInterval?: number;\n  timeout?: number;\n} & RequestInit;\n\n/**\n * Web request.\n * @param url - The link\n * @param config - Load configuration\n */\nexport function request<T>(url: string, config: RequestConfig = {}): AssetPromise<T> {\n  return new AssetPromise((resolve, reject, setProgress) => {\n    const retryCount = config.retryCount ?? defaultRetryCount;\n    const retryInterval = config.retryInterval ?? defaultInterval;\n    config.timeout = config.timeout ?? defaultTimeout;\n    config.type = config.type ?? getMimeTypeFromUrl(url);\n    const realRequest = config.type === \"image\" ? requestImage : requestRes;\n    let lastError: Error;\n    const executor = new MultiExecutor(\n      () => {\n        return realRequest<T>(url, config)\n          .onProgress(setProgress)\n          .then((res) => {\n            resolve(res);\n            executor.stop();\n          })\n          .catch((err) => (lastError = err));\n      },\n      retryCount,\n      retryInterval\n    );\n    executor.start(() => {\n      reject(lastError);\n    });\n  });\n}\n\nfunction requestImage<T>(url: string, config: RequestConfig): AssetPromise<T> {\n  return new AssetPromise((resolve, reject) => {\n    const { timeout } = config;\n    const img = new Image();\n    const onerror = () => {\n      reject(new Error(`request ${url} fail`));\n    };\n    img.onerror = onerror;\n\n    img.onabort = onerror;\n\n    let timeoutId = -1;\n    if (timeout != Infinity) {\n      timeoutId = window.setTimeout(() => {\n        reject(new Error(`request ${url} timeout`));\n      }, timeout);\n    }\n\n    img.onload = ((timeoutId) => {\n      return () => {\n        // Call requestAnimationFrame to avoid iOS's bug.\n        requestAnimationFrame(() => {\n          //@ts-ignore\n          resolve(img);\n          img.onload = null;\n          img.onerror = null;\n          img.onabort = null;\n        });\n        clearTimeout(timeoutId);\n      };\n    })(timeoutId);\n\n    img.crossOrigin = \"anonymous\";\n\n    img.src = url;\n  });\n}\n\nfunction requestRes<T>(url: string, config: RequestConfig): AssetPromise<T> {\n  return new AssetPromise((resolve, reject, setProgress) => {\n    const xhr = new XMLHttpRequest();\n    xhr.timeout = config.timeout;\n    config.method = config.method ?? \"get\";\n    xhr.onload = () => {\n      if (xhr.status < 200 || xhr.status >= 300) {\n        reject(new Error(`request failed from: ${url}`));\n        return;\n      }\n      const result = xhr.response ?? xhr.responseText;\n      resolve(result);\n    };\n    xhr.onerror = () => {\n      reject(new Error(`request failed from: ${url}`));\n    };\n    xhr.ontimeout = () => {\n      reject(new Error(`request timeout from: ${url}`));\n    };\n    xhr.onprogress = (e) => {\n      setProgress(e.loaded / e.total);\n    };\n    xhr.open(config.method, url, true);\n    xhr.withCredentials = config.credentials === \"include\";\n    //@ts-ignore\n    xhr.responseType = config.type;\n    const headers = config.headers;\n    if (headers) {\n      Object.keys(headers).forEach((name) => {\n        xhr.setRequestHeader(name, headers[name]);\n      });\n    }\n    // @ts-ignore\n    xhr.send(config.body as XMLHttpRequestBodyInit);\n  });\n}\n\nfunction getMimeTypeFromUrl(url: string) {\n  const extname = url.substring(url.lastIndexOf(\".\") + 1);\n  return mimeType[extname];\n}\n\nexport class MultiExecutor {\n  private _timeoutId: number = -100;\n  private _currentCount = 0;\n  constructor(\n    private execFunc: (count?: number) => Promise<any>,\n    private totalCount: number,\n    private interval: number\n  ) {\n    this.exec = this.exec.bind(this);\n  }\n\n  private done: Function;\n  start(done?: Function): void {\n    this.done = done;\n    this.exec();\n  }\n\n  stop(): void {\n    clearTimeout(this._timeoutId);\n  }\n\n  private exec(): void {\n    if (this._currentCount >= this.totalCount) {\n      this.done && this.done();\n      return;\n    }\n    this._currentCount++;\n    this.execFunc(this._currentCount).then(() => {\n      //@ts-ignore\n      this._timeoutId = setTimeout(this.exec, this.interval);\n    });\n  }\n}\n","import { LoadItem } from \"./LoadItem\";\nimport { AssetPromise } from \"./AssetPromise\";\nimport { RequestConfig, request } from \"./request\";\nimport { ResourceManager } from \"./ResourceManager\";\n/**\n * Loader abstract class.\n */\nexport abstract class Loader<T> {\n  /**\n   * Register a class with a string name for serialization and deserialization.\n   * @param key - class name\n   * @param obj - class object\n   */\n  public static registerClass(className: string, classDefine: { new (...args: any): any }) {\n    this._engineObjects[className] = classDefine;\n  }\n\n  /**\n   * Get the class object by class name.\n   * @param key - class name\n   * @returns class object\n   */\n  public static getClass(className: string): { new (...args: any): any } {\n    return this._engineObjects[className];\n  }\n\n  private static _engineObjects: { [key: string]: any } = {};\n  request: <U>(url: string, config: RequestConfig) => AssetPromise<U> = request;\n  abstract load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<T>;\n  constructor(public readonly useCache: boolean) {}\n}\n","/**\n * Asset Type.\n */\nexport enum AssetType {\n  /**\n   * Plain text.\n   * @remarks Will not be cached based on url in ResourceManager.\n   */\n  Text = \"text\",\n  /**\n   * JSON.\n   * @remarks Will not be cached based on url in ResourceManager.\n   */\n  JSON = \"json\",\n  /**\n   * ArrayBuffer.\n   * @remarks Will not be cached based on url in ResourceManager.\n   */\n  Buffer = \"buffer\",\n  /** 2D Texture. */\n  Texture2D = \"texture2d\",\n  /** Cube Texture. */\n  TextureCube = \"texture-cube\",\n  /** Material. */\n  Material = \"material\",\n  /** Mesh. */\n  Mesh = \"mesh\",\n  /** AnimationClip. */\n  AnimationClip = \"AnimationClip\",\n  /** AnimatorController. */\n  AnimatorController = \"AnimatorController\",\n  /** Prefab.*/\n  Prefab = \"prefab\",\n  /** Compress Texture. */\n  KTX = \"ktx\",\n  /** Cube Compress Texture. */\n  KTXCube = \"ktx-cube\",\n  /** Sprite. */\n  Sprite = \"sprite\",\n  /** Sprite Atlas. */\n  SpriteAtlas = \"sprite-atlas\",\n  /** ambient light */\n  Env = \"environment\",\n  /** scene */\n  Scene = \"scene\",\n  /** HDR to cube */\n  HDR = \"HDR\"\n}\n","/**\n * Set which face for render.\n */\nexport enum RenderFace {\n  /** Render front face. */\n  Front,\n  /** Render back face. */\n  Back,\n  /** Render double face. */\n  Double\n}\n","/**\n * Alpha blend mode.\n */\nexport enum BlendMode {\n  /** SRC ALPHA * SRC + (1 - SRC ALPHA) * DEST */\n  Normal,\n  /** SRC ALPHA * SRC + ONE * DEST */\n  Additive\n}\n","/**\n * Texture UV coordinate.\n */\nexport enum TextureCoordinate {\n  UV0 = 0,\n  UV1,\n  UV2,\n  UV3,\n  UV4,\n  UV5,\n  UV6,\n  UV7\n}\n","import { Engine } from \"../Engine\";\nimport { BlendFactor, BlendOperation, CullMode, Shader } from \"../shader\";\nimport { ShaderMacro } from \"../shader/ShaderMacro\";\nimport { BlendMode } from \"./enums/BlendMode\";\nimport { RenderFace } from \"./enums/RenderFace\";\nimport { RenderQueueType } from \"./enums/RenderQueueType\";\nimport { Material } from \"./Material\";\n\nexport class BaseMaterial extends Material {\n  protected static _baseColorProp = Shader.getPropertyByName(\"u_baseColor\");\n  protected static _baseTextureProp = Shader.getPropertyByName(\"u_baseTexture\");\n  protected static _baseTextureMacro: ShaderMacro = Shader.getMacroByName(\"BASETEXTURE\");\n  protected static _tilingOffsetProp = Shader.getPropertyByName(\"u_tilingOffset\");\n  protected static _normalTextureProp = Shader.getPropertyByName(\"u_normalTexture\");\n  protected static _normalIntensityProp = Shader.getPropertyByName(\"u_normalIntensity\");\n  protected static _normalTextureMacro: ShaderMacro = Shader.getMacroByName(\"NORMALTEXTURE\");\n  protected static _emissiveColorProp = Shader.getPropertyByName(\"u_emissiveColor\");\n  protected static _emissiveTextureProp = Shader.getPropertyByName(\"u_emissiveTexture\");\n  protected static _emissiveTextureMacro: ShaderMacro = Shader.getMacroByName(\"EMISSIVETEXTURE\");\n\n  private static _alphaCutoffProp = Shader.getPropertyByName(\"u_alphaCutoff\");\n  private static _alphaCutoffMacro: ShaderMacro = Shader.getMacroByName(\"ALPHA_CUTOFF\");\n\n  private _renderFace: RenderFace = RenderFace.Front;\n  private _isTransparent: boolean = false;\n  private _blendMode: BlendMode;\n\n  /**\n   * Is this material transparent.\n   * @remarks\n   * If material is transparent, transparent blend mode will be affected by `blendMode`, default is `BlendMode.Normal`.\n   */\n  get isTransparent(): boolean {\n    return this._isTransparent;\n  }\n\n  set isTransparent(value: boolean) {\n    if (value === this._isTransparent) return;\n    this._isTransparent = value;\n\n    const {\n      depthState,\n      blendState: { targetBlendState }\n    } = this.renderState;\n\n    if (value) {\n      targetBlendState.enabled = true;\n      depthState.writeEnabled = false;\n      this.renderQueueType = RenderQueueType.Transparent;\n    } else {\n      targetBlendState.enabled = false;\n      depthState.writeEnabled = true;\n      this.renderQueueType = this.shaderData.getFloat(BaseMaterial._alphaCutoffProp)\n        ? RenderQueueType.AlphaTest\n        : RenderQueueType.Opaque;\n    }\n  }\n\n  /**\n   * Alpha cutoff value.\n   * @remarks\n   * Fragments with alpha channel lower than cutoff value will be discarded.\n   * `0` means no fragment will be discarded.\n   */\n  get alphaCutoff(): number {\n    return this.shaderData.getFloat(BaseMaterial._alphaCutoffProp);\n  }\n\n  set alphaCutoff(value: number) {\n    this.shaderData.setFloat(BaseMaterial._alphaCutoffProp, value);\n\n    if (value > 0) {\n      this.shaderData.enableMacro(BaseMaterial._alphaCutoffMacro);\n      this.renderQueueType = this._isTransparent ? RenderQueueType.Transparent : RenderQueueType.AlphaTest;\n    } else {\n      this.shaderData.disableMacro(BaseMaterial._alphaCutoffMacro);\n      this.renderQueueType = this._isTransparent ? RenderQueueType.Transparent : RenderQueueType.Opaque;\n    }\n  }\n\n  /**\n   * Set which face for render.\n   */\n  get renderFace(): RenderFace {\n    return this._renderFace;\n  }\n\n  set renderFace(value: RenderFace) {\n    if (value === this._renderFace) return;\n    this._renderFace = value;\n\n    switch (value) {\n      case RenderFace.Front:\n        this.renderState.rasterState.cullMode = CullMode.Back;\n        break;\n      case RenderFace.Back:\n        this.renderState.rasterState.cullMode = CullMode.Front;\n        break;\n      case RenderFace.Double:\n        this.renderState.rasterState.cullMode = CullMode.Off;\n        break;\n    }\n  }\n\n  /**\n   * Alpha blend mode.\n   * @remarks\n   * Only take effect when `isTransparent` is `true`.\n   */\n  get blendMode(): BlendMode {\n    return this._blendMode;\n  }\n\n  set blendMode(value: BlendMode) {\n    if (value === this._blendMode) return;\n    this._blendMode = value;\n\n    const {\n      blendState: { targetBlendState: target }\n    } = this.renderState;\n\n    switch (value) {\n      case BlendMode.Normal:\n        target.sourceColorBlendFactor = BlendFactor.SourceAlpha;\n        target.destinationColorBlendFactor = BlendFactor.OneMinusSourceAlpha;\n        target.sourceAlphaBlendFactor = BlendFactor.One;\n        target.destinationAlphaBlendFactor = BlendFactor.OneMinusSourceAlpha;\n        target.colorBlendOperation = target.alphaBlendOperation = BlendOperation.Add;\n        break;\n      case BlendMode.Additive:\n        target.sourceColorBlendFactor = BlendFactor.SourceAlpha;\n        target.destinationColorBlendFactor = BlendFactor.One;\n        target.sourceAlphaBlendFactor = BlendFactor.One;\n        target.destinationAlphaBlendFactor = BlendFactor.OneMinusSourceAlpha;\n        target.colorBlendOperation = target.alphaBlendOperation = BlendOperation.Add;\n        break;\n    }\n  }\n\n  /**\n   * Create a BaseMaterial instance.\n   * @param engine - Engine to which the material belongs\n   * @param shader - Shader used by the material\n   */\n  constructor(engine: Engine, shader: Shader) {\n    super(engine, shader);\n    this.blendMode = BlendMode.Normal;\n    this.shaderData.setFloat(BaseMaterial._alphaCutoffProp, 0);\n  }\n\n  /**\n   * @override\n   * Clone and return the instance.\n   */\n  clone(): BaseMaterial {\n    const dest = new BaseMaterial(this._engine, this.shader);\n    this.cloneTo(dest);\n    return dest;\n  }\n\n  /**\n   * @override\n   * Clone to the target material.\n   * @param target - target material\n   */\n  cloneTo(target: BaseMaterial): void {\n    super.cloneTo(target);\n    target._renderFace = this._renderFace;\n    target._isTransparent = this._isTransparent;\n    target._blendMode = this._blendMode;\n  }\n}\n","import { Color, Vector4 } from \"@oasis-engine/math\";\nimport { Engine } from \"../Engine\";\nimport { Shader } from \"../shader/Shader\";\nimport { Texture2D } from \"../texture/Texture2D\";\nimport { BaseMaterial } from \"./BaseMaterial\";\n\n/**\n * Blinn-phong Material.\n */\nexport class BlinnPhongMaterial extends BaseMaterial {\n  private static _specularColorProp = Shader.getPropertyByName(\"u_specularColor\");\n  private static _shininessProp = Shader.getPropertyByName(\"u_shininess\");\n  private static _specularTextureProp = Shader.getPropertyByName(\"u_specularTexture\");\n\n  /**\n   * Base color.\n   */\n  get baseColor(): Color {\n    return this.shaderData.getColor(BlinnPhongMaterial._baseColorProp);\n  }\n\n  set baseColor(value: Color) {\n    const baseColor = this.shaderData.getColor(BlinnPhongMaterial._baseColorProp);\n    if (value !== baseColor) {\n      baseColor.copyFrom(value);\n    }\n  }\n\n  /**\n   * Base texture.\n   */\n  get baseTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(BlinnPhongMaterial._baseTextureProp);\n  }\n\n  set baseTexture(value: Texture2D) {\n    this.shaderData.setTexture(BlinnPhongMaterial._baseTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(BlinnPhongMaterial._baseTextureMacro);\n    } else {\n      this.shaderData.disableMacro(BlinnPhongMaterial._baseTextureMacro);\n    }\n  }\n\n  /**\n   * Specular color.\n   */\n  get specularColor(): Color {\n    return this.shaderData.getColor(BlinnPhongMaterial._specularColorProp);\n  }\n\n  set specularColor(value: Color) {\n    const specularColor = this.shaderData.getColor(BlinnPhongMaterial._specularColorProp);\n    if (value !== specularColor) {\n      specularColor.copyFrom(value);\n    }\n  }\n\n  /**\n   * Specular texture.\n   */\n  get specularTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(BlinnPhongMaterial._specularTextureProp);\n  }\n\n  set specularTexture(value: Texture2D) {\n    this.shaderData.setTexture(BlinnPhongMaterial._specularTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(\"O3_SPECULAR_TEXTURE\");\n    } else {\n      this.shaderData.disableMacro(\"O3_SPECULAR_TEXTURE\");\n    }\n  }\n\n  /**\n   * Emissive color.\n   */\n  get emissiveColor(): Color {\n    return this.shaderData.getColor(BlinnPhongMaterial._emissiveColorProp);\n  }\n\n  set emissiveColor(value: Color) {\n    const emissiveColor = this.shaderData.getColor(BlinnPhongMaterial._emissiveColorProp);\n    if (value !== emissiveColor) {\n      emissiveColor.copyFrom(value);\n    }\n  }\n\n  /**\n   * Emissive texture.\n   */\n  get emissiveTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(BlinnPhongMaterial._emissiveTextureProp);\n  }\n\n  set emissiveTexture(value: Texture2D) {\n    this.shaderData.setTexture(BlinnPhongMaterial._emissiveTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(BlinnPhongMaterial._emissiveTextureMacro);\n    } else {\n      this.shaderData.disableMacro(BlinnPhongMaterial._emissiveTextureMacro);\n    }\n  }\n\n  /**\n   * Normal texture.\n   */\n  get normalTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(BlinnPhongMaterial._normalTextureProp);\n  }\n\n  set normalTexture(value: Texture2D) {\n    this.shaderData.setTexture(BlinnPhongMaterial._normalTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(BlinnPhongMaterial._normalTextureMacro);\n    } else {\n      this.shaderData.disableMacro(BlinnPhongMaterial._normalTextureMacro);\n    }\n  }\n\n  /**\n   * Normal texture intensity.\n   */\n  get normalIntensity(): number {\n    return this.shaderData.getFloat(BlinnPhongMaterial._normalIntensityProp);\n  }\n\n  set normalIntensity(value: number) {\n    this.shaderData.setFloat(BlinnPhongMaterial._normalIntensityProp, value);\n  }\n\n  /**\n   * Set the specular reflection coefficient, the larger the value, the more convergent the specular reflection effect.\n   */\n  get shininess(): number {\n    return this.shaderData.getFloat(BlinnPhongMaterial._shininessProp);\n  }\n\n  set shininess(value: number) {\n    this.shaderData.setFloat(BlinnPhongMaterial._shininessProp, Math.max(value, 1e-4));\n  }\n\n  /**\n   * Tiling and offset of main textures.\n   */\n  get tilingOffset(): Vector4 {\n    return this.shaderData.getVector4(BlinnPhongMaterial._tilingOffsetProp);\n  }\n\n  set tilingOffset(value: Vector4) {\n    const tilingOffset = this.shaderData.getVector4(BlinnPhongMaterial._tilingOffsetProp);\n    if (value !== tilingOffset) {\n      tilingOffset.copyFrom(value);\n    }\n  }\n\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"blinn-phong\"));\n\n    const shaderData = this.shaderData;\n\n    shaderData.enableMacro(\"O3_NEED_WORLDPOS\");\n    shaderData.enableMacro(\"O3_NEED_TILINGOFFSET\");\n\n    shaderData.setColor(BlinnPhongMaterial._baseColorProp, new Color(1, 1, 1, 1));\n    shaderData.setColor(BlinnPhongMaterial._specularColorProp, new Color(1, 1, 1, 1));\n    shaderData.setColor(BlinnPhongMaterial._emissiveColorProp, new Color(0, 0, 0, 1));\n    shaderData.setVector4(BlinnPhongMaterial._tilingOffsetProp, new Vector4(1, 1, 0, 0));\n    shaderData.setFloat(BlinnPhongMaterial._shininessProp, 16);\n    shaderData.setFloat(BlinnPhongMaterial._normalIntensityProp, 1);\n  }\n\n  /**\n   * @override\n   */\n  clone(): BlinnPhongMaterial {\n    var dest: BlinnPhongMaterial = new BlinnPhongMaterial(this._engine);\n    this.cloneTo(dest);\n    return dest;\n  }\n}\n","import { Color, Vector4 } from \"@oasis-engine/math\";\nimport { Logger } from \"..\";\nimport { Engine } from \"../Engine\";\nimport { Shader } from \"../shader/Shader\";\nimport { Texture2D } from \"../texture/Texture2D\";\nimport { BaseMaterial } from \"./BaseMaterial\";\nimport { TextureCoordinate } from \"./enums/TextureCoordinate\";\n\n/**\n * PBR (Physically-Based Rendering) Material.\n */\nexport abstract class PBRBaseMaterial extends BaseMaterial {\n  private static _occlusionTextureIntensityProp = Shader.getPropertyByName(\"u_occlusionIntensity\");\n  private static _occlusionTextureCoordProp = Shader.getPropertyByName(\"u_occlusionTextureCoord\");\n  private static _occlusionTextureProp = Shader.getPropertyByName(\"u_occlusionTexture\");\n\n  private static _clearCoatProp = Shader.getPropertyByName(\"u_clearCoat\");\n  private static _clearCoatTextureProp = Shader.getPropertyByName(\"u_clearCoatTexture\");\n  private static _clearCoatRoughnessProp = Shader.getPropertyByName(\"u_clearCoatRoughness\");\n  private static _clearCoatRoughnessTextureProp = Shader.getPropertyByName(\"u_clearCoatRoughnessTexture\");\n  private static _clearCoatNormalTextureProp = Shader.getPropertyByName(\"u_clearCoatNormalTexture\");\n\n  /**\n   * Base color.\n   */\n  get baseColor(): Color {\n    return this.shaderData.getColor(PBRBaseMaterial._baseColorProp);\n  }\n\n  set baseColor(value: Color) {\n    const baseColor = this.shaderData.getColor(PBRBaseMaterial._baseColorProp);\n    if (value !== baseColor) {\n      baseColor.copyFrom(value);\n    }\n  }\n\n  /**\n   * Base texture.\n   */\n  get baseTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(PBRBaseMaterial._baseTextureProp);\n  }\n\n  set baseTexture(value: Texture2D) {\n    this.shaderData.setTexture(PBRBaseMaterial._baseTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(PBRBaseMaterial._baseTextureMacro);\n    } else {\n      this.shaderData.disableMacro(PBRBaseMaterial._baseTextureMacro);\n    }\n  }\n\n  /**\n   * Normal texture.\n   */\n  get normalTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(PBRBaseMaterial._normalTextureProp);\n  }\n\n  set normalTexture(value: Texture2D) {\n    this.shaderData.setTexture(PBRBaseMaterial._normalTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(PBRBaseMaterial._normalTextureMacro);\n    } else {\n      this.shaderData.disableMacro(PBRBaseMaterial._normalTextureMacro);\n    }\n  }\n\n  /**\n   * Normal texture intensity.\n   */\n  get normalTextureIntensity(): number {\n    return this.shaderData.getFloat(PBRBaseMaterial._normalIntensityProp);\n  }\n\n  set normalTextureIntensity(value: number) {\n    this.shaderData.setFloat(PBRBaseMaterial._normalIntensityProp, value);\n  }\n\n  /**\n   * Emissive color.\n   */\n  get emissiveColor(): Color {\n    return this.shaderData.getColor(PBRBaseMaterial._emissiveColorProp);\n  }\n\n  set emissiveColor(value: Color) {\n    const emissiveColor = this.shaderData.getColor(PBRBaseMaterial._emissiveColorProp);\n    if (value !== emissiveColor) {\n      emissiveColor.copyFrom(value);\n    }\n  }\n\n  /**\n   * Emissive texture.\n   */\n  get emissiveTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(PBRBaseMaterial._emissiveTextureProp);\n  }\n\n  set emissiveTexture(value: Texture2D) {\n    this.shaderData.setTexture(PBRBaseMaterial._emissiveTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(PBRBaseMaterial._emissiveTextureMacro);\n    } else {\n      this.shaderData.disableMacro(PBRBaseMaterial._emissiveTextureMacro);\n    }\n  }\n\n  /**\n   * Occlusion texture.\n   */\n  get occlusionTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(PBRBaseMaterial._occlusionTextureProp);\n  }\n\n  set occlusionTexture(value: Texture2D) {\n    this.shaderData.setTexture(PBRBaseMaterial._occlusionTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(\"OCCLUSIONTEXTURE\");\n    } else {\n      this.shaderData.disableMacro(\"OCCLUSIONTEXTURE\");\n    }\n  }\n\n  /**\n   * Occlusion texture intensity.\n   */\n  get occlusionTextureIntensity(): number {\n    return this.shaderData.getFloat(PBRBaseMaterial._occlusionTextureIntensityProp);\n  }\n\n  set occlusionTextureIntensity(value: number) {\n    this.shaderData.setFloat(PBRBaseMaterial._occlusionTextureIntensityProp, value);\n  }\n\n  /**\n   * Occlusion texture uv coordinate.\n   * @remarks Must be UV0 or UV1.\n   */\n  get occlusionTextureCoord(): TextureCoordinate {\n    return this.shaderData.getFloat(PBRBaseMaterial._occlusionTextureCoordProp);\n  }\n\n  set occlusionTextureCoord(value: TextureCoordinate) {\n    if (value > TextureCoordinate.UV1) {\n      Logger.warn(\"Occlusion texture uv coordinate must be UV0 or UV1.\");\n    }\n    this.shaderData.setFloat(PBRBaseMaterial._occlusionTextureCoordProp, value);\n  }\n\n  /**\n   * Tiling and offset of main textures.\n   */\n  get tilingOffset(): Vector4 {\n    return this.shaderData.getVector4(PBRBaseMaterial._tilingOffsetProp);\n  }\n\n  set tilingOffset(value: Vector4) {\n    const tilingOffset = this.shaderData.getVector4(PBRBaseMaterial._tilingOffsetProp);\n    if (value !== tilingOffset) {\n      tilingOffset.copyFrom(value);\n    }\n  }\n\n  /**\n   * The clearCoat layer intensity, default 0.\n   */\n  get clearCoat(): number {\n    return this.shaderData.getFloat(PBRBaseMaterial._clearCoatProp);\n  }\n\n  set clearCoat(value: number) {\n    if (!!this.shaderData.getFloat(PBRBaseMaterial._clearCoatProp) !== !!value) {\n      if (value === 0) {\n        this.shaderData.disableMacro(\"CLEARCOAT\");\n      } else {\n        this.shaderData.enableMacro(\"CLEARCOAT\");\n      }\n    }\n    this.shaderData.setFloat(PBRBaseMaterial._clearCoatProp, value);\n  }\n\n  /**\n   * The clearCoat layer intensity texture.\n   */\n  get clearCoatTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(PBRBaseMaterial._clearCoatTextureProp);\n  }\n\n  set clearCoatTexture(value: Texture2D) {\n    this.shaderData.setTexture(PBRBaseMaterial._clearCoatTextureProp, value);\n\n    if (value) {\n      this.shaderData.enableMacro(\"HAS_CLEARCOATTEXTURE\");\n    } else {\n      this.shaderData.disableMacro(\"HAS_CLEARCOATTEXTURE\");\n    }\n  }\n\n  /**\n   * The clearCoat layer roughness, default 0.\n   */\n  get clearCoatRoughness(): number {\n    return this.shaderData.getFloat(PBRBaseMaterial._clearCoatRoughnessProp);\n  }\n\n  set clearCoatRoughness(value: number) {\n    this.shaderData.setFloat(PBRBaseMaterial._clearCoatRoughnessProp, value);\n  }\n\n  /**\n   * The clearCoat layer roughness texture.\n   */\n  get clearCoatRoughnessTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(PBRBaseMaterial._clearCoatRoughnessTextureProp);\n  }\n\n  set clearCoatRoughnessTexture(value: Texture2D) {\n    this.shaderData.setTexture(PBRBaseMaterial._clearCoatRoughnessTextureProp, value);\n\n    if (value) {\n      this.shaderData.enableMacro(\"HAS_CLEARCOATROUGHNESSTEXTURE\");\n    } else {\n      this.shaderData.disableMacro(\"HAS_CLEARCOATROUGHNESSTEXTURE\");\n    }\n  }\n\n  /**\n   * The clearCoat normal map texture.\n   */\n  get clearCoatNormalTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(PBRBaseMaterial._clearCoatNormalTextureProp);\n  }\n\n  set clearCoatNormalTexture(value: Texture2D) {\n    this.shaderData.setTexture(PBRBaseMaterial._clearCoatNormalTextureProp, value);\n\n    if (value) {\n      this.shaderData.enableMacro(\"HAS_CLEARCOATNORMALTEXTURE\");\n    } else {\n      this.shaderData.disableMacro(\"HAS_CLEARCOATNORMALTEXTURE\");\n    }\n  }\n\n  /**\n   * Create a pbr base material instance.\n   * @param engine - Engine to which the material belongs\n   * @param shader - Shader used by the material\n   */\n  protected constructor(engine: Engine, shader: Shader) {\n    super(engine, shader);\n\n    const shaderData = this.shaderData;\n\n    shaderData.enableMacro(\"O3_NEED_WORLDPOS\");\n    shaderData.enableMacro(\"O3_NEED_TILINGOFFSET\");\n\n    shaderData.setColor(PBRBaseMaterial._baseColorProp, new Color(1, 1, 1, 1));\n    shaderData.setColor(PBRBaseMaterial._emissiveColorProp, new Color(0, 0, 0, 1));\n    shaderData.setVector4(PBRBaseMaterial._tilingOffsetProp, new Vector4(1, 1, 0, 0));\n\n    shaderData.setFloat(PBRBaseMaterial._normalIntensityProp, 1);\n    shaderData.setFloat(PBRBaseMaterial._occlusionTextureIntensityProp, 1);\n    shaderData.setFloat(PBRBaseMaterial._occlusionTextureCoordProp, TextureCoordinate.UV0);\n\n    shaderData.setFloat(PBRBaseMaterial._clearCoatProp, 0);\n    shaderData.setFloat(PBRBaseMaterial._clearCoatRoughnessProp, 0);\n  }\n}\n","import { Engine } from \"../Engine\";\nimport { Shader } from \"../shader/Shader\";\nimport { Texture2D } from \"../texture/Texture2D\";\nimport { PBRBaseMaterial } from \"./PBRBaseMaterial\";\n\n/**\n * PBR (Metallic-Roughness Workflow) Material.\n */\nexport class PBRMaterial extends PBRBaseMaterial {\n  private static _metallicProp = Shader.getPropertyByName(\"u_metal\");\n  private static _roughnessProp = Shader.getPropertyByName(\"u_roughness\");\n  private static _roughnessMetallicTextureProp = Shader.getPropertyByName(\"u_roughnessMetallicTexture\");\n\n  /**\n   * Metallic, default 1.0.\n   */\n  get metallic(): number {\n    return this.shaderData.getFloat(PBRMaterial._metallicProp);\n  }\n\n  set metallic(value: number) {\n    this.shaderData.setFloat(PBRMaterial._metallicProp, value);\n  }\n\n  /**\n   * Roughness, default 1.0.\n   */\n  get roughness(): number {\n    return this.shaderData.getFloat(PBRMaterial._roughnessProp);\n  }\n\n  set roughness(value: number) {\n    this.shaderData.setFloat(PBRMaterial._roughnessProp, value);\n  }\n\n  /**\n   * Roughness metallic texture.\n   * @remarks G channel is roughness, B channel is metallic\n   */\n  get roughnessMetallicTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(PBRMaterial._roughnessMetallicTextureProp);\n  }\n\n  set roughnessMetallicTexture(value: Texture2D) {\n    this.shaderData.setTexture(PBRMaterial._roughnessMetallicTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(\"ROUGHNESSMETALLICTEXTURE\");\n    } else {\n      this.shaderData.disableMacro(\"ROUGHNESSMETALLICTEXTURE\");\n    }\n  }\n\n  /**\n   * Create a pbr metallic-roughness workflow material instance.\n   * @param engine - Engine to which the material belongs\n   */\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"pbr\"));\n    this.shaderData.setFloat(PBRMaterial._metallicProp, 1);\n    this.shaderData.setFloat(PBRMaterial._roughnessProp, 1);\n  }\n\n  /**\n   * @override\n   */\n  clone(): PBRMaterial {\n    const dest = new PBRMaterial(this._engine);\n    this.cloneTo(dest);\n    return dest;\n  }\n}\n","import { Color } from \"@oasis-engine/math\";\nimport { Engine } from \"../Engine\";\nimport { Shader } from \"../shader/Shader\";\nimport { ShaderMacro } from \"../shader/ShaderMacro\";\nimport { Texture2D } from \"../texture/Texture2D\";\nimport { PBRBaseMaterial } from \"./PBRBaseMaterial\";\n\n/**\n * PBR (Specular-Glossiness Workflow) Material.\n */\nexport class PBRSpecularMaterial extends PBRBaseMaterial {\n  private static _specularColorProp = Shader.getPropertyByName(\"u_PBRSpecularColor\");\n  private static _glossinessProp = Shader.getPropertyByName(\"u_glossiness\");\n  private static _specularGlossinessTextureProp = Shader.getPropertyByName(\"u_specularGlossinessTexture\");\n  private static _specularGlossinessTextureMacro: ShaderMacro = Shader.getMacroByName(\"SPECULARGLOSSINESSTEXTURE\");\n\n  /**\n   * Specular color.\n   */\n  get specularColor(): Color {\n    return this.shaderData.getColor(PBRSpecularMaterial._specularColorProp);\n  }\n\n  set specularColor(value: Color) {\n    const specularColor = this.shaderData.getColor(PBRSpecularMaterial._specularColorProp);\n    if (value !== specularColor) {\n      specularColor.copyFrom(value);\n    }\n  }\n\n  /**\n   * Glossiness.\n   */\n  get glossiness(): number {\n    return this.shaderData.getFloat(PBRSpecularMaterial._glossinessProp);\n  }\n\n  set glossiness(value: number) {\n    this.shaderData.setFloat(PBRSpecularMaterial._glossinessProp, value);\n  }\n\n  /**\n   * Specular glossiness texture.\n   * @remarks RGB is specular, A is glossiness\n   */\n  get specularGlossinessTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(PBRSpecularMaterial._specularGlossinessTextureProp);\n  }\n\n  set specularGlossinessTexture(value: Texture2D) {\n    this.shaderData.setTexture(PBRSpecularMaterial._specularGlossinessTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(PBRSpecularMaterial._specularGlossinessTextureMacro);\n    } else {\n      this.shaderData.disableMacro(PBRSpecularMaterial._specularGlossinessTextureMacro);\n    }\n  }\n\n  /**\n   * Create a pbr specular-glossiness workflow material instance.\n   * @param engine - Engine to which the material belongs\n   */\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"pbr-specular\"));\n\n    this.shaderData.setColor(PBRSpecularMaterial._specularColorProp, new Color(1, 1, 1, 1));\n    this.shaderData.setFloat(PBRSpecularMaterial._glossinessProp, 1.0);\n  }\n\n  /**\n   * @override\n   */\n  clone(): PBRSpecularMaterial {\n    const dest = new PBRSpecularMaterial(this._engine);\n    this.cloneTo(dest);\n    return dest;\n  }\n}\n","import { Color, Vector4 } from \"@oasis-engine/math\";\nimport { Engine } from \"../Engine\";\nimport { Shader } from \"../shader/Shader\";\nimport { Texture2D } from \"../texture/Texture2D\";\nimport { BaseMaterial } from \"./BaseMaterial\";\n\n/**\n * Unlit Material.\n */\nexport class UnlitMaterial extends BaseMaterial {\n  /**\n   * Base color.\n   */\n  get baseColor(): Color {\n    return this.shaderData.getColor(UnlitMaterial._baseColorProp);\n  }\n\n  set baseColor(value: Color) {\n    const baseColor = this.shaderData.getColor(UnlitMaterial._baseColorProp);\n    if (value !== baseColor) {\n      baseColor.copyFrom(value);\n    }\n  }\n\n  /**\n   * Base texture.\n   */\n  get baseTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(UnlitMaterial._baseTextureProp);\n  }\n\n  set baseTexture(value: Texture2D) {\n    this.shaderData.setTexture(UnlitMaterial._baseTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(UnlitMaterial._baseTextureMacro);\n    } else {\n      this.shaderData.disableMacro(UnlitMaterial._baseTextureMacro);\n    }\n  }\n\n  /**\n   * Tiling and offset of main textures.\n   */\n  get tilingOffset(): Vector4 {\n    return this.shaderData.getVector4(UnlitMaterial._tilingOffsetProp);\n  }\n\n  set tilingOffset(value: Vector4) {\n    const tilingOffset = this.shaderData.getVector4(UnlitMaterial._tilingOffsetProp);\n    if (value !== tilingOffset) {\n      tilingOffset.copyFrom(value);\n    }\n  }\n\n  /**\n   * Create a unlit material instance.\n   * @param engine - Engine to which the material belongs\n   */\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"unlit\"));\n\n    const shaderData = this.shaderData;\n\n    shaderData.enableMacro(\"OMIT_NORMAL\");\n    shaderData.enableMacro(\"O3_NEED_TILINGOFFSET\");\n\n    shaderData.setColor(UnlitMaterial._baseColorProp, new Color(1, 1, 1, 1));\n    shaderData.setVector4(UnlitMaterial._tilingOffsetProp, new Vector4(1, 1, 0, 0));\n  }\n\n  /**\n   * @override\n   */\n  clone(): UnlitMaterial {\n    const dest = new UnlitMaterial(this._engine);\n    this.cloneTo(dest);\n    return dest;\n  }\n}\n","/**\n * The horizontal alignment of the text.\n */\nexport enum TextHorizontalAlignment {\n  /** Align left horizontally */\n  Left = 0,\n  /** Align center horizontally */\n  Center = 1,\n  /** Align right horizontally */\n  Right = 2\n}\n\n/**\n * The vertical alignment of the text.\n */\nexport enum TextVerticalAlignment {\n  /** Align top vertically */\n  Top = 0,\n  /** Align center vertically */\n  Center = 1,\n  /** Align bottom vertically */\n  Bottom = 2\n}\n","/**\n * The way to handle the situation where wrapped text is too tall to fit in the height.\n */\nexport enum OverflowMode {\n  /** Overflow when the text is too tall */\n  Overflow = 0,\n  /** Truncate with height when the text is too tall */\n  Truncate = 1\n}\n","/**\n * The style of the font.\n */\nexport enum FontStyle {\n  /** Set font without style */\n  None = 0x0,\n  /** Set font bold */\n  Bold = 0x1,\n  /** Set font italic */\n  Italic = 0x2\n}\n","import { RefObject } from \"../../asset/RefObject\";\nimport { Engine } from \"../../Engine\";\nimport { Sprite } from \"../sprite/Sprite\";\n\n/**\n * Sprite Atlas.\n */\nexport class SpriteAtlas extends RefObject {\n  private _sprites: Sprite[] = new Array<Sprite>();\n  private _spriteNamesToIndex: Record<string, number> = {};\n\n  /**\n   * All the sprites in the atlas.\n   */\n  get sprites(): Readonly<Sprite[]> {\n    return this._sprites;\n  }\n\n  /**\n   * Get the last sprite named 'name' from the atlas.\n   * @param name - The name of the sprite you want to find\n   * @returns The sprite you want to find\n   */\n  getSprite(name: string): Sprite {\n    const sprite = this._sprites[this._spriteNamesToIndex[name]];\n    if (!sprite) {\n      console.warn(\"There is no sprite named \" + name + \" in the atlas.\");\n    }\n    return sprite;\n  }\n\n  /**\n   * Get all the sprite named 'name' from the atlas.\n   * @param name - The name of the sprites you want to find\n   * @param outSprites - This array holds the sprites found\n   * @returns The sprites you want to find\n   */\n  getSprites(name: string, outSprites: Sprite[]): Sprite[] {\n    outSprites.length = 0;\n    let i = this._spriteNamesToIndex[name];\n    if (i !== undefined) {\n      const { _sprites } = this;\n      for (; i >= 0; i--) {\n        const sprite = _sprites[i];\n        sprite.name === name && outSprites.push(sprite);\n      }\n    } else {\n      console.warn(\"The name of the sprite you want to find is not exit in SpriteAtlas.\");\n    }\n    return outSprites;\n  }\n\n  /**\n   * Constructor a SpriteAtlas.\n   * @param engine - Engine to which the SpriteAtlas belongs\n   */\n  constructor(engine: Engine) {\n    super(engine);\n  }\n\n  /**\n   * @internal\n   */\n  _addSprite(sprite: Sprite): void {\n    this._spriteNamesToIndex[sprite.name] = this._sprites.push(sprite) - 1;\n  }\n\n  /**\n   * @override\n   */\n  _onDestroy(): void {\n    this._sprites = null;\n    this._spriteNamesToIndex = null;\n  }\n}\n","/**\n * Sprite's drawing mode enumeration.\n */\nexport enum SpriteDrawMode {\n  /** Overall scaling when modifying size. */\n  Simple,\n  /** When modifying the size, it is transformed according to the 9-slice settings (border). */\n  Sliced\n}\n","import { BoundingBox, MathUtil, Rect, Vector2, Vector4 } from \"@oasis-engine/math\";\nimport { RefObject } from \"../../asset/RefObject\";\nimport { Engine } from \"../../Engine\";\nimport { ListenerUpdateFlag } from \"../../ListenerUpdateFlag\";\nimport { Texture2D } from \"../../texture/Texture2D\";\nimport { UpdateFlagManager } from \"../../UpdateFlagManager\";\nimport { SpritePropertyDirtyFlag } from \"../enums/SpriteDirtyFlag\";\n\n/**\n * 2D sprite.\n */\nexport class Sprite extends RefObject {\n  /** The name of sprite. */\n  name: string;\n\n  /** @internal temp solution. */\n  _assetID: number;\n\n  private _width: number = undefined;\n  private _height: number = undefined;\n\n  private _positions: Vector2[] = [new Vector2(), new Vector2(), new Vector2(), new Vector2()];\n  private _uvs: Vector2[] = [new Vector2(), new Vector2(), new Vector2(), new Vector2()];\n  private _bounds: BoundingBox = new BoundingBox();\n\n  private _texture: Texture2D = null;\n  private _atlasRotated: boolean = false;\n  private _atlasRegion: Rect = new Rect(0, 0, 1, 1);\n  private _atlasRegionOffset: Vector4 = new Vector4(0, 0, 0, 0);\n\n  private _region: Rect = new Rect(0, 0, 1, 1);\n  private _pivot: Vector2 = new Vector2(0.5, 0.5);\n  private _border: Vector4 = new Vector4(0, 0, 0, 0);\n\n  private _dirtyFlag: DirtyFlag = DirtyFlag.all;\n  private _updateFlagManager: UpdateFlagManager = new UpdateFlagManager();\n\n  /**\n   * The reference to the used texture.\n   */\n  get texture(): Texture2D {\n    return this._texture;\n  }\n\n  set texture(value: Texture2D) {\n    if (this._texture !== value) {\n      this._texture = value;\n      this._dispatchSpriteChange(SpritePropertyDirtyFlag.texture);\n    }\n  }\n\n  /**\n   * The width of the sprite (in world coordinates).\n   */\n  get width(): number {\n    this._width === undefined && this._calDefaultSize();\n    return this._width;\n  }\n\n  set width(value: number) {\n    if (this._width !== value) {\n      this._width = value;\n      this._dispatchSpriteChange(SpritePropertyDirtyFlag.size);\n    }\n  }\n\n  /**\n   * The height of the sprite (in world coordinates).\n   */\n  get height(): number {\n    this._height === undefined && this._calDefaultSize();\n    return this._height;\n  }\n\n  set height(value: number) {\n    if (this._height !== value) {\n      this._height = value;\n      this._dispatchSpriteChange(SpritePropertyDirtyFlag.size);\n    }\n  }\n\n  /**\n   * Is it rotated 90 degrees clockwise when packing.\n   */\n  get atlasRotated(): boolean {\n    return this._atlasRotated;\n  }\n\n  set atlasRotated(value: boolean) {\n    if (this._atlasRotated != value) {\n      this._atlasRotated = value;\n    }\n  }\n\n  /**\n   * The rectangle region of the original texture on its atlas texture, specified in normalized.\n   */\n  get atlasRegion(): Rect {\n    return this._atlasRegion;\n  }\n\n  set atlasRegion(value: Rect) {\n    const x = MathUtil.clamp(value.x, 0, 1);\n    const y = MathUtil.clamp(value.y, 0, 1);\n    this._atlasRegion.set(x, y, MathUtil.clamp(value.width, 0, 1 - x), MathUtil.clamp(value.height, 0, 1 - y));\n    this._dispatchSpriteChange(SpritePropertyDirtyFlag.atlasRegion);\n  }\n\n  /**\n   * The rectangle region offset of the original texture on its atlas texture, specified in normalized.\n   */\n  get atlasRegionOffset(): Vector4 {\n    return this._atlasRegionOffset;\n  }\n\n  set atlasRegionOffset(value: Vector4) {\n    const x = MathUtil.clamp(value.x, 0, 1);\n    const y = MathUtil.clamp(value.y, 0, 1);\n    this._atlasRegionOffset.set(x, y, MathUtil.clamp(value.z, 0, 1 - x), MathUtil.clamp(value.w, 0, 1 - y));\n    this._dispatchSpriteChange(SpritePropertyDirtyFlag.atlasRegionOffset);\n  }\n\n  /**\n   * The rectangle region of the sprite, specified in normalized.\n   */\n  get region(): Rect {\n    return this._region;\n  }\n\n  set region(value: Rect) {\n    const region = this._region;\n    const x = MathUtil.clamp(value.x, 0, 1);\n    const y = MathUtil.clamp(value.y, 0, 1);\n    region.set(x, y, MathUtil.clamp(value.width, 0, 1 - x), MathUtil.clamp(value.height, 0, 1 - y));\n    this._dispatchSpriteChange(SpritePropertyDirtyFlag.region);\n  }\n\n  /**\n   * Location of the sprite's center point in the rectangle region, specified in normalized.\n   * The origin is at the bottom left and the default value is (0.5, 0.5).\n   */\n  get pivot(): Vector2 {\n    return this._pivot;\n  }\n\n  set pivot(value: Vector2) {\n    const pivot = this._pivot;\n    if (pivot === value) {\n      this._dispatchSpriteChange(SpritePropertyDirtyFlag.pivot);\n    } else {\n      const { x, y } = value;\n      if (pivot.x !== x || pivot.y !== y) {\n        pivot.set(x, y);\n        this._dispatchSpriteChange(SpritePropertyDirtyFlag.pivot);\n      }\n    }\n  }\n\n  /**\n   * Get the border of the sprite.\n   *  x      y       z     w\n   *  |      |       |     |\n   * Left, bottom, right, top.\n   * @remarks only use in sliced mode.\n   */\n  get border(): Vector4 {\n    return this._border;\n  }\n\n  set border(value: Vector4) {\n    const border = this._border;\n    const x = MathUtil.clamp(value.x, 0, 1);\n    const y = MathUtil.clamp(value.y, 0, 1);\n    border.set(x, y, MathUtil.clamp(value.z, 0, 1 - x), MathUtil.clamp(value.w, 0, 1 - y));\n    this._dispatchSpriteChange(SpritePropertyDirtyFlag.border);\n  }\n\n  /**\n   * Constructor a Sprite.\n   * @param engine - Engine to which the sprite belongs\n   * @param texture - Texture from which to obtain the Sprite\n   * @param region - Rectangle region of the texture to use for the Sprite, specified in normalized\n   * @param pivot - Sprite's pivot point relative to its graphic rectangle, specified in normalized\n   * @param border - Boundaries when using Slice DrawMode, specified in normalized\n   * @param name - The name of Sprite\n   */\n  constructor(\n    engine: Engine,\n    texture: Texture2D = null,\n    region: Rect = null,\n    pivot: Vector2 = null,\n    border: Vector4 = null,\n    name: string = null\n  ) {\n    super(engine);\n    this._texture = texture;\n    region && this._region.copyFrom(region);\n    pivot && this._pivot.copyFrom(pivot);\n    border && this._border.copyFrom(border);\n    this.name = name;\n  }\n\n  /**\n   * Clone.\n   * @returns Cloned sprite\n   */\n  clone(): Sprite {\n    const cloneSprite = new Sprite(this._engine, this._texture, this._region, this._pivot, this._border, this.name);\n    cloneSprite._assetID = this._assetID;\n    cloneSprite._atlasRotated = this._atlasRotated;\n    cloneSprite._atlasRegion.copyFrom(this._atlasRegion);\n    cloneSprite._atlasRegionOffset.copyFrom(this._atlasRegionOffset);\n    return cloneSprite;\n  }\n\n  /**\n   * @internal\n   */\n  _registerUpdateFlag(): ListenerUpdateFlag {\n    return this._updateFlagManager.createFlag(ListenerUpdateFlag);\n  }\n\n  /**\n   * @internal\n   */\n  _getPositions(): Vector2[] {\n    this._dirtyFlag & DirtyFlag.positions && this._updatePositions();\n    return this._positions;\n  }\n\n  /**\n   * @internal\n   */\n  _getUVs(): Vector2[] {\n    this._dirtyFlag & DirtyFlag.uvs && this._updateUVs();\n    return this._uvs;\n  }\n\n  /**\n   * @internal\n   */\n  _getBounds(): BoundingBox {\n    this._dirtyFlag & DirtyFlag.positions && this._updatePositions();\n    return this._bounds;\n  }\n\n  /**\n   * @override\n   */\n  _onDestroy(): void {\n    if (this._texture) {\n      this._texture = null;\n    }\n  }\n\n  private _calDefaultSize(): void {\n    if (this._texture) {\n      const { _texture, _atlasRegion, _atlasRegionOffset, _region } = this;\n      const pixelsPerUnitReciprocal = 1.0 / Engine._pixelsPerUnit;\n      this.width =\n        ((_texture.width * _atlasRegion.width) / (1 - _atlasRegionOffset.x - _atlasRegionOffset.z)) *\n        _region.width *\n        pixelsPerUnitReciprocal;\n      this.height =\n        ((_texture.height * _atlasRegion.height) / (1 - _atlasRegionOffset.y - _atlasRegionOffset.w)) *\n        _region.height *\n        pixelsPerUnitReciprocal;\n    }\n  }\n\n  private _updatePositions(): void {\n    const blank = this._atlasRegionOffset;\n    const { x: regionX, y: regionY, width: regionW, height: regionH } = this._region;\n    const regionRight = 1 - regionX - regionW;\n    const regionBottom = 1 - regionY - regionH;\n    const left = Math.max(blank.x - regionX, 0) / regionW;\n    const bottom = Math.max(blank.w - regionY, 0) / regionH;\n    const right = 1 - Math.max(blank.z - regionRight, 0) / regionW;\n    const top = 1 - Math.max(blank.y - regionBottom, 0) / regionH;\n\n    // Update positions.\n    // ---------------\n    //  2 - 3\n    //  |   |\n    //  0 - 1\n    // ---------------\n    const positions = this._positions;\n    positions[0].set(left, bottom);\n    positions[1].set(right, bottom);\n    positions[2].set(left, top);\n    positions[3].set(right, top);\n\n    const { min, max } = this._bounds;\n    min.set(left, bottom, 0);\n    max.set(right, top, 0);\n    this._dirtyFlag &= ~DirtyFlag.positions;\n  }\n\n  private _updateUVs(): void {\n    const { _uvs: uv, _atlasRegionOffset: atlasRegionOffset } = this;\n    const { x: regionX, y: regionY, width: regionW, height: regionH } = this._region;\n    const regionRight = 1 - regionX - regionW;\n    const regionBottom = 1 - regionY - regionH;\n    const { x: atlasRegionX, y: atlasRegionY, width: atlasRegionW, height: atlasRegionH } = this._atlasRegion;\n    const { x: offsetLeft, y: offsetTop, z: offsetRight, w: offsetBottom } = atlasRegionOffset;\n    const realWidth = atlasRegionW / (1 - offsetLeft - offsetRight);\n    const realHeight = atlasRegionH / (1 - offsetTop - offsetBottom);\n    // Coordinates of the four boundaries.\n    const left = Math.max(regionX - offsetLeft, 0) * realWidth + atlasRegionX;\n    const top = Math.max(regionBottom - offsetTop, 0) * realHeight + atlasRegionY;\n    const right = atlasRegionW + atlasRegionX - Math.max(regionRight - offsetRight, 0) * realWidth;\n    const bottom = atlasRegionH + atlasRegionY - Math.max(regionY - offsetBottom, 0) * realHeight;\n    const { x: borderLeft, y: borderBottom, z: borderRight, w: borderTop } = this._border;\n    // Left-Bottom\n    uv[0].set(left, bottom);\n    // Border ( Left-Bottom )\n    uv[1].set(\n      (regionX - offsetLeft + borderLeft * regionW) * realWidth + atlasRegionX,\n      atlasRegionH + atlasRegionY - (regionY - offsetBottom + borderBottom * regionH) * realHeight\n    );\n    // Border ( Right-Top )\n    uv[2].set(\n      atlasRegionW + atlasRegionX - (regionRight - offsetRight + borderRight * regionW) * realWidth,\n      (regionBottom - offsetTop + borderTop * regionH) * realHeight + atlasRegionY\n    );\n    // Right-Top\n    uv[3].set(right, top);\n    this._dirtyFlag &= ~DirtyFlag.uvs;\n  }\n\n  private _dispatchSpriteChange(type: SpritePropertyDirtyFlag): void {\n    switch (type) {\n      case SpritePropertyDirtyFlag.atlasRegionOffset:\n      case SpritePropertyDirtyFlag.region:\n        this._dirtyFlag |= DirtyFlag.all;\n        break;\n      case SpritePropertyDirtyFlag.atlasRegion:\n      case SpritePropertyDirtyFlag.border:\n        this._dirtyFlag |= DirtyFlag.uvs;\n        break;\n      default:\n        break;\n    }\n    this._updateFlagManager.dispatch(type);\n  }\n}\n\nenum DirtyFlag {\n  positions = 0x1,\n  uvs = 0x2,\n  all = 0x3\n}\n","import { Matrix, Vector2, Vector3 } from \"@oasis-engine/math\";\nimport { SpriteMask } from \"../sprite\";\nimport { SpriteRenderer } from \"../sprite/SpriteRenderer\";\nimport { IAssembler } from \"./IAssembler\";\nimport { StaticInterfaceImplement } from \"./StaticInterfaceImplement\";\n\n/**\n * @internal\n */\n@StaticInterfaceImplement<IAssembler>()\nexport class SlicedSpriteAssembler {\n  static _worldMatrix: Matrix = new Matrix();\n  static resetData(renderer: SpriteRenderer): void {\n    const { _renderData: renderData } = renderer;\n    const { positions, uvs } = renderData;\n    if (positions.length < 16) {\n      for (let i = positions.length; i < 16; i++) {\n        positions.push(new Vector3());\n        uvs.push(new Vector2());\n      }\n    }\n    renderData.triangles = [];\n  }\n\n  static updatePositions(renderer: SpriteRenderer): void {\n    const { width, height, sprite } = renderer;\n    const { positions, uvs, triangles } = renderer._renderData;\n    const { border } = sprite;\n    const spriteUVs = sprite._getUVs();\n    // Update local positions.\n    const spritePositions = sprite._getPositions();\n    const { x: left, y: bottom } = spritePositions[0];\n    const { x: right, y: top } = spritePositions[3];\n    const { width: expectWidth, height: expectHeight } = sprite;\n    const fixedLeft = expectWidth * border.x;\n    const fixedBottom = expectHeight * border.y;\n    const fixedRight = expectHeight * border.z;\n    const fixedTop = expectWidth * border.w;\n\n    // ------------------------\n    //     [3]\n    //      |\n    //     [2]\n    //      |\n    //     [1]\n    //      |\n    // row [0] - [1] - [2] - [3]\n    //    column\n    // ------------------------\n    // Calculate row and column.\n    let row: number[], column: number[];\n    if (fixedLeft + fixedRight > width) {\n      const widthScale = width / (fixedLeft + fixedRight);\n      row = [\n        expectWidth * left * widthScale,\n        fixedLeft * widthScale,\n        fixedLeft * widthScale,\n        width - expectWidth * (1 - right) * widthScale\n      ];\n    } else {\n      row = [expectWidth * left, fixedLeft, width - fixedRight, width - expectWidth * (1 - right)];\n    }\n\n    if (fixedTop + fixedBottom > height) {\n      const heightScale = height / (fixedTop + fixedBottom);\n      column = [\n        expectHeight * bottom * heightScale,\n        fixedBottom * heightScale,\n        fixedBottom * heightScale,\n        height - expectHeight * (1 - top) * heightScale\n      ];\n    } else {\n      column = [expectHeight * bottom, fixedBottom, height - fixedTop, height - expectHeight * (1 - top)];\n    }\n\n    // Update renderer's worldMatrix.\n    const { x: pivotX, y: pivotY } = renderer.sprite.pivot;\n    const localTransX = renderer.width * pivotX;\n    const localTransY = renderer.height * pivotY;\n    // Renderer's worldMatrix.\n    const { _worldMatrix: worldMatrix } = SlicedSpriteAssembler;\n    const { elements: wE } = worldMatrix;\n    // Parent's worldMatrix.\n    const { elements: pWE } = renderer.entity.transform.worldMatrix;\n    const sx = renderer.flipX ? -1 : 1;\n    const sy = renderer.flipY ? -1 : 1;\n    (wE[0] = pWE[0] * sx), (wE[1] = pWE[1] * sx), (wE[2] = pWE[2] * sx);\n    (wE[4] = pWE[4] * sy), (wE[5] = pWE[5] * sy), (wE[6] = pWE[6] * sy);\n    (wE[8] = pWE[8]), (wE[9] = pWE[9]), (wE[10] = pWE[10]);\n    wE[12] = pWE[12] - localTransX * wE[0] - localTransY * wE[4];\n    wE[13] = pWE[13] - localTransX * wE[1] - localTransY * wE[5];\n    wE[14] = pWE[14] - localTransX * wE[2] - localTransY * wE[6];\n\n    // ------------------------\n    //  3 - 7 - 11 - 15\n    //  |   |   |    |\n    //  2 - 6 - 10 - 14\n    //  |   |   |    |\n    //  1 - 5 - 9  - 13\n    //  |   |   |    |\n    //  0 - 4 - 8  - 12\n    // ------------------------\n    // Assemble position and uv.\n    let vertexCount = 0;\n    let realICount = 0;\n    for (let i = 0; i < 4; i++) {\n      const rowValue = row[i];\n      const rowU = spriteUVs[i].x;\n      for (let j = 0; j < 4; j++) {\n        const columnValue = column[j];\n        positions[vertexCount].set(\n          wE[0] * rowValue + wE[4] * columnValue + wE[12],\n          wE[1] * rowValue + wE[5] * columnValue + wE[13],\n          wE[2] * rowValue + wE[6] * columnValue + wE[14]\n        );\n        uvs[vertexCount].set(rowU, spriteUVs[j].y);\n        ++vertexCount;\n      }\n      ++realICount;\n    }\n\n    const realJCount = vertexCount / realICount;\n    let indexOffset = 0;\n    for (let i = 0; i < realICount - 1; ++i) {\n      for (let j = 0; j < realJCount - 1; ++j) {\n        const start = i * realJCount + j;\n        triangles[indexOffset++] = start;\n        triangles[indexOffset++] = start + 1;\n        triangles[indexOffset++] = start + realJCount;\n        triangles[indexOffset++] = start + 1;\n        triangles[indexOffset++] = start + realJCount + 1;\n        triangles[indexOffset++] = start + realJCount;\n      }\n    }\n    renderer._renderData.vertexCount = realICount * realJCount;\n    triangles.length = (realICount - 1) * (realJCount - 1) * 6;\n\n    const { min, max } = renderer._bounds;\n    min.set(row[0], column[0], 0);\n    max.set(row[3], column[3], 0);\n    renderer._bounds.transform(worldMatrix);\n  }\n\n  static updateUVs(renderer: SpriteRenderer): void {}\n}\n","import { BoundingBox, Color } from \"@oasis-engine/math\";\nimport { Camera } from \"../../Camera\";\nimport { assignmentClone, deepClone, ignoreClone } from \"../../clone/CloneManager\";\nimport { ICustomClone } from \"../../clone/ComponentCloner\";\nimport { Entity } from \"../../Entity\";\nimport { Renderer } from \"../../Renderer\";\nimport { CompareFunction } from \"../../shader/enums/CompareFunction\";\nimport { Shader } from \"../../shader/Shader\";\nimport { ShaderProperty } from \"../../shader/ShaderProperty\";\nimport { RenderData2D } from \"../data/RenderData2D\";\nimport { SpriteMaskInteraction } from \"../enums/SpriteMaskInteraction\";\nimport { SpriteMaskLayer } from \"../enums/SpriteMaskLayer\";\nimport { Sprite } from \"./Sprite\";\nimport { IAssembler } from \"../assembler/IAssembler\";\nimport { SpritePropertyDirtyFlag } from \"../enums/SpriteDirtyFlag\";\nimport { SpriteDrawMode } from \"../enums/SpriteDrawMode\";\nimport { SimpleSpriteAssembler } from \"../assembler/SimpleSpriteAssembler\";\nimport { ListenerUpdateFlag } from \"../../ListenerUpdateFlag\";\nimport { SlicedSpriteAssembler } from \"../assembler/SlicedSpriteAssembler\";\nimport { Engine } from \"../../Engine\";\n\n/**\n * Renders a Sprite for 2D graphics.\n */\nexport class SpriteRenderer extends Renderer implements ICustomClone {\n  /** @internal */\n  static _textureProperty: ShaderProperty = Shader.getPropertyByName(\"u_spriteTexture\");\n\n  /** @internal */\n  @ignoreClone\n  _renderData: RenderData2D;\n\n  @ignoreClone\n  private _drawMode: SpriteDrawMode;\n  @ignoreClone\n  private _assembler: IAssembler;\n\n  @deepClone\n  private _color: Color = new Color(1, 1, 1, 1);\n  @ignoreClone\n  private _sprite: Sprite = null;\n\n  @ignoreClone\n  private _width: number = undefined;\n  @ignoreClone\n  private _height: number = undefined;\n  @assignmentClone\n  private _flipX: boolean = false;\n  @assignmentClone\n  private _flipY: boolean = false;\n\n  @assignmentClone\n  private _maskLayer: number = SpriteMaskLayer.Layer0;\n  @assignmentClone\n  private _maskInteraction: SpriteMaskInteraction = SpriteMaskInteraction.None;\n\n  @ignoreClone\n  private _dirtyFlag: number = 0;\n  @ignoreClone\n  private _spriteChangeFlag: ListenerUpdateFlag = null;\n\n  /**\n   * The draw mode of the sprite renderer.\n   */\n  get drawMode(): SpriteDrawMode {\n    return this._drawMode;\n  }\n\n  set drawMode(drawMode: SpriteDrawMode) {\n    if (this._drawMode !== drawMode) {\n      this._drawMode = drawMode;\n      switch (drawMode) {\n        case SpriteDrawMode.Simple:\n          this._assembler = SimpleSpriteAssembler;\n          break;\n        case SpriteDrawMode.Sliced:\n          this._assembler = SlicedSpriteAssembler;\n          break;\n        default:\n          break;\n      }\n      this._assembler.resetData(this);\n      this._dirtyFlag |= DirtyFlag.All;\n    }\n  }\n\n  /**\n   * The Sprite to render.\n   */\n  get sprite(): Sprite {\n    return this._sprite;\n  }\n\n  set sprite(value: Sprite | null) {\n    if (this._sprite !== value) {\n      this._sprite = value;\n      this._spriteChangeFlag && this._spriteChangeFlag.destroy();\n      if (value) {\n        this._spriteChangeFlag = value._registerUpdateFlag();\n        this._spriteChangeFlag.listener = this._onSpriteChange;\n        this._dirtyFlag |= DirtyFlag.All;\n        this.shaderData.setTexture(SpriteRenderer._textureProperty, value.texture);\n      } else {\n        this._spriteChangeFlag = null;\n        this.shaderData.setTexture(SpriteRenderer._textureProperty, null);\n      }\n    }\n  }\n\n  /**\n   * Rendering color for the Sprite graphic.\n   */\n  get color(): Color {\n    return this._color;\n  }\n\n  set color(value: Color) {\n    if (this._color !== value) {\n      this._color.copyFrom(value);\n    }\n  }\n\n  /**\n   * Render width.\n   */\n  get width(): number {\n    if (this._width === undefined && this._sprite) {\n      this.width = this._sprite.width;\n    }\n    return this._width;\n  }\n\n  set width(value: number) {\n    if (this._width !== value) {\n      this._width = value;\n      this._dirtyFlag |= DirtyFlag.Position;\n    }\n  }\n\n  /**\n   * Render height.\n   */\n  get height(): number {\n    if (this._height === undefined && this._sprite) {\n      this.height = this._sprite.height;\n    }\n    return this._height;\n  }\n\n  set height(value: number) {\n    if (this._height !== value) {\n      this._height = value;\n      this._dirtyFlag |= DirtyFlag.Position;\n    }\n  }\n\n  /**\n   * Flips the sprite on the X axis.\n   */\n  get flipX(): boolean {\n    return this._flipX;\n  }\n\n  set flipX(value: boolean) {\n    if (this._flipX !== value) {\n      this._flipX = value;\n      this._dirtyFlag |= DirtyFlag.Position;\n    }\n  }\n\n  /**\n   * Flips the sprite on the Y axis.\n   */\n  get flipY(): boolean {\n    return this._flipY;\n  }\n\n  set flipY(value: boolean) {\n    if (this._flipY !== value) {\n      this._flipY = value;\n      this._dirtyFlag |= DirtyFlag.Position;\n    }\n  }\n\n  /**\n   * The bounding volume of the spriteRenderer.\n   */\n  get bounds(): BoundingBox {\n    if (!this.sprite?.texture || !this.width || !this.height) {\n      return Engine._defaultBoundingBox;\n    } else if (this._transformChangeFlag.flag || this._dirtyFlag & DirtyFlag.Position) {\n      this._assembler.updatePositions(this);\n      this._dirtyFlag &= ~DirtyFlag.Position;\n      this._transformChangeFlag.flag = false;\n    }\n    return this._bounds;\n  }\n\n  /**\n   * The mask layer the sprite renderer belongs to.\n   */\n  get maskLayer(): number {\n    return this._maskLayer;\n  }\n\n  set maskLayer(value: number) {\n    this._maskLayer = value;\n  }\n\n  /**\n   * Interacts with the masks.\n   */\n  get maskInteraction(): SpriteMaskInteraction {\n    return this._maskInteraction;\n  }\n\n  set maskInteraction(value: SpriteMaskInteraction) {\n    if (this._maskInteraction !== value) {\n      this._maskInteraction = value;\n      this._updateStencilState();\n    }\n  }\n\n  /**\n   * @internal\n   */\n  constructor(entity: Entity) {\n    super(entity);\n    this._renderData = new RenderData2D(4, [], [], null, this._color);\n    this.drawMode = SpriteDrawMode.Simple;\n    this.setMaterial(this._engine._spriteDefaultMaterial);\n    this._onSpriteChange = this._onSpriteChange.bind(this);\n  }\n\n  /**\n   * @internal\n   */\n  _render(camera: Camera): void {\n    if (!this.sprite?.texture || !this.width || !this.height) {\n      return;\n    }\n\n    // Update position.\n    if (this._transformChangeFlag.flag || this._dirtyFlag & DirtyFlag.Position) {\n      this._assembler.updatePositions(this);\n      this._dirtyFlag &= ~DirtyFlag.Position;\n      this._transformChangeFlag.flag = false;\n    }\n\n    // Update uv.\n    if (this._dirtyFlag & DirtyFlag.UV) {\n      this._assembler.updateUVs(this);\n      this._dirtyFlag &= ~DirtyFlag.UV;\n    }\n\n    // Push primitive.\n    const spriteElement = this._engine._spriteElementPool.getFromPool();\n    spriteElement.setValue(this, this._renderData, this.getMaterial(), this.sprite.texture);\n    camera._renderPipeline.pushPrimitive(spriteElement);\n  }\n\n  /**\n   * @internal\n   */\n  _cloneTo(target: SpriteRenderer): void {\n    target.sprite = this._sprite;\n  }\n\n  /**\n   * @internal\n   */\n  _onDestroy(): void {\n    this._color = null;\n    this._sprite = null;\n    this._assembler = null;\n    this._renderData = null;\n    if (this._spriteChangeFlag) {\n      this._spriteChangeFlag.destroy();\n      this._spriteChangeFlag = null;\n    }\n    super._onDestroy();\n  }\n\n  private _updateStencilState(): void {\n    // Update stencil.\n    const material = this.getInstanceMaterial();\n    const stencilState = material.renderState.stencilState;\n    const maskInteraction = this._maskInteraction;\n    if (maskInteraction === SpriteMaskInteraction.None) {\n      stencilState.enabled = false;\n      stencilState.writeMask = 0xff;\n      stencilState.referenceValue = 0;\n      stencilState.compareFunctionFront = stencilState.compareFunctionBack = CompareFunction.Always;\n    } else {\n      stencilState.enabled = true;\n      stencilState.writeMask = 0x00;\n      stencilState.referenceValue = 1;\n      const compare =\n        maskInteraction === SpriteMaskInteraction.VisibleInsideMask\n          ? CompareFunction.LessEqual\n          : CompareFunction.Greater;\n      stencilState.compareFunctionFront = compare;\n      stencilState.compareFunctionBack = compare;\n    }\n  }\n\n  private _onSpriteChange(dirtyFlag: SpritePropertyDirtyFlag): void {\n    switch (dirtyFlag) {\n      case SpritePropertyDirtyFlag.texture:\n        this.shaderData.setTexture(SpriteRenderer._textureProperty, this.sprite.texture);\n        break;\n      case SpritePropertyDirtyFlag.size:\n        this._drawMode === SpriteDrawMode.Sliced && (this._dirtyFlag |= DirtyFlag.Position);\n        break;\n      case SpritePropertyDirtyFlag.border:\n        this._drawMode === SpriteDrawMode.Sliced && (this._dirtyFlag |= DirtyFlag.All);\n        break;\n      case SpritePropertyDirtyFlag.region:\n      case SpritePropertyDirtyFlag.atlasRegionOffset:\n        this._dirtyFlag |= DirtyFlag.All;\n        break;\n      case SpritePropertyDirtyFlag.atlasRegion:\n        this._dirtyFlag |= DirtyFlag.UV;\n        break;\n      case SpritePropertyDirtyFlag.pivot:\n        this._dirtyFlag |= DirtyFlag.Position;\n        break;\n      default:\n        break;\n    }\n  }\n}\n\nenum DirtyFlag {\n  Position = 0x1,\n  UV = 0x2,\n  All = 0x3\n}\n","import { RefObject } from \"../../asset/RefObject\";\nimport { Engine } from \"../../Engine\";\nimport { Texture2D } from \"../../texture/Texture2D\";\nimport { CharInfo } from \"../text/CharInfo\";\n\n/**\n * @internal\n * Font Atlas.\n */\nexport class FontAtlas extends RefObject {\n  private _charInfoMap: Record<number, CharInfo> = {};\n  private _texture: Texture2D;\n  private _space: number = 1;\n  private _curX: number = 1;\n  private _curY: number = 1;\n  private _nextY: number = 1;\n\n  get texture(): Texture2D {\n    return this._texture;\n  }\n\n  set texture(value: Texture2D) {\n    this._texture = value;\n  }\n\n  /**\n   * Constructor a FontAtlas.\n   * @param engine - Engine to which the FontAtlas belongs\n   */\n  constructor(engine: Engine) {\n    super(engine);\n  }\n\n  /**\n   * @override\n   */\n  _onDestroy(): void {\n    this._texture.destroy();\n    this._texture = null;\n    this._charInfoMap = {};\n  }\n\n  uploadCharTexture(charInfo: CharInfo): boolean {\n    const { w: width, h: height, data } = charInfo;\n    const { _space: space, texture } = this;\n    const textureSize = texture.width;\n    const offsetWidth = width + space;\n    const offsetHeight = height + space;\n    if (1 + offsetWidth >= textureSize || 1 + offsetHeight >= textureSize) {\n      throw Error(\"The char fontSize is too large.\");\n    }\n\n    const endX = this._curX + offsetWidth;\n    if (endX >= textureSize) {\n      this._curX = space;\n      this._curY = this._nextY + space;\n    }\n    const endY = this._curY + offsetHeight;\n    if (endY > this._nextY) {\n      this._nextY = endY;\n    }\n    if (endY >= textureSize) {\n      return false;\n    }\n\n    if (width > 0 && height > 0 && data) {\n      texture.setPixelBuffer(data, 0, this._curX, this._curY, width, height);\n      texture.generateMipmaps();\n    }\n\n    const textureSizeReciprocal = 1.0 / textureSize;\n    const x = this._curX;\n    const y = this._curY;\n    const w = width;\n    const h = height;\n    const u0 = x * textureSizeReciprocal;\n    const u1 = (x + w) * textureSizeReciprocal;\n    const v0 = y * textureSizeReciprocal;\n    const v1 = (y + h) * textureSizeReciprocal;\n\n    charInfo.x = x;\n    charInfo.y = y;\n    const uvs = charInfo.uvs;\n    uvs[0].set(u0, v0);\n    uvs[1].set(u1, v0);\n    uvs[2].set(u1, v1);\n    uvs[3].set(u0, v1);\n\n    this._curX += offsetWidth + space;\n    return true;\n  }\n\n  addCharInfo(char: string, charInfo: CharInfo) {\n    this._charInfoMap[char.charCodeAt(0)] = charInfo;\n  }\n\n  getCharInfo(char: string): CharInfo {\n    return this._charInfoMap[char.charCodeAt(0)];\n  }\n}\n","import { RefObject } from \"../../asset/RefObject\";\nimport { Engine } from \"../../Engine\";\nimport { Texture2D } from \"../../texture\";\nimport { CharInfo } from \"./CharInfo\";\nimport { FontAtlas } from \"../atlas/FontAtlas\";\n\n/**\n * Font.\n */\nexport class Font extends RefObject {\n  private static _fontMap: Record<string, Font> = {};\n\n  /**\n   * Create a font from OS.\n   * @param engine - Engine to which the font belongs\n   * @param name - The name of font\n   * @returns The font object has been create\n   */\n  static createFromOS(engine: Engine, name: string = \"\"): Font {\n    const fontMap = Font._fontMap;\n    let font = fontMap[name];\n    if (font) {\n      return font;\n    }\n    font = new Font(engine, name);\n    fontMap[name] = font;\n    return font;\n  }\n\n  private _name: string = \"\";\n  private _fontAtlases: FontAtlas[] = [];\n  private _lastIndex: number = -1;\n\n  /**\n   * The name of the font object.\n   */\n  get name(): string {\n    return this._name;\n  }\n\n  private constructor(engine: Engine, name: string = \"\") {\n    super(engine);\n    this._name = name;\n  }\n\n  /**\n   * @internal\n   */\n  _uploadCharTexture(charInfo: CharInfo): void {\n    const fontAtlases = this._fontAtlases;\n    let lastIndex = this._lastIndex;\n    if (lastIndex === -1) {\n      this._createFontAtlas();\n      lastIndex++\n    }\n    let fontAtlas = fontAtlases[lastIndex];\n    if (!fontAtlas.uploadCharTexture(charInfo)) {\n      fontAtlas = this._createFontAtlas();\n      fontAtlas.uploadCharTexture(charInfo);\n      lastIndex++;\n    }\n    this._lastIndex = lastIndex;\n    charInfo.data = null;\n  }\n\n  /**\n   * @internal\n   */\n  _addCharInfo(char: string, charInfo: CharInfo) {\n    const lastIndex = this._lastIndex;\n    charInfo.index = lastIndex;\n    this._fontAtlases[lastIndex].addCharInfo(char, charInfo);\n  }\n\n  /**\n   * @internal\n   */\n  _getCharInfo(char: string): CharInfo {\n    const fontAtlases = this._fontAtlases;\n    for (let i = 0, n = fontAtlases.length; i < n; ++i) {\n      const fontAtlas = fontAtlases[i];\n      const charInfo = fontAtlas.getCharInfo(char);\n      if (charInfo) {\n        return charInfo;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @internal\n   */\n  _getTextureByIndex(index: number): Texture2D {\n    const fontAtlas = this._fontAtlases[index];\n    if (fontAtlas) {\n      return fontAtlas.texture;\n    }\n    return null;\n  }\n\n  /**\n   * @internal\n   */\n  _getLastIndex(): number {\n    return this._lastIndex;\n  }\n\n  /**\n   * @override\n   */\n  _onDestroy(): void {\n    const fontAtlases = this._fontAtlases;\n    for (let i = 0, n = fontAtlases.length; i < n; ++i) {\n      fontAtlases[i].destroy(true);\n    }\n    fontAtlases.length = 0;\n    delete Font._fontMap[this._name];\n  }\n\n  private _createFontAtlas(): FontAtlas {\n    const { engine } = this;\n    const fontAtlas = new FontAtlas(engine);\n    const texture = new Texture2D(engine, 256, 256);\n    fontAtlas.texture = texture;\n    this._fontAtlases.push(fontAtlas);\n    return fontAtlas;\n  }\n}\n","import { Vector3, Vector4 } from \"@oasis-engine/math\";\nimport { Texture2D } from \"../../texture\";\nimport { RenderData2D } from \"../data/RenderData2D\";\n\n/**\n * @internal\n */\nexport class CharRenderData {\n  static triangles: number[] = [0, 2, 1, 2, 0, 3];\n\n  texture: Texture2D;\n  /** x:Top y:Left z:Bottom w:Right */\n  localPositions: Vector4 = new Vector4();\n  renderData: RenderData2D;\n\n  constructor() {\n    const positions = [new Vector3(), new Vector3(), new Vector3(), new Vector3()];\n    this.renderData = new RenderData2D(4, positions, null, CharRenderData.triangles, null);\n  }\n}\n","/**\n * @internal\n */\nexport class CharRenderDataPool<T> {\n  private _elements: T[] = [];\n  private _type: new () => T;\n\n  constructor(type: new () => T, length: number) {\n    this._type = type;\n    const elements = this._elements;\n    for (let i = 0; i < length; ++i) {\n      elements[i] = new type();\n    }\n  }\n\n  get(): T {\n    if (this._elements.length > 0) {\n      return this._elements.pop();\n    }\n    return new this._type();\n  }\n\n  put(data: T): void {\n    this._elements.push(data);\n  }\n}\n","import { Engine } from \"../../Engine\";\nimport { CharInfo } from \"./CharInfo\";\nimport { FontStyle } from \"../enums/FontStyle\";\nimport { OverflowMode } from \"../enums/TextOverflow\";\nimport { Font } from \"./Font\";\nimport { TextRenderer } from \"./TextRenderer\";\nimport { Vector2 } from \"@oasis-engine/math\";\n\n/**\n * @internal\n * TextUtils includes some helper function for text.\n */\nexport class TextUtils {\n  /** @internal */\n  static _genericFontFamilies: Array<string> = [\n    \"serif\",\n    \"sans-serif\",\n    \"monospace\",\n    \"cursive\",\n    \"fantasy\",\n    \"system-ui\",\n    \"math\",\n    \"emoji\",\n    \"fangsong\"\n  ];\n  /** These characters are all tall to help calculate the height required for text. */\n  private static _measureString: string = \"|ÉqÅ\";\n  private static _measureBaseline: string = \"M\";\n  private static _heightMultiplier: number = 2;\n  private static _baselineMultiplier: number = 1.4;\n  private static _fontSizeInfoCache: Record<string, FontSizeInfo> = {};\n  private static _textContext: TextContext = null;\n\n  /**\n   * The instance function to get an object includes 2d context and canvas.\n   * @returns the TextContext object\n   */\n  static textContext(): TextContext {\n    let { _textContext: textContext } = TextUtils;\n    if (!textContext) {\n      let canvas: HTMLCanvasElement | OffscreenCanvas;\n      try {\n        canvas = new OffscreenCanvas(0, 0);\n      } catch {\n        canvas = document.createElement(\"canvas\");\n      }\n      const context = canvas.getContext(\"2d\");\n      textContext = { canvas, context };\n      TextUtils._textContext = textContext;\n    }\n    return textContext;\n  }\n\n  /**\n   * Measure the font.\n   * @param fontString - the string of the font\n   * @returns the font size info\n   */\n  static measureFont(fontString: string): FontSizeInfo {\n    const { _fontSizeInfoCache: fontSizeInfoCache } = TextUtils;\n    let info = fontSizeInfoCache[fontString];\n    if (info) {\n      return info;\n    }\n\n    info = <FontSizeInfo>TextUtils._measureFontOrChar(fontString);\n    fontSizeInfoCache[fontString] = info;\n    return info;\n  }\n\n  /**\n   * Get native font string.\n   * @param fontName - The font name\n   * @param fontSize - The font size\n   * @param style - The font style\n   * @returns The native font string\n   */\n  static getNativeFontString(fontName: string, fontSize: number, style: FontStyle): string {\n    let str = style & FontStyle.Bold ? \"bold \" : \"\";\n    style & FontStyle.Italic && (str += \"italic \");\n    // Check if font already contains strings\n    if (!/([\\\"\\'])[^\\'\\\"]+\\1/.test(fontName) && TextUtils._genericFontFamilies.indexOf(fontName) == -1) {\n      fontName = `\"${fontName}\"`;\n    }\n    str += `${fontSize}px ${fontName}`;\n    return str;\n  }\n\n  static measureChar(char: string, fontString: string): CharInfo {\n    return <CharInfo>TextUtils._measureFontOrChar(fontString, char);\n  }\n\n  static measureTextWithWrap(renderer: TextRenderer): TextMetrics {\n    const { fontSize, fontStyle } = renderer;\n    const { name } = renderer.font;\n    const fontString = TextUtils.getNativeFontString(name, fontSize, fontStyle);\n    const charFont = renderer._styleFont;\n    const fontSizeInfo = TextUtils.measureFont(fontString);\n    const subTexts = renderer.text.split(/(?:\\r\\n|\\r|\\n)/);\n    const lines = new Array<string>();\n    const lineWidths = new Array<number>();\n    const lineMaxSizes = new Array<FontSizeInfo>();\n    const { _pixelsPerUnit } = Engine;\n    const lineHeight = fontSizeInfo.size + renderer.lineSpacing * _pixelsPerUnit;\n    const wrapWidth = renderer.width * _pixelsPerUnit;\n    let width = 0;\n\n    for (let i = 0, n = subTexts.length; i < n; ++i) {\n      const subText = subTexts[i];\n      let chars = \"\";\n      let charsWidth = 0;\n      let maxAscent = -1;\n      let maxDescent = -1;\n\n      for (let j = 0, m = subText.length; j < m; ++j) {\n        const char = subText[j];\n        const charInfo = TextUtils._getCharInfo(char, fontString, charFont);\n        const { w, offsetY } = charInfo;\n        const halfH = charInfo.h * 0.5;\n        const ascent = halfH + offsetY;\n        const descent = halfH - offsetY;\n        if (charsWidth + w > wrapWidth) {\n          if (charsWidth === 0) {\n            lines.push(char);\n            lineWidths.push(w);\n            lineMaxSizes.push({\n              ascent,\n              descent,\n              size: ascent + descent\n            });\n          } else {\n            lines.push(chars);\n            lineWidths.push(charsWidth);\n            lineMaxSizes.push({\n              ascent: maxAscent,\n              descent: maxDescent,\n              size: maxAscent + maxDescent\n            });\n            chars = char;\n            charsWidth = charInfo.xAdvance;\n            maxAscent = ascent;\n            maxDescent = descent;\n          }\n        } else {\n          chars += char;\n          charsWidth += charInfo.xAdvance;\n          maxAscent < ascent && (maxAscent = ascent);\n          maxDescent < descent && (maxDescent = descent);\n        }\n      }\n\n      if (charsWidth > 0) {\n        lines.push(chars);\n        lineWidths.push(charsWidth);\n        lineMaxSizes.push({\n          ascent: maxAscent,\n          descent: maxDescent,\n          size: maxAscent + maxDescent\n        });\n      }\n    }\n\n    let height = renderer.height * _pixelsPerUnit;\n    if (renderer.overflowMode === OverflowMode.Overflow) {\n      height = lineHeight * lines.length;\n    }\n\n    return {\n      width,\n      height,\n      lines,\n      lineWidths,\n      lineHeight,\n      lineMaxSizes\n    };\n  }\n\n  static measureTextWithoutWrap(renderer: TextRenderer): TextMetrics {\n    const { fontSize, fontStyle } = renderer;\n    const { name } = renderer.font;\n    const fontString = TextUtils.getNativeFontString(name, fontSize, fontStyle);\n    const charFont = renderer._styleFont;\n    const fontSizeInfo = TextUtils.measureFont(fontString);\n    const lines = renderer.text.split(/(?:\\r\\n|\\r|\\n)/);\n    const lineCount = lines.length;\n    const lineWidths = new Array<number>();\n    const lineMaxSizes = new Array<FontSizeInfo>();\n    const { _pixelsPerUnit } = Engine;\n    const lineHeight = fontSizeInfo.size + renderer.lineSpacing * _pixelsPerUnit;\n    let width = 0;\n    let height = renderer.height * _pixelsPerUnit;\n    if (renderer.overflowMode === OverflowMode.Overflow) {\n      height = lineHeight * lineCount;\n    }\n\n    for (let i = 0; i < lineCount; ++i) {\n      const line = lines[i];\n      let curWidth = 0;\n      let maxAscent = -1;\n      let maxDescent = -1;\n\n      for (let j = 0, m = line.length; j < m; ++j) {\n        const charInfo = TextUtils._getCharInfo(line[j], fontString, charFont);\n        curWidth += charInfo.xAdvance;\n        const { offsetY } = charInfo;\n        const halfH = charInfo.h * 0.5;\n        const ascent = halfH + offsetY;\n        const descent = halfH - offsetY;\n        maxAscent < ascent && (maxAscent = ascent);\n        maxDescent < descent && (maxDescent = descent);\n      }\n      lineWidths[i] = curWidth;\n      lineMaxSizes[i] = {\n        ascent: maxAscent,\n        descent: maxDescent,\n        size: maxAscent + maxDescent\n      };\n      if (curWidth > width) {\n        width = curWidth;\n      }\n    }\n\n    return {\n      width,\n      height,\n      lines,\n      lineWidths,\n      lineHeight,\n      lineMaxSizes\n    };\n  }\n\n  /**\n   * Get native font hash.\n   * @param fontName - The font name\n   * @param fontSize - The font size\n   * @param style - The font style\n   * @returns The native font hash\n   */\n  static getNativeFontHash(fontName: string, fontSize: number, style: FontStyle): string {\n    let str = style & FontStyle.Bold ? \"bold\" : \"\";\n    style & FontStyle.Italic && (str += \"italic\");\n    // Check if font already contains strings\n    if (!/([\\\"\\'])[^\\'\\\"]+\\1/.test(fontName) && TextUtils._genericFontFamilies.indexOf(fontName) == -1) {\n      fontName = `${fontName}`;\n    }\n    str += `${fontSize}px${fontName}`;\n    return str;\n  }\n\n  private static _measureFontOrChar(fontString: string, char: string = \"\"): FontSizeInfo | CharInfo {\n    const { canvas, context } = TextUtils.textContext();\n    context.font = fontString;\n    const measureString = char || TextUtils._measureString;\n    // Safari gets data confusion through getImageData when the canvas width is not an integer.\n    // @todo: Text layout may vary from standard.\n    const width = Math.round(context.measureText(measureString).width);\n    let baseline = Math.ceil(context.measureText(TextUtils._measureBaseline).width);\n    const height = baseline * TextUtils._heightMultiplier;\n    baseline = (TextUtils._baselineMultiplier * baseline) | 0;\n\n    canvas.width = width;\n    canvas.height = height;\n\n    context.font = fontString;\n    context.fillStyle = \"#000\";\n    context.clearRect(0, 0, width, height);\n    context.textBaseline = \"middle\";\n    context.fillStyle = \"#fff\";\n    context.fillText(measureString, 0, baseline);\n\n    const colorData = context.getImageData(0, 0, width, height).data;\n    const len = colorData.length;\n\n    let top = -1;\n    let bottom = -1;\n    let y;\n    let ascent = 0;\n    let descent = 0;\n    let size = 0;\n\n    const integerW = canvas.width;\n    const integerWReciprocal = 1.0 / integerW;\n    for (let i = 0; i < len; i += 4) {\n      if (colorData[i + 3] !== 0) {\n        const idx = i * 0.25;\n        y = ~~(idx * integerWReciprocal);\n\n        if (top === -1) {\n          top = y;\n        }\n\n        if (y > bottom) {\n          bottom = y;\n        }\n      }\n    }\n\n    if (top !== -1 && bottom !== -1) {\n      ascent = baseline - top;\n      descent = bottom - baseline + 1;\n      size = ascent + descent;\n    }\n    const sizeInfo = { ascent, descent, size };\n\n    if (char) {\n      let data = null;\n      if (size > 0) {\n        const lineIntegerW = integerW * 4;\n        // gl.texSubImage2D uploading data of type Uint8ClampedArray is not supported in some devices(eg: IphoneX IOS 13.6.1).\n        data = new Uint8Array(colorData.buffer, top * lineIntegerW, size * lineIntegerW);\n      }\n      return {\n        x: 0,\n        y: 0,\n        w: width,\n        h: size,\n        offsetX: 0,\n        offsetY: (ascent - descent) * 0.5,\n        xAdvance: width,\n        uvs: [new Vector2(), new Vector2(), new Vector2(), new Vector2()],\n        ascent,\n        descent,\n        index: 0,\n        data\n      };\n    } else {\n      return sizeInfo;\n    }\n  }\n\n  private static _getCharInfo(char: string, fontString: string, font: Font): CharInfo {\n    let charInfo = font._getCharInfo(char);\n    if (!charInfo) {\n      charInfo = TextUtils.measureChar(char, fontString);\n      font._uploadCharTexture(charInfo);\n      font._addCharInfo(char, charInfo);\n    }\n\n    return charInfo;\n  }\n}\n\n/**\n * @internal\n * TextContext.\n */\nexport interface TextContext {\n  canvas: HTMLCanvasElement | OffscreenCanvas;\n  context: CanvasRenderingContext2D | OffscreenCanvasRenderingContext2D;\n}\n\n/**\n * @internal\n * FontSizeInfo.\n */\nexport interface FontSizeInfo {\n  ascent: number;\n  descent: number;\n  size: number;\n}\n\n/**\n * @internal\n * TextMetrics.\n */\nexport interface TextMetrics {\n  width: number;\n  height: number;\n  lines: Array<string>;\n  lineWidths: Array<number>;\n  lineHeight: number;\n  lineMaxSizes?: Array<FontSizeInfo>;\n}\n","import { BoundingBox, Color, Vector3 } from \"@oasis-engine/math\";\nimport { Camera } from \"../../Camera\";\nimport { assignmentClone, deepClone, ignoreClone } from \"../../clone/CloneManager\";\nimport { ICustomClone } from \"../../clone/ComponentCloner\";\nimport { Engine } from \"../../Engine\";\nimport { Entity } from \"../../Entity\";\nimport { ListenerUpdateFlag } from \"../../ListenerUpdateFlag\";\nimport { Renderer } from \"../../Renderer\";\nimport { CompareFunction } from \"../../shader/enums/CompareFunction\";\nimport { FontStyle } from \"../enums/FontStyle\";\nimport { SpriteMaskInteraction } from \"../enums/SpriteMaskInteraction\";\nimport { SpriteMaskLayer } from \"../enums/SpriteMaskLayer\";\nimport { TextHorizontalAlignment, TextVerticalAlignment } from \"../enums/TextAlignment\";\nimport { OverflowMode } from \"../enums/TextOverflow\";\nimport { CharRenderData } from \"./CharRenderData\";\nimport { CharRenderDataPool } from \"./CharRenderDataPool\";\nimport { Font } from \"./Font\";\nimport { TextUtils } from \"./TextUtils\";\n\n/**\n * Renders a text for 2D graphics.\n */\nexport class TextRenderer extends Renderer implements ICustomClone {\n  private static _charRenderDataPool: CharRenderDataPool<CharRenderData> = new CharRenderDataPool(CharRenderData, 50);\n  private static _tempVec30: Vector3 = new Vector3();\n  private static _tempVec31: Vector3 = new Vector3();\n\n  /** @internal */\n  @assignmentClone\n  _styleFont: Font = null;\n  /** @internal */\n  @ignoreClone\n  _charRenderDatas: CharRenderData[] = [];\n  @ignoreClone\n  _dirtyFlag: number = DirtyFlag.Font;\n  /** @internal */\n  @ignoreClone\n  _isWorldMatrixDirty: ListenerUpdateFlag;\n\n  @deepClone\n  private _color: Color = new Color(1, 1, 1, 1);\n  @assignmentClone\n  private _text: string = \"\";\n  @assignmentClone\n  private _width: number = 0;\n  @assignmentClone\n  private _height: number = 0;\n  @ignoreClone\n  private _localBounds: BoundingBox = new BoundingBox();\n  @assignmentClone\n  private _font: Font = null;\n  @assignmentClone\n  private _fontSize: number = 24;\n  @assignmentClone\n  private _fontStyle: FontStyle = FontStyle.None;\n  @assignmentClone\n  private _lineSpacing: number = 0;\n  @assignmentClone\n  private _horizontalAlignment: TextHorizontalAlignment = TextHorizontalAlignment.Center;\n  @assignmentClone\n  private _verticalAlignment: TextVerticalAlignment = TextVerticalAlignment.Center;\n  @assignmentClone\n  private _enableWrapping: boolean = false;\n  @assignmentClone\n  private _overflowMode: OverflowMode = OverflowMode.Overflow;\n  @assignmentClone\n  private _maskInteraction: SpriteMaskInteraction = SpriteMaskInteraction.None;\n  @assignmentClone\n  private _maskLayer: number = SpriteMaskLayer.Layer0;\n\n  /**\n   * Rendering color for the Text.\n   */\n  get color(): Color {\n    return this._color;\n  }\n\n  set color(value: Color) {\n    if (this._color !== value) {\n      this._color.copyFrom(value);\n    }\n  }\n\n  /**\n   * Rendering string for the Text.\n   */\n  get text(): string {\n    return this._text;\n  }\n\n  set text(value: string) {\n    value = value || \"\";\n    if (this._text !== value) {\n      this._text = value;\n      this._setDirtyFlagTrue(DirtyFlag.Position);\n    }\n  }\n\n  /**\n   * The width of the TextRenderer (in 3D world coordinates).\n   */\n  get width(): number {\n    return this._width;\n  }\n\n  set width(value: number) {\n    if (this._width !== value) {\n      this._width = value;\n      this._setDirtyFlagTrue(DirtyFlag.Position);\n    }\n  }\n\n  /**\n   * The height of the TextRenderer (in 3D world coordinates).\n   */\n  get height(): number {\n    return this._height;\n  }\n\n  set height(value: number) {\n    if (this._height !== value) {\n      this._height = value;\n      this._setDirtyFlagTrue(DirtyFlag.Position);\n    }\n  }\n\n  /**\n   * The font of the Text.\n   */\n  get font(): Font {\n    return this._font;\n  }\n\n  set font(value: Font) {\n    if (this._font !== value) {\n      this._font = value;\n      this._setDirtyFlagTrue(DirtyFlag.Font);\n    }\n  }\n\n  /**\n   * The font size of the Text.\n   */\n  get fontSize(): number {\n    return this._fontSize;\n  }\n\n  set fontSize(value: number) {\n    if (this._fontSize !== value) {\n      this._fontSize = value;\n      this._setDirtyFlagTrue(DirtyFlag.Font);\n    }\n  }\n\n  /**\n   * The style of the font.\n   */\n  get fontStyle(): FontStyle {\n    return this._fontStyle;\n  }\n\n  set fontStyle(value: FontStyle) {\n    if (this.fontStyle !== value) {\n      this._fontStyle = value;\n      this._setDirtyFlagTrue(DirtyFlag.Font);\n    }\n  }\n\n  /**\n   * The space between two lines (in pixels).\n   */\n  get lineSpacing(): number {\n    return this._lineSpacing;\n  }\n\n  set lineSpacing(value: number) {\n    if (this._lineSpacing !== value) {\n      this._lineSpacing = value;\n      this._setDirtyFlagTrue(DirtyFlag.Position);\n    }\n  }\n\n  /**\n   * The horizontal alignment.\n   */\n  get horizontalAlignment(): TextHorizontalAlignment {\n    return this._horizontalAlignment;\n  }\n\n  set horizontalAlignment(value: TextHorizontalAlignment) {\n    if (this._horizontalAlignment !== value) {\n      this._horizontalAlignment = value;\n      this._setDirtyFlagTrue(DirtyFlag.Position);\n    }\n  }\n\n  /**\n   * The vertical alignment.\n   */\n  get verticalAlignment(): TextVerticalAlignment {\n    return this._verticalAlignment;\n  }\n\n  set verticalAlignment(value: TextVerticalAlignment) {\n    if (this._verticalAlignment !== value) {\n      this._verticalAlignment = value;\n      this._setDirtyFlagTrue(DirtyFlag.Position);\n    }\n  }\n\n  /**\n   * Whether wrap text to next line when exceeds the width of the container.\n   */\n  get enableWrapping(): boolean {\n    return this._enableWrapping;\n  }\n\n  set enableWrapping(value: boolean) {\n    if (this._enableWrapping !== value) {\n      this._enableWrapping = value;\n      this._setDirtyFlagTrue(DirtyFlag.Position);\n    }\n  }\n\n  /**\n   * The overflow mode.\n   */\n  get overflowMode(): OverflowMode {\n    return this._overflowMode;\n  }\n\n  set overflowMode(value: OverflowMode) {\n    if (this._overflowMode !== value) {\n      this._overflowMode = value;\n      this._setDirtyFlagTrue(DirtyFlag.Position);\n    }\n  }\n\n  /**\n   * Interacts with the masks.\n   */\n  get maskInteraction(): SpriteMaskInteraction {\n    return this._maskInteraction;\n  }\n\n  set maskInteraction(value: SpriteMaskInteraction) {\n    if (this._maskInteraction !== value) {\n      this._maskInteraction = value;\n      this._setDirtyFlagTrue(DirtyFlag.MaskInteraction);\n    }\n  }\n\n  /**\n   * The mask layer the sprite renderer belongs to.\n   */\n  get maskLayer(): number {\n    return this._maskLayer;\n  }\n\n  set maskLayer(value: number) {\n    this._maskLayer = value;\n  }\n\n  /**\n   * The bounding volume of the TextRenderer.\n   */\n  get bounds(): BoundingBox {\n    this._isContainDirtyFlag(DirtyFlag.StyleFont) && this._resetStyleFont();\n    this._isContainDirtyFlag(DirtyFlag.LocalPositionBounds) && this._updateLocalData();\n    this._isContainDirtyFlag(DirtyFlag.WorldPosition) && this._updatePosition();\n    this._isContainDirtyFlag(DirtyFlag.WorldBounds) && this._updateBounds(this._bounds);\n    this._setDirtyFlagFalse(DirtyFlag.Font);\n\n    return this._bounds;\n  }\n\n  constructor(entity: Entity) {\n    super(entity);\n    const { engine } = this;\n    this._isWorldMatrixDirty = entity.transform._registerWorldChangeListener();\n    this._isWorldMatrixDirty.listener = () => {\n      this._setDirtyFlagTrue(DirtyFlag.WorldPosition | DirtyFlag.WorldBounds);\n    };\n    this.font = Font.createFromOS(engine);\n    this.setMaterial(engine._spriteDefaultMaterial);\n  }\n\n  /**\n   * @internal\n   */\n  _render(camera: Camera): void {\n    if (\n      this._text === \"\" ||\n      (this.enableWrapping && this.width <= 0) ||\n      (this.overflowMode === OverflowMode.Truncate && this.height <= 0)\n    ) {\n      return;\n    }\n\n    if (this._isContainDirtyFlag(DirtyFlag.MaskInteraction)) {\n      this._updateStencilState();\n      this._setDirtyFlagFalse(DirtyFlag.MaskInteraction);\n    }\n\n    if (this._isContainDirtyFlag(DirtyFlag.StyleFont)) {\n      this._resetStyleFont();\n      this._setDirtyFlagFalse(DirtyFlag.StyleFont);\n    }\n\n    if (this._isContainDirtyFlag(DirtyFlag.LocalPositionBounds)) {\n      this._updateLocalData();\n      this._setDirtyFlagFalse(DirtyFlag.LocalPositionBounds);\n    }\n\n    if (this._isContainDirtyFlag(DirtyFlag.WorldPosition)) {\n      this._updatePosition();\n      this._setDirtyFlagFalse(DirtyFlag.WorldPosition);\n    }\n\n    const spriteElementPool = this._engine._spriteElementPool;\n    const textElement = this._engine._textElementPool.getFromPool();\n    const charElements = textElement.charElements;\n    const material = this.getMaterial();\n    const charRenderDatas = this._charRenderDatas;\n    const charCount = charRenderDatas.length;\n\n    textElement.component = this;\n    textElement.material = material;\n    charElements.length = charCount;\n\n    for (let i = 0; i < charCount; ++i) {\n      const charRenderData = charRenderDatas[i];\n      const spriteElement = spriteElementPool.getFromPool();\n      spriteElement.setValue(this, charRenderData.renderData, material, charRenderData.texture);\n      charElements[i] = spriteElement;\n    }\n    camera._renderPipeline.pushPrimitive(textElement);\n  }\n\n  /**\n   * @internal\n   */\n  _onDestroy(): void {\n    // Clear render data.\n    const charRenderDatas = this._charRenderDatas;\n    for (let i = 0, n = charRenderDatas.length; i < n; ++i) {\n      TextRenderer._charRenderDataPool.put(charRenderDatas[i]);\n    }\n    charRenderDatas.length = 0;\n\n    this._isWorldMatrixDirty.destroy();\n    super._onDestroy();\n  }\n\n  /**\n   * @internal\n   */\n  _cloneTo(target: TextRenderer): void {\n    target.font = this._font;\n  }\n\n  /**\n   * @internal\n   */\n  _isContainDirtyFlag(type: number): boolean {\n    return (this._dirtyFlag & type) != 0;\n  }\n\n  /**\n   * @internal\n   */\n  _setDirtyFlagTrue(type: number): void {\n    this._dirtyFlag |= type;\n  }\n\n  /**\n   * @internal\n   */\n  _setDirtyFlagFalse(type: number): void {\n    this._dirtyFlag &= ~type;\n  }\n\n  /**\n   * @override\n   */\n  protected _updateBounds(worldBounds: BoundingBox): void {\n    BoundingBox.transform(this._localBounds, this._entity.transform.worldMatrix, worldBounds);\n  }\n\n  private _updateStencilState(): void {\n    // Update stencil.\n    const material = this.getInstanceMaterial();\n    const stencilState = material.renderState.stencilState;\n    const maskInteraction = this._maskInteraction;\n\n    if (maskInteraction === SpriteMaskInteraction.None) {\n      stencilState.enabled = false;\n      stencilState.writeMask = 0xff;\n      stencilState.referenceValue = 0;\n      stencilState.compareFunctionFront = stencilState.compareFunctionBack = CompareFunction.Always;\n    } else {\n      stencilState.enabled = true;\n      stencilState.writeMask = 0x00;\n      stencilState.referenceValue = 1;\n      const compare =\n        maskInteraction === SpriteMaskInteraction.VisibleInsideMask\n          ? CompareFunction.LessEqual\n          : CompareFunction.Greater;\n      stencilState.compareFunctionFront = compare;\n      stencilState.compareFunctionBack = compare;\n    }\n  }\n\n  private _resetStyleFont(): void {\n    const lastStyleFont = this._styleFont;\n    if (lastStyleFont) {\n      lastStyleFont._addRefCount(-1);\n      lastStyleFont.destroy();\n    }\n    this._styleFont = Font.createFromOS(\n      this.engine,\n      TextUtils.getNativeFontHash(this.font.name, this.fontSize, this.fontStyle)\n    );\n    this._styleFont._addRefCount(1);\n  }\n\n  private _updatePosition(): void {\n    const { transform } = this.entity;\n    const e = transform.worldMatrix.elements;\n    const charRenderDatas = this._charRenderDatas;\n\n    // prettier-ignore\n    const e0 = e[0], e1 = e[1], e2 = e[2];\n    // prettier-ignore\n    const e4 = e[4], e5 = e[5], e6 = e[6];\n    // prettier-ignore\n    const e12 = e[12], e13 = e[13], e14 = e[14];\n\n    const up = TextRenderer._tempVec31.set(e4, e5, e6);\n    const right = TextRenderer._tempVec30.set(e0, e1, e2);\n\n    for (let i = 0, n = charRenderDatas.length; i < n; ++i) {\n      const charRenderData = charRenderDatas[i];\n      const { localPositions } = charRenderData;\n      const { positions } = charRenderData.renderData;\n\n      const { x: topLeftX, y: topLeftY } = localPositions;\n\n      // Top-Left\n      const worldPosition0 = positions[0];\n      worldPosition0.x = topLeftX * e0 + topLeftY * e4 + e12;\n      worldPosition0.y = topLeftX * e1 + topLeftY * e5 + e13;\n      worldPosition0.z = topLeftX * e2 + topLeftY * e6 + e14;\n\n      // Right offset\n      const worldPosition1 = positions[1];\n      Vector3.scale(right, localPositions.z - topLeftX, worldPosition1);\n\n      // Top-Right\n      Vector3.add(worldPosition0, worldPosition1, worldPosition1);\n\n      // Up offset\n      const worldPosition2 = positions[2];\n      Vector3.scale(up, localPositions.w - topLeftY, worldPosition2);\n\n      // Bottom-Left\n      Vector3.add(worldPosition0, worldPosition2, positions[3]);\n      // Bottom-Right\n      Vector3.add(worldPosition1, worldPosition2, worldPosition2);\n    }\n  }\n\n  private _updateLocalData(): void {\n    const { color, horizontalAlignment, verticalAlignment, _charRenderDatas: charRenderDatas } = this;\n    const { min, max } = this._localBounds;\n    min.set(0, 0, 0);\n    max.set(0, 0, 0);\n    const { _pixelsPerUnit } = Engine;\n    const pixelsPerUnitReciprocal = 1.0 / _pixelsPerUnit;\n    const charFont = this._styleFont;\n    const rendererWidth = this.width * _pixelsPerUnit;\n    const halfRendererWidth = rendererWidth * 0.5;\n    const rendererHeight = this.height * _pixelsPerUnit;\n\n    const textMetrics = this.enableWrapping\n      ? TextUtils.measureTextWithWrap(this)\n      : TextUtils.measureTextWithoutWrap(this);\n    const { height, lines, lineWidths, lineHeight, lineMaxSizes } = textMetrics;\n    const charRenderDataPool = TextRenderer._charRenderDataPool;\n    const halfLineHeight = lineHeight * 0.5;\n    const linesLen = lines.length;\n\n    let startY = 0;\n    const topDiff = lineHeight * 0.5 - lineMaxSizes[0].ascent;\n    const bottomDiff = lineHeight * 0.5 - lineMaxSizes[linesLen - 1].descent - 1;\n    switch (verticalAlignment) {\n      case TextVerticalAlignment.Top:\n        startY = rendererHeight * 0.5 - halfLineHeight + topDiff;\n        break;\n      case TextVerticalAlignment.Center:\n        startY = height * 0.5 - halfLineHeight - (bottomDiff - topDiff) * 0.5;\n        break;\n      case TextVerticalAlignment.Bottom:\n        startY = height - rendererHeight * 0.5 - halfLineHeight - bottomDiff;\n        break;\n    }\n\n    let renderDataCount = 0;\n    let minX = Number.MAX_SAFE_INTEGER;\n    let minY = Number.MAX_SAFE_INTEGER;\n    let maxX = Number.MIN_SAFE_INTEGER;\n    let maxY = Number.MIN_SAFE_INTEGER;\n    let lastLineIndex = linesLen - 1;\n    for (let i = 0; i < linesLen; ++i) {\n      const line = lines[i];\n      const lineWidth = lineWidths[i];\n\n      let startX = 0;\n      switch (horizontalAlignment) {\n        case TextHorizontalAlignment.Left:\n          startX = -halfRendererWidth;\n          break;\n        case TextHorizontalAlignment.Center:\n          startX = -lineWidth * 0.5;\n          break;\n        case TextHorizontalAlignment.Right:\n          startX = halfRendererWidth - lineWidth;\n          break;\n      }\n\n      for (let j = 0, m = line.length - 1; j <= m; ++j) {\n        const char = line[j];\n        const charInfo = charFont._getCharInfo(char);\n\n        if (charInfo.h > 0) {\n          const charRenderData = charRenderDatas[renderDataCount] || charRenderDataPool.get();\n          const { renderData, localPositions } = charRenderData;\n          charRenderData.texture = charFont._getTextureByIndex(charInfo.index);\n          renderData.color = color;\n\n          renderData.uvs = charInfo.uvs;\n          const { w, ascent, descent } = charInfo;\n\n          const left = startX * pixelsPerUnitReciprocal;\n          const right = (startX + w) * pixelsPerUnitReciprocal;\n          const top = (startY + ascent) * pixelsPerUnitReciprocal;\n          const bottom = (startY - descent + 1) * pixelsPerUnitReciprocal;\n\n          localPositions.set(left, top, right, bottom);\n          charRenderDatas[renderDataCount] = charRenderData;\n          renderDataCount++;\n\n          i === 0 && (maxY = Math.max(maxY, top));\n          i === lastLineIndex && (minY = Math.min(minY, bottom));\n          j === 0 && (minX = Math.min(minX, left));\n          j === m && (maxX = Math.max(maxX, right));\n        }\n        startX += charInfo.xAdvance;\n      }\n\n      startY -= lineHeight;\n    }\n\n    min.set(minX, minY, 0);\n    max.set(maxX, maxY, 0);\n\n    // Revert excess render data to pool.\n    const lastRenderDataCount = charRenderDatas.length;\n    if (lastRenderDataCount > renderDataCount) {\n      for (let i = renderDataCount; i < lastRenderDataCount; ++i) {\n        charRenderDataPool.put(charRenderDatas[i]);\n      }\n      charRenderDatas.length = renderDataCount;\n    }\n\n    charFont._getLastIndex() > 0 &&\n      charRenderDatas.sort((a, b) => {\n        return a.texture.instanceId - b.texture.instanceId;\n      });\n  }\n}\n\nexport enum DirtyFlag {\n  StyleFont = 0x1,\n  LocalPositionBounds = 0x2,\n  WorldPosition = 0x4,\n  WorldBounds = 0x8,\n  MaskInteraction = 0x10,\n\n  Position = LocalPositionBounds | WorldPosition | WorldBounds,\n  Font = StyleFont | Position\n}\n","import { AnimationProperty } from \"./enums/AnimationProperty\";\nimport { Entity } from \"../Entity\";\nimport { Component } from \"../Component\";\nimport { AnimationCurve } from \"./AnimationCurve\";\n\n/**\n * Associate AnimationCurve and the Entity\n */\nexport class AnimationClipCurveBinding {\n  /** Path to the entity this curve applies to. The relativePath is formatted similar to a pathname,\n   * e.g. \"root/spine/leftArm\". If relativePath is empty it refers to the entity the animation clip is attached to. */\n  relativePath: string;\n  /** The class type of the component that is animated. */\n  type: new (entity: Entity) => Component;\n  /** The name or path to the property being animated. */\n  property: AnimationProperty;\n  /** The animation curve. */\n  curve: AnimationCurve;\n}\n","/**\n * AnimationEvent lets you call a script function similar to SendMessage as part of playing back an animation.\n */\nexport class AnimationEvent {\n  /** The time when the event be triggered. */\n  time: number;\n  /** The name of the method called in the script. */\n  functionName: string;\n  /** The parameter that is stored in the event and will be sent to the function. */\n  parameter: Object;\n}\n","export enum AnimationProperty {\n  Position,\n  Rotation,\n  Scale,\n  BlendShapeWeights\n}\n","/**\n * Base class for AnimationClips and BlendTrees.\n */\nexport class Motion {}\n","import { Quaternion, Vector3 } from \"@oasis-engine/math\";\nimport { Component } from \"../Component\";\nimport { Entity } from \"../Entity\";\nimport { Transform } from \"../Transform\";\nimport { AnimationClipCurveBinding } from \"./AnimationClipCurveBinding\";\nimport { AnimationCurve } from \"./AnimationCurve\";\nimport { AnimationEvent } from \"./AnimationEvent\";\nimport { AnimationProperty } from \"./enums/AnimationProperty\";\nimport { Motion } from \"./Motion\";\n\n/**\n * Stores keyframe based animations.\n */\nexport class AnimationClip extends Motion {\n  /** @internal */\n  _curveBindings: AnimationClipCurveBinding[] = [];\n\n  private _length: number = 0;\n  private _events: AnimationEvent[] = [];\n\n  /**\n   * Animation events for this animation clip.\n   */\n  get events(): Readonly<AnimationEvent[]> {\n    return this._events;\n  }\n\n  /**\n   * Animation curve bindings for this animation clip.\n   */\n  get curveBindings(): Readonly<AnimationClipCurveBinding[]> {\n    return this._curveBindings;\n  }\n\n  /**\n   * Animation length in seconds.\n   */\n  get length(): number {\n    return this._length;\n  }\n\n  /**\n   * @param name - The AnimationClip's name\n   */\n  constructor(public readonly name: string) {\n    super();\n  }\n\n  /**\n   * Adds an animation event to the clip.\n   * @param functionName - The name of the method called in the script\n   * @param time - The time when the event be triggered\n   * @param parameter - The parameter that is stored in the event and will be sent to the function\n   */\n  addEvent(functionName: string, time: number, parameter: Object): void;\n\n  /**\n   * Adds an animation event to the clip.\n   * @param event - The animation event\n   */\n  addEvent(event: AnimationEvent): void;\n\n  addEvent(param: AnimationEvent | string, time?: number, parameter?: Object): void {\n    if (typeof param === \"string\") {\n      const event = new AnimationEvent();\n      event.functionName = param;\n      event.time = time;\n      event.parameter = parameter;\n      this._events.push(event);\n    } else {\n      this._events.push(param);\n    }\n    this._events.sort((a, b) => a.time - b.time);\n  }\n\n  /**\n   * Clears all events from the clip.\n   */\n  clearEvents(): void {\n    this._events.length = 0;\n  }\n\n  /**\n   * Add curve binding for the clip.\n   * @param relativePath - Path to the game object this curve applies to. The relativePath is formatted similar to a pathname, e.g. \"/root/spine/leftArm\"\n   * @param type- The class type of the component that is animated\n   * @param propertyName - The name to the property being animated\n   * @param curve - The animation curve\n   */\n  addCurveBinding<T extends Component>(\n    relativePath: string,\n    type: new (entity: Entity) => T,\n    propertyName: string,\n    curve: AnimationCurve\n  ): void {\n    let property: AnimationProperty;\n    switch (propertyName) {\n      case \"position\":\n        property = AnimationProperty.Position;\n        break;\n      case \"rotation\":\n        property = AnimationProperty.Rotation;\n        break;\n      case \"scale\":\n        property = AnimationProperty.Scale;\n        break;\n      case \"blendShapeWeights\":\n        property = AnimationProperty.BlendShapeWeights;\n        break;\n      default:\n    }\n    const curveBinding = new AnimationClipCurveBinding();\n    curveBinding.relativePath = relativePath;\n    curveBinding.type = type;\n    curveBinding.property = property;\n    curveBinding.curve = curve;\n    if (curve.length > this._length) {\n      this._length = curve.length;\n    }\n    this._curveBindings.push(curveBinding);\n  }\n\n  /**\n   * Clears all curve bindings from the clip.\n   */\n  clearCurveBindings(): void {\n    this._curveBindings.length = 0;\n    this._length = 0;\n  }\n\n  /**\n   * @internal\n   * Samples an animation at a given time.\n   * @param entity - The animated entity\n   * @param time - The time to sample an animation\n   */\n  _sampleAnimation(entity: Entity, time: number): void {\n    const { length } = this._curveBindings;\n    for (let i = length - 1; i >= 0; i--) {\n      const curveData = this._curveBindings[i];\n      const { curve, property, relativePath, type } = curveData;\n      const val = curve.evaluate(time);\n      const target = entity.findByName(relativePath);\n      const transform = (<Entity>target).transform;\n      if (type === Transform) {\n        switch (property) {\n          case AnimationProperty.Position:\n            transform.position = val as Vector3;\n            break;\n          case AnimationProperty.Rotation:\n            transform.rotationQuaternion = val as Quaternion;\n            break;\n          case AnimationProperty.Scale:\n            transform.scale = val as Vector3;\n            break;\n        }\n      }\n    }\n  }\n}\n","export enum InterpolableValueType {\n  Float,\n  FloatArray,\n  Vector2,\n  Vector3,\n  Vector4,\n  Quaternion\n}\n","import { Vector3, Quaternion } from \"@oasis-engine/math\";\n\n/**\n * @internal\n */\nexport class AnimatorUtils {\n  private static _tempVector30: Vector3 = new Vector3();\n  private static _tempVector31: Vector3 = new Vector3();\n\n  static scaleWeight(s: Vector3, w: number, out: Vector3): void {\n    const sX = s.x;\n    const sY = s.y;\n    const sZ = s.z;\n    out.x = sX > 0 ? Math.pow(Math.abs(sX), w) : -Math.pow(Math.abs(sX), w);\n    out.y = sY > 0 ? Math.pow(Math.abs(sY), w) : -Math.pow(Math.abs(sY), w);\n    out.z = sZ > 0 ? Math.pow(Math.abs(sZ), w) : -Math.pow(Math.abs(sZ), w);\n  }\n\n  static scaleBlend(sa: Vector3, sb: Vector3, w: number, out: Vector3): void {\n    const saw = AnimatorUtils._tempVector30;\n    const sbw = AnimatorUtils._tempVector31;\n    AnimatorUtils.scaleWeight(sa, 1.0 - w, saw);\n    AnimatorUtils.scaleWeight(sb, w, sbw);\n    const sng = w > 0.5 ? sb : sa;\n    out.x = sng.x > 0 ? Math.abs(saw.x * sbw.x) : -Math.abs(saw.x * sbw.x);\n    out.y = sng.y > 0 ? Math.abs(saw.y * sbw.y) : -Math.abs(saw.y * sbw.y);\n    out.z = sng.z > 0 ? Math.abs(saw.z * sbw.z) : -Math.abs(saw.z * sbw.z);\n  }\n\n  static quaternionWeight(s: Quaternion, w: number, out: Quaternion) {\n    out.x = s.x * w;\n    out.y = s.y * w;\n    out.z = s.z * w;\n    out.w = s.w;\n  }\n}\n","export enum AnimatorLayerBlendingMode {\n  Override,\n  Additive\n}\n","/**\n * @internal\n */\nexport enum AnimatorStatePlayState {\n  UnStarted,\n  Playing,\n  Finished\n}\n","/**\n * Layer state.\n */\nexport enum LayerState {\n  /** Standby state. */\n  Standby, //CM: Standby 优化\n  /** Playing state. */\n  Playing,\n  /** CrossFading state. */\n  CrossFading,\n  /** FixedCrossFading state. */\n  FixedCrossFading\n}\n","import { Quaternion, Vector3 } from \"@oasis-engine/math\";\nimport { Component } from \"../../Component\";\nimport { Entity } from \"../../Entity\";\nimport { SkinnedMeshRenderer } from \"../../mesh/SkinnedMeshRenderer\";\nimport { AnimationProperty } from \"../enums/AnimationProperty\";\nimport { InterpolableValue } from \"../KeyFrame\";\n\n/**\n * @internal\n */\nexport class AnimationCurveOwner {\n  crossCurveMark: number = 0;\n  crossCurveIndex: number;\n\n  readonly target: Entity;\n  readonly type: new (entity: Entity) => Component;\n  readonly property: AnimationProperty;\n  readonly component: Component;\n  readonly defaultValue: InterpolableValue;\n  readonly fixedPoseValue: InterpolableValue;\n\n  /** @internal */\n  _hasSavedDefaultValue: boolean = false;\n\n  constructor(target: Entity, type: new (entity: Entity) => Component, property: AnimationProperty) {\n    this.target = target;\n    this.type = type;\n    this.property = property;\n    switch (property) {\n      case AnimationProperty.Position:\n        this.defaultValue = new Vector3();\n        this.fixedPoseValue = new Vector3();\n        this.component = target.transform;\n        break;\n      case AnimationProperty.Rotation:\n        this.defaultValue = new Quaternion();\n        this.fixedPoseValue = new Quaternion();\n        this.component = target.transform;\n        break;\n      case AnimationProperty.Scale:\n        this.defaultValue = new Vector3();\n        this.fixedPoseValue = new Vector3();\n        this.component = target.transform;\n        break;\n      case AnimationProperty.BlendShapeWeights:\n        this.component = target.getComponent(SkinnedMeshRenderer);\n        const weightLength = (<SkinnedMeshRenderer>this.component).blendShapeWeights.length;\n        this.defaultValue = new Float32Array(weightLength);\n        this.fixedPoseValue = new Float32Array(weightLength);\n        break;\n    }\n  }\n\n  saveDefaultValue(): void {\n    switch (this.property) {\n      case AnimationProperty.Position:\n        (<Vector3>this.defaultValue).copyFrom(this.target.transform.position);\n        break;\n      case AnimationProperty.Rotation:\n        (<Quaternion>this.defaultValue).copyFrom(this.target.transform.rotationQuaternion);\n        break;\n      case AnimationProperty.Scale:\n        (<Vector3>this.defaultValue).copyFrom(this.target.transform.scale);\n        break;\n      case AnimationProperty.BlendShapeWeights:\n        const { blendShapeWeights } = <SkinnedMeshRenderer>this.component;\n        for (let i = 0, length = blendShapeWeights.length; i < length; ++i) {\n          this.defaultValue[i] = blendShapeWeights[i];\n        }\n        break;\n    }\n    this._hasSavedDefaultValue = true;\n  }\n\n  saveFixedPoseValue(): void {\n    switch (this.property) {\n      case AnimationProperty.Position:\n        (<Vector3>this.fixedPoseValue).copyFrom(this.target.transform.position);\n        break;\n      case AnimationProperty.Rotation:\n        (<Quaternion>this.fixedPoseValue).copyFrom(this.target.transform.rotationQuaternion);\n        break;\n      case AnimationProperty.Scale:\n        (<Vector3>this.fixedPoseValue).copyFrom(this.target.transform.scale);\n        break;\n      case AnimationProperty.BlendShapeWeights:\n        const { blendShapeWeights } = <SkinnedMeshRenderer>this.component;\n        for (let i = 0, length = blendShapeWeights.length; i < length; ++i) {\n          this.fixedPoseValue[i] = (<SkinnedMeshRenderer>this.component).blendShapeWeights[i];\n        }\n        break;\n    }\n  }\n}\n","import { AnimationEvent } from \"../AnimationEvent\";\n/**\n * @internal\n */\nexport class AnimationEventHandler {\n  event: AnimationEvent;\n  handlers: Function[] = [];\n}\n","import { AnimatorState } from \"./AnimatorState\";\n\n/**\n * Transitions define when and how the state machine switch from on state to another. AnimatorTransition always originate from a StateMachine or a StateMachine entry.\n */\nexport class AnimatorStateTransition {\n  /** The duration of the transition. This is represented in normalized time. */\n  duration: number = 0;\n  /** The time at which the destination state will start. This is represented in normalized time. */\n  offset: number = 0;\n  /** ExitTime represents the exact time at which the transition can take effect. This is represented in normalized time. */\n  exitTime: number = 1;\n  /** The destination state of the transition. */\n  destinationState: AnimatorState;\n}\n","/**\n * Animation wrap mode.\n */\nexport enum WrapMode {\n  /** Play once */\n  Once = 0,\n  /** Loop play */\n  Loop = 1\n}\n","import { AnimatorState } from \"../AnimatorState\";\nimport { AnimatorStatePlayState } from \"../enums/AnimatorStatePlayState\";\nimport { WrapMode } from \"../enums/WrapMode\";\nimport { AnimatorStateData } from \"./AnimatorStateData\";\n\n/**\n * @internal\n */\nexport class AnimatorStatePlayData {\n  state: AnimatorState;\n  stateData: AnimatorStateData;\n  frameTime: number;\n  playState: AnimatorStatePlayState;\n  clipTime: number;\n  currentEventIndex: number;\n\n  reset(state: AnimatorState, stateData: AnimatorStateData, offsetFrameTime: number): void {\n    this.state = state;\n    this.frameTime = offsetFrameTime;\n    this.stateData = stateData;\n    this.playState = AnimatorStatePlayState.UnStarted;\n    this.clipTime = state.clipStartTime * state.clip.length;\n    this.currentEventIndex = 0;\n  }\n\n  update(isBackwards: boolean): void {\n    const state = this.state;\n    let time = this.frameTime;\n    const duration = state._getDuration();\n    this.playState = AnimatorStatePlayState.Playing;\n    if (state.wrapMode === WrapMode.Loop) {\n      time = duration ? time % duration : 0;\n    } else {\n      if (Math.abs(time) > duration) {\n        time = time < 0 ? -duration : duration;\n        this.playState = AnimatorStatePlayState.Finished;\n      }\n    }\n\n    if (isBackwards && time === 0) {\n      this.clipTime = state.clipEndTime * state.clip.length;\n    } else {\n      time < 0 && (time += duration);\n      this.clipTime = time + state.clipStartTime * state.clip.length;\n    }\n  }\n}\n","import { AnimatorStateTransition } from \"../AnimatorTransition\";\nimport { LayerState } from \"../enums/LayerState\";\nimport { AnimatorStateData } from \"./AnimatorStateData\";\nimport { AnimatorStatePlayData } from \"./AnimatorStatePlayData\";\n\n/**\n * @internal\n */\nexport class AnimatorLayerData {\n  animatorStateDataMap: Record<string, AnimatorStateData> = {};\n  srcPlayData: AnimatorStatePlayData = new AnimatorStatePlayData();\n  destPlayData: AnimatorStatePlayData = new AnimatorStatePlayData();\n  layerState: LayerState = LayerState.Standby;\n  crossCurveMark: number = 0;\n  manuallyTransition: AnimatorStateTransition = new AnimatorStateTransition();\n  crossFadeTransition: AnimatorStateTransition;\n\n  switchPlayData(): void {\n    const srcPlayData = this.destPlayData;\n    const switchTemp = this.srcPlayData;\n    this.srcPlayData = srcPlayData;\n    this.destPlayData = switchTemp;\n  }\n}\n","import { AnimationEventHandler } from \"./AnimationEventHandler\";\nimport { AnimationCurveOwner } from \"./AnimationCurveOwner\";\n\n/**\n * @internal\n */\nexport class AnimatorStateData {\n  curveOwners: AnimationCurveOwner[] = [];\n  eventHandlers: AnimationEventHandler[] = [];\n}\n","import { AnimatorState } from \"../AnimatorState\";\n\n/**\n * @internal\n */\nexport class AnimatorStateInfo {\n  layerIndex: number;\n  state: AnimatorState;\n}\n","import { AnimationCurveOwner } from \"./AnimationCurveOwner\";\n/**\n * @internal\n */\nexport class CrossCurveData {\n  curveOwner: AnimationCurveOwner;\n  srcCurveIndex: number;\n  destCurveIndex: number;\n}\n","import { Vector2, Vector3, Vector4, Quaternion } from \"@oasis-engine/math\";\n/**\n * @internal\n */\nexport class AnimatorTempValue {\n  vector2 = new Vector2();\n  vector3 = new Vector3();\n  vector4 = new Vector4();\n  quaternion = new Quaternion();\n  private _floatArrayPool: Float32Array[] = [];\n\n  getFloatArray(length: number): Float32Array {\n    let floatArray = this._floatArrayPool[length];\n    if (!floatArray) {\n      this._floatArrayPool[length] = floatArray = new Float32Array(length);\n    }\n    return floatArray;\n  }\n}\n","import { InterpolableValueType } from \"./enums/InterpolableValueType\";\nimport { Quaternion, Vector2, Vector3, Vector4 } from \"@oasis-engine/math\";\nimport { BoolUpdateFlag } from \"../BoolUpdateFlag\";\nimport { assignmentClone, ignoreClone } from \"../clone/CloneManager\";\nimport { Component } from \"../Component\";\nimport { Entity } from \"../Entity\";\nimport { SkinnedMeshRenderer } from \"../mesh\";\nimport { ClassPool } from \"../RenderPipeline/ClassPool\";\nimport { Transform } from \"../Transform\";\nimport { AnimationCurve } from \"./AnimationCurve\";\nimport { AnimatorController } from \"./AnimatorController\";\nimport { AnimatorState } from \"./AnimatorState\";\nimport { AnimatorStateTransition } from \"./AnimatorTransition\";\nimport { AnimatorUtils } from \"./AnimatorUtils\";\nimport { AnimationProperty } from \"./enums/AnimationProperty\";\nimport { AnimatorLayerBlendingMode } from \"./enums/AnimatorLayerBlendingMode\";\nimport { AnimatorStatePlayState } from \"./enums/AnimatorStatePlayState\";\nimport { LayerState } from \"./enums/LayerState\";\nimport { AnimationCurveOwner } from \"./internal/AnimationCurveOwner\";\nimport { AnimationEventHandler } from \"./internal/AnimationEventHandler\";\nimport { AnimatorLayerData } from \"./internal/AnimatorLayerData\";\nimport { AnimatorStateData } from \"./internal/AnimatorStateData\";\nimport { AnimatorStateInfo } from \"./internal/AnimatorStateInfo\";\nimport { AnimatorStatePlayData } from \"./internal/AnimatorStatePlayData\";\nimport { CrossCurveData } from \"./internal/CrossCurveData\";\nimport { AnimatorTempValue } from \"./internal/AnimatorTempValue\";\nimport { InterpolableValue, UnionInterpolableKeyframe } from \"./KeyFrame\";\n/**\n * The controller of the animation system.\n */\nexport class Animator extends Component {\n  private static _tempQuat = new Quaternion();\n  private static _animatorInfo: AnimatorStateInfo = new AnimatorStateInfo();\n\n  protected _animatorController: AnimatorController;\n  @assignmentClone\n  protected _speed: number = 1.0;\n  @ignoreClone\n  protected _controllerUpdateFlag: BoolUpdateFlag;\n\n  @ignoreClone\n  private _animatorLayersData: AnimatorLayerData[] = [];\n  @ignoreClone\n  private _crossCurveDataCollection: CrossCurveData[] = [];\n  @ignoreClone\n  private _animationCurveOwners: AnimationCurveOwner[][] = [];\n  @ignoreClone\n  private _crossCurveDataPool: ClassPool<CrossCurveData> = new ClassPool(CrossCurveData);\n  @ignoreClone\n  private _animationEventHandlerPool: ClassPool<AnimationEventHandler> = new ClassPool(AnimationEventHandler);\n  @ignoreClone\n  private _baseTempValue = new AnimatorTempValue();\n  @ignoreClone\n  private _crossTempValue = new AnimatorTempValue();\n\n  /**\n   * The playback speed of the Animator, 1.0 is normal playback speed.\n   */\n  get speed(): number {\n    return this._speed;\n  }\n\n  set speed(value: number) {\n    this._speed = value;\n  }\n\n  /**\n   * All layers from the AnimatorController which belongs this Animator.\n   */\n  get animatorController(): AnimatorController {\n    return this._animatorController;\n  }\n\n  set animatorController(animatorController: AnimatorController) {\n    if (animatorController !== this._animatorController) {\n      this._controllerUpdateFlag && this._controllerUpdateFlag.destroy();\n      this._controllerUpdateFlag = animatorController && animatorController._registerChangeFlag();\n      this._animatorController = animatorController;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  constructor(entity: Entity) {\n    super(entity);\n  }\n\n  /**\n   * Play a state by name.\n   * @param stateName - The state name\n   * @param layerIndex - The layer index(default -1). If layer is -1, play the first state with the given state name\n   * @param normalizedTimeOffset - The time offset between 0 and 1(default 0)\n   */\n  play(stateName: string, layerIndex: number = -1, normalizedTimeOffset: number = 0): void {\n    if (this._controllerUpdateFlag?.flag) {\n      this._clearPlayData();\n    }\n\n    const animatorInfo = this._getAnimatorStateInfo(stateName, layerIndex, Animator._animatorInfo);\n    const { state } = animatorInfo;\n\n    if (!state) {\n      return;\n    }\n    if (!state.clip) {\n      console.warn(`The state named ${stateName} has no AnimationClip data.`);\n      return;\n    }\n    const animatorLayerData = this._getAnimatorLayerData(animatorInfo.layerIndex);\n    const { srcPlayData } = animatorLayerData;\n    const { state: curState } = srcPlayData;\n    if (curState && curState !== state) {\n      this._revertDefaultValue(srcPlayData.state, srcPlayData.stateData);\n    }\n\n    //CM: Not consider same stateName, but different animation\n    const animatorStateData = this._getAnimatorStateData(stateName, state, animatorLayerData);\n\n    animatorLayerData.layerState = LayerState.Playing;\n    srcPlayData.reset(state, animatorStateData, state._getDuration() * normalizedTimeOffset);\n\n    this._saveDefaultValues(animatorStateData);\n  }\n\n  /**\n   * @internal\n   */\n  _reset(): void {\n    const { _animatorController: animatorController } = this;\n    if (animatorController) {\n      const layers = animatorController.layers;\n      for (let i = 0, n = layers.length; i < n; ++i) {\n        const { states } = layers[i].stateMachine;\n        const animatorLayerData = this._getAnimatorLayerData(i);\n        for (let j = 0, m = states.length; j < m; ++j) {\n          const state = states[j];\n          const animatorStateData = this._getAnimatorStateData(state.name, state, animatorLayerData);\n          this._revertDefaultValue(state, animatorStateData);\n        }\n      }\n    }\n    this._clearPlayData();\n  }\n\n  /**\n   * Create a cross fade from the current state to another state.\n   * @param stateName - The state name\n   * @param normalizedTransitionDuration - The duration of the transition (normalized)\n   * @param layerIndex - The layer index(default -1). If layer is -1, play the first state with the given state name\n   * @param normalizedTimeOffset - The time offset between 0 and 1(default 0)\n   */\n  crossFade(\n    stateName: string,\n    normalizedTransitionDuration: number,\n    layerIndex: number = -1,\n    normalizedTimeOffset: number = 0\n  ): void {\n    if (this._controllerUpdateFlag?.flag) {\n      this._clearPlayData();\n    }\n\n    const { state } = this._getAnimatorStateInfo(stateName, layerIndex, Animator._animatorInfo);\n    const { manuallyTransition } = this._getAnimatorLayerData(layerIndex);\n    manuallyTransition.duration = normalizedTransitionDuration;\n    manuallyTransition.offset = normalizedTimeOffset;\n    manuallyTransition.destinationState = state;\n    this._crossFadeByTransition(manuallyTransition, layerIndex);\n  }\n\n  /**\n   * Evaluates the animator component based on deltaTime.\n   * @param deltaTime - The deltaTime when the animation update\n   */\n  update(deltaTime: number): void {\n    if (this.speed === 0) {\n      return;\n    }\n\n    const { _animatorController: animatorController } = this;\n    if (!animatorController) {\n      return;\n    }\n    if (this._controllerUpdateFlag?.flag) {\n      return;\n    }\n    deltaTime *= this.speed;\n    for (let i = 0, n = animatorController.layers.length; i < n; i++) {\n      const animatorLayerData = this._getAnimatorLayerData(i);\n      if (animatorLayerData.layerState === LayerState.Standby) {\n        continue;\n      }\n\n      this._updateLayer(i, i === 0, deltaTime / 1000);\n    }\n  }\n\n  /**\n   * Get the playing state from the target layerIndex.\n   * @param layerIndex - The layer index\n   */\n  getCurrentAnimatorState(layerIndex: number) {\n    return this._animatorLayersData[layerIndex]?.srcPlayData?.state;\n  }\n\n  /**\n   * @override\n   * @internal\n   */\n  _onEnable(): void {\n    this.engine._componentsManager.addOnUpdateAnimations(this);\n  }\n\n  /**\n   * @override\n   * @internal\n   */\n  _onDisable(): void {\n    this.engine._componentsManager.removeOnUpdateAnimations(this);\n  }\n\n  private _getAnimatorStateInfo(stateName: string, layerIndex: number, out: AnimatorStateInfo): AnimatorStateInfo {\n    let state: AnimatorState = null;\n    const { _animatorController: animatorController } = this;\n    if (animatorController) {\n      const layers = animatorController.layers;\n      if (layerIndex === -1) {\n        for (let i = 0, n = layers.length; i < n; i++) {\n          state = layers[i].stateMachine.findStateByName(stateName);\n          if (state) {\n            layerIndex = i;\n            break;\n          }\n        }\n      } else {\n        state = layers[layerIndex].stateMachine.findStateByName(stateName);\n      }\n    }\n    out.layerIndex = layerIndex;\n    out.state = state;\n    return out;\n  }\n\n  private _saveDefaultValues(stateData: AnimatorStateData): void {\n    const { curveOwners } = stateData;\n    for (let i = curveOwners.length - 1; i >= 0; i--) {\n      curveOwners[i].saveDefaultValue();\n    }\n  }\n\n  private _getAnimatorStateData(\n    stateName: string,\n    animatorState: AnimatorState,\n    animatorLayerData: AnimatorLayerData\n  ): AnimatorStateData {\n    const { animatorStateDataMap: animatorStateDataCollection } = animatorLayerData;\n    let animatorStateData = animatorStateDataCollection[stateName];\n    if (!animatorStateData) {\n      animatorStateData = new AnimatorStateData();\n      animatorStateDataCollection[stateName] = animatorStateData;\n      this._saveAnimatorStateData(animatorState, animatorStateData);\n      this._saveAnimatorEventHandlers(animatorState, animatorStateData);\n    }\n    return animatorStateData;\n  }\n\n  private _saveAnimatorStateData(animatorState: AnimatorState, animatorStateData: AnimatorStateData): void {\n    const { entity, _animationCurveOwners: animationCureOwners } = this;\n    const { curveOwners } = animatorStateData;\n    const { _curveBindings: curves } = animatorState.clip;\n    for (let i = curves.length - 1; i >= 0; i--) {\n      const curve = curves[i];\n      const targetEntity = curve.relativePath === \"\" ? entity : entity.findByPath(curve.relativePath);\n      const { property } = curve;\n      const { instanceId } = targetEntity;\n      const propertyOwners = animationCureOwners[instanceId] || (animationCureOwners[instanceId] = []);\n      curveOwners[i] =\n        propertyOwners[property] ||\n        (propertyOwners[property] = new AnimationCurveOwner(targetEntity, curve.type, property));\n    }\n  }\n\n  private _saveAnimatorEventHandlers(state: AnimatorState, animatorStateData: AnimatorStateData): void {\n    const eventHandlerPool = this._animationEventHandlerPool;\n    const scripts = this._entity._scripts;\n    const scriptCount = scripts.length;\n    const { eventHandlers } = animatorStateData;\n    const { events } = state.clip;\n\n    eventHandlers.length = 0;\n    for (let i = 0, n = events.length; i < n; i++) {\n      const event = events[i];\n      const eventHandler = eventHandlerPool.getFromPool();\n      const funcName = event.functionName;\n      const { handlers } = eventHandler;\n\n      eventHandler.event = event;\n      handlers.length = 0;\n      for (let j = scriptCount - 1; j >= 0; j--) {\n        const handler = <Function>scripts.get(j)[funcName];\n        handler && handlers.push(handler);\n      }\n      eventHandlers.push(eventHandler);\n    }\n  }\n\n  private _clearCrossData(animatorLayerData: AnimatorLayerData): void {\n    animatorLayerData.crossCurveMark++;\n    this._crossCurveDataCollection.length = 0;\n    this._crossCurveDataPool.resetPool();\n  }\n\n  private _addCrossCurveData(\n    crossCurveData: CrossCurveData[],\n    owner: AnimationCurveOwner,\n    curCurveIndex: number,\n    nextCurveIndex: number\n  ): void {\n    const dataItem = this._crossCurveDataPool.getFromPool();\n    dataItem.curveOwner = owner;\n    dataItem.srcCurveIndex = curCurveIndex;\n    dataItem.destCurveIndex = nextCurveIndex;\n    crossCurveData.push(dataItem);\n  }\n\n  private _prepareCrossFading(animatorLayerData: AnimatorLayerData): void {\n    const crossCurveData = this._crossCurveDataCollection;\n    const { crossCurveMark } = animatorLayerData;\n\n    // Add src cross curve data.\n    this._prepareSrcCrossData(crossCurveData, animatorLayerData.srcPlayData, crossCurveMark, false);\n    // Add dest cross curve data.\n    this._prepareDestCrossData(crossCurveData, animatorLayerData.destPlayData, crossCurveMark, false);\n  }\n\n  private _prepareStandbyCrossFading(animatorLayerData: AnimatorLayerData): void {\n    const crossCurveData = this._crossCurveDataCollection;\n    const { srcPlayData, crossCurveMark } = animatorLayerData;\n\n    // Standby have two sub state, one is never play, one is finished, never play srcPlayData.state is null.\n    srcPlayData.state && this._prepareSrcCrossData(crossCurveData, srcPlayData, crossCurveMark, true);\n    // Add dest cross curve data.\n    this._prepareDestCrossData(crossCurveData, animatorLayerData.destPlayData, crossCurveMark, true);\n  }\n\n  private _prepareFixedPoseCrossFading(animatorLayerData: AnimatorLayerData): void {\n    const crossCurveData = this._crossCurveDataCollection;\n\n    // Save current cross curve data owner fixed pose.\n    for (let i = crossCurveData.length - 1; i >= 0; i--) {\n      const item = crossCurveData[i];\n      item.curveOwner.saveFixedPoseValue();\n      // Reset destCurveIndex When fixed pose crossFading again.\n      item.destCurveIndex = -1;\n    }\n    // prepare dest AnimatorState cross data.\n    this._prepareDestCrossData(crossCurveData, animatorLayerData.destPlayData, animatorLayerData.crossCurveMark, true);\n  }\n\n  private _prepareSrcCrossData(\n    crossCurveData: CrossCurveData[],\n    srcPlayData: AnimatorStatePlayData,\n    crossCurveMark: number,\n    saveFixed: boolean\n  ): void {\n    const { curveOwners } = srcPlayData.stateData;\n    for (let i = curveOwners.length - 1; i >= 0; i--) {\n      const owner = curveOwners[i];\n      owner.crossCurveMark = crossCurveMark;\n      owner.crossCurveIndex = crossCurveData.length;\n      saveFixed && owner.saveFixedPoseValue();\n      this._addCrossCurveData(crossCurveData, owner, i, -1);\n    }\n  }\n\n  private _prepareDestCrossData(\n    crossCurveData: CrossCurveData[],\n    destPlayData: AnimatorStatePlayData,\n    crossCurveMark: number,\n    saveFixed: boolean\n  ): void {\n    const { curveOwners } = destPlayData.stateData;\n    for (let i = curveOwners.length - 1; i >= 0; i--) {\n      const owner = curveOwners[i];\n      // Not include in previous AnimatorState.\n      if (owner.crossCurveMark === crossCurveMark) {\n        crossCurveData[owner.crossCurveIndex].destCurveIndex = i;\n      } else {\n        owner.saveDefaultValue();\n        saveFixed && owner.saveFixedPoseValue();\n        owner.crossCurveMark = crossCurveMark;\n        owner.crossCurveIndex = crossCurveData.length;\n        this._addCrossCurveData(crossCurveData, owner, -1, i);\n      }\n    }\n  }\n\n  private _evaluateCurve(\n    property: AnimationProperty,\n    curve: AnimationCurve,\n    time: number,\n    additive: boolean,\n    tempValue: AnimatorTempValue\n  ): InterpolableValue {\n    let baseValue: InterpolableValue;\n    if (additive) {\n      baseValue = (<UnionInterpolableKeyframe>curve.keys[0]).value;\n    }\n\n    switch (curve._valueType) {\n      case InterpolableValueType.Float: {\n        const value = curve.evaluate(time);\n        if (additive) {\n          return <number>value - <number>baseValue;\n        }\n        return value;\n      }\n      case InterpolableValueType.FloatArray: {\n        const value = tempValue.getFloatArray(curve._valueSize);\n        curve._evaluate(time, value);\n        if (additive) {\n          for (let i = 0, n = value.length; i < n; i++) {\n            value[i] = value[i] - baseValue[i];\n          }\n        }\n        return value;\n      }\n      case InterpolableValueType.Vector2: {\n        const value = tempValue.vector2;\n        curve._evaluate(time, value);\n        if (additive) {\n          if (property === AnimationProperty.Scale) {\n            Vector2.divide(value, <Vector2>baseValue, value);\n          } else {\n            Vector2.subtract(value, <Vector2>baseValue, value);\n          }\n        }\n        return value;\n      }\n      case InterpolableValueType.Vector3: {\n        const value = tempValue.vector3;\n        curve._evaluate(time, value);\n        if (additive) {\n          if (property === AnimationProperty.Scale) {\n            Vector3.divide(value, <Vector3>baseValue, value);\n          } else {\n            Vector3.subtract(value, <Vector3>baseValue, value);\n          }\n        }\n        return value;\n      }\n      case InterpolableValueType.Vector4: {\n        const value = tempValue.vector4;\n        curve._evaluate(time, value);\n        if (additive) {\n          Vector4.subtract(value, <Vector4>baseValue, value);\n        }\n        return value;\n      }\n      case InterpolableValueType.Quaternion: {\n        const value = tempValue.quaternion;\n        curve._evaluate(time, value);\n        if (additive) {\n          const tempQuat = Animator._tempQuat;\n          Quaternion.conjugate(<Quaternion>baseValue, tempQuat);\n          Quaternion.multiply(tempQuat, value, value);\n        }\n        return value;\n      }\n    }\n  }\n\n  private _getAnimatorLayerData(layerIndex: number): AnimatorLayerData {\n    let animatorLayerData = this._animatorLayersData[layerIndex];\n    animatorLayerData || (this._animatorLayersData[layerIndex] = animatorLayerData = new AnimatorLayerData());\n    return animatorLayerData;\n  }\n\n  private _updateLayer(layerIndex: number, firstLayer: boolean, deltaTime: number): void {\n    const { blendingMode, weight } = this._animatorController.layers[layerIndex];\n    const animLayerData = this._animatorLayersData[layerIndex];\n    const { srcPlayData, destPlayData, crossFadeTransition: crossFadeTransitionInfo } = animLayerData;\n    const layerAdditive = blendingMode === AnimatorLayerBlendingMode.Additive;\n    const layerWeight = firstLayer ? 1.0 : weight;\n    //TODO: 任意情况都应该检查，后面要优化\n    animLayerData.layerState !== LayerState.FixedCrossFading &&\n      this._checkTransition(srcPlayData, crossFadeTransitionInfo, layerIndex);\n\n    switch (animLayerData.layerState) {\n      case LayerState.Playing:\n        this._updatePlayingState(srcPlayData, animLayerData, layerIndex, layerWeight, deltaTime, layerAdditive);\n        break;\n      case LayerState.FixedCrossFading:\n        this._updateCrossFadeFromPose(destPlayData, animLayerData, layerIndex, layerWeight, deltaTime, layerAdditive);\n        break;\n      case LayerState.CrossFading:\n        this._updateCrossFade(\n          srcPlayData,\n          destPlayData,\n          animLayerData,\n          layerIndex,\n          layerWeight,\n          deltaTime,\n          layerAdditive\n        );\n        break;\n    }\n  }\n\n  private _updatePlayingState(\n    playData: AnimatorStatePlayData,\n    layerData: AnimatorLayerData,\n    layerIndex: number,\n    weight: number,\n    delta: number,\n    additive: boolean\n  ): void {\n    const { curveOwners, eventHandlers } = playData.stateData;\n    const { state, playState: lastPlayState, clipTime: lastClipTime } = playData;\n    const { _curveBindings: curves } = state.clip;\n\n    playData.update(this.speed < 0);\n\n    const { clipTime, playState } = playData;\n\n    eventHandlers.length && this._fireAnimationEvents(playData, eventHandlers, lastClipTime, clipTime);\n\n    for (let i = curves.length - 1; i >= 0; i--) {\n      const owner = curveOwners[i];\n      const value = this._evaluateCurve(owner.property, curves[i].curve, clipTime, additive, this._baseTempValue);\n      if (additive) {\n        this._applyClipValueAdditive(owner, value, weight);\n      } else {\n        this._applyClipValue(owner, value, weight);\n      }\n    }\n    playData.frameTime += state.speed * delta;\n\n    if (playState === AnimatorStatePlayState.Finished) {\n      layerData.layerState = LayerState.Standby;\n    }\n\n    if (lastPlayState === AnimatorStatePlayState.UnStarted) {\n      this._callAnimatorScriptOnEnter(state, layerIndex);\n    }\n    if (playState === AnimatorStatePlayState.Finished) {\n      this._callAnimatorScriptOnExit(state, layerIndex);\n    } else {\n      this._callAnimatorScriptOnUpdate(state, layerIndex);\n    }\n  }\n\n  private _updateCrossFade(\n    srcPlayData: AnimatorStatePlayData,\n    destPlayData: AnimatorStatePlayData,\n    layerData: AnimatorLayerData,\n    layerIndex,\n    weight: number,\n    delta: number,\n    additive: boolean\n  ) {\n    const { _crossCurveDataCollection: crossCurveDataCollection } = this;\n    const { _curveBindings: srcCurves } = srcPlayData.state.clip;\n    const { state: srcState, stateData: srcStateData, playState: lastSrcPlayState } = srcPlayData;\n    const { eventHandlers: srcEventHandler } = srcStateData;\n    const { state: destState, stateData: destStateData, playState: lastDstPlayState } = destPlayData;\n    const { eventHandlers: destEventHandler } = destStateData;\n    const { _curveBindings: destCurves } = destState.clip;\n    const { clipTime: lastSrcClipTime } = srcPlayData;\n    const { clipTime: lastDestClipTime } = destPlayData;\n\n    let crossWeight =\n      Math.abs(destPlayData.frameTime) / (destState._getDuration() * layerData.crossFadeTransition.duration);\n    crossWeight >= 1.0 && (crossWeight = 1.0);\n\n    srcPlayData.update(this.speed < 0);\n    destPlayData.update(this.speed < 0);\n\n    const { playState: srcPlayState } = srcPlayData;\n    const { playState: destPlayState } = destPlayData;\n\n    this._updateCrossFadeData(layerData, crossWeight, delta, false);\n\n    const { clipTime: srcClipTime } = srcPlayData;\n    const { clipTime: destClipTime } = destPlayData;\n\n    srcEventHandler.length && this._fireAnimationEvents(srcPlayData, srcEventHandler, lastSrcClipTime, srcClipTime);\n    destEventHandler.length &&\n      this._fireAnimationEvents(destPlayData, destEventHandler, lastDestClipTime, destClipTime);\n\n    if (lastSrcPlayState === AnimatorStatePlayState.UnStarted) {\n      this._callAnimatorScriptOnEnter(srcState, layerIndex);\n    }\n    if (crossWeight === 1 || srcPlayState === AnimatorStatePlayState.Finished) {\n      this._callAnimatorScriptOnExit(srcState, layerIndex);\n    } else {\n      this._callAnimatorScriptOnUpdate(srcState, layerIndex);\n    }\n\n    if (lastDstPlayState === AnimatorStatePlayState.UnStarted) {\n      this._callAnimatorScriptOnEnter(destState, layerIndex);\n    }\n    if (destPlayState === AnimatorStatePlayState.Finished) {\n      this._callAnimatorScriptOnExit(destState, layerIndex);\n    } else {\n      this._callAnimatorScriptOnUpdate(destState, layerIndex);\n    }\n\n    for (let i = crossCurveDataCollection.length - 1; i >= 0; i--) {\n      const { curveOwner, srcCurveIndex, destCurveIndex } = crossCurveDataCollection[i];\n      const { property, defaultValue } = curveOwner;\n\n      const srcValue =\n        srcCurveIndex >= 0\n          ? this._evaluateCurve(property, srcCurves[srcCurveIndex].curve, srcClipTime, additive, this._baseTempValue)\n          : defaultValue;\n      const destValue =\n        destCurveIndex >= 0\n          ? this._evaluateCurve(\n              property,\n              destCurves[destCurveIndex].curve,\n              destClipTime,\n              additive,\n              this._crossTempValue\n            )\n          : defaultValue;\n\n      this._applyCrossClipValue(curveOwner, srcValue, destValue, crossWeight, weight, additive);\n    }\n  }\n\n  private _updateCrossFadeFromPose(\n    destPlayData: AnimatorStatePlayData,\n    layerData: AnimatorLayerData,\n    layerIndex: number,\n    weight: number,\n    delta: number,\n    additive: boolean\n  ) {\n    const crossCurveDataCollection = this._crossCurveDataCollection;\n    const { state, stateData, playState: lastPlayState } = destPlayData;\n    const { eventHandlers } = stateData;\n    const { _curveBindings: curves } = state.clip;\n    const { clipTime: lastDestClipTime } = destPlayData;\n\n    let crossWeight =\n      Math.abs(destPlayData.frameTime) / (state._getDuration() * layerData.crossFadeTransition.duration);\n    crossWeight >= 1.0 && (crossWeight = 1.0);\n\n    destPlayData.update(this.speed < 0);\n\n    const { playState } = destPlayData;\n\n    this._updateCrossFadeData(layerData, crossWeight, delta, true);\n\n    const { clipTime: destClipTime } = destPlayData;\n    //TODO: srcState 少了最新一段时间的判断\n    eventHandlers.length && this._fireAnimationEvents(destPlayData, eventHandlers, lastDestClipTime, destClipTime);\n\n    if (lastPlayState === AnimatorStatePlayState.UnStarted) {\n      this._callAnimatorScriptOnEnter(state, layerIndex);\n    }\n    if (playState === AnimatorStatePlayState.Finished) {\n      this._callAnimatorScriptOnExit(state, layerIndex);\n    } else {\n      this._callAnimatorScriptOnUpdate(state, layerIndex);\n    }\n\n    for (let i = crossCurveDataCollection.length - 1; i >= 0; i--) {\n      const { curveOwner, destCurveIndex } = crossCurveDataCollection[i];\n      const destValue =\n        destCurveIndex >= 0\n          ? this._evaluateCurve(\n              curveOwner.property,\n              curves[destCurveIndex].curve,\n              destClipTime,\n              additive,\n              this._crossTempValue\n            )\n          : curveOwner.defaultValue;\n\n      this._applyCrossClipValue(curveOwner, curveOwner.fixedPoseValue, destValue, crossWeight, weight, additive);\n    }\n  }\n\n  private _updateCrossFadeData(layerData: AnimatorLayerData, crossWeight: number, delta: number, fixed: boolean): void {\n    const { destPlayData } = layerData;\n    destPlayData.frameTime += destPlayData.state.speed * delta;\n    if (crossWeight === 1.0) {\n      if (destPlayData.playState === AnimatorStatePlayState.Finished) {\n        layerData.layerState = LayerState.Standby;\n      } else {\n        layerData.layerState = LayerState.Playing;\n      }\n      layerData.switchPlayData();\n    } else {\n      fixed || (layerData.srcPlayData.frameTime += layerData.srcPlayData.state.speed * delta);\n    }\n  }\n\n  private _applyCrossClipValue(\n    owner: AnimationCurveOwner,\n    srcValue: InterpolableValue,\n    destValue: InterpolableValue,\n    crossWeight: number,\n    layerWeight: number,\n    additive: boolean\n  ): void {\n    let value: InterpolableValue;\n    if (owner.type === Transform) {\n      switch (owner.property) {\n        case AnimationProperty.Position:\n          value = this._baseTempValue.vector3;\n          Vector3.lerp(srcValue as Vector3, destValue as Vector3, crossWeight, value as Vector3);\n          break;\n        case AnimationProperty.Rotation:\n          value = this._baseTempValue.quaternion;\n          Quaternion.slerp(srcValue as Quaternion, destValue as Quaternion, crossWeight, value as Quaternion);\n          break;\n        case AnimationProperty.Scale: {\n          value = this._baseTempValue.vector3;\n          Vector3.lerp(srcValue as Vector3, destValue as Vector3, crossWeight, value as Vector3);\n          break;\n        }\n      }\n    } else if (owner.type === SkinnedMeshRenderer) {\n      switch (owner.property) {\n        case AnimationProperty.BlendShapeWeights:\n          value = this._baseTempValue.getFloatArray((<Float32Array>srcValue).length);\n          for (let i = 0, length = (<Float32Array>value).length; i < length; ++i) {\n            value[i] = srcValue[i] + (destValue[i] - srcValue[i]) * crossWeight;\n          }\n          break;\n      }\n    }\n\n    if (additive) {\n      this._applyClipValueAdditive(owner, value, layerWeight);\n    } else {\n      this._applyClipValue(owner, value, layerWeight);\n    }\n  }\n\n  private _applyClipValue(owner: AnimationCurveOwner, value: InterpolableValue, weight: number): void {\n    if (owner.type === Transform) {\n      const transform = owner.target.transform;\n      switch (owner.property) {\n        case AnimationProperty.Position:\n          if (weight === 1.0) {\n            transform.position = <Vector3>value;\n          } else {\n            const position = transform.position;\n            Vector3.lerp(position, <Vector3>value, weight, position);\n          }\n          break;\n        case AnimationProperty.Rotation:\n          if (weight === 1.0) {\n            transform.rotationQuaternion = <Quaternion>value;\n          } else {\n            const rotationQuaternion = transform.rotationQuaternion;\n            Quaternion.slerp(rotationQuaternion, <Quaternion>value, weight, rotationQuaternion);\n          }\n          break;\n        case AnimationProperty.Scale:\n          if (weight === 1.0) {\n            transform.scale = <Vector3>value;\n          } else {\n            const scale = transform.scale;\n            Vector3.lerp(scale, <Vector3>value, weight, scale);\n          }\n          break;\n      }\n    } else if (owner.type === SkinnedMeshRenderer) {\n      switch (owner.property) {\n        case AnimationProperty.BlendShapeWeights:\n          if (weight === 1.0) {\n            (<SkinnedMeshRenderer>owner.component).blendShapeWeights = <Float32Array>value;\n          } else {\n            const { blendShapeWeights } = <SkinnedMeshRenderer>owner.component;\n            for (let i = 0, length = blendShapeWeights.length; i < length; ++i) {\n              blendShapeWeights[i] += (value[i] - blendShapeWeights[i]) * weight;\n            }\n          }\n          break;\n      }\n    }\n  }\n\n  private _applyClipValueAdditive(owner: AnimationCurveOwner, additiveValue: InterpolableValue, weight: number): void {\n    if (owner.type === Transform) {\n      const transform = (<Entity>owner.target).transform;\n      switch (owner.property) {\n        case AnimationProperty.Position:\n          const position = transform.position;\n          position.x += (<Vector3>additiveValue).x * weight;\n          position.y += (<Vector3>additiveValue).y * weight;\n          position.z += (<Vector3>additiveValue).z * weight;\n          transform.position = position;\n          break;\n        case AnimationProperty.Rotation:\n          const rotationQuaternion = transform.rotationQuaternion;\n          AnimatorUtils.quaternionWeight(<Quaternion>additiveValue, weight, <Quaternion>additiveValue);\n          (<Quaternion>additiveValue).normalize();\n          rotationQuaternion.multiply(<Quaternion>additiveValue);\n          transform.rotationQuaternion = rotationQuaternion;\n          break;\n        case AnimationProperty.Scale:\n          const scale = transform.scale;\n          AnimatorUtils.scaleWeight(scale, weight, scale);\n          Vector3.multiply(scale, <Vector3>additiveValue, scale);\n          transform.scale = scale;\n          break;\n        case AnimationProperty.BlendShapeWeights:\n          const { blendShapeWeights } = <SkinnedMeshRenderer>owner.component;\n          for (let i = 0, length = blendShapeWeights.length; i < length; ++i) {\n            (<SkinnedMeshRenderer>owner.component).blendShapeWeights[i] += additiveValue[i] * weight;\n          }\n          break;\n      }\n    }\n  }\n\n  private _revertDefaultValue(state: AnimatorState, stateData: AnimatorStateData) {\n    const { clip } = state;\n    if (clip) {\n      const curves = clip._curveBindings;\n      const { curveOwners } = stateData;\n      for (let i = curves.length - 1; i >= 0; i--) {\n        const owner = curveOwners[i];\n        const { transform } = owner.target;\n        if (!owner._hasSavedDefaultValue) continue;\n        switch (owner.property) {\n          case AnimationProperty.Position:\n            transform.position = <Vector3>owner.defaultValue;\n            break;\n          case AnimationProperty.Rotation:\n            transform.rotationQuaternion = <Quaternion>owner.defaultValue;\n            break;\n          case AnimationProperty.Scale:\n            transform.scale = <Vector3>owner.defaultValue;\n            break;\n          case AnimationProperty.BlendShapeWeights:\n            const { blendShapeWeights } = <SkinnedMeshRenderer>owner.component;\n            for (let j = 0, length = blendShapeWeights.length; j < length; ++j) {\n              (<SkinnedMeshRenderer>owner.component).blendShapeWeights[j] = owner.defaultValue[j];\n            }\n            break;\n        }\n      }\n    }\n  }\n\n  private _checkTransition(\n    stateData: AnimatorStatePlayData,\n    crossFadeTransition: AnimatorStateTransition,\n    layerIndex: number\n  ) {\n    const { state, clipTime } = stateData;\n    const duration = state._getDuration();\n    const { transitions } = state;\n    for (let i = 0, n = transitions.length; i < n; ++i) {\n      const transition = transitions[i];\n      if (duration * transition.exitTime <= clipTime) {\n        crossFadeTransition !== transition && this._crossFadeByTransition(transition, layerIndex);\n      }\n    }\n  }\n\n  private _crossFadeByTransition(transition: AnimatorStateTransition, layerIndex: number): void {\n    const { name } = transition.destinationState;\n    const animatorStateInfo = this._getAnimatorStateInfo(name, layerIndex, Animator._animatorInfo);\n    const { state: crossState } = animatorStateInfo;\n    if (!crossState) {\n      return;\n    }\n    if (!crossState.clip) {\n      console.warn(`The state named ${name} has no AnimationClip data.`);\n      return;\n    }\n\n    const animatorLayerData = this._getAnimatorLayerData(animatorStateInfo.layerIndex);\n    const layerState = animatorLayerData.layerState;\n    const { destPlayData } = animatorLayerData;\n\n    const animatorStateData = this._getAnimatorStateData(name, crossState, animatorLayerData);\n    const duration = crossState._getDuration();\n    const offset = duration * transition.offset;\n    destPlayData.reset(crossState, animatorStateData, offset);\n\n    switch (layerState) {\n      // Maybe not play, maybe end.\n      case LayerState.Standby:\n        animatorLayerData.layerState = LayerState.FixedCrossFading;\n        this._clearCrossData(animatorLayerData);\n        this._prepareStandbyCrossFading(animatorLayerData);\n        break;\n      case LayerState.Playing:\n        animatorLayerData.layerState = LayerState.CrossFading;\n        this._clearCrossData(animatorLayerData);\n        this._prepareCrossFading(animatorLayerData);\n        break;\n      case LayerState.CrossFading:\n        animatorLayerData.layerState = LayerState.FixedCrossFading;\n        this._prepareFixedPoseCrossFading(animatorLayerData);\n        break;\n      case LayerState.FixedCrossFading:\n        this._prepareFixedPoseCrossFading(animatorLayerData);\n        break;\n    }\n\n    animatorLayerData.crossFadeTransition = transition;\n  }\n\n  private _fireAnimationEvents(\n    playState: AnimatorStatePlayData,\n    eventHandlers: AnimationEventHandler[],\n    lastClipTime: number,\n    clipTime: number\n  ): void {\n    const { state } = playState;\n    const clipDuration = state.clip.length;\n    if (this.speed >= 0) {\n      if (clipTime < lastClipTime) {\n        this._fireSubAnimationEvents(playState, eventHandlers, lastClipTime, state.clipEndTime * clipDuration);\n        playState.currentEventIndex = 0;\n        this._fireSubAnimationEvents(playState, eventHandlers, state.clipStartTime * clipDuration, clipTime);\n      } else {\n        this._fireSubAnimationEvents(playState, eventHandlers, lastClipTime, clipTime);\n      }\n    } else {\n      if (clipTime > lastClipTime) {\n        this._fireBackwardSubAnimationEvents(\n          playState,\n          eventHandlers,\n          lastClipTime,\n          state.clipStartTime * clipDuration\n        );\n        playState.currentEventIndex = eventHandlers.length - 1;\n        this._fireBackwardSubAnimationEvents(playState, eventHandlers, state.clipEndTime * clipDuration, clipTime);\n      } else {\n        this._fireBackwardSubAnimationEvents(playState, eventHandlers, lastClipTime, clipTime);\n      }\n    }\n  }\n\n  private _fireSubAnimationEvents(\n    playState: AnimatorStatePlayData,\n    eventHandlers: AnimationEventHandler[],\n    lastClipTime: number,\n    curClipTime: number\n  ): void {\n    let eventIndex = playState.currentEventIndex;\n    for (let n = eventHandlers.length; eventIndex < n; eventIndex++) {\n      const eventHandler = eventHandlers[eventIndex];\n      const { time, parameter } = eventHandler.event;\n\n      if (time > curClipTime) {\n        break;\n      }\n\n      const { handlers } = eventHandler;\n      if (time >= lastClipTime) {\n        for (let j = handlers.length - 1; j >= 0; j--) {\n          handlers[j](parameter);\n        }\n        playState.currentEventIndex = Math.min(eventIndex + 1, n - 1);\n      }\n    }\n  }\n\n  private _fireBackwardSubAnimationEvents(\n    playState: AnimatorStatePlayData,\n    eventHandlers: AnimationEventHandler[],\n    lastClipTime: number,\n    curClipTime: number\n  ): void {\n    let eventIndex = playState.currentEventIndex;\n    for (; eventIndex >= 0; eventIndex--) {\n      const eventHandler = eventHandlers[eventIndex];\n      const { time, parameter } = eventHandler.event;\n\n      if (time < curClipTime) {\n        break;\n      }\n\n      const { handlers } = eventHandler;\n      if (time <= lastClipTime) {\n        for (let j = handlers.length - 1; j >= 0; j--) {\n          handlers[j](parameter);\n        }\n        playState.currentEventIndex = Math.max(eventIndex - 1, 0);\n      }\n    }\n  }\n\n  private _callAnimatorScriptOnEnter(state: AnimatorState, layerIndex: number): void {\n    const scripts = state._onStateEnterScripts;\n    for (let i = 0, n = scripts.length; i < n; i++) {\n      scripts[i].onStateEnter(this, state, layerIndex);\n    }\n  }\n\n  private _callAnimatorScriptOnUpdate(state: AnimatorState, layerIndex: number): void {\n    const scripts = state._onStateUpdateScripts;\n    for (let i = 0, n = scripts.length; i < n; i++) {\n      scripts[i].onStateUpdate(this, state, layerIndex);\n    }\n  }\n\n  private _callAnimatorScriptOnExit(state: AnimatorState, layerIndex: number): void {\n    const scripts = state._onStateExitScripts;\n    for (let i = 0, n = scripts.length; i < n; i++) {\n      scripts[i].onStateExit(this, state, layerIndex);\n    }\n  }\n\n  private _clearPlayData(): void {\n    this._animatorLayersData.length = 0;\n    this._crossCurveDataCollection.length = 0;\n    this._animationCurveOwners.length = 0;\n    this._animationEventHandlerPool.resetPool();\n\n    if (this._controllerUpdateFlag) {\n      this._controllerUpdateFlag.flag = false;\n    }\n  }\n}\n","import { BoolUpdateFlag } from \"../BoolUpdateFlag\";\nimport { UpdateFlagManager } from \"../UpdateFlagManager\";\nimport { AnimatorControllerLayer } from \"./AnimatorControllerLayer\";\n\n/**\n * Store the data for Animator playback.\n */\nexport class AnimatorController {\n  private _updateFlagManager: UpdateFlagManager = new UpdateFlagManager();\n  private _layers: AnimatorControllerLayer[] = [];\n  private _layersMap: Record<string, AnimatorControllerLayer> = {};\n\n  /**\n   * The layers in the controller.\n   */\n  get layers(): Readonly<AnimatorControllerLayer[]> {\n    return this._layers;\n  }\n\n  /**\n   * Get the layer by name.\n   * @param name - The layer's name.\n   */\n  findLayerByName(name: string): AnimatorControllerLayer {\n    return this._layersMap[name];\n  }\n\n  /**\n   * Add a layer to the controller.\n   * @param layer - The layer to add\n   */\n  addLayer(layer: AnimatorControllerLayer): void {\n    this._layers.push(layer);\n    this._layersMap[layer.name] = layer;\n    this._distributeUpdateFlag();\n  }\n\n  /**\n   * Remove a layer from the controller.\n   * @param layerIndex - The index of the AnimatorLayer\n   */\n  removeLayer(layerIndex: number): void {\n    const theLayer = this.layers[layerIndex];\n    this._layers.splice(layerIndex, 1);\n    delete this._layersMap[theLayer.name];\n    this._distributeUpdateFlag();\n  }\n\n  /**\n   * Clear layers.\n   */\n  clearLayers(): void {\n    this._layers.length = 0;\n    for (let name in this._layersMap) {\n      delete this._layersMap[name];\n    }\n    this._distributeUpdateFlag();\n  }\n\n  /**\n   * @internal\n   */\n  _registerChangeFlag(): BoolUpdateFlag {\n    return this._updateFlagManager.createFlag(BoolUpdateFlag);\n  }\n\n  private _distributeUpdateFlag(): void {\n    this._updateFlagManager.dispatch();\n  }\n}\n","import { AnimatorStateMachine } from \"./AnimatorStateMachine\";\nimport { AnimatorLayerBlendingMode } from \"./enums/AnimatorLayerBlendingMode\";\n\n/**\n * The Animation Layer contains a state machine that controls animations of a model or part of it.\n */\nexport class AnimatorControllerLayer {\n  /** The blending weight that the layers has. It is not taken into account for the first layer. */\n  weight: number = 1.0;\n  /** The blending mode used by the layer. It is not taken into account for the first layer. */\n  blendingMode: AnimatorLayerBlendingMode = AnimatorLayerBlendingMode.Override;\n  /** The state machine for the layer. */\n  stateMachine: AnimatorStateMachine;\n\n  /**\n   * @param name - The layer's name\n   */\n  constructor(public readonly name: string) {}\n}\n","import { Animator } from \"../animation/Animator\";\nimport { AnimatorState } from \"../animation/AnimatorState\";\n\n/**\n * StateMachineScript is a component that can be added to a animator state. It's the base class every script on a state derives from.\n */\nexport class StateMachineScript {\n  /** @internal */\n  _destroyed: boolean = false;\n  /** @internal */\n  _state: AnimatorState;\n  /**\n   * onStateEnter is called when a transition starts and the state machine starts to evaluate this state.\n   * @param animator - The animator\n   * @param animatorState - The state be evaluated\n   * @param layerIndex - The index of the layer where the state is located\n   */\n  onStateEnter(animator: Animator, animatorState: AnimatorState, layerIndex: number): void {}\n\n  /**\n   * onStateUpdate is called on each Update frame between onStateEnter and onStateExit callbacks.\n   * @param animator - The animator\n   * @param animatorState - The state be evaluated\n   * @param layerIndex - The index of the layer where the state is located\n   */\n  onStateUpdate(animator: Animator, animatorState: AnimatorState, layerIndex: number): void {}\n\n  /**\n   * onStateExit is called when a transition ends and the state machine finishes evaluating this state.\n   * @param animator - The animator\n   * @param animatorState - The state be evaluated\n   * @param layerIndex - The index of the layer where the state is located\n   */\n  onStateExit(animator: Animator, animatorState: AnimatorState, layerIndex: number): void {}\n\n  /**\n   * Destroy this instance.\n   */\n  destroy(): void {\n    if (this._destroyed) {\n      return;\n    }\n\n    this._state._removeStateMachineScript(this);\n    this._destroyed = true;\n  }\n}\n","import { AnimationClip } from \"./AnimationClip\";\nimport { AnimatorStateTransition } from \"./AnimatorTransition\";\nimport { WrapMode } from \"./enums/WrapMode\";\nimport { StateMachineScript } from \"./StateMachineScript\";\n\n/**\n * States are the basic building blocks of a state machine. Each state contains a AnimationClip which will play while the character is in that state.\n */\nexport class AnimatorState {\n  /** The speed of the clip. 1 is normal speed, default 1. */\n  speed: number = 1.0;\n  /** The wrap mode used in the state. */\n  wrapMode: WrapMode = WrapMode.Loop;\n\n  /** @internal */\n  _onStateEnterScripts: StateMachineScript[] = [];\n  /** @internal */\n  _onStateUpdateScripts: StateMachineScript[] = [];\n  /** @internal */\n  _onStateExitScripts: StateMachineScript[] = [];\n\n  private _clipStartTime: number = 0;\n  private _clipEndTime: number = 1;\n  private _clip: AnimationClip;\n  private _transitions: AnimatorStateTransition[] = [];\n\n  /**\n   * The transitions that are going out of the state.\n   */\n  get transitions(): Readonly<AnimatorStateTransition[]> {\n    return this._transitions;\n  }\n\n  /**\n   * The clip that is being played by this animator state.\n   */\n  get clip(): AnimationClip {\n    return this._clip;\n  }\n\n  set clip(clip: AnimationClip) {\n    this._clip = clip;\n    this._clipEndTime = Math.min(this._clipEndTime, 1);\n  }\n\n  /**\n   * The start time of the clip, the range is 0 to 1, default is 0.\n   */\n  get clipStartTime() {\n    return this._clipStartTime;\n  }\n\n  set clipStartTime(time: number) {\n    this._clipStartTime = Math.max(time, 0);\n  }\n\n  /**\n   * The end time of the clip, the range is 0 to 1, default is 1.\n   */\n  get clipEndTime() {\n    return this._clipEndTime;\n  }\n\n  set clipEndTime(time: number) {\n    this._clipEndTime = Math.min(time, 1);\n  }\n\n  /**\n   * @param name - The state's name\n   */\n  constructor(public readonly name: string) {}\n\n  /**\n   * Add an outgoing transition to the destination state.\n   * @param transition - The transition\n   */\n  addTransition(transition: AnimatorStateTransition): void {\n    this._transitions.push(transition);\n  }\n\n  /**\n   * Remove a transition from the state.\n   * @param transition - The transition\n   */\n  removeTransition(transition: AnimatorStateTransition): void {\n    const index = this._transitions.indexOf(transition);\n    index !== -1 && this._transitions.splice(index, 1);\n  }\n\n  /**\n   * Adds a state machine script class of type T to the AnimatorState.\n   * @param scriptType - The state machine script class of type T\n   */\n  addStateMachineScript<T extends StateMachineScript>(scriptType: new () => T): T {\n    const script = new scriptType();\n    script._state = this;\n\n    const { prototype } = StateMachineScript;\n    if (script.onStateEnter !== prototype.onStateEnter) {\n      this._onStateEnterScripts.push(script);\n    }\n    if (script.onStateUpdate !== prototype.onStateUpdate) {\n      this._onStateUpdateScripts.push(script);\n    }\n    if (script.onStateExit !== prototype.onStateExit) {\n      this._onStateExitScripts.push(script);\n    }\n\n    return script;\n  }\n\n  /**\n   * Clears all transitions from the state.\n   */\n  clearTransitions(): void {\n    this._transitions.length = 0;\n  }\n\n  /**\n   * @internal\n   */\n  _getDuration(): number {\n    if (this.clip) {\n      return (this._clipEndTime - this._clipStartTime) * this.clip.length;\n    }\n    return null;\n  }\n\n  /**\n   * @internal\n   */\n  _removeStateMachineScript(script: StateMachineScript): void {\n    const { prototype } = StateMachineScript;\n    if (script.onStateEnter !== prototype.onStateEnter) {\n      const index = this._onStateEnterScripts.indexOf(script);\n      index !== -1 && this._onStateEnterScripts.splice(index, 1);\n    }\n    if (script.onStateUpdate !== prototype.onStateUpdate) {\n      const index = this._onStateUpdateScripts.indexOf(script);\n      index !== -1 && this._onStateUpdateScripts.splice(index, 1);\n    }\n    if (script.onStateExit !== prototype.onStateExit) {\n      const index = this._onStateExitScripts.indexOf(script);\n      index !== -1 && this._onStateExitScripts.splice(index, 1);\n    }\n  }\n}\n","import { AnimatorState } from \"./AnimatorState\";\nexport interface AnimatorStateMap {\n  [key: string]: AnimatorState;\n}\n\n/**\n * A graph controlling the interaction of states. Each state references a motion.\n */\nexport class AnimatorStateMachine {\n  /** The list of states. */\n  readonly states: AnimatorState[] = [];\n\n  /** @internal */\n  _statesMap: AnimatorStateMap = {};\n\n  /**\n   * Add a state to the state machine.\n   * @param name - The name of the new state\n   */\n  addState(name: string): AnimatorState {\n    let state = this.findStateByName(name);\n    if (!state) {\n      state = new AnimatorState(name);\n      this.states.push(state);\n      this._statesMap[name] = state;\n    } else {\n      console.warn(`The state named ${name} has existed.`);\n    }\n    return state;\n  }\n\n  /**\n   * Remove a state from the state machine.\n   * @param state - The state\n   */\n  removeState(state: AnimatorState): void {\n    const { name } = state;\n    const index = this.states.indexOf(state);\n    if (index > -1) {\n      this.states.splice(index, 1);\n    }\n    delete this._statesMap[name];\n  }\n\n  /**\n   * Get the state by name.\n   * @param name - The layer's name\n   */\n  findStateByName(name: string): AnimatorState {\n    return this._statesMap[name];\n  }\n\n  /**\n   * Makes a unique state name in the state machine.\n   * @param name - Desired name for the state.\n   * @returns Unique name.\n   */\n  makeUniqueStateName(name: string): string {\n    const { _statesMap } = this;\n    const originName = name;\n    let index = 0;\n    while (_statesMap[name]) {\n      name = `${originName} ${index}`;\n      index++;\n    }\n    return name;\n  }\n}\n","/**\n * Animation interpolation method.\n */\nexport enum InterpolationType {\n  /** Linear interpolation */\n  Linear,\n  /** Cubic spline interpolation */\n  CubicSpine,\n  /** Stepped interpolation */\n  Step,\n  /** Hermite interpolation */\n  Hermite\n}\n","import { Quaternion, Vector2, Vector3, Vector4 } from \"@oasis-engine/math\";\nimport { InterpolableValueType } from \"./enums/InterpolableValueType\";\nimport { InterpolationType } from \"./enums/InterpolationType\";\nimport {\n  FloatArrayKeyframe,\n  FloatKeyframe,\n  InterpolableValue,\n  QuaternionKeyframe,\n  UnionInterpolableKeyframe,\n  Vector2Keyframe,\n  Vector3Keyframe,\n  Vector4Keyframe\n} from \"./KeyFrame\";\n\n/**\n * Store a collection of Keyframes that can be evaluated over time.\n */\nexport class AnimationCurve {\n  /** All keys defined in the animation curve. */\n  keys: UnionInterpolableKeyframe[] = [];\n  /** The interpolationType of the animation curve. */\n  interpolation: InterpolationType;\n\n  /** @internal */\n  _valueSize: number;\n  /** @internal */\n  _valueType: InterpolableValueType;\n\n  private _tempValue: InterpolableValue;\n  private _length: number = 0;\n  private _currentIndex: number = 0;\n\n  /**\n   * Animation curve length in seconds.\n   */\n  get length(): number {\n    return this._length;\n  }\n\n  /**\n   * Add a new key to the curve.\n   * @param key - The keyframe\n   */\n  addKey(key: UnionInterpolableKeyframe): void {\n    const { time } = key;\n    this.keys.push(key);\n    if (time > this._length) {\n      this._length = time;\n    }\n\n    if (!this._valueSize) {\n      if (typeof key.value == \"number\") {\n        this._valueSize = 1;\n        this._valueType = InterpolableValueType.Float;\n        this._tempValue = 0;\n      }\n      if (key.value instanceof Vector2) {\n        this._valueSize = 2;\n        this._valueType = InterpolableValueType.Vector2;\n        this._tempValue = new Vector2();\n      }\n      if (key.value instanceof Vector3) {\n        this._valueSize = 3;\n        this._valueType = InterpolableValueType.Vector3;\n        this._tempValue = new Vector3();\n      }\n      if (key.value instanceof Vector4) {\n        this._valueSize = 4;\n        this._valueType = InterpolableValueType.Vector4;\n        this._tempValue = new Vector4();\n      }\n      if (key.value instanceof Quaternion) {\n        this._valueSize = 4;\n        this._valueType = InterpolableValueType.Quaternion;\n        this._tempValue = new Quaternion();\n      }\n\n      if (key.value instanceof Float32Array) {\n        const size = key.value.length;\n        this._valueSize = size;\n        this._valueType = InterpolableValueType.FloatArray;\n        this._tempValue = new Float32Array(size);\n      }\n    }\n    this.keys.sort((a, b) => a.time - b.time);\n  }\n\n  /**\n   * Evaluate the curve at time.\n   * @param time - The time within the curve you want to evaluate\n   */\n  evaluate(time: number): InterpolableValue {\n    return this._evaluate(time, this._tempValue);\n  }\n\n  /**\n   * Removes the keyframe at index and inserts key.\n   * @param index - The index of the key to move\n   * @param key - The key to insert\n   */\n  moveKey(index: number, key: UnionInterpolableKeyframe): void {\n    this.keys[index] = key;\n  }\n\n  /**\n   * Removes a key.\n   * @param index - The index of the key to remove\n   */\n  removeKey(index: number): void {\n    this.keys.splice(index, 1);\n    const { keys } = this;\n    const count = this.keys.length;\n    let newLength = 0;\n    for (let i = count - 1; i >= 0; i--) {\n      if (keys[i].time > length) {\n        newLength = keys[i].time;\n      }\n    }\n    this._length = newLength;\n  }\n\n  /**\n   * @internal\n   * Samples an animation at a given time.\n   * @param time - The time to sample an animation\n   * @param out - The value calculated\n   */\n  _evaluate(time: number, out: Exclude<InterpolableValue, number>) {\n    const { keys, interpolation, _valueType } = this;\n    const { length } = this.keys;\n\n    // Compute curIndex and nextIndex.\n    let curIndex = this._currentIndex;\n\n    // Reset loop.\n    if (curIndex !== -1 && time < keys[curIndex].time) {\n      curIndex = -1;\n    }\n\n    let nextIndex = curIndex + 1;\n    while (nextIndex < length) {\n      if (time < keys[nextIndex].time) {\n        break;\n      }\n      curIndex++;\n      nextIndex++;\n    }\n    this._currentIndex = curIndex;\n    // Evaluate value.\n    let value: InterpolableValue;\n    if (curIndex === -1) {\n      value = this._evaluateStep(0, out);\n    } else if (nextIndex === length) {\n      value = this._evaluateStep(curIndex, out);\n    } else {\n      // Time between first frame and end frame.\n      const curFrameTime = keys[curIndex].time;\n      const duration = keys[nextIndex].time - curFrameTime;\n      const t = (time - curFrameTime) / duration;\n      const dur = duration;\n\n      switch (interpolation) {\n        case InterpolationType.Linear:\n          value = this._evaluateLinear(curIndex, nextIndex, t, out);\n          break;\n        case InterpolationType.Step:\n          value = this._evaluateStep(curIndex, out);\n          break;\n        case InterpolationType.CubicSpine:\n        case InterpolationType.Hermite:\n          value = this._evaluateHermite(curIndex, nextIndex, t, dur, out);\n      }\n    }\n    return value;\n  }\n\n  private _evaluateLinear(\n    frameIndex: number,\n    nextFrameIndex: number,\n    t: number,\n    out: Exclude<InterpolableValue, number>\n  ): InterpolableValue {\n    const { _valueType, keys } = this;\n    switch (_valueType) {\n      case InterpolableValueType.Float:\n        return (<FloatKeyframe>keys[frameIndex]).value * (1 - t) + (<FloatKeyframe>keys[nextFrameIndex]).value * t;\n      case InterpolableValueType.FloatArray:\n        const value = (<FloatArrayKeyframe>keys[frameIndex]).value;\n        const nextValue = (<FloatArrayKeyframe>keys[nextFrameIndex]).value;\n        for (let i = 0, n = value.length; i < n; i++) {\n          out[i] = value[i] * (1 - t) + nextValue[i] * t;\n        }\n        return out;\n      case InterpolableValueType.Vector2:\n        Vector2.lerp(\n          (<Vector2Keyframe>keys[frameIndex]).value,\n          (<Vector2Keyframe>keys[nextFrameIndex]).value,\n          t,\n          <Vector2>out\n        );\n        return out;\n      case InterpolableValueType.Vector3:\n        Vector3.lerp(\n          (<Vector3Keyframe>keys[frameIndex]).value,\n          (<Vector3Keyframe>keys[nextFrameIndex]).value,\n          t,\n          <Vector3>out\n        );\n        return out;\n      case InterpolableValueType.Vector4:\n        Vector4.lerp(\n          (<Vector4Keyframe>keys[frameIndex]).value,\n          (<Vector4Keyframe>keys[nextFrameIndex]).value,\n          t,\n          <Vector4>out\n        );\n        return out;\n      case InterpolableValueType.Quaternion:\n        Quaternion.slerp(\n          (<QuaternionKeyframe>keys[frameIndex]).value,\n          (<QuaternionKeyframe>keys[nextFrameIndex]).value,\n          t,\n          <Quaternion>out\n        );\n        return out;\n    }\n  }\n\n  private _evaluateStep(frameIndex: number, out: Exclude<InterpolableValue, number>): InterpolableValue {\n    const { _valueType, keys } = this;\n    switch (_valueType) {\n      case InterpolableValueType.Float:\n        return (<FloatArrayKeyframe>keys[frameIndex]).value;\n      case InterpolableValueType.FloatArray:\n        const value = (<FloatArrayKeyframe>keys[frameIndex]).value;\n        for (let i = 0, n = value.length; i < n; i++) {\n          out[i] = value[i];\n        }\n        return out;\n      case InterpolableValueType.Vector2:\n      case InterpolableValueType.Vector3:\n      case InterpolableValueType.Vector4:\n      case InterpolableValueType.Quaternion:\n        (<Vector4>out).copyFrom(<Vector4>keys[frameIndex].value);\n        return out;\n    }\n  }\n\n  private _evaluateHermite(\n    frameIndex: number,\n    nextFrameIndex: number,\n    t: number,\n    dur: number,\n    out: Exclude<InterpolableValue, number>\n  ): InterpolableValue {\n    const { _valueSize, keys } = this;\n    const curKey = keys[frameIndex];\n    const nextKey = keys[nextFrameIndex];\n    switch (_valueSize) {\n      case 1: {\n        const t0 = (<FloatKeyframe>curKey).outTangent,\n          t1 = (<FloatKeyframe>nextKey).inTangent,\n          p0 = (<FloatKeyframe>curKey).value,\n          p1 = (<FloatKeyframe>nextKey).value;\n        if (Number.isFinite(t0) && Number.isFinite(t1)) {\n          const t2 = t * t;\n          const t3 = t2 * t;\n          const a = 2.0 * t3 - 3.0 * t2 + 1.0;\n          const b = t3 - 2.0 * t2 + t;\n          const c = t3 - t2;\n          const d = -2.0 * t3 + 3.0 * t2;\n          return a * p0 + b * t0 * dur + c * t1 * dur + d * p1;\n        } else {\n          return (<FloatKeyframe>curKey).value;\n        }\n      }\n      case 2: {\n        const p0 = (<Vector2Keyframe>curKey).value;\n        const tan0 = (<Vector2Keyframe>curKey).outTangent;\n        const p1 = (<Vector2Keyframe>nextKey).value;\n        const tan1 = (<Vector2Keyframe>nextKey).inTangent;\n\n        const t2 = t * t;\n        const t3 = t2 * t;\n        const a = 2.0 * t3 - 3.0 * t2 + 1.0;\n        const b = t3 - 2.0 * t2 + t;\n        const c = t3 - t2;\n        const d = -2.0 * t3 + 3.0 * t2;\n\n        let t0 = tan0.x,\n          t1 = tan1.x;\n        if (Number.isFinite(t0) && Number.isFinite(t1)) {\n          (<Vector2>out).x = a * p0.x + b * t0 * dur + c * t1 * dur + d * p1.x;\n        } else {\n          (<Vector2>out).x = p0.x;\n        }\n\n        (t0 = tan0.y), (t1 = tan1.y);\n        if (Number.isFinite(t0) && Number.isFinite(t1))\n          (<Vector2>out).y = a * p0.y + b * t0 * dur + c * t1 * dur + d * p1.y;\n        else {\n          (<Vector2>out).y = p0.y;\n        }\n        return out;\n      }\n      case 3: {\n        const p0 = (<Vector3Keyframe>curKey).value;\n        const tan0 = (<Vector3Keyframe>curKey).outTangent;\n        const p1 = (<Vector3Keyframe>nextKey).value;\n        const tan1 = (<Vector3Keyframe>nextKey).inTangent;\n\n        const t2 = t * t;\n        const t3 = t2 * t;\n        const a = 2.0 * t3 - 3.0 * t2 + 1.0;\n        const b = t3 - 2.0 * t2 + t;\n        const c = t3 - t2;\n        const d = -2.0 * t3 + 3.0 * t2;\n\n        let t0 = tan0.x,\n          t1 = tan1.x;\n        if (Number.isFinite(t0) && Number.isFinite(t1)) {\n          (<Vector3>out).x = a * p0.x + b * t0 * dur + c * t1 * dur + d * p1.x;\n        } else {\n          (<Vector3>out).x = p0.x;\n        }\n\n        (t0 = tan0.y), (t1 = tan1.y);\n        if (Number.isFinite(t0) && Number.isFinite(t1)) {\n          (<Vector3>out).y = a * p0.y + b * t0 * dur + c * t1 * dur + d * p1.y;\n        } else {\n          (<Vector3>out).y = p0.y;\n        }\n\n        (t0 = tan0.z), (t1 = tan1.z);\n        if (Number.isFinite(t0) && Number.isFinite(t1)) {\n          (<Vector3>out).z = a * p0.z + b * t0 * dur + c * t1 * dur + d * p1.z;\n        } else {\n          (<Vector3>out).z = p0.z;\n        }\n        return <Vector3>out;\n      }\n      case 4: {\n        const p0 = (<QuaternionKeyframe>curKey).value;\n        const tan0 = (<QuaternionKeyframe>curKey).outTangent;\n        const p1 = (<QuaternionKeyframe>nextKey).value;\n        const tan1 = (<QuaternionKeyframe>nextKey).inTangent;\n\n        const t2 = t * t;\n        const t3 = t2 * t;\n        const a = 2.0 * t3 - 3.0 * t2 + 1.0;\n        const b = t3 - 2.0 * t2 + t;\n        const c = t3 - t2;\n        const d = -2.0 * t3 + 3.0 * t2;\n\n        let t0 = tan0.x,\n          t1 = tan1.x;\n        if (Number.isFinite(t0) && Number.isFinite(t1)) {\n          (<Quaternion>out).x = a * p0.x + b * t0 * dur + c * t1 * dur + d * p1.x;\n        } else {\n          (<Quaternion>out).x = p0.x;\n        }\n\n        (t0 = tan0.y), (t1 = tan1.y);\n        if (Number.isFinite(t0) && Number.isFinite(t1)) {\n          (<Quaternion>out).y = a * p0.y + b * t0 * dur + c * t1 * dur + d * p1.y;\n        } else {\n          (<Quaternion>out).y = p0.y;\n        }\n\n        (t0 = tan0.z), (t1 = tan1.z);\n        if (Number.isFinite(t0) && Number.isFinite(t1)) {\n          (<Quaternion>out).z = a * p0.z + b * t0 * dur + c * t1 * dur + d * p1.z;\n        } else {\n          (<Quaternion>out).z = p0.z;\n        }\n\n        (t0 = tan0.w), (t1 = tan1.w);\n        if (Number.isFinite(t0) && Number.isFinite(t1)) {\n          (<Quaternion>out).w = a * p0.w + b * t0 * dur + c * t1 * dur + d * p1.w;\n        } else {\n          (<Quaternion>out).w = p0.w;\n        }\n        return <Quaternion>out;\n      }\n    }\n  }\n}\n","import { Vector2, Vector3, Vector4, Quaternion } from \"@oasis-engine/math\";\n\n/**\n * Keyframe.\n * @typeParam V - Type of Keyframe value\n */\nexport class Keyframe<V> {\n  /** The time of the Keyframe. */\n  time: number;\n  /** The value of the Keyframe. */\n  value: V;\n}\n\n/**\n * InterpolableKeyframe.\n * @typeParam T - Type of Tangent value\n * @typeParam V - Type of Keyframe value\n */\nexport class InterpolableKeyframe<T, V> extends Keyframe<V> {\n  /** Sets the incoming tangent for this key. The incoming tangent affects the slope of the curve from the previous key to this key. */\n  inTangent?: T;\n  /** Sets the outgoing tangent for this key. The outgoing tangent affects the slope of the curve from this key to the next key. */\n  outTangent?: T;\n}\n\nexport type ObjectKeyframe = Keyframe<Object>;\nexport type FloatKeyframe = InterpolableKeyframe<number, number>;\nexport type FloatArrayKeyframe = InterpolableKeyframe<Float32Array, Float32Array>;\nexport type Vector2Keyframe = InterpolableKeyframe<Vector2, Vector2>;\nexport type Vector3Keyframe = InterpolableKeyframe<Vector3, Vector3>;\nexport type Vector4Keyframe = InterpolableKeyframe<Vector4, Vector4>;\nexport type QuaternionKeyframe = InterpolableKeyframe<Vector4, Quaternion>;\n\nexport type UnionInterpolableKeyframe =\n  | FloatKeyframe\n  | FloatArrayKeyframe\n  | Vector2Keyframe\n  | Vector3Keyframe\n  | Vector4Keyframe\n  | QuaternionKeyframe;\n\nexport type InterpolableValue = number | Vector2 | Vector3 | Vector4 | Quaternion | Float32Array | Object;\n","export enum AnimatorConditionMode {\n  If,\n  IfNot,\n  Greater,\n  Less,\n  Equals,\n  NotEquals\n}\n","import { Vector4 } from \"@oasis-engine/math\";\nimport { Engine } from \"../Engine\";\nimport { Material } from \"../material/Material\";\nimport { CompareFunction } from \"../shader/enums/CompareFunction\";\nimport { CullMode } from \"../shader/enums/CullMode\";\nimport { Shader } from \"../shader/Shader\";\nimport { TextureCube } from \"../texture\";\n\n/**\n * SkyboxMaterial\n */\nexport class SkyBoxMaterial extends Material {\n  private _decodeParam: Vector4 = new Vector4(0, 5, 0, 0);\n\n  /**\n   * Whether to decode from texture with RGBM format.\n   */\n  get textureDecodeRGBM(): boolean {\n    return Boolean(this._decodeParam.x);\n  }\n\n  set textureDecodeRGBM(value: boolean) {\n    this._decodeParam.x = Number(value);\n  }\n\n  /**\n   * RGBM decode factor, default 5.0.\n   */\n  get RGBMDecodeFactor(): number {\n    return this._decodeParam.y;\n  }\n\n  set RGBMDecodeFactor(value: number) {\n    this._decodeParam.y = value;\n  }\n\n  /**\n   * Texture cube map of the sky box material.\n   */\n  get textureCubeMap(): TextureCube {\n    return this.shaderData.getTexture(\"u_cube\") as TextureCube;\n  }\n\n  set textureCubeMap(v: TextureCube) {\n    this.shaderData.setTexture(\"u_cube\", v);\n  }\n\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"skybox\"));\n\n    this.renderState.rasterState.cullMode = CullMode.Off;\n    this.renderState.depthState.compareFunction = CompareFunction.LessEqual;\n\n    this.shaderData.setVector4(\"u_cubeDecodeParam\", this._decodeParam);\n  }\n}\n","import { MathUtil, Vector3, Color } from \"@oasis-engine/math\";\nimport { Buffer } from \"../graphic/Buffer\";\nimport { BufferBindFlag } from \"../graphic/enums/BufferBindFlag\";\nimport { BufferUsage } from \"../graphic/enums/BufferUsage\";\nimport { IndexFormat } from \"../graphic/enums/IndexFormat\";\nimport { VertexElementFormat } from \"../graphic/enums/VertexElementFormat\";\nimport { VertexElement } from \"../graphic/VertexElement\";\nimport { Material } from \"../material/Material\";\nimport { BlendFactor } from \"../shader/enums/BlendFactor\";\nimport { RenderQueueType } from \"../material/enums/RenderQueueType\";\nimport { Shader, CullMode } from \"../shader\";\nimport { Texture } from \"../texture\";\nimport { MeshRenderer } from \"../mesh/MeshRenderer\";\nimport { GLCapabilityType } from \"../base/Constant\";\nimport { BufferMesh } from \"../mesh/BufferMesh\";\n\nenum DirtyFlagType {\n  Position = 0x1,\n  Velocity = 0x2,\n  Acceleration = 0x4,\n  Color = 0x8,\n  Alpha = 0x10,\n  Size = 0x20,\n  StartAngle = 0x40,\n  StartTime = 0x80,\n  LifeTime = 0x100,\n  RotateVelocity = 0x200,\n  Scale = 0x400,\n  Everything = 0xffffffff\n}\n\n/**\n * Blend mode enums of the particle renderer's material.\n */\nexport enum ParticleRendererBlendMode {\n  Transparent = 0,\n  Additive = 1\n}\n\n/**\n * Particle Renderer Component.\n */\nexport class ParticleRenderer extends MeshRenderer {\n  /** The max number of indices that Uint16Array can support. */\n  private static _uint16VertexLimit: number = 65535;\n\n  private static _getRandom(): number {\n    return Math.random() - 0.5;\n  }\n\n  private _vertexStride: number;\n  private _vertices: Float32Array;\n  private _vertexBuffer: Buffer;\n  private _maxCount: number = 1000;\n  private _position: Vector3 = new Vector3();\n  private _positionRandomness: Vector3 = new Vector3();\n  private _positionArray: Vector3[];\n  private _velocity: Vector3 = new Vector3();\n  private _velocityRandomness: Vector3 = new Vector3();\n  private _acceleration: Vector3 = new Vector3();\n  private _accelerationRandomness: Vector3 = new Vector3();\n  private _color: Color = new Color(1, 1, 1, 1);\n  private _colorRandomness: number = 0;\n  private _size: number = 1;\n  private _sizeRandomness: number = 0;\n  private _alpha: number = 1;\n  private _alphaRandomness: number = 0;\n  private _startAngle: number = 0;\n  private _startAngleRandomness: number = 0;\n  private _rotateVelocity: number = 0;\n  private _rotateVelocityRandomness: number = 0;\n  private _lifetime: number = 5;\n  private _startTimeRandomness: number = 0;\n  private _scale: number = 1;\n  private _isOnce: boolean = false;\n  private _onceTime: number = 0;\n  private _time: number = 0;\n  private _isInit: boolean = false;\n  private _isStart: boolean = false;\n  private _updateDirtyFlag: number = DirtyFlagType.Everything;\n  private _isRotateToVelocity: boolean = false;\n  private _isUseOriginColor: boolean = false;\n  private _isScaleByLifetime: boolean = false;\n  private _is2d: boolean = true;\n  private _isFadeIn: boolean = false;\n  private _isFadeOut: boolean = false;\n  private _playOnEnable: boolean = true;\n  private _blendMode: ParticleRendererBlendMode = ParticleRendererBlendMode.Transparent;\n\n  /**\n   * Sprite sheet of texture.\n   */\n  public spriteSheet: { x: number; y: number; w: number; h: number }[];\n\n  /**\n   * Texture of particle.\n   */\n  get texture(): Texture {\n    return this.getMaterial().shaderData.getTexture(\"u_texture\");\n  }\n\n  set texture(texture: Texture) {\n    if (texture) {\n      this.shaderData.enableMacro(\"particleTexture\");\n      this.getMaterial().shaderData.setTexture(\"u_texture\", texture);\n    } else {\n      this.shaderData.disableMacro(\"particleTexture\");\n    }\n  }\n\n  /**\n   * Position of particles.\n   */\n  get position(): Vector3 {\n    return this._position;\n  }\n\n  set position(value: Vector3) {\n    this._updateDirtyFlag |= DirtyFlagType.Position;\n    this._position = value;\n  }\n\n  /**\n   * Random range of positions.\n   */\n  get positionRandomness(): Vector3 {\n    return this._positionRandomness;\n  }\n\n  set positionRandomness(value: Vector3) {\n    this._updateDirtyFlag |= DirtyFlagType.Position;\n    this._positionRandomness = value;\n  }\n\n  /**\n   * Array of fixed positions.\n   */\n  get positionArray(): Vector3[] {\n    return this._positionArray;\n  }\n\n  set positionArray(value: Vector3[]) {\n    this._updateDirtyFlag |= DirtyFlagType.Position;\n    this._positionArray = value;\n  }\n\n  /**\n   * Velocity of particles.\n   */\n  get velocity(): Vector3 {\n    return this._velocity;\n  }\n\n  set velocity(value: Vector3) {\n    this._updateDirtyFlag |= DirtyFlagType.Velocity;\n    this._velocity = value;\n  }\n\n  /**\n   * Random range of velocity.\n   */\n  get velocityRandomness(): Vector3 {\n    return this._velocityRandomness;\n  }\n\n  set velocityRandomness(value: Vector3) {\n    this._updateDirtyFlag |= DirtyFlagType.Velocity;\n    this._velocityRandomness = value;\n  }\n\n  /**\n   * Acceleration of particles.\n   */\n  get acceleration(): Vector3 {\n    return this._acceleration;\n  }\n\n  set acceleration(value: Vector3) {\n    this._updateDirtyFlag |= DirtyFlagType.Acceleration;\n    this._acceleration = value;\n  }\n\n  /**\n   * Random range of acceleration.\n   */\n  get accelerationRandomness(): Vector3 {\n    return this._accelerationRandomness;\n  }\n\n  set accelerationRandomness(value: Vector3) {\n    this._updateDirtyFlag |= DirtyFlagType.Acceleration;\n    this._accelerationRandomness = value;\n  }\n\n  /**\n   * Color of particles.\n   */\n  get color(): Color {\n    return this._color;\n  }\n\n  set color(value: Color) {\n    this._updateDirtyFlag |= DirtyFlagType.Color;\n    this._color = value;\n  }\n\n  /**\n   * Random range of color.\n   */\n  get colorRandomness(): number {\n    return this._colorRandomness;\n  }\n\n  set colorRandomness(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.Color;\n    this._colorRandomness = value;\n  }\n\n  /**\n   * Size of particles.\n   */\n  get size(): number {\n    return this._size;\n  }\n\n  set size(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.Size;\n    this._size = value;\n  }\n\n  /**\n   * Random range of size.\n   */\n  get sizeRandomness(): number {\n    return this._sizeRandomness;\n  }\n\n  set sizeRandomness(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.Size;\n    this._sizeRandomness = value;\n  }\n\n  /**\n   * Alpha of particles.\n   */\n  get alpha(): number {\n    return this._alpha;\n  }\n\n  set alpha(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.Alpha;\n    this._alpha = value;\n  }\n\n  /**\n   * Random range of alpha.\n   */\n  get alphaRandomness(): number {\n    return this._alphaRandomness;\n  }\n\n  set alphaRandomness(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.Alpha;\n    this._alphaRandomness = value;\n  }\n\n  /**\n   * Angle of particles.\n   */\n  get angle(): number {\n    return this._startAngle;\n  }\n\n  set angle(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.StartAngle;\n    this._startAngle = value;\n  }\n\n  /**\n   * Random range of angle.\n   */\n  get angleRandomness(): number {\n    return this._startAngleRandomness;\n  }\n\n  set angleRandomness(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.StartAngle;\n    this._startAngleRandomness = value;\n  }\n\n  /**\n   * Rotate velocity of particles.\n   */\n  get rotateVelocity(): number {\n    return this._rotateVelocity;\n  }\n\n  set rotateVelocity(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.RotateVelocity;\n    this._rotateVelocity = value;\n  }\n\n  /**\n   * Random range of rotate velocity.\n   */\n  get rotateVelocityRandomness(): number {\n    return this._rotateVelocityRandomness;\n  }\n\n  set rotateVelocityRandomness(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.RotateVelocity;\n    this._rotateVelocityRandomness = value;\n  }\n\n  /**\n   * Lifetime of particles.\n   */\n  get lifetime(): number {\n    return this._lifetime;\n  }\n\n  set lifetime(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.LifeTime;\n    this._lifetime = value;\n    this._onceTime = 0;\n  }\n\n  /**\n   * Random range of start time.\n   */\n  get startTimeRandomness(): number {\n    return this._startTimeRandomness;\n  }\n\n  set startTimeRandomness(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.StartTime;\n    this._startTimeRandomness = value;\n    this._onceTime = 0;\n  }\n\n  /**\n   * Scale factor of particles.\n   */\n  get scale(): number {\n    return this._scale;\n  }\n\n  set scale(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.Scale;\n    this._scale = value;\n  }\n\n  /**\n   * Max count of particles.\n   */\n  get maxCount(): number {\n    return this._maxCount;\n  }\n\n  set maxCount(value: number) {\n    this._isStart = false;\n    this._isInit = false;\n    this._maxCount = value;\n    this._updateDirtyFlag = DirtyFlagType.Everything;\n    this.mesh = this._createMesh();\n\n    this._updateBuffer();\n\n    this._isInit = true;\n    this.shaderData.setFloat(\"u_time\", 0);\n  }\n\n  /**\n   * Whether play once.\n   */\n  get isOnce(): boolean {\n    return this._isOnce;\n  }\n\n  set isOnce(value: boolean) {\n    this._time = 0;\n    this.shaderData.setInt(\"u_once\", value ? 1 : 0);\n    this._isOnce = value;\n  }\n\n  /**\n   * Whether follow the direction of velocity.\n   */\n  get isRotateToVelocity(): boolean {\n    return this._isRotateToVelocity;\n  }\n\n  set isRotateToVelocity(value: boolean) {\n    if (value) {\n      this.shaderData.enableMacro(\"rotateToVelocity\");\n    } else {\n      this.shaderData.disableMacro(\"rotateToVelocity\");\n    }\n\n    this._isRotateToVelocity = value;\n  }\n\n  /**\n   * Whether use origin color.\n   */\n  get isUseOriginColor(): boolean {\n    return this._isUseOriginColor;\n  }\n\n  set isUseOriginColor(value: boolean) {\n    if (value) {\n      this.shaderData.enableMacro(\"useOriginColor\");\n    } else {\n      this.shaderData.disableMacro(\"useOriginColor\");\n    }\n\n    this._isUseOriginColor = value;\n  }\n\n  /**\n   * Whether scale by lifetime.\n   */\n  get isScaleByLifetime(): boolean {\n    return this._isScaleByLifetime;\n  }\n\n  set isScaleByLifetime(value: boolean) {\n    if (value) {\n      this.shaderData.enableMacro(\"isScaleByLifetime\");\n    } else {\n      this.shaderData.disableMacro(\"isScaleByLifetime\");\n    }\n\n    this._isScaleByLifetime = value;\n  }\n\n  /**\n   * Whether 2D rendering.\n   */\n  get is2d(): boolean {\n    return this._is2d;\n  }\n\n  set is2d(value: boolean) {\n    if (value) {\n      this.shaderData.enableMacro(\"is2d\");\n    } else {\n      this.shaderData.disableMacro(\"is2d\");\n      this.getMaterial().renderState.rasterState.cullMode = CullMode.Off;\n    }\n\n    this._is2d = value;\n  }\n\n  /**\n   * Whether fade in.\n   */\n  get isFadeIn(): boolean {\n    return this._isFadeIn;\n  }\n\n  set isFadeIn(value: boolean) {\n    if (value) {\n      this.shaderData.enableMacro(\"fadeIn\");\n    } else {\n      this.shaderData.disableMacro(\"fadeIn\");\n    }\n\n    this._isFadeIn = value;\n  }\n\n  /**\n   * Whether fade out.\n   */\n  get isFadeOut(): boolean {\n    return this._isFadeOut;\n  }\n\n  set isFadeOut(value: boolean) {\n    if (value) {\n      this.shaderData.enableMacro(\"fadeOut\");\n    } else {\n      this.shaderData.disableMacro(\"fadeOut\");\n    }\n\n    this._isFadeOut = value;\n  }\n\n  /**\n   * Whether play on enable.\n   */\n  get playOnEnable(): boolean {\n    return this._playOnEnable;\n  }\n\n  set playOnEnable(value: boolean) {\n    this._playOnEnable = value;\n\n    if (value) {\n      this.start();\n    } else {\n      this.stop();\n    }\n  }\n\n  /**\n   * Blend mode of the particle renderer's material.\n   */\n  get blendMode(): ParticleRendererBlendMode {\n    return this._blendMode;\n  }\n\n  set blendMode(value: ParticleRendererBlendMode) {\n    const blendState = this.getMaterial().renderState.blendState;\n    const target = blendState.targetBlendState;\n\n    if (value === ParticleRendererBlendMode.Transparent) {\n      target.enabled = true;\n      target.sourceColorBlendFactor = BlendFactor.SourceAlpha;\n      target.destinationColorBlendFactor = BlendFactor.OneMinusSourceAlpha;\n      target.sourceAlphaBlendFactor = BlendFactor.One;\n      target.destinationAlphaBlendFactor = BlendFactor.OneMinusSourceAlpha;\n    } else if (value === ParticleRendererBlendMode.Additive) {\n      target.enabled = true;\n      target.sourceColorBlendFactor = BlendFactor.SourceAlpha;\n      target.destinationColorBlendFactor = BlendFactor.One;\n      target.sourceAlphaBlendFactor = BlendFactor.One;\n      target.destinationAlphaBlendFactor = BlendFactor.OneMinusSourceAlpha;\n    }\n\n    this._blendMode = value;\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.setMaterial(this._createMaterial());\n  }\n\n  /**\n   * @override\n   * @internal\n   */\n  update(deltaTime: number): void {\n    if (!this._isInit || !this._isStart) {\n      return;\n    }\n\n    // Stop after play once\n    if (this._isOnce && this._time > this._onceTime) {\n      return this.stop();\n    }\n\n    if (this._updateDirtyFlag) {\n      this._updateBuffer();\n      this._updateDirtyFlag = 0;\n    }\n\n    this._time += deltaTime / 1000;\n    this.shaderData.setFloat(\"u_time\", this._time);\n  }\n\n  /**\n   * @override\n   * @internal\n   */\n  _onEnable(): void {\n    super._onEnable();\n\n    if (this._playOnEnable) {\n      this.start();\n    }\n  }\n\n  /**\n   * Start emitting.\n   */\n  start(): void {\n    this._isStart = true;\n    this._time = 0;\n  }\n\n  /**\n   * Stop emitting.\n   */\n  stop(): void {\n    this._isStart = false;\n  }\n\n  private _createMaterial(): Material {\n    const material = new Material(this.engine, Shader.find(\"particle-shader\"));\n    const { renderState } = material;\n    const target = renderState.blendState.targetBlendState;\n\n    target.enabled = true;\n    target.sourceColorBlendFactor = BlendFactor.SourceAlpha;\n    target.destinationColorBlendFactor = BlendFactor.OneMinusSourceAlpha;\n    target.sourceAlphaBlendFactor = BlendFactor.One;\n    target.destinationAlphaBlendFactor = BlendFactor.OneMinusSourceAlpha;\n\n    renderState.depthState.writeEnabled = false;\n\n    material.renderQueueType = RenderQueueType.Transparent;\n\n    this.isUseOriginColor = true;\n    this.is2d = true;\n    this.isFadeOut = true;\n\n    return material;\n  }\n\n  private _createMesh(): BufferMesh {\n    const mesh = new BufferMesh(this._entity.engine, \"particleMesh\");\n    const vertexStride = 96;\n    const vertexCount = this._maxCount * 4;\n    const vertexFloatCount = vertexCount * vertexStride;\n    const vertices = new Float32Array(vertexFloatCount);\n    let indices: Uint16Array | Uint32Array = null;\n    let useUint32: boolean = false;\n    if (vertexCount > ParticleRenderer._uint16VertexLimit) {\n      if (this.engine._hardwareRenderer.canIUse(GLCapabilityType.elementIndexUint)) {\n        useUint32 = true;\n        indices = new Uint32Array(6 * this._maxCount);\n      } else {\n        throw Error(\"The vertex count is over limit.\");\n      }\n    } else {\n      indices = new Uint16Array(6 * this._maxCount);\n    }\n\n    for (let i = 0, idx = 0; i < this._maxCount; ++i) {\n      let startIndex = i * 4;\n      indices[idx++] = startIndex;\n      indices[idx++] = startIndex + 1;\n      indices[idx++] = startIndex + 2;\n      indices[idx++] = startIndex;\n      indices[idx++] = startIndex + 2;\n      indices[idx++] = startIndex + 3;\n    }\n\n    const vertexElements = [\n      new VertexElement(\"a_position\", 0, VertexElementFormat.Vector3, 0),\n      new VertexElement(\"a_velocity\", 12, VertexElementFormat.Vector3, 0),\n      new VertexElement(\"a_acceleration\", 24, VertexElementFormat.Vector3, 0),\n      new VertexElement(\"a_color\", 36, VertexElementFormat.Vector4, 0),\n      new VertexElement(\"a_lifeAndSize\", 52, VertexElementFormat.Vector4, 0),\n      new VertexElement(\"a_rotation\", 68, VertexElementFormat.Vector2, 0),\n      new VertexElement(\"a_uv\", 76, VertexElementFormat.Vector3, 0),\n      new VertexElement(\"a_normalizedUv\", 88, VertexElementFormat.Vector2, 0)\n    ];\n\n    const vertexBuffer = new Buffer(\n      this.engine,\n      BufferBindFlag.VertexBuffer,\n      vertexFloatCount * 4,\n      BufferUsage.Dynamic\n    );\n\n    const indexBuffer = new Buffer(this.engine, BufferBindFlag.IndexBuffer, indices, BufferUsage.Dynamic);\n\n    mesh.setVertexBufferBinding(vertexBuffer, vertexStride);\n    mesh.setIndexBufferBinding(indexBuffer, useUint32 ? IndexFormat.UInt32 : IndexFormat.UInt16);\n    mesh.setVertexElements(vertexElements);\n    mesh.addSubMesh(0, indices.length);\n\n    this._vertexBuffer = vertexBuffer;\n    this._vertexStride = vertexStride / 4;\n    this._vertices = vertices;\n    return mesh;\n  }\n\n  private _updateBuffer(): void {\n    for (let x = 0; x < this._maxCount; x++) {\n      this._updateSingleBuffer(x);\n    }\n\n    this._vertexBuffer.setData(this._vertices);\n  }\n\n  private _updateSingleBuffer(i: number): void {\n    const { _updateDirtyFlag, _vertices: vertices, _vertexStride: vertexStride } = this;\n    const { _getRandom: getRandom } = ParticleRenderer;\n    const offset = i * 4;\n\n    const k0 = offset * vertexStride;\n    const k1 = (offset + 1) * vertexStride;\n    const k2 = (offset + 2) * vertexStride;\n    const k3 = (offset + 3) * vertexStride;\n\n    if (_updateDirtyFlag & DirtyFlagType.Position) {\n      let { x, y, z } = this._position;\n      const { _positionArray, _positionRandomness } = this;\n\n      if (_positionArray) {\n        if (_positionArray.length !== this._maxCount) {\n          throw Error(\"The length of positionArray must be equal to maxCount.\");\n        }\n        const pos = _positionArray[i];\n\n        x += pos.x;\n        y += pos.y;\n        z += pos.z;\n      } else {\n        x += getRandom() * _positionRandomness.x;\n        y += getRandom() * _positionRandomness.y;\n        z += getRandom() * _positionRandomness.z;\n      }\n\n      vertices[k0] = vertices[k1] = vertices[k2] = vertices[k3] = x;\n      vertices[k0 + 1] = vertices[k1 + 1] = vertices[k2 + 1] = vertices[k3 + 1] = y;\n      vertices[k0 + 2] = vertices[k1 + 2] = vertices[k2 + 2] = vertices[k3 + 2] = z;\n    }\n\n    if (_updateDirtyFlag & DirtyFlagType.Velocity) {\n      const { _velocity, _velocityRandomness } = this;\n\n      vertices[k0 + 3] =\n        vertices[k1 + 3] =\n        vertices[k2 + 3] =\n        vertices[k3 + 3] =\n          _velocity.x + getRandom() * _velocityRandomness.x;\n      vertices[k0 + 4] =\n        vertices[k1 + 4] =\n        vertices[k2 + 4] =\n        vertices[k3 + 4] =\n          _velocity.y + getRandom() * _velocityRandomness.y;\n      vertices[k0 + 5] =\n        vertices[k1 + 5] =\n        vertices[k2 + 5] =\n        vertices[k3 + 5] =\n          _velocity.z + getRandom() * _velocityRandomness.z;\n    }\n\n    if (_updateDirtyFlag & DirtyFlagType.Acceleration) {\n      const { _acceleration, _accelerationRandomness } = this;\n\n      vertices[k0 + 6] =\n        vertices[k1 + 6] =\n        vertices[k2 + 6] =\n        vertices[k3 + 6] =\n          _acceleration.x + getRandom() * _accelerationRandomness.x;\n      vertices[k0 + 7] =\n        vertices[k1 + 7] =\n        vertices[k2 + 7] =\n        vertices[k3 + 7] =\n          _acceleration.y + getRandom() * _accelerationRandomness.y;\n      vertices[k0 + 8] =\n        vertices[k1 + 8] =\n        vertices[k2 + 8] =\n        vertices[k3 + 8] =\n          _acceleration.z + getRandom() * _accelerationRandomness.z;\n    }\n\n    if (_updateDirtyFlag & DirtyFlagType.Color) {\n      const { _color, _colorRandomness } = this;\n\n      vertices[k0 + 9] =\n        vertices[k1 + 9] =\n        vertices[k2 + 9] =\n        vertices[k3 + 9] =\n          MathUtil.clamp(_color.r + getRandom() * _colorRandomness, 0, 1);\n\n      vertices[k0 + 10] =\n        vertices[k1 + 10] =\n        vertices[k2 + 10] =\n        vertices[k3 + 10] =\n          MathUtil.clamp(_color.g + getRandom() * _colorRandomness, 0, 1);\n      vertices[k0 + 11] =\n        vertices[k1 + 11] =\n        vertices[k2 + 11] =\n        vertices[k3 + 11] =\n          MathUtil.clamp(_color.b + getRandom() * _colorRandomness, 0, 1);\n    }\n\n    if (_updateDirtyFlag & DirtyFlagType.Alpha) {\n      vertices[k0 + 12] =\n        vertices[k1 + 12] =\n        vertices[k2 + 12] =\n        vertices[k3 + 12] =\n          MathUtil.clamp(this._alpha + getRandom() * this._alphaRandomness, 0, 1);\n    }\n\n    if (_updateDirtyFlag & DirtyFlagType.StartTime) {\n      vertices[k0 + 13] =\n        vertices[k1 + 13] =\n        vertices[k2 + 13] =\n        vertices[k3 + 13] =\n          Math.random() * this._startTimeRandomness;\n    }\n\n    if (_updateDirtyFlag & DirtyFlagType.LifeTime) {\n      const { _lifetime } = this;\n\n      vertices[k0 + 14] =\n        vertices[k1 + 14] =\n        vertices[k2 + 14] =\n        vertices[k3 + 14] =\n          _lifetime + getRandom() * _lifetime;\n    }\n\n    // Update the duration of play once when startTime or lifetime changes.\n    if (_updateDirtyFlag & DirtyFlagType.StartTime || _updateDirtyFlag & DirtyFlagType.LifeTime) {\n      this._onceTime = Math.max(this._onceTime, vertices[k0 + 13] + vertices[k0 + 14]);\n    }\n\n    if (_updateDirtyFlag & DirtyFlagType.Size) {\n      const { _size } = this;\n\n      vertices[k0 + 15] =\n        vertices[k1 + 15] =\n        vertices[k2 + 15] =\n        vertices[k3 + 15] =\n          Math.max(_size + getRandom() * this._sizeRandomness * _size * 2, 0);\n    }\n\n    if (_updateDirtyFlag & DirtyFlagType.Scale) {\n      vertices[k0 + 16] = vertices[k1 + 16] = vertices[k2 + 16] = vertices[k3 + 16] = this._scale;\n    }\n\n    if (_updateDirtyFlag & DirtyFlagType.StartAngle) {\n      vertices[k0 + 17] =\n        vertices[k1 + 17] =\n        vertices[k2 + 17] =\n        vertices[k3 + 17] =\n          this._startAngle + getRandom() * Math.PI * this._startAngleRandomness * 2;\n    }\n\n    if (_updateDirtyFlag & DirtyFlagType.RotateVelocity) {\n      vertices[k0 + 18] =\n        vertices[k1 + 18] =\n        vertices[k2 + 18] =\n        vertices[k3 + 18] =\n          this._rotateVelocity + getRandom() * this._rotateVelocityRandomness;\n    }\n\n    this._updateSingleUv(i, k0, k1, k2, k3);\n  }\n\n  private _updateSingleUv(i: number, k0: number, k1: number, k2: number, k3: number): void {\n    const { spriteSheet } = this;\n    const texture = this.getMaterial().shaderData.getTexture(\"u_texture\");\n    const vertices = this._vertices;\n\n    if (texture) {\n      const width = texture.width;\n      const height = texture.height;\n\n      if (spriteSheet) {\n        const { x, y, w, h } = spriteSheet[i % spriteSheet.length];\n\n        const u = x / width;\n        const v = y / height;\n        const p = u + w / width;\n        const q = v + h / height;\n        const ratio = h / w;\n\n        // left bottom\n        vertices[k0 + 19] = u;\n        vertices[k0 + 20] = q;\n        vertices[k0 + 21] = ratio;\n\n        // right bottom\n        vertices[k1 + 19] = p;\n        vertices[k1 + 20] = q;\n        vertices[k1 + 21] = ratio;\n\n        // right top\n        vertices[k2 + 19] = p;\n        vertices[k2 + 20] = v;\n        vertices[k2 + 21] = ratio;\n\n        // left top\n        vertices[k3 + 19] = u;\n        vertices[k3 + 20] = v;\n        vertices[k3 + 21] = ratio;\n      } else {\n        const ratio = height / width;\n\n        // left bottom\n        vertices[k0 + 19] = 0;\n        vertices[k0 + 20] = 1;\n        vertices[k0 + 21] = ratio;\n\n        // right bottom\n        vertices[k1 + 19] = 1;\n        vertices[k1 + 20] = 1;\n        vertices[k1 + 21] = ratio;\n\n        // right top\n        vertices[k2 + 19] = 1;\n        vertices[k2 + 20] = 0;\n        vertices[k2 + 21] = ratio;\n\n        // left top\n        vertices[k3 + 19] = 0;\n        vertices[k3 + 20] = 0;\n        vertices[k3 + 21] = ratio;\n      }\n    } else {\n      // left bottom\n      vertices[k0 + 19] = 0;\n      vertices[k0 + 20] = 0;\n      vertices[k0 + 21] = 1;\n\n      // right bottom\n      vertices[k1 + 19] = 1;\n      vertices[k1 + 20] = 0;\n      vertices[k1 + 21] = 1;\n\n      // right top\n      vertices[k2 + 19] = 1;\n      vertices[k2 + 20] = 1;\n      vertices[k2 + 21] = 1;\n\n      // left top\n      vertices[k3 + 19] = 0;\n      vertices[k3 + 20] = 1;\n      vertices[k3 + 21] = 1;\n    }\n\n    vertices[k0 + 22] = -0.5;\n    vertices[k0 + 23] = -0.5;\n    vertices[k1 + 22] = 0.5;\n    vertices[k1 + 23] = -0.5;\n    vertices[k2 + 22] = 0.5;\n    vertices[k2 + 23] = 0.5;\n    vertices[k3 + 22] = -0.5;\n    vertices[k3 + 23] = 0.5;\n  }\n}\n","import { Engine } from \"../Engine\";\nimport { Material } from \"../material/Material\";\nimport { BlendFactor, Shader } from \"../shader\";\nimport FRAG_SHADER from \"./trail.fs.glsl\";\nimport VERT_SHADER from \"./trail.vs.glsl\";\n\nShader.create(\"trail\", VERT_SHADER, FRAG_SHADER);\n\nexport class TrailMaterial extends Material {\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"trail\"));\n\n    const target = this.renderState.blendState.targetBlendState;\n    target.enabled = true;\n    target.sourceColorBlendFactor = target.sourceAlphaBlendFactor = BlendFactor.SourceAlpha;\n    target.destinationColorBlendFactor = target.destinationAlphaBlendFactor = BlendFactor.One;\n\n    this.renderState.depthState.writeEnabled = false;\n  }\n}\n","import { Matrix, Quaternion, Vector3 } from \"@oasis-engine/math\";\nimport { Camera } from \"../Camera\";\nimport { Entity } from \"../Entity\";\nimport { Buffer } from \"../graphic/Buffer\";\nimport { BufferUsage } from \"../graphic/enums/BufferUsage\";\nimport { MeshTopology } from \"../graphic/enums/MeshTopology\";\nimport { VertexElementFormat } from \"../graphic/enums/VertexElementFormat\";\nimport { VertexElement } from \"../graphic/VertexElement\";\nimport { BufferMesh } from \"../mesh/BufferMesh\";\nimport { MeshRenderer } from \"../mesh/MeshRenderer\";\nimport { Texture2D } from \"../texture\";\nimport { TrailMaterial } from \"./TrailMaterial\";\n\nconst _tempVector3 = new Vector3();\n\n/**\n * @deprecated\n */\nexport class TrailRenderer extends MeshRenderer {\n  private _vertexStride: number;\n  private _vertices: Float32Array;\n  private _vertexBuffer: Buffer;\n  private _stroke;\n  private _minSeg;\n  private _lifetime;\n  private _maxPointNum;\n  private _points: Array<Vector3>;\n  private _pointStates: Array<number>;\n  private _strapPoints: Array<Vector3>;\n  private _curPointNum;\n  private _prePointsNum;\n  /**\n   * @deprecated\n   */\n  constructor(entity: Entity, props: any) {\n    super(entity);\n\n    this._stroke = props.stroke || 0.2;\n    this._minSeg = props.minSeg || 0.02;\n    this._lifetime = props.lifetime || 1000;\n    this._maxPointNum = (this._lifetime / 1000.0) * entity.engine.targetFrameRate;\n\n    this._points = [];\n    this._pointStates = [];\n    this._strapPoints = [];\n    for (let i = 0; i < this._maxPointNum; i++) {\n      this._points.push(new Vector3());\n      this._pointStates.push(this._lifetime);\n\n      this._strapPoints.push(new Vector3());\n      this._strapPoints.push(new Vector3());\n    }\n    this._curPointNum = 0;\n\n    const mtl = props.material || new TrailMaterial(this.engine);\n    this.setMaterial(mtl);\n\n    this.setTexture(props.texture);\n    this._initGeometry();\n  }\n\n  /**\n   * @internal\n   */\n  update(deltaTime: number) {\n    let mov = 0,\n      newIdx = 0;\n    for (let i = 0; i < this._curPointNum; i++) {\n      this._pointStates[i] -= deltaTime;\n      if (this._pointStates[i] < 0) {\n        mov++;\n      } else if (mov > 0) {\n        newIdx = i - mov;\n\n        // Move data\n        this._pointStates[newIdx] = this._pointStates[i];\n\n        // Move point\n        this._points[newIdx].copyFrom(this._points[i]);\n      }\n    }\n    this._curPointNum -= mov;\n\n    let appendNewPoint = true;\n    if (this._curPointNum === this._maxPointNum) {\n      appendNewPoint = false;\n    } else if (this._curPointNum > 0) {\n      const lastPoint = this._points[this._points.length - 1];\n      if (Vector3.distance(this.entity.transform.worldPosition, lastPoint) < this._minSeg) {\n        appendNewPoint = false;\n      } else {\n        // debugger\n      }\n    }\n\n    if (appendNewPoint) {\n      this._pointStates[this._curPointNum] = this._lifetime;\n      this._points[this._curPointNum].copyFrom(this.entity.transform.worldPosition);\n\n      this._curPointNum++;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _render(camera: Camera): void {\n    this._updateStrapVertices(camera, this._points);\n    this._updateStrapCoords();\n    this._vertexBuffer.setData(this._vertices);\n\n    super._render(camera);\n  }\n\n  /**\n   * @deprecated\n   * Set trail texture.\n   * @param texture\n   */\n  setTexture(texture: Texture2D) {\n    if (texture) {\n      this.getMaterial().shaderData.setTexture(\"u_texture\", texture);\n    }\n  }\n\n  private _initGeometry() {\n    const mesh = new BufferMesh(this._entity.engine);\n\n    const vertexStride = 20;\n    const vertexCount = this._maxPointNum * 2;\n    const vertexFloatCount = vertexCount * vertexStride;\n    const vertices = new Float32Array(vertexFloatCount);\n    const vertexElements = [\n      new VertexElement(\"POSITION\", 0, VertexElementFormat.Vector3, 0),\n      new VertexElement(\"TEXCOORD_0\", 12, VertexElementFormat.Vector2, 0)\n    ];\n    const vertexBuffer = new Buffer(this.engine, vertexFloatCount * 4, BufferUsage.Dynamic);\n\n    mesh.setVertexBufferBinding(vertexBuffer, vertexStride);\n    mesh.setVertexElements(vertexElements);\n    mesh.addSubMesh(0, vertexCount, MeshTopology.TriangleStrip);\n\n    this._vertexBuffer = vertexBuffer;\n    this._vertexStride = vertexStride;\n    this._vertices = vertices;\n    this.mesh = mesh;\n  }\n\n  private _updateStrapVertices(camera, points: Array<Vector3>) {\n    const m: Matrix = camera.viewMatrix;\n    const e = m.elements;\n    const vx = new Vector3(e[0], e[4], e[8]);\n    const vy = new Vector3(e[1], e[5], e[9]);\n    const vz = new Vector3(e[2], e[6], e[10]);\n    const s = this._stroke;\n\n    vy.scale(s);\n\n    const up = new Vector3();\n    const down = new Vector3();\n\n    const rotation = new Quaternion();\n\n    Vector3.transformByQuat(vx, rotation, vx);\n    Vector3.transformByQuat(vy, rotation, vy);\n\n    const dy = new Vector3();\n    const cross = new Vector3();\n    const perpVector = new Vector3();\n\n    vx.normalize();\n\n    const vertices = this._vertices;\n    //-- quad pos\n    for (let i = 0; i < this._maxPointNum; i++) {\n      //-- center pos\n      if (i < this._curPointNum) {\n        const p = points[i];\n\n        if (i === this._curPointNum - 1 && i !== 0) {\n          Vector3.subtract(p, points[i - 1], perpVector);\n        } else {\n          Vector3.subtract(points[i + 1], p, perpVector);\n        }\n\n        this._projectOnPlane(perpVector, vz, perpVector);\n        perpVector.normalize();\n\n        // Calculate angle between vectors\n        let angle = Math.acos(Vector3.dot(vx, perpVector));\n        Vector3.cross(vx, perpVector, cross);\n        if (Vector3.dot(cross, vz) <= 0) {\n          angle = Math.PI * 2 - angle;\n        }\n        Quaternion.rotationAxisAngle(vz, angle, rotation);\n        Vector3.transformByQuat(vy, rotation, dy);\n\n        Vector3.add(p, dy, up);\n        Vector3.subtract(p, dy, down);\n      }\n\n      const p0 = (i * 2 * this._vertexStride) / 4;\n      const p1 = ((i * 2 + 1) * this._vertexStride) / 4;\n      vertices[p0] = up.x;\n      vertices[p0 + 1] = up.y;\n      vertices[p0 + 2] = up.z;\n\n      vertices[p1] = down.x;\n      vertices[p1 + 1] = down.y;\n      vertices[p1 + 2] = down.z;\n    }\n  }\n\n  private _updateStrapCoords() {\n    if (this._prePointsNum === this._curPointNum) {\n      return;\n    }\n\n    this._prePointsNum = this._curPointNum;\n\n    const count = this._curPointNum;\n    const texDelta = 1.0 / count;\n    const vertices = this._vertices;\n    for (let i = 0; i < count; i++) {\n      const d = 1.0 - i * texDelta;\n      const p0 = (i * 2 * this._vertexStride) / 4;\n      const p1 = ((i * 2 + 1) * this._vertexStride) / 4;\n\n      vertices[p0] = 0;\n      vertices[p0 + 1] = d;\n\n      vertices[p1] = 1.0;\n      vertices[p1 + 1] = d;\n    }\n  }\n\n  private _projectOnVector(a: Vector3, p: Vector3, out: Vector3): void {\n    const n_p = p.clone();\n    Vector3.normalize(n_p, n_p);\n    const cosine = Vector3.dot(a, n_p);\n    out.x = n_p.x * cosine;\n    out.y = n_p.y * cosine;\n    out.z = n_p.z * cosine;\n  }\n\n  private _projectOnPlane(a: Vector3, n: Vector3, out: Vector3) {\n    this._projectOnVector(a, n, _tempVector3);\n    Vector3.subtract(a, _tempVector3, out);\n  }\n}\n","import { Color } from \"@oasis-engine/math\";\nimport { Component } from \"../Component\";\nimport { Entity } from \"../Entity\";\nimport { Shader } from \"../shader/Shader\";\n\n/**\n * Fog.\n */\nexport class Fog extends Component {\n  protected static _colorProperty = Shader.getPropertyByName(\"u_fogColor\");\n\n  /**\n   * Fog color.\n   */\n  get color(): Color {\n    return this._color;\n  }\n\n  set color(value: Color) {\n    this._color = value;\n    this.scene.shaderData.setColor(Fog._colorProperty, value);\n  }\n\n  private _color: Color = new Color(1, 0, 0, 1);\n\n  /**\n   * @internal\n   */\n  constructor(entity: Entity) {\n    super(entity);\n    this.color = this._color;\n  }\n\n  /**\n   * @internal\n   * @override\n   */\n  _onEnable() {\n    this.scene.shaderData.enableMacro(\"O3_HAS_FOG\");\n  }\n\n  /**\n   * @internal\n   * @override\n   */\n  _onDisable() {\n    this.scene.shaderData.disableMacro(\"O3_HAS_FOG\");\n  }\n}\n","import { Entity } from \"../Entity\";\nimport { Shader } from \"../shader\";\nimport { Fog } from \"./Fog\";\n\n/**\n * Exponential fog.\n */\nexport class EXP2Fog extends Fog {\n  private static _densityProperty = Shader.getPropertyByName(\"u_fogDensity\");\n\n  /**\n   * Density of fog.\n   */\n  get density(): number {\n    return this._density;\n  }\n\n  set density(value: number) {\n    this._density = value;\n    this.scene.shaderData.setFloat(EXP2Fog._densityProperty, value);\n  }\n\n  private _density: number = 0.0025;\n\n  constructor(entity: Entity) {\n    super(entity);\n    this.density = this._density;\n  }\n  /**\n   * @internal\n   * @override\n   */\n  _onEnable() {\n    this.scene.shaderData.enableMacro(\"O3_FOG_EXP2\");\n  }\n\n  /**\n   * @internal\n   * @override\n   */\n  _onDisable() {\n    this.scene.shaderData.disableMacro(\"O3_FOG_EXP2\");\n  }\n}\n","import { Entity } from \"../Entity\";\nimport { Shader } from \"../shader\";\nimport { Fog } from \"./Fog\";\n\n/**\n * Linear fog, according to the distance of the camera linear difference fog density.\n */\nexport class LinearFog extends Fog {\n  private static _nearProperty = Shader.getPropertyByName(\"u_fogNear\");\n  private static _farProperty = Shader.getPropertyByName(\"u_fogFar\");\n\n  /**\n   * Start of fog.\n   */\n  get near(): number {\n    return this._near;\n  }\n\n  set near(value: number) {\n    this._near = value;\n    this.scene.shaderData.setFloat(LinearFog._nearProperty, value);\n  }\n\n  /**\n   * End of fog.\n   */\n  get far(): number {\n    return this._far;\n  }\n\n  set far(value: number) {\n    this._far = value;\n    this.scene.shaderData.setFloat(LinearFog._farProperty, value);\n  }\n\n  private _near: number = 1;\n  private _far: number = 1000;\n\n  constructor(entity: Entity) {\n    super(entity);\n    this.near = this._near;\n    this.far = this._far;\n  }\n}\n","import { Camera } from \"../Camera\";\nimport { Layer } from \"../Layer\";\nimport { Script } from \"../Script\";\nimport { RenderBufferDepthFormat, Texture, Texture2D, TextureCube, TextureFormat } from \"../texture\";\nimport { RenderTarget } from \"../texture/RenderTarget\";\n\n/**\n * Environmental probes, providing necessary capabilities such as reflection and refraction.\n * @example\n * ```ts\n * const probe = cameraEntity.addComponent( CubeProbe )\n * probe.onTextureChange = cubeTexture => {\n *   envLight.specularTexture = cubeTexture;\n *   skybox.specularTexture = cubeTexture;\n * }\n * ```\n */\nexport abstract class Probe extends Script {\n  /**\n   * Probe's layer, render everything by default.\n   */\n  probeLayer: Layer = Layer.Everything;\n\n  /**\n   * The width of the probe rendering target.\n   */\n  width: number = 1024;\n\n  /**\n   * The height of the probe rendering target.\n   */\n  height: number = 1024;\n\n  /**\n   * When using WebGL2, you can turn on MSAA at the hardware layer.\n   */\n  antiAliasing: number = 1;\n\n  /**\n   * Whether the probe is rendered to the cube color texture.\n   */\n  protected readonly _isCube: boolean = false;\n\n  private _oriCameraRenderTarget: RenderTarget;\n  private _renderTarget: RenderTarget;\n  private _renderTargetSwap: RenderTarget;\n  private _activeRenderTarget: RenderTarget;\n  private _camera: Camera;\n  private _oriCameraCullingMask: Layer;\n\n  private get _texture(): Texture {\n    return this._activeRenderTarget?.getColorTexture();\n  }\n\n  /**\n   * Provide hooks for users to exchange Texture.\n   * @remarks Prevent issue: Feedback Loops Between Textures and the Framebuffer.\n   */\n  onTextureChange(renderColorTexture: Texture) {}\n\n  /**\n   * @override\n   */\n  onBeginRender(camera: Camera): void {\n    if (!this.enabled) return;\n    this._camera = camera;\n    this._oriCameraCullingMask = camera.cullingMask;\n    camera.cullingMask = this.probeLayer;\n    if (\n      !this._activeRenderTarget ||\n      this._activeRenderTarget.width !== this.width ||\n      this._activeRenderTarget.height !== this.height ||\n      this._activeRenderTarget.antiAliasing !== this.antiAliasing\n    ) {\n      this._renderTarget = new RenderTarget(\n        this.engine,\n        this.width,\n        this.height,\n        this._isCube ? new TextureCube(this.engine, this.width) : new Texture2D(this.engine, this.width, this.height),\n        RenderBufferDepthFormat.Depth,\n        this.antiAliasing\n      );\n\n      this._renderTargetSwap = new RenderTarget(\n        this.engine,\n        this.width,\n        this.height,\n        this._isCube ? new TextureCube(this.engine, this.width) : new Texture2D(this.engine, this.width, this.height),\n        RenderBufferDepthFormat.Depth,\n        this.antiAliasing\n      );\n\n      this._activeRenderTarget = this._renderTarget;\n    }\n\n    this._oriCameraRenderTarget = camera.renderTarget;\n    camera.renderTarget = this._activeRenderTarget;\n  }\n\n  /**\n   * @override\n   */\n  onEndRender(camera: Camera): void {\n    if (!this.enabled) return;\n\n    this.onTextureChange && this.onTextureChange(this._texture);\n\n    this._activeRenderTarget =\n      this._activeRenderTarget === this._renderTarget ? this._renderTargetSwap : this._renderTarget;\n  }\n\n  protected _reset(): void {\n    if (!this.enabled) return;\n    this._camera.renderTarget = this._oriCameraRenderTarget;\n    this._camera.cullingMask = this._oriCameraCullingMask;\n  }\n}\n","import { Matrix, Vector3 } from \"@oasis-engine/math\";\nimport { Camera } from \"../Camera\";\nimport { TextureCubeFace } from \"../texture\";\nimport { Probe } from \"./Probe\";\n\nconst cacheTarget: Vector3 = new Vector3();\nconst cacheUp: Vector3 = new Vector3();\nconst cacheDir: Vector3 = new Vector3();\n\n/**\n * Cube probe, generate cubeTexture, used for dynamic environment reflection and other effects.\n */\nexport class CubeProbe extends Probe {\n  /**\n   * The position of the probe can be set, the default is the origin [0,0,0].\n   */\n  position: Vector3 = new Vector3(0, 0, 0);\n\n  /**\n   * @override\n   */\n  protected readonly _isCube: boolean = true;\n\n  private oriViewMatrix = new Matrix();\n  private _oriFieldOfView: number;\n\n  /**\n   * @override\n   */\n  onBeginRender(camera: Camera): void {\n    if (!this.enabled) return;\n    super.onBeginRender(camera);\n    this._storeCamera(camera);\n\n    // Render 6 faces\n    for (let faceIndex = 0; faceIndex < 6; faceIndex++) {\n      // Change camera parameters\n      this._setCamera(faceIndex, camera);\n      camera.render(TextureCubeFace.PositiveX + faceIndex);\n    }\n\n    this._restoreCamera(camera);\n    super._reset();\n  }\n\n  /**\n   * Store original camera parameters.\n   */\n  private _storeCamera(camera: Camera) {\n    this.oriViewMatrix.copyFrom(camera.viewMatrix);\n    this._oriFieldOfView = camera.fieldOfView;\n  }\n\n  /**\n   * Restore camera parameters.\n   */\n  private _restoreCamera(camera: Camera) {\n    camera.viewMatrix.copyFrom(this.oriViewMatrix);\n    camera.fieldOfView = this._oriFieldOfView;\n  }\n\n  /**\n   * Set camera parameters according to the rendering surface.\n   */\n  private _setCamera(faceIndex: number, camera: Camera) {\n    switch (faceIndex) {\n      // positive_x\n      case 0:\n        cacheUp.set(0, -1, 0);\n        cacheDir.set(1, 0, 0);\n        break;\n      // negative_x\n      case 1:\n        cacheUp.set(0, -1, 0);\n        cacheDir.set(-1, 0, 0);\n        break;\n      // positive_y\n      case 2:\n        cacheUp.set(0, 0, 1);\n        cacheDir.set(0, 1, 0);\n        break;\n      // negative_y\n      case 3:\n        cacheUp.set(0, 0, -1);\n        cacheDir.set(0, -1, 0);\n        break;\n      // positive_z\n      case 4:\n        cacheUp.set(0, -1, 0);\n        cacheDir.set(0, 0, 1);\n        break;\n      // negative_z\n      case 5:\n        cacheUp.set(0, -1, 0);\n        cacheDir.set(0, 0, -1);\n        break;\n    }\n\n    Vector3.add(this.position, cacheDir, cacheTarget);\n    Matrix.lookAt(this.position, cacheTarget, cacheUp, camera.viewMatrix);\n    camera.fieldOfView = 90;\n  }\n}\n","import { MathUtil, Matrix, Vector2 } from \"@oasis-engine/math\";\nimport { DirectLight } from \"../lighting/DirectLight\";\nimport { Light } from \"../lighting/Light\";\nimport { PointLight } from \"../lighting/PointLight\";\nimport { SpotLight } from \"../lighting/SpotLight\";\nimport { Shader } from \"../shader/Shader\";\nimport { ShaderData } from \"../shader/ShaderData\";\nimport { Texture2D } from \"../texture\";\nimport { RenderTarget } from \"../texture/RenderTarget\";\n\n/**\n * Shadow manager.\n */\nexport class LightShadow {\n  private static _viewMatFromLightProperty = Shader.getPropertyByName(\"u_viewMatFromLight\");\n  private static _projMatFromLightProperty = Shader.getPropertyByName(\"u_projMatFromLight\");\n  private static _shadowBiasProperty = Shader.getPropertyByName(\"u_shadowBias\");\n  private static _shadowIntensityProperty = Shader.getPropertyByName(\"u_shadowIntensity\");\n  private static _shadowRadiusProperty = Shader.getPropertyByName(\"u_shadowRadius\");\n  private static _shadowMapSizeProperty = Shader.getPropertyByName(\"u_shadowMapSize\");\n  private static _shadowMapsProperty = Shader.getPropertyByName(\"u_shadowMaps\");\n\n  /**\n   * @internal\n   */\n  static _updateShaderData(shaderData: ShaderData) {\n    const data = LightShadow._combinedData;\n\n    shaderData.setFloatArray(LightShadow._viewMatFromLightProperty, data.viewMatrix);\n    shaderData.setFloatArray(LightShadow._projMatFromLightProperty, data.projectionMatrix);\n    shaderData.setFloatArray(LightShadow._shadowBiasProperty, data.bias);\n    shaderData.setFloatArray(LightShadow._shadowIntensityProperty, data.intensity);\n    shaderData.setFloatArray(LightShadow._shadowRadiusProperty, data.radius);\n    shaderData.setFloatArray(LightShadow._shadowMapSizeProperty, data.mapSize);\n    shaderData.setTextureArray(LightShadow._shadowMapsProperty, data.map);\n  }\n\n  /**\n   * Clear all shadow maps.\n   */\n  static clearMap() {\n    LightShadow._combinedData.map.length = 0;\n  }\n\n  private static _maxLight = 3;\n\n  private static _combinedData = {\n    viewMatrix: new Float32Array(16 * LightShadow._maxLight),\n    projectionMatrix: new Float32Array(16 * LightShadow._maxLight),\n    bias: new Float32Array(LightShadow._maxLight),\n    intensity: new Float32Array(LightShadow._maxLight),\n    radius: new Float32Array(LightShadow._maxLight),\n    mapSize: new Float32Array(2 * LightShadow._maxLight),\n    map: []\n  };\n\n  private _mapSize: Vector2;\n  private _renderTarget: RenderTarget;\n\n  /**\n   * Shadow's light.\n   */\n  readonly light: Light;\n\n  /**\n   * Shadow bias.\n   */\n  bias: number = 0.005;\n\n  /**\n   * Shadow intensity, the larger the value, the clearer and darker the shadow.\n   */\n  intensity: number = 0.2;\n\n  /**\n   * Pixel range used for shadow PCF interpolation.\n   */\n  radius: number = 1;\n\n  /**\n   * Generate the projection matrix used by the shadow map.\n   */\n  projectionMatrix: Matrix = new Matrix();\n\n  constructor(light: Light, props = { engine: null, width: 512, height: 512 }) {\n    this.light = light;\n    const { engine, width, height } = props;\n\n    this._mapSize = new Vector2(width, height);\n    this._renderTarget = new RenderTarget(engine, width, height, new Texture2D(engine, width, height));\n  }\n\n  /**\n   * The RenderTarget corresponding to the shadow map.\n   */\n  get renderTarget(): RenderTarget {\n    return this._renderTarget;\n  }\n\n  /**\n   * Shadow map's color render texture.\n   */\n  get map(): Texture2D {\n    return <Texture2D>this._renderTarget.getColorTexture();\n  }\n\n  /**\n   * Shadow map size.\n   */\n  get mapSize(): Vector2 {\n    return this._mapSize;\n  }\n\n  /**\n   * Initialize the projection matrix for lighting.\n   * @param light - The light to generate shadow\n   */\n  initShadowProjectionMatrix(light: Light) {\n    /**\n     * Directional light projection matrix, the default coverage area is left: -5, right: 5, bottom: -5, up: 5, near: 0.5, far: 50.\n     */\n    if (light instanceof DirectLight) {\n      Matrix.ortho(-5, 5, -5, 5, 0.1, 50, this.projectionMatrix);\n    }\n\n    /**\n     * Point light projection matrix, default configuration: fov: 50, aspect: 1, near: 0.5, far: 50.\n     */\n    if (light instanceof PointLight) {\n      Matrix.perspective(MathUtil.degreeToRadian(50), 1, 0.5, 50, this.projectionMatrix);\n    }\n\n    /**\n     * Spotlight projection matrix, the default configuration: fov: this.angle * 2 * Math.sqrt(2), aspect: 1, near: 0.1, far: this.distance + 5\n     */\n    if (light instanceof SpotLight) {\n      const fov = Math.min(Math.PI / 2, light.angle * 2 * Math.sqrt(2));\n      Matrix.perspective(fov, 1, 0.1, light.distance + 5, this.projectionMatrix);\n    }\n  }\n\n  appendData(lightIndex: number): void {\n    const viewStart = lightIndex * 16;\n    const projectionStart = lightIndex * 16;\n    const biasStart = lightIndex;\n    const intensityStart = lightIndex;\n    const radiusStart = lightIndex;\n    const mapSizeStart = lightIndex * 2;\n    const mapStart = lightIndex;\n\n    const data = LightShadow._combinedData;\n\n    data.viewMatrix.set(this.light.viewMatrix.elements, viewStart);\n    data.projectionMatrix.set(this.projectionMatrix.elements, projectionStart);\n    data.bias[biasStart] = this.bias;\n    data.intensity[intensityStart] = this.intensity;\n    data.radius[radiusStart] = this.radius;\n    data.mapSize[mapSizeStart] = this.mapSize.x;\n    data.mapSize[mapSizeStart + 1] = this.mapSize.y;\n    data.map[mapStart] = this.map;\n  }\n}\n","import { Logger } from \"../base/Logger\";\nimport { AmbientLight } from \"../lighting/AmbientLight\";\nimport { Light } from \"../lighting/Light\";\nimport { LightShadow } from \"./LightShadow\";\nimport { Component } from \"../Component\";\n\n/**\n * Set whether the light to generate shadows.\n */\nObject.defineProperty(Light.prototype, \"enableShadow\", {\n  get: function () {\n    return this._enableShadow;\n  },\n  set: function (enabled) {\n    this._enableShadow = enabled;\n\n    if (this._enableShadow) {\n      if (this instanceof AmbientLight) {\n        this._enableShadow = false;\n        Logger.warn(\"Has no shadow!\");\n        return;\n      }\n\n      this.shadow = this.shadow || new LightShadow(this, { engine: this.engine, width: 512, height: 512 });\n      this.shadow.initShadowProjectionMatrix(this);\n    }\n  }\n});\n\n/**\n * Set whether the renderer to receive shadows.\n */\nObject.defineProperty(Component.prototype, \"receiveShadow\", {\n  get: function () {\n    return this._receiveShadow;\n  },\n  set: function (enabled) {\n    this._receiveShadow = enabled;\n  }\n});\n\n/**\n * Set whether the renderer to cast shadows.\n */\nObject.defineProperty(Component.prototype, \"castShadow\", {\n  get: function () {\n    return this._castShadow;\n  },\n  set: function (enabled) {\n    this._castShadow = enabled;\n  }\n});\n","import { Engine } from \"../Engine\";\nimport { Material } from \"../material/Material\";\nimport { Shader } from \"../shader/Shader\";\n\n/**\n * Shadow Map material.\n */\nexport class ShadowMapMaterial extends Material {\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"shadow-map\"));\n    this.shaderData.enableMacro(\"O3_GENERATE_SHADOW_MAP\");\n  }\n}\n","import { Color } from \"@oasis-engine/math\";\nimport { Camera } from \"../Camera\";\nimport { Layer } from \"../Layer\";\nimport { Light } from \"../lighting/Light\";\nimport { Material } from \"../material/Material\";\nimport { RenderPass } from \"../RenderPipeline/RenderPass\";\nimport { RenderQueue } from \"../RenderPipeline/RenderQueue\";\nimport { Shader } from \"../shader/Shader\";\nimport { RenderTarget } from \"../texture/RenderTarget\";\n\n/**\n * RenderPass for rendering shadow map.\n */\nexport class ShadowMapPass extends RenderPass {\n  private static _viewMatFromLightProperty = Shader.getPropertyByName(\"u_viewMatFromLight\");\n  private static _projMatFromLightProperty = Shader.getPropertyByName(\"u_projMatFromLight\");\n\n  readonly light: Light;\n\n  /**\n   * Constructor.\n   * @param light  - The light that the shadow belongs to\n   */\n  constructor(\n    name: string,\n    priority: number,\n    renderTarget: RenderTarget,\n    replaceMaterial: Material,\n    mask: Layer,\n    light: Light\n  ) {\n    super(name, priority, renderTarget, replaceMaterial, mask);\n    this.light = light;\n    this.clearColor = new Color(1, 1, 1, 1);\n  }\n\n  /**\n   * @override\n   */\n  preRender(camera: Camera, queue: RenderQueue) {\n    // The viewProjection matrix from the light.\n    const shaderData = this.replaceMaterial.shaderData;\n    shaderData.setMatrix(ShadowMapPass._viewMatFromLightProperty, this.light.viewMatrix);\n    shaderData.setMatrix(ShadowMapPass._projMatFromLightProperty, (this.light as any).shadow.projectionMatrix);\n  }\n}\n","import { Engine } from \"../Engine\";\nimport { RenderQueueType } from \"../material\";\nimport { Material } from \"../material/Material\";\nimport { BlendFactor } from \"../shader/enums/BlendFactor\";\nimport { CompareFunction } from \"../shader/enums/CompareFunction\";\nimport { Shader } from \"../shader/Shader\";\n\n/**\n * Shadow material.\n */\nexport class ShadowMaterial extends Material {\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"shadow\"));\n\n    const targetBlendState = this.renderState.blendState.targetBlendState;\n    targetBlendState.enabled = true;\n    targetBlendState.sourceColorBlendFactor = targetBlendState.sourceAlphaBlendFactor = BlendFactor.DestinationColor;\n    targetBlendState.destinationColorBlendFactor = targetBlendState.destinationAlphaBlendFactor = BlendFactor.Zero;\n    this.renderState.depthState.compareFunction = CompareFunction.LessEqual;\n\n    this.renderQueueType = RenderQueueType.Transparent;\n  }\n}\n","import { Camera } from \"../Camera\";\nimport { CameraClearFlags } from \"../enums/CameraClearFlags\";\nimport { LightFeature } from \"../lighting/LightFeature\";\nimport { RenderPass } from \"../RenderPipeline/RenderPass\";\nimport { RenderQueue } from \"../RenderPipeline/RenderQueue\";\nimport { LightShadow } from \"./LightShadow\";\n\n/**\n * RenderPass for rendering shadow.\n */\nexport class ShadowPass extends RenderPass {\n  constructor(...args) {\n    super(...args);\n    this.clearFlags = CameraClearFlags.None;\n  }\n\n  /**\n   * @override\n   */\n  preRender(camera: Camera, queue: RenderQueue) {\n    this.enabled = false;\n    const lightMgr = camera.scene.findFeature(LightFeature);\n    const lights = lightMgr.visibleLights;\n    const shaderData = this.replaceMaterial.shaderData;\n\n    // keep render based on default render pass\n    const pass = camera._renderPipeline.defaultRenderPass;\n    this.renderTarget = pass.renderTarget;\n\n    let shadowMapCount = 0;\n\n    LightShadow.clearMap();\n    for (let i = 0, len = lights.length; i < len; i++) {\n      const lgt: any = lights[i];\n      if (lgt.enableShadow) {\n        lgt.shadow.appendData(shadowMapCount++);\n      }\n    }\n\n    if (shadowMapCount) {\n      this.enabled = true;\n      LightShadow._updateShaderData(shaderData);\n      shaderData.enableMacro(\"O3_SHADOW_MAP_COUNT\", shadowMapCount.toString());\n    } else {\n      shaderData.disableMacro(\"O3_SHADOW_MAP_COUNT\");\n    }\n  }\n}\n","import { Camera } from \"../Camera\";\nimport { Component } from \"../Component\";\nimport { Layer } from \"../Layer\";\nimport { LightFeature } from \"../lighting/LightFeature\";\nimport { RenderQueue } from \"../RenderPipeline/RenderQueue\";\nimport { Scene } from \"../Scene\";\nimport { SceneFeature } from \"../SceneFeature\";\nimport { ShadowMapMaterial } from \"./ShadowMapMaterial\";\nimport { ShadowMapPass } from \"./ShadowMapPass\";\nimport { ShadowMaterial } from \"./ShadowMaterial\";\nimport { ShadowPass } from \"./ShadowPass\";\n\n/**\n * Shadow plug-in.\n */\nexport class ShadowFeature extends SceneFeature {\n  private _shadowPass: ShadowPass;\n  private _shadowMapMaterial: ShadowMapMaterial;\n\n  /**\n   * @override\n   */\n  preRender(scene: Scene, camera: Camera) {\n    const lights = scene.findFeature(LightFeature).visibleLights;\n\n    if (lights.length > 0) {\n      // Check RenderPass for rendering shadows.\n      if (!this._shadowPass) {\n        this.addShadowPass(camera);\n      }\n\n      // Check RenderPass for rendering shadow map.\n      const renderPipeline = camera._renderPipeline;\n\n      for (let i = 0, len = lights.length; i < len; i++) {\n        const lgt: any = lights[i];\n        if (lgt.enableShadow && !lgt.shadowMapPass) {\n          lgt.shadowMapPass = this.addShadowMapPass(camera, lgt);\n        } else if (!lgt.enableShadow && lgt.shadowMapPass) {\n          renderPipeline.removeRenderPass(lgt.shadowMapPass);\n          lgt.shadowMapPass = null;\n        }\n      }\n\n      this.updatePassRenderFlag(renderPipeline._opaqueQueue);\n      this.updatePassRenderFlag(renderPipeline._alphaTestQueue);\n      this.updatePassRenderFlag(renderPipeline._transparentQueue);\n    }\n  }\n\n  /**\n   * Add RenderPass for rendering shadows.\n   * @param camera - The camera for rendering\n   */\n  addShadowPass(camera: Camera) {\n    const shadowMaterial = new ShadowMaterial(camera.engine);\n    this._shadowPass = new ShadowPass(\"ShadowPass\", 1, null, shadowMaterial, Layer.Layer30); // SHADOW\n    const renderer = camera._renderPipeline;\n    renderer.addRenderPass(this._shadowPass);\n  }\n\n  /**\n   * Add RenderPass for rendering shadow map.\n   * @param camera - The camera for rendering\n   * @param light - The light that the shadow belongs to\n   */\n  addShadowMapPass(camera: Camera, light) {\n    // Share shadow map material.\n    this._shadowMapMaterial = this._shadowMapMaterial || new ShadowMapMaterial(camera.engine);\n\n    const shadowMapPass = new ShadowMapPass(\n      \"ShadowMapPass\",\n      -1,\n      light.shadow.renderTarget,\n      this._shadowMapMaterial,\n      Layer.Layer31, // SHADOW_MAP\n      light\n    );\n    const renderer = camera._renderPipeline;\n    renderer.addRenderPass(shadowMapPass);\n\n    return shadowMapPass;\n  }\n\n  /**\n   * Update the renderPassFlag state of renderers in the scene.\n   * @param renderQueue - Render queue\n   */\n  updatePassRenderFlag(renderQueue: RenderQueue) {\n    const items = renderQueue.items;\n    for (let i = 0, len = items.length; i < len; i++) {\n      const item = items[i];\n      const component: Component = item.component;\n\n      const receiveShadow = (component as any).receiveShadow;\n      const castShadow = (component as any).castShadow;\n      if (receiveShadow === true) {\n        component.entity.layer |= Layer.Layer30; //SHADOW;\n      } else if (receiveShadow === false) {\n        component.entity.layer &= ~Layer.Layer30; //SHADOW;\n      }\n\n      if (castShadow === true) {\n        component.entity.layer |= Layer.Layer31; //SHADOW_MAP;\n      } else if (castShadow === false) {\n        component.entity.layer &= ~Layer.Layer31; //SHADOW_MAP;\n      }\n    }\n  }\n}\n","import \"./Extension\";\nimport { ShadowFeature } from \"./ShadowFeature\";\nimport { Scene } from \"../Scene\";\n\nScene.registerFeature(ShadowFeature);\n","export { Engine } from \"./Engine\";\nexport { SystemInfo } from \"./SystemInfo\";\nexport type { Canvas } from \"./Canvas\";\nexport { EngineFeature } from \"./EngineFeature\";\n\nexport { Scene } from \"./Scene\";\nexport { SceneFeature } from \"./SceneFeature\";\nexport { SceneManager } from \"./SceneManager\";\n\nexport { Entity } from \"./Entity\";\nexport { Component } from \"./Component\";\nexport { Script } from \"./Script\";\nexport { Renderer } from \"./Renderer\";\nexport { dependentComponents } from \"./ComponentsDependencies\";\nexport { Camera } from \"./Camera\";\nexport { Transform } from \"./Transform\";\nexport { BoolUpdateFlag } from \"./BoolUpdateFlag\";\nexport { ListenerUpdateFlag } from \"./ListenerUpdateFlag\";\nexport type { EngineSettings } from \"./EngineSettings\";\n\nexport { request } from \"./asset/request\";\nexport { Loader } from \"./asset/Loader\";\nexport { ResourceManager, resourceLoader } from \"./asset/ResourceManager\";\nexport { AssetPromise, AssetPromiseStatus } from \"./asset/AssetPromise\";\nexport type { LoadItem } from \"./asset/LoadItem\";\nexport { AssetType } from \"./asset/AssetType\";\nexport { RefObject } from \"./asset/RefObject\";\n\nexport { BasicRenderPipeline } from \"./RenderPipeline/BasicRenderPipeline\";\nexport { RenderQueue } from \"./RenderPipeline/RenderQueue\";\nexport { RenderPass } from \"./RenderPipeline/RenderPass\";\nexport { MeshRenderElement } from \"./RenderPipeline/MeshRenderElement\";\nexport { SpriteElement } from \"./RenderPipeline/SpriteElement\";\nexport * from \"./base\";\n\n// Lighting\nimport { LightFeature, hasLight } from \"./lighting/LightFeature\";\nimport { Scene } from \"./Scene\";\nScene.registerFeature(LightFeature);\n(Scene.prototype as any).hasLight = hasLight;\n\nexport { Background } from \"./Background\";\nexport { BackgroundMode } from \"./enums/BackgroundMode\";\nexport { CameraClearFlags } from \"./enums/CameraClearFlags\";\nexport { ColorSpace } from \"./enums/ColorSpace\";\nexport { BackgroundTextureFillMode } from \"./enums/BackgroundTextureFillMode\";\nexport * from \"./input/index\";\nexport * from \"./lighting/index\";\nexport * from \"./material/index\";\nexport * from \"./texture/index\";\nexport * from \"./graphic/index\";\nexport * from \"./2d/index\";\nexport * from \"./shaderlib/index\";\nexport * from \"./animation/index\";\nexport * from \"./mesh/index\";\nexport * from \"./sky/index\";\nexport * from \"./particle/index\";\nexport * from \"./trail/index\";\nexport * from \"./fog/index\";\nexport * from \"./env-probe/index\";\nexport * from \"./shadow/index\";\nexport * from \"./shader/index\";\nexport * from \"./Layer\";\nexport * from \"./clone/CloneManager\";\nexport * from \"./renderingHardwareInterface/index\";\nexport * from \"./physics/index\";\n"],"names":["Util","isArray","Array","value","toString","call","isArrayLike","x","length","clone","obj","rst","slice","i","l","k","hasOwnProperty","downloadBlob","blob","fileName","url","window","URL","createObjectURL","a","document","createElement","body","appendChild","style","display","href","download","addEventListener","parentElement","removeChild","click","revokeObjectURL","removeFromArray","array","item","index","indexOf","last","end","ObjectValues","Object","keys","map","key","Utils","_reflectGet","target","path","pathArr","_stringToPath","object","undefined","string","result","charCodeAt","charCodeOfDot","push","replace","rePropName","match","expression","quote","subString","reEscapeChar","trim","RegExp","AssetPromiseStatus","AssetPromise","all","promises","resolve","reject","setProgress","completed","total","results","forEach","Promise","then","catch","err","onProgress","callback","_listeners","add","cancel","_status","Pending","_reject","executor","newReject","progress","_progress","listener","reason","Failed","Success","Set","ResourceManager","_addLoader","type","loader","extNames","_loaders","len","_extTypeMapping","_getTypeByUrl","split","substring","lastIndexOf","engine","retryCount","retryInterval","timeout","Infinity","_objectPool","create","_editorResourceConfig","_virtualPathMap","_assetPool","_assetUrlPool","_refObjectPool","_loadingPromises","load","assetInfo","_loadSingleItem","cancelNotLoaded","promise","p","gc","_gc","getAssetPath","instanceId","getResourceByRef","ref","refId","isClone","res","initVirtualResources","config","element","virtualPath","id","_addAsset","asset","_deleteAsset","_addRefObject","_deleteRefObject","_destroy","_assignDefaultOptions","urls","join","info","infoUrl","useCache","forceDestroy","objects","isGCIgnored","destroy","resourceLoader","assetType","extnames","Target","Event","data","bubbles","_timeStamp","_target","_currentTarget","_bubbles","_propagationStopped","_type","Date","getTime","stopPropagation","t","CloneMode","ignoreClone","propertyKey","CloneManager","registerCloneMode","Ignore","assignmentClone","Assignment","shallowClone","Shallow","deepClone","Deep","mode","targetMap","_subCloneModeMap","get","constructor","set","getCloneMode","cloneModes","_cloneModeMap","objectType","_objectType","cloneModeMap","subCloneModes","getPrototypeOf","deepCloneObject","source","Uint8Array","Uint16Array","Uint32Array","Int8Array","Int16Array","Int32Array","Float32Array","Float64Array","n","_deepCloneObjectItem","customSource","cloneTo","sourceItem","itemType","sourceTypeArrayItem","targetTypeArrayItem","sourceArrayItem","targetArrayItem","sourceCustomItem","targetCustomItem","targetItem","Map","EventDispatcher","_class","_descriptor","_evtCount","hasEvent","event","_evts","eventNames","listenerCount","listeners","fn","dispatch","once","removeEventListener","on","events","off","_clearEvent","temp","removeAllEventListeners","trigger","e","noop","message","debug","console","log","bind","warn","error","Logger","isEnabled","enable","disable","Time","_clock","_timeScale","_deltaTime","_startTime","_lastTickTime","performance","now","reset","tick","nowTime","s","EngineObject","_class2","_descriptor2","_destroyed","_engine","resourceManager","_instanceIdCounter","DataType","GLCapabilityType","DisorderedArray","count","_elements","delete","deleteByIndex","elements","lastIndex","garbageCollection","ShaderMacroCollection","_mask","_length","unionCollection","left","right","out","outMask","minSize","maxSize","minMask","maxMask","macro","_maskIndex","size","mask","maskStart","_maskValue","endIndex","newValue","macroCollection","addMask","addSize","maskSize","complementaryCollection","removeMask","Math","min","intersectionCollection","unionMask","isEnable","clear","ComponentsManager","_onStartScripts","_onUpdateScripts","_onLateUpdateScripts","_onPhysicsUpdateScripts","_disableScripts","_destroyScripts","_onUpdateAnimations","_renderers","_onUpdateRenderers","_componentsContainerPool","addRenderer","renderer","_rendererIndex","removeRenderer","replaced","addOnStartScript","script","_onStartIndex","removeOnStartScript","addOnUpdateScript","_onUpdateIndex","removeOnUpdateScript","addOnLateUpdateScript","_onLateUpdateIndex","removeOnLateUpdateScript","addOnPhysicsUpdateScript","_onPhysicsUpdateIndex","removeOnPhysicsUpdateScript","addOnUpdateAnimations","animation","removeOnUpdateAnimations","addOnUpdateRenderers","removeOnUpdateRenderers","addDisableScript","component","addDestroyScript","callScriptOnStart","onStartScripts","_waitHandlingInValid","_started","onStart","callScriptOnUpdate","deltaTime","onUpdate","callScriptOnLateUpdate","onLateUpdate","callScriptOnPhysicsUpdate","onPhysicsUpdate","callAnimationUpdate","update","callRendererOnUpdate","callRender","context","camera","_camera","cullingMask","_entity","layer","enableFrustumCulling","isCulled","_frustum","intersectsBox","bounds","transform","entity","position","worldPosition","center","getCenter","_tempVector0","isOrthographic","forward","getWorldForward","_tempVector1","Vector3","subtract","_distanceForSort","dot","distanceSquared","_updateShaderData","_render","_globalShaderMacro","shaderData","_macroCollection","handlingInvalidScripts","disableScripts","destroyScripts","disableScript","_handlingInValid","onDestroy","callCameraOnBeginRender","scripts","_scripts","onBeginRender","callCameraOnEndRender","onEndRender","getActiveChangedTempList","pop","putActiveChangedTempList","componentContainer","ComponentCloner","cloneComponent","cloneMode","sourcePropS","tarProp","sourcePropD","_cloneTo","ComponentsDependencies","_register","currentComponent","dependentComponent","_addDependency","_dependenciesMap","_invDependenciesMap","_addCheck","dependentComponents","getComponent","addComponent","_removeCheck","invDependencies","components","Layer","UpdateFlag","_flagManagers","clearFromManagers","_removeFromManagers","flagManagers","_updateFlags","BoolUpdateFlag","flag","Component","_descriptor3","_descriptor4","_descriptor5","_removeComponent","isActiveInHierarchy","_enabled","_onDisable","_onDestroy","_onAwake","_onEnable","_setActive","_awoken","_isActiveInHierarchy","_phasedActive","scene","ListenerUpdateFlag","param","UpdateFlagManager","createFlag","addFlag","updateFlags","Transform","_descriptor6","_descriptor7","_descriptor8","_descriptor9","_descriptor10","_descriptor11","_descriptor12","_descriptor13","_dirtyFlag","TransformFlag","WmWpWeWqWs","_onPositionChanged","_onWorldPositionChanged","_onRotationChanged","_onWorldRotationChanged","_onRotationQuaternionChanged","_onWorldRotationQuaternionChanged","_onScaleChanged","_position","_onValueChanged","_worldPosition","_rotation","_worldRotation","_rotationQuaternion","_worldRotationQuaternion","_scale","setPosition","y","z","setRotation","setRotationQuaternion","w","setScale","setWorldPosition","setWorldRotation","setWorldRotationQuaternion","worldMatrix","normalize","getWorldRight","getWorldUp","up","translate","translationOrX","relativeToLocalOrY","relativeToLocal","_tempVec30","_translate","rotate","rotationOrX","_rotateXYZ","rotateByAxis","axis","angle","rad","MathUtil","degreeToRadFactor","Quaternion","rotationAxisAngle","_tempQuat0","_rotateByQuat","lookAt","targetPosition","worldUp","zAxis","axisLen","zeroTolerance","scale","xAxis","_tempVec31","cross","yAxis","_tempVec32","rotMat","_tempMat41","getRotation","registerWorldChangeFlag","_updateFlagManager","_registerWorldChangeListener","_parentChange","_isParentDirty","_updateAllWorldFlag","_isFrontFaceInvert","lossyWorldScale","isInvert","_updateWorldPositionFlag","_isContainDirtyFlags","WmWp","_worldAssociatedChange","nodeChildren","_children","_updateWorldRotationFlag","WmWeWq","_updateWorldPositionAndRotationFlag","WmWpWeWq","_updateWorldScaleFlag","WmWs","_updateWorldPositionAndScaleFlag","WmWpWs","_getParentTransform","_parentTransformCache","parentCache","parent","_getScaleMatrix","invRotation","invRotationMat","_tempMat30","worldRotScaMat","_tempMat31","scaMat","_tempMat32","copyFromMatrix","invert","worldRotationQuaternion","Matrix3x3","rotationQuaternion","multiply","targetDirtyFlags","_isContainDirtyFlag","_setDirtyFlagTrue","_setDirtyFlagFalse","rotateQuat","translation","transformByQuat","radFactor","rotQuat","rotationEuler","LocalMatrix","Matrix","transformCoordinate","copyFrom","WorldPosition","LocalQuat","LocalEuler","worldRotation","degreeToRadian","WorldEuler","invParentQuaternion","WorldQuat","getTranslation","rotation","toEuler","radToDegreeFactor","normalized","WorldScale","scaleMat","_lossyWorldScale","affineTransformation","_localMatrix","decompose","WorldMatrix","localMatrix","_worldMatrix","_tempMat42","Entity","_findChildByName","root","name","children","child","_traverseSetOwnerScene","_scene","childCount","Layer0","_components","_isRoot","_isActive","_siblingIndex","_parent","_activeChangedComponents","_invModelMatrix","_inverseWorldMatFlag","getComponents","getComponentsIncludeChildren","_getComponentsInChildren","addChild","indexOrChild","_removeFromEntityList","_addToChildrenList","newScene","_processActive","_processInActive","_setTransformDirty","_setParent","getChild","findByName","grandson","findByPath","splits","createChild","clearChildren","cloneEntity","sourceComp","targetComp","_removeFromParent","splice","_addScript","_entityScriptsIndex","_removeScript","oldParent","oldSibling","_componentsManager","_setActiveInHierarchy","_setActiveComponents","_setInActiveInHierarchy","siblingIndex","parentScene","isActive","activeChangedComponents","enabled","_setSiblingIndex","sibling","oldIndex","getInvModelMatrix","_isActiveInEngine","_rootEntities","FeatureManager","_features","_objects","registerFeature","IFeature","featureArray","objectArray","features","addObject","callFeatureMethod","method","args","feature","apply","findFeature","Keys","KeyboardManager","htmlCanvas","_curHeldDownKeyToIndexMap","_upKeyToFrameCountMap","_downKeyToFrameCountMap","_curFrameHeldDownList","_curFrameDownList","_curFrameUpList","_htmlCanvas","_nativeEvents","_hadListener","tabIndex","_onKeyEvent","_update","frameCount","nativeEvents","curFrameDownList","curFrameUpList","curHeldDownKeyToIndexMap","curFrameHeldDownList","downKeyToFrameCountMap","upKeyToFrameCountMap","evt","codeKey","code","delIndex","swapCode","_onFocus","_onBlur","cancelable","preventDefault","CameraClearFlags","HitResult","distance","point","normal","PhysicsManager","_initialized","_restTime","_colliders","_gravity","_nativePhysicsManager","_physicalObjectsMap","_onContactEnter","obj1","obj2","shape1","shape2","collider","onCollisionEnter","_onContactExit","onCollisionExit","_onContactStay","onCollisionStay","_onTriggerEnter","onTriggerEnter","_onTriggerExit","onTriggerExit","_onTriggerStay","onTriggerStay","fixedTimeStep","maxSumTimeStep","initialize","physics","_nativePhysics","createPhysicsManager","raycast","ray","distanceOrResult","layerMaskOrResult","outHitResult","hitResult","Number","MAX_VALUE","layerMask","Everything","idx","_collider","nativePhysicsManager","componentsManager","simulateTime","step","floor","_callColliderOnUpdate","_callColliderOnLateUpdate","_addColliderShape","colliderShape","addColliderShape","_nativeShape","_removeColliderShape","removeColliderShape","_addCollider","_index","addCollider","_nativeCollider","_addCharacterController","controller","addCharacterController","_removeCollider","removeCollider","_removeCharacterController","removeCharacterController","_onUpdate","_onLateUpdate","gravity","setGravity","PhysicsMaterialCombineMode","PhysicsMaterial","_bounciness","_dynamicFriction","_staticFriction","_bounceCombine","Average","_frictionCombine","_nativeMaterial","createPhysicsMaterial","setBounciness","setDynamicFriction","setStaticFriction","setBounceCombine","setFrictionCombine","Collider","_dec","_updateFlag","_shapes","addShape","shape","oldCollider","removeShape","physicsManager","clearShapes","shapes","setWorldTransform","worldScale","setWorldScale","ControllerNonWalkableMode","CharacterController","_stepOffset","_nonWalkableMode","PreventClimbing","_upDirection","_slopeLimit","createCharacterController","move","disp","minDist","elapsedTime","getWorldPosition","setStepOffset","setNonWalkableMode","setUpDirection","setSlopeLimit","ColliderShape","_id","_material","_isTrigger","_isSceneQuery","_contactOffset","_idGenerator","setContactOffset","setMaterial","setIsTrigger","BoxColliderShape","_size","createBoxColliderShape","setSize","SphereColliderShape","_radius","createSphereColliderShape","setRadius","PlaneColliderShape","createPlaneColliderShape","ColliderShapeUpAxis","CapsuleColliderShape","_height","_upAxis","Y","createCapsuleColliderShape","setUpAxis","setHeight","Joint","_connectedCollider","JointCollider","_nativeJoint","_force","_torque","localPosition","setConnectedCollider","connectedAnchor","setConnectedAnchor","massScale","setConnectedMassScale","inertiaScale","setConnectedInertiaScale","setMassScale","setInertiaScale","setBreakForce","setBreakTorque","localRotation","FixedJoint","createFixedJoint","HingeJointFlag","HingeJoint","_axis","_hingeFlags","_useSpring","_jointMonitor","_limits","createHingeJoint","setAxis","swingOffset","setSwingOffset","getAngle","getVelocity","LimitEnabled","useLimits","setHingeJointFlag","DriveEnabled","useMotor","limits","setDriveVelocity","targetVelocity","setDriveForceLimit","forceLimit","setDriveGearRatio","gearRation","DriveFreeSpin","freeSpin","useSpring","setSoftLimit","max","stiffness","damping","setHardLimit","contactDistance","SpringJoint","_minDistance","_maxDistance","_tolerance","_stiffness","_damping","createSpringJoint","setMinDistance","setMaxDistance","setTolerance","setStiffness","setDamping","JointLimits","JointMotor","ControllerCollisionFlag","StaticCollider","createStaticCollider","DynamicCollider","_linearDamping","_angularDamping","_linearVelocity","_angularVelocity","_mass","_centerOfMass","_inertiaTensor","_maxAngularVelocity","_maxDepenetrationVelocity","_sleepThreshold","_solverIterations","_isKinematic","_constraints","_collisionDetectionMode","CollisionDetectionMode","Discrete","createDynamicCollider","applyForce","force","addForce","applyTorque","torque","addTorque","positionOrRotation","sleep","wakeUp","getWorldTransform","setLinearDamping","setAngularDamping","setLinearVelocity","setAngularVelocity","setMass","setCenterOfMass","setInertiaTensor","setMaxAngularVelocity","setMaxDepenetrationVelocity","setSleepThreshold","setSolverIterations","setIsKinematic","setConstraints","setCollisionDetectionMode","DynamicColliderConstraints","PointerPhase","PointerButton","Pointer","phase","Leave","Vector2","_uniqueID","PointerManager","_pointers","_movingDelta","_multiPointerEnabled","_buttons","_upMap","_downMap","_downList","_upList","_currentPosition","_currentPressedEntity","_currentEnteredEntity","_canvas","_pointerPool","_keyEventList","_keyEventCount","_needOverallPointers","_lastPositionFrameCount","canvas","oncontextmenu","onPointerEvent","_onPointerEvent","_overallPointers","_handlePointerEvent","rayCastEntity","_pointerRayCast","keyEventCount","keyEventList","PointerKeyEvent","Down","_firePointerDown","Up","_firePointerUpAndClick","_firePointerExitAndEnter","_firePointerDrag","focus","pointers","deleteCount","totalCount","_getIndexByPointerID","pointerId","_addPointer","lastCount","pointerPool","pointer","_removePointer","pointerIndex","leavePointer","_updatePointer","updatedPointer","upMap","downMap","upList","downList","activePointerCount","pixelRatioW","width","clientWidth","pixelRatioH","height","clientHeight","nativeEventsLen","pointerButton","button","Primary","offsetX","offsetY","Move","buttons","pointerCount","currentPosition","lastX","lastY","lastNativeEvent","_tempPoint","_tempRay","_tempHitResult","cameras","sceneManager","activeScene","_activeCameras","renderTarget","viewport","vpX","vpY","vpW","vpH","viewportPointToRay","clearFlags","Color","onPointerDrag","onPointerExit","onPointerEnter","onPointerDown","pressedEntity","sameTarget","onPointerClick","onPointerUp","Buttons","Ray","WheelManager","_delta","_onWheelEvent","delta","deltaX","deltaY","deltaZ","InputManager","isKeyHeldDown","_keyboardManager","isKeyDown","_curFrameCount","isKeyUp","isPointerHeldDown","_pointerManager","isPointerDown","isPointerUp","_wheelManager","_webCanvas","OffscreenCanvas","RenderQueueType","RefObject","_refCount","refCount","_getRefCount","_addRefCount","_addToResourceManager","ShaderDataGroup","Texture","_platformTexture","_mipmap","_format","_width","_mipmapCount","_wrapModeU","_wrapModeV","_filterMode","_anisoLevel","generateMipmaps","_getMaxMiplevel","log2","_getMipmapCount","wrapModeU","wrapModeV","filterMode","_hardwareRenderer","capability","maxAnisoLevel","anisoLevel","ShaderPropertyType","pbr_frag_define","pbr_helper","brdf","direct_irradiance_frag_define","ibl_frag_define","pbr_frag","ShaderLib","_objectSpread","common","common_vert","common_frag","color_share","normal_share","uv_share","worldpos_share","shadow_share","fog_share","begin_normal_vert","begin_position_vert","position_vert","color_vert","normal_vert","skinning_vert","blendShape_input","blendShape_vert","uv_vert","worldpos_vert","shadow_vert","fog_vert","light_frag_define","mobile_material_frag","fog_frag","begin_mobile_frag","begin_viewdir_frag","mobile_blinnphong_frag","noise_common","noise_cellular_2D","noise_cellular_2x2","noise_cellular_2x2x2","noise_cellular_3D","noise_cellular","noise_perlin_2D","noise_perlin_3D","noise_perlin_4D","noise_perlin","noise_psrd_2D","noise_simplex_2D","noise_simplex_3D_grad","noise_simplex_3D","noise_simplex_4D","noise_simplex","PBRShaderLib","normal_get","ShaderFactory","parseCustomMacros","macros","m","parseIncludes","src","regex","parseExtension","extensions","convertTo300","shader","isFrag","isMRT","test","_replaceMRTShader","declaration","mrtIndexSet","ShaderMacro","maskIndex","maskValue","_nameId","macroNameIDMap","_macroNameIdMap","nameID","_macroNameCounter","ColorSpace","ShaderUniform","propertyId","location","applyFunc","cacheValue","textureIndex","textureDefault","_rhi","_gl","_colorSpace","rhi","gl","settings","colorSpace","upload1f","shaderUniform","uniform1f","upload1fv","uniform1fv","upload2f","r","g","Linear","uniform2f","gammaToLinearSpace","upload2fv","uniform2fv","upload3f","b","uniform3f","upload3fv","uniform3fv","upload4f","uniform4f","upload4fv","uniform4fv","upload1i","uniform1i","upload1iv","uniform1iv","upload2i","uniform2i","upload2iv","uniform2iv","upload3i","uniform3i","upload3iv","uniform3iv","upload4i","uniform4i","upload4iv","uniform4iv","uploadMat4","uniformMatrix4fv","uploadMat4v","uploadTexture","activeTexture","bindTexture","uploadTextureArray","textureIndices","texture","ShaderUniformBlock","constUniforms","textureUniforms","ShaderProgram","_addLineNum","str","lines","limitLength","prefix","line","vertexSource","fragmentSource","sceneUniformBlock","cameraUniformBlock","rendererUniformBlock","materialUniformBlock","otherUniformBlock","_uploadRenderCount","_uploadCamera","_uploadRenderer","_uploadMaterial","attributeLocation","_isValid","_vertexShader","_fragmentShader","_glProgram","_activeTextureUint","_createProgram","_recordLocation","_counter","uploadAll","uniformBlock","uploadUniforms","uploadTextures","propertyValueMap","_propertyValueMap","uniform","destroyed","uploadUnGroupTextures","groupingOtherUniformBlock","_groupingSubOtherUniforms","_currentBind","useProgram","deleteShader","deleteProgram","uniforms","isTexture","group","Shader","_getShaderPropertyGroup","_groupingUniform","Scene","Camera","Renderer","Material","vertexShader","_createShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","program","createProgram","attachShader","linkProgram","validateProgram","isContextLost","getProgramParameter","LINK_STATUS","getProgramInfoLog","shaderType","shaderSource","createShader","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","uniformInfos","_getUniformInfos","attributeInfos","_getAttributeInfos","substr","getUniformLocation","getPropertyByName","_uniqueId","FLOAT","FLOAT_VEC2","FLOAT_VEC3","FLOAT_VEC4","Vector4","BOOL","INT","BOOL_VEC2","INT_VEC2","BOOL_VEC3","INT_VEC3","BOOL_VEC4","INT_VEC4","FLOAT_MAT4","SAMPLER_2D","SAMPLER_CUBE","SAMPLER_2D_ARRAY","defaultTexture","_magentaTexture2D","_magentaTextureCube","_magentaTexture2DArray","Error","defaultTextures","glTextureIndices","TEXTURE0","getAttribLocation","uniformCount","ACTIVE_UNIFORMS","getActiveUniform","attributeCount","ACTIVE_ATTRIBUTES","getActiveAttrib","ShaderProperty","_group","_propertyNameCounter","shaderMap","_shaderMap","find","getMacroByName","_macroMap","maskMap","_macroMaskMap","counter","_macroCounter","bit","propertyNameMap","_propertyNameMap","property","_propertyIdMap","propertyName","shaderProperty","_getNamesByMacros","subMaskMap","subMask","j","_shaderId","_vertexSource","_fragmentSource","_shaderCounter","compileVariant","compileMacros","_compileMacros","_getShaderProgram","isValid","shaderProgramPool","_getShaderProgramPool","shaderProgram","isWebGL2","macroNameList","macroNameStr","versionStr","precisionStr","canIUse","shaderTextureLod","standardDerivatives","_shaderExtension","cache","ShaderData","getFloat","getPropertyValue","setFloat","_setPropertyValue","Float","getInt","setInt","Int","getFloatArray","setFloatArray","FloatArray","getIntArray","setIntArray","IntArray","getVector2","setVector2","getVector3","setVector3","getVector4","setVector4","getMatrix","setMatrix","getColor","setColor","getTexture","setTexture","lastValue","getTextureArray","setTextureArray","TextureArray","enableMacro","lastMacro","disableMacro","currentMacro","getMacros","macroMap","values","getProperties","properties","propertyIdMap","targetPropertyValueMap","targetProperty","BlendFactor","BlendOperation","ColorWriteMask","RenderTargetBlendState","colorBlendOperation","Add","alphaBlendOperation","sourceColorBlendFactor","One","sourceAlphaBlendFactor","destinationColorBlendFactor","Zero","destinationAlphaBlendFactor","colorWriteMask","All","BlendState","targetBlendState","blendColor","alphaToCoverage","_getGLBlendFactor","blendFactor","ZERO","ONE","SourceColor","SRC_COLOR","OneMinusSourceColor","ONE_MINUS_SRC_COLOR","DestinationColor","DST_COLOR","OneMinusDestinationColor","ONE_MINUS_DST_COLOR","SourceAlpha","SRC_ALPHA","OneMinusSourceAlpha","ONE_MINUS_SRC_ALPHA","DestinationAlpha","DST_ALPHA","OneMinusDestinationAlpha","ONE_MINUS_DST_ALPHA","SourceAlphaSaturate","SRC_ALPHA_SATURATE","BlendColor","CONSTANT_COLOR","OneMinusBlendColor","ONE_MINUS_CONSTANT_COLOR","_getGLBlendOperation","blendOperation","FUNC_ADD","Subtract","FUNC_SUBTRACT","ReverseSubtract","FUNC_REVERSE_SUBTRACT","Min","blendMinMax","MIN","Max","MAX","_apply","hardwareRenderer","lastRenderState","_platformApply","blendState","lastState","lastTargetBlendState","BLEND","blendFuncSeparate","blendEquationSeparate","equals","colorMask","Red","Green","Blue","Alpha","SAMPLE_ALPHA_TO_COVERAGE","CompareFunction","DepthState","writeEnabled","compareFunction","Less","_getGLCompareFunction","Never","NEVER","LESS","Equal","EQUAL","LessEqual","LEQUAL","Greater","GREATER","NotEqual","NOTEQUAL","GreaterEqual","GEQUAL","Always","ALWAYS","depthState","DEPTH_TEST","depthFunc","depthMask","CullMode","RasterState","cullMode","Back","depthBias","slopeScaledDepthBias","_cullFaceEnable","_frontFaceInvert","frontFaceInvert","rasterState","cullFaceEnable","Off","CULL_FACE","cullFace","BACK","FRONT","frontFace","CW","CCW","POLYGON_OFFSET_FILL","polygonOffset","StencilOperation","StencilState","referenceValue","writeMask","compareFunctionFront","compareFunctionBack","passOperationFront","Keep","passOperationBack","failOperationFront","failOperationBack","zFailOperationFront","zFailOperationBack","_getGLStencilOperation","KEEP","Replace","REPLACE","IncrementSaturate","INCR","DecrementSaturate","DECR","Invert","INVERT","IncrementWrap","INCR_WRAP","DecrementWrap","DECR_WRAP","stencilState","STENCIL_TEST","referenceOrMaskChange","stencilFuncSeparate","stencilOpSeparate","stencilMask","RenderState","_lastRenderState","renderQueueType","Opaque","renderState","dest","_preRender","renderElement","ClassPool","_elementPoolIndex","_elementPool","getFromPool","pool","resetPool","RenderElement","material","multiRenderData","MeshRenderElement","mesh","subMesh","setValue","RenderContext","_viewProjectMatrix","_setContext","projectionMatrix","viewMatrix","SpriteElement","renderData","renderDate","SpriteMaskElement","isAdd","SpriteMaskInteraction","_class3","_descriptor14","_descriptor15","_descriptor16","prototype","_overrideUpdate","_transformChangeFlag","getInstanceMaterial","materials","_materials","_materialsInstanced","_createInstanceMaterial","getMaterial","indexOrMaterial","_setMaterial","getInstanceMaterials","materialsInstance","getMaterials","setMaterials","internalMaterials","materialsInstanced","internalMaterial","mvMatrix","_mvMatrix","mvpMatrix","_mvpMatrix","mvInvMatrix","_mvInvMatrix","normalMatrix","_normalMatrix","transpose","_localMatrixProperty","_worldMatrixProperty","_mvMatrixProperty","_mvpMatrixProperty","_mvInvMatrixProperty","_normalMatrixProperty","_updateBounds","worldBounds","insMaterial","changeFlag","_bounds","_priority","BoundingBox","StaticInterfaceImplement","SimpleSpriteAssembler","resetData","_renderData","vertexCount","positions","uvs","triangles","_rectangleTriangles","updatePositions","sprite","pivot","pivotX","pivotY","wE","pWE","sx","flipX","sy","flipY","spritePositions","_getPositions","_getBounds","updateUVs","spriteUVs","_getUVs","renderUVs","bottom","top","RenderData2D","color","SpritePropertyDirtyFlag","SpriteMaskLayer","SpriteMask","_maskElement","_spriteMaskDefaultMaterial","_alphaCutoffProperty","_alphaCutoff","_onSpriteChange","_sprite","_spriteChangeFlag","DirtyFlag","Position","UV","spriteMaskElementPool","_spriteMaskElementPool","maskElement","_renderPipeline","_allSpriteMasks","dirtyFlag","_textureProperty","region","atlasRegionOffset","atlasRegion","_flipX","_flipY","_registerUpdateFlag","Engine","_defaultBoundingBox","VertexElementFormat","BufferUsage","IndexFormat","BufferUtil","_getGLBufferUsage","bufferUsage","Static","STATIC_DRAW","Dynamic","DYNAMIC_DRAW","Stream","STREAM_DRAW","_getGLIndexType","indexFormat","UInt8","UNSIGNED_BYTE","UInt16","UNSIGNED_SHORT","UInt32","UNSIGNED_INT","_getGLIndexByteCount","_getElementInfo","format","Byte4","BYTE","UByte4","NormalizedByte4","NormalizedUByte4","Short2","SHORT","UShort2","NormalizedShort2","NormalizedUShort2","Short4","UShort4","NormalizedShort4","NormalizedUShort4","VertexElement","semantic","offset","bindingIndex","instanceStepRate","_glElementInfo","_semantic","_offset","_bindingIndex","_instanceStepRate","BufferBindFlag","SetDataOptions","Buffer","byteLengthOrData","_glBindTarget","_glBufferUsage","_nativeBuffer","_byteLength","_bufferUsage","glBufferUsage","glBindTarget","VertexBuffer","ARRAY_BUFFER","ELEMENT_ARRAY_BUFFER","createBuffer","bufferData","byteLength","bindBuffer","setData","bufferByteOffset","dataOffset","dataLength","options","None","Discard","byteSize","BYTES_PER_ELEMENT","dataByteLength","isArrayBufferView","byteOffset","bufferSubData","subData","buffer","getData","getBufferSubData","deleteBuffer","resize","MeshTopology","IndexBufferBinding","_buffer","SubMesh","start","topology","Triangles","Mesh","_vertexElementMap","_glIndexType","_glIndexByteCount","_platformPrimitive","_instanceCount","_vertexBufferBindings","_indexBufferBinding","_vertexElements","_enableVAO","_subMeshes","createPlatformPrimitive","addSubMesh","startOrSubMesh","removeSubMesh","subMeshes","clearSubMesh","registerUpdateFlag","_clearVertexElements","vertexElementMap","_addVertexElement","_setVertexBufferBinding","binding","lastBinding","_draw","draw","vertexBufferBindings","_setVertexElements","_setIndexBufferBinding","VertexBufferBinding","stride","_stride","RenderBufferDepthFormat","TextureCubeFace","TextureFilterMode","TextureFormat","TextureWrapMode","RenderTarget","renderTexture","depth","antiAliasing","Depth","_platformRenderTarget","_depth","_antiAliasing","_autoGenerateMipmaps","_colorTextures","_depthTexture","createPlatformRenderTarget","getColorTexture","colorTextures","colorTexture","_setRenderTargetInfo","faceIndex","mipLevel","setRenderTargetInfo","_blitRenderTarget","blitRenderTarget","Texture2D","mipmap","R8G8B8A8","createPlatformTexture2D","Bilinear","Repeat","setPixelBuffer","colorBuffer","setImageSource","imageSource","premultiplyAlpha","getPixelBuffer","xOrMipLevelOrOut","yOrMipLevel","mipLevelOrOut","argsLength","arguments","Texture2DArray","createPlatformTexture2DArray","offsetIndex","elementIndex","TextureCube","createPlatformTextureCube","Clamp","face","BlendShapeManager","modelMesh","_blendShapeCount","_blendShapes","_blendShapeNames","_layoutDirtyListener","_subDataDirtyFlags","_vertexTexture","_vertexBuffers","_vertices","_useBlendNormal","_useBlendTangent","_vertexElementCount","_vertexElementOffset","_storeInVertexBufferInfo","_maxCountSingleVertexBuffer","_modelMesh","_lastCreateHostInfo","_canUseTextureStoreData","_dataTextureInfo","canUseFloatTextureBlendShape","_updateLayoutChange","_addBlendShape","blendShape","_addLayoutChangeFlag","_createSubDataDirtyFlag","_clearBlendShapes","subDataDirtyFlags","skinnedMeshRenderer","blendShapeCount","_blendShapeMacro","_useTextureMode","_blendShapeTextureMacro","_blendShapeTextureProperty","_blendShapeTextureInfoProperty","_blendShapeWeightsProperty","blendShapeWeights","maxBlendCount","_getVertexBufferModeSupportCount","condensedBlendShapeWeights","_condensedBlendShapeWeights","_filterCondensedBlendShapeWeights","_blendShapeNormalMacro","_blendShapeTangentMacro","_layoutOrCountChange","_vertexElementsNeedUpdate","maxSupportCount","_needUpdateData","_addVertexElements","vertexCountChange","noLongerAccessible","useTexture","createHost","_createTextureArray","_createVertexBuffers","_updateTextureArray","_updateVertexBuffers","_releaseMemoryCache","blendShapes","blendShapeNamesMap","dataChangedFlags","vertexBuffers","vertexFloatCount","vertexByteCount","maxCountSingleBuffer","bufferCount","ceil","floatCount","containCount","usage","blendShapeBuffer","maxTextureSize","vertexPixelStride","textureWidth","textureHeight","blendShapeDataTexture","R32G32B32A32","Point","vertices","storeInfos","blendShapeFloatStride","blendShapeByteStride","dataChangedFlag","frames","endFrame","deltaPositions","bufferIndex","indexInBuffer","bufferFloatStride","storeInfo","deltaPosition","deltaNormals","deltaNormal","deltaTangents","deltaTangent","vertexTexture","subDirtyFlag","subBlendShapeDataStride","tangent","notFirst","vertexElementCount","useBlendNormal","_useBlendShapeNormal","useBlendTangent","_useBlendShapeTangent","_attributeModeUpdateVertexElement","vertexElements","vertexBufferStoreInfo","condensedIndex","elementOffset","vertexElement","condensedWeightsCount","thresholdWeight","POSITIVE_INFINITY","thresholdIndex","weight","condensedWeight","ModelMesh","_blendShapeManager","_vertexCount","_accessible","_verticesFloat32","_verticesUint8","_indices","_indicesFormat","_vertexSlotChanged","_vertexChangeFlag","_indicesChangeFlag","_vertexStrideFloat","_lastUploadVertexCount","_positions","_normals","_colors","_tangents","_uv","_uv1","_uv2","_uv3","_uv4","_uv5","_uv6","_uv7","_boneWeights","_boneIndices","setPositions","ValueChanged","getPositions","setNormals","normals","Normal","getNormals","setColors","colors","getColors","setBoneWeights","boneWeights","BoneWeight","getBoneWeights","setBoneIndices","boneIndices","BoneIndex","getBoneIndices","setTangents","tangents","Tangent","getTangents","setUVs","uv","channelIndex","UV1","UV2","UV3","UV4","UV5","UV6","UV7","getUVs","setIndices","indices","getIndices","addBlendShape","clearBlendShapes","getBlendShapeName","uploadData","vertexElementChanged","_updateVertexElements","vertexBuffer","elementCount","_updateVertices","newVertexBuffer","indexBuffer","newIndexBuffer","IndexBuffer","blendShapeManager","_releaseCache","attributeMode","POSITION_VERTEX_ELEMENT","joint","internalStart","Skin","inverseBindMatrices","joints","skeleton","MeshRenderer","_mesh","_meshUpdateFlag","_uvMacro","_uv1Macro","_normalMacro","_tangentMacro","_vertexColorMacro","renderPipeline","renderElementPool","_renderElementPool","pushPrimitive","localBounds","_setMesh","lastMesh","SkinnedMeshRenderer","_skin","_mat","_useJointTexture","matrixPalette","_jointMatrixProperty","_initJoints","skin","jointNodes","findByNodeName","maxAttribUniformVec4","renderStates","getParameter","MAX_VERTEX_UNIFORM_VECTORS","maxJoints","jointCount","_jointCountProperty","canIUseMoreJoints","_maxJoints","nodeName","_hasInitJoints","ibms","worldToLocal","mat","identity","createJointTexture","jointTexture","_jointSamplerProperty","_blendShapeWeights","_checkBlendShapeWeightLength","newBlendShapeCount","lastBlendShapeWeights","newBlendShapeWeights","PrimitiveMesh","createSphere","radius","segments","rectangleCount","_generateIndices","thetaRange","PI","alphaRange","countReciprocal","segmentsReciprocal","u","v","alphaDelta","thetaDelta","sinTheta","sin","posX","cos","posY","posZ","c","d","_initialize","createCuboid","halfWidth","halfHeight","halfDepth","createPlane","horizontalSegments","verticalSegments","horizontalCount","verticalCount","gridWidth","gridHeight","horizontalCountReciprocal","horizontalSegmentsReciprocal","verticalSegmentsReciprocal","createCylinder","radiusTop","radiusBottom","radialSegments","heightSegments","radialCount","unitHeight","torsoVertexCount","torsoRectangleCount","capTriangleCount","totalVertexCount","radialCountReciprocal","radialSegmentsReciprocal","heightSegmentsReciprocal","indicesOffset","thetaStart","radiusDiff","slope","radiusSlope","theta","cosTheta","diameterTopReciprocal","diameterBottomReciprocal","positionStride","curPosBottom","curPosX","curPosZ","curPosTop","topCapIndex","bottomIndiceIndex","topIndiceIndex","firstStride","secondStride","radiusMax","createTorus","tubeRadius","tubularSegments","arc","cosV","sinV","cosU","sinU","centerX","centerY","outerRadius","createCone","curRadius","curPos","createCapsule","capVertexCount","capRectangleCount","_createCapsuleCap","indexCount","elementIndexUint","capAlphaRange","posIndex","BufferMesh","setVertexElements","setVertexBufferBinding","bufferOrBinding","strideOrFirstIndex","isBinding","bindings","setVertexBufferBindings","firstIndex","needLength","setIndexBufferBinding","BlendShapeFrame","BlendShape","_layoutChangeManager","_dataChangeManager","_frames","addFrame","frameOrWeight","frame","_addFrame","clearFrames","_updateUseNormalAndTangent","_addDataDirtyFlag","useNormal","useTangent","useBlendShapeNormal","useBlendShapeTangent","Basic2DBatcher","_subMeshPool","_batchedQueue","_meshes","_meshCount","_indiceBuffers","_flushId","_elementCount","MAX_VERTEX_COUNT","_createMesh","drawElement","replaceMaterial","charElements","_drawSubElement","flush","batchedQueue","_updateData","drawBatches","_canUploadSameBuffer","meshes","indiceBuffers","vertexStride","createVertexElements","vertexIndex","indiceIndex","vertexStartIndex","curIndiceStartIndex","curMeshIndex","preElement","curElement","updateVertices","triangleNum","canBatch","_getSubMeshFromPool","SpriteMaskBatcher","preShaderData","curShaderData","textureProperty","alphaCutoffProperty","curUV","sceneData","cameraData","spriteMaskElement","op","drawPrimitive","SpriteMaskManager","_batcher","_preMaskLayer","preRender","maskInteraction","_processMasksDiff","postRender","maskLayer","preMaskLayer","curMaskLayer","allMasks","commonLayer","addLayer","reduceLayer","allMaskElements","influenceLayers","maskRenderElement","TextRenderElement","BackgroundMode","BackgroundTextureFillMode","Sky","_matrix","Background","SolidColor","solidColor","sky","_textureFillMode","AspectFitHeight","_texture","_createPlane","_resizeBackgroundTexture","_backgroundTextureMesh","Fill","AspectFitWidth","fitWidthScale","fitHeightScale","_backgroundTextureMaterial","DiffuseMode","AmbientLight","_diffuseSphericalHarmonics","_diffuseSolidColor","_diffuseIntensity","_specularTexture","_specularIntensity","_diffuseMode","_shArray","_scenes","_specularTextureDecodeRGBM","_addToScene","_diffuseColorProperty","_diffuseIntensityProperty","_specularIntensityProperty","_diffuseSHProperty","_setDiffuseMode","_setSpecularTextureDecodeRGBM","_setSpecularTexture","_removeFromScene","scenes","sceneShaderData","SphericalHarmonics","_shMacro","_specularTextureProperty","_mipLevelProperty","mipmapCount","_specularMacro","_decodeRGBMMacro","_preComputeSH","sh","coefficients","SceneFeature","preUpdate","postUpdate","Light","_viewMat","_inverseViewMat","LightFeature","attachRenderLight","detachRenderLight","_maxLight","DirectLight","intensity","_forward","_lightColor","_reverseDirection","_combinedData","_colorProperty","_directionProperty","direction","_appendData","lightIndex","colorStart","directionStart","lightColor","PointLight","_positionProperty","_distanceProperty","positionStart","distanceStart","lightPosition","SpotLight","penumbra","_inverseDirection","_angleCosProperty","angleCos","_penumbraCosProperty","penumbraCos","penumbraCosStart","angleCosStart","hasLight","visibleLights","light","directLightCount","pointLightCount","spotLightCount","lights","background","_ambientLight","sceneFeatureManager","ambientLight","_allScenes","createRootEntity","addRootEntity","isRoot","oldScene","_addToRootEntityList","removeRootEntity","getRootEntity","findEntityByName","findEntityByPath","filter","Boolean","rootEntitiesCount","findEntity","allScenes","_attachRenderCamera","_detachRenderCamera","active","rootEntities","rootEntity","rootEntityCount","Feature","lastAmbientLight","SceneManager","_activeScene","loadScene","destroyOldScene","scenePromise","mergeScenes","sourceScene","destScene","oldRootEntities","_destroyAllScene","ShaderPool","init","blinnPhongVs","blinnPhongFs","pbrVs","pbrFs","pbrSpecularFs","unlitVs","unlitFs","shadowMapVs","shadowMapFs","shadowFs","skyboxVs","skyboxFs","particleVs","particleFs","spriteMaskVs","spriteMaskFs","spriteVs","spriteFs","backgroundTextureVs","backgroundTextureFs","ShaderProgramPool","_cacheHierarchy","_cacheMap","_lastQueryMap","_lastQueryKey","cacheMap","maskLength","_resizeCacheMapHierarchy","maxEndIndex","subCacheShaders","cacheKey","hierarchy","resizeLength","engineFeatureManager","inputManager","_spriteElementPool","_textElementPool","_spriteDefaultMaterial","_renderContext","_magentaMaterial","_renderCount","_shaderProgramPools","_spriteMaskManager","_canSpriteBatch","_settings","_resourceManager","_sceneManager","_vSyncCount","_targetFrameRate","_time","_isPaused","_requestId","_timeoutId","_vSyncCounter","_targetFrameInterval","_waittingDestroy","_animate","requestAnimationFrame","setTimeout","_createSpriteMaterial","_createSpriteMaskMaterial","magentaPixel","magentaTexture2D","magentaTextureCube","PositiveX","NegativeX","PositiveY","NegativeY","PositiveZ","NegativeZ","magentaTexture2DArray","magentaMaterial","backgroundTextureMaterial","Gamma","_gammaMacro","createEntity","pause","cancelAnimationFrame","clearTimeout","resume","time","sort","camera1","camera2","priority","run","shaderProgramPools","render","Transparent","_pixelsPerUnit","SystemInfo","_isIos","ua","navigator","userAgent","toLocaleLowerCase","devicePixelRatio","EngineFeature","preLoad","preTick","currentScene","postTick","shutdown","Script","onAwake","onEnable","other","onDisable","passNum","RenderPass","renderOverride","clearColor","opaqueQueue","alphaTestQueue","transparentQueue","SpriteBatcher","preRenderer","curRenderer","checkBatchWithMask","leftMaskInteraction","maskManager","spriteElement","RenderQueue","_compareFromNearToFar","_compareFromFarToNear","items","_spriteBatcher","renderCount","renderPassFlag","rendererData","materialData","switchProgram","switchRenderCount","compareFunc","_quickSort","from","to","_insertionSort","third_index","v0","v1","v2","c01","tmp","c02","c12","low_end","high_start","partition","order","top_elem","BasicRenderPipeline","_opaqueQueue","_transparentQueue","_alphaTestQueue","_defaultPass","_renderPassArray","_lastCanvasSize","addRenderPass","nameOrPass","renderPass","p1","p2","removeRenderPass","pass","getRenderPass","cubeFace","_drawRenderPass","activeRenderTarget","clearRenderTarget","_drawSky","_drawBackgroundTexture","AlphaTest","MathTemp","tempVec4","tempVec3","tempVec2","_isOrthographic","_isProjMatSetting","_nearClipPlane","_farClipPlane","_fieldOfView","_orthographicSize","_isProjectionDirty","_isInvProjMatDirty","_isFrustumProjectDirty","_customAspectRatio","_renderTarget","_transform","_isViewMatrixDirty","_isInvViewProjDirty","_frustumViewChangeFlag","resetProjectionMatrix","_projMatChange","resetAspectRatio","worldToViewportPoint","cameraPoint","viewportPoint","transformToVec4","viewportToWorldPoint","nearClipPlane","farClipPlane","nf","pointZ","_innerViewportToWorldPoint","_getInvViewProjMat","invViewProjMat","origin","screenToViewportPoint","viewportToScreenPoint","worldToScreenPoint","screenToWorldPoint","screenPointToRay","calculateFromMatrix","clipPoint","_viewMatrixProperty","_projectionMatrixProperty","_vpMatrixProperty","_inverseViewMatrixProperty","_inverseProjectionMatrixProperty","_getInverseProjectionMatrix","_cameraPositionProperty","_invViewProjMat","_inverseProjectionMatrix","_viewport","rotationTranslation","_viewMatrix","_lastAspectSize","_projectionMatrix","aspectRatio","perspective","ortho","BoundingFrustum","mimeType","json","gltf","mtl","prefab","txt","bin","png","webp","jpg","defaultRetryCount","defaultTimeout","defaultInterval","request","getMimeTypeFromUrl","realRequest","requestImage","requestRes","lastError","MultiExecutor","stop","img","Image","onerror","onabort","timeoutId","onload","crossOrigin","xhr","XMLHttpRequest","status","response","responseText","ontimeout","onprogress","loaded","open","withCredentials","credentials","responseType","headers","setRequestHeader","send","extname","execFunc","interval","_currentCount","done","exec","Loader","registerClass","className","classDefine","_engineObjects","getClass","AssetType","RenderFace","BlendMode","TextureCoordinate","BaseMaterial","_renderFace","Front","_isTransparent","_blendMode","blendMode","_alphaCutoffProp","_alphaCutoffMacro","Double","Additive","_baseColorProp","_baseTextureProp","_baseTextureMacro","_tilingOffsetProp","_normalTextureProp","_normalIntensityProp","_normalTextureMacro","_emissiveColorProp","_emissiveTextureProp","_emissiveTextureMacro","BlinnPhongMaterial","_specularColorProp","_shininessProp","baseColor","specularColor","_specularTextureProp","emissiveColor","tilingOffset","PBRBaseMaterial","_occlusionTextureIntensityProp","_occlusionTextureCoordProp","UV0","_clearCoatProp","_clearCoatRoughnessProp","_occlusionTextureProp","_clearCoatTextureProp","_clearCoatRoughnessTextureProp","_clearCoatNormalTextureProp","PBRMaterial","_metallicProp","_roughnessProp","_roughnessMetallicTextureProp","PBRSpecularMaterial","_glossinessProp","_specularGlossinessTextureProp","_specularGlossinessTextureMacro","UnlitMaterial","TextHorizontalAlignment","TextVerticalAlignment","OverflowMode","FontStyle","SpriteAtlas","getSprite","_sprites","_spriteNamesToIndex","getSprites","outSprites","_addSprite","SpriteDrawMode","Sprite","border","_assetID","_uvs","_atlasRotated","_atlasRegion","Rect","_atlasRegionOffset","_region","_pivot","_border","cloneSprite","_updatePositions","_updateUVs","_calDefaultSize","pixelsPerUnitReciprocal","blank","regionX","regionY","regionW","regionH","regionRight","regionBottom","atlasRegionX","atlasRegionY","atlasRegionW","atlasRegionH","offsetLeft","offsetTop","offsetRight","offsetBottom","realWidth","realHeight","borderLeft","borderBottom","borderRight","borderTop","_dispatchSpriteChange","clamp","SlicedSpriteAssembler","expectWidth","expectHeight","fixedLeft","fixedBottom","fixedRight","fixedTop","row","column","widthScale","heightScale","localTransX","localTransY","realICount","rowValue","rowU","columnValue","realJCount","indexOffset","SpriteRenderer","_color","drawMode","Simple","_assembler","_updateStencilState","_maskInteraction","compare","VisibleInsideMask","_drawMode","Sliced","_maskLayer","FontAtlas","_charInfoMap","_space","_curX","_curY","_nextY","uploadCharTexture","charInfo","h","space","textureSize","offsetWidth","offsetHeight","endX","endY","textureSizeReciprocal","u0","u1","addCharInfo","char","getCharInfo","Font","createFromOS","fontMap","_fontMap","font","_name","_fontAtlases","_lastIndex","_uploadCharTexture","fontAtlases","_createFontAtlas","fontAtlas","_addCharInfo","_getCharInfo","_getTextureByIndex","_getLastIndex","CharRenderData","localPositions","CharRenderDataPool","put","TextUtils","textContext","_textContext","getContext","measureFont","fontString","fontSizeInfoCache","_fontSizeInfoCache","_measureFontOrChar","getNativeFontString","fontName","fontSize","Bold","Italic","_genericFontFamilies","measureChar","measureTextWithWrap","fontStyle","charFont","_styleFont","fontSizeInfo","subTexts","text","lineWidths","lineMaxSizes","lineHeight","lineSpacing","wrapWidth","subText","chars","charsWidth","maxAscent","maxDescent","halfH","ascent","descent","xAdvance","overflowMode","Overflow","measureTextWithoutWrap","lineCount","curWidth","getNativeFontHash","measureString","_measureString","round","measureText","baseline","_measureBaseline","_heightMultiplier","_baselineMultiplier","fillStyle","clearRect","textBaseline","fillText","colorData","getImageData","integerW","integerWReciprocal","sizeInfo","lineIntegerW","TextRenderer","_isWorldMatrixDirty","WorldBounds","_text","enableWrapping","Truncate","MaskInteraction","StyleFont","_resetStyleFont","LocalPositionBounds","_updateLocalData","_updatePosition","spriteElementPool","textElement","charRenderDatas","_charRenderDatas","charCount","charRenderData","_charRenderDataPool","_font","_localBounds","lastStyleFont","e0","e1","e2","e4","e5","e6","e12","e13","e14","topLeftX","topLeftY","worldPosition0","worldPosition1","worldPosition2","horizontalAlignment","verticalAlignment","rendererWidth","halfRendererWidth","rendererHeight","textMetrics","charRenderDataPool","halfLineHeight","linesLen","startY","topDiff","bottomDiff","Top","Center","Bottom","renderDataCount","minX","MAX_SAFE_INTEGER","minY","maxX","MIN_SAFE_INTEGER","maxY","lastLineIndex","lineWidth","startX","Left","Right","lastRenderDataCount","_fontSize","_fontStyle","_lineSpacing","_horizontalAlignment","_verticalAlignment","_enableWrapping","_overflowMode","AnimationClipCurveBinding","relativePath","curve","AnimationEvent","functionName","parameter","AnimationProperty","Motion","AnimationClip","_curveBindings","_events","addEvent","clearEvents","addCurveBinding","Rotation","Scale","BlendShapeWeights","curveBinding","clearCurveBindings","_sampleAnimation","curveData","val","evaluate","InterpolableValueType","AnimatorUtils","scaleWeight","sX","sY","sZ","pow","abs","scaleBlend","sa","sb","saw","_tempVector30","sbw","_tempVector31","sng","quaternionWeight","AnimatorLayerBlendingMode","AnimatorStatePlayState","LayerState","AnimationCurveOwner","crossCurveMark","crossCurveIndex","defaultValue","fixedPoseValue","_hasSavedDefaultValue","weightLength","saveDefaultValue","saveFixedPoseValue","AnimationEventHandler","handlers","AnimatorStateTransition","duration","exitTime","destinationState","WrapMode","AnimatorStatePlayData","state","stateData","frameTime","playState","clipTime","currentEventIndex","offsetFrameTime","UnStarted","clipStartTime","clip","isBackwards","_getDuration","Playing","wrapMode","Loop","Finished","clipEndTime","AnimatorLayerData","animatorStateDataMap","srcPlayData","destPlayData","layerState","Standby","manuallyTransition","crossFadeTransition","switchPlayData","switchTemp","AnimatorStateData","curveOwners","eventHandlers","AnimatorStateInfo","layerIndex","CrossCurveData","curveOwner","srcCurveIndex","destCurveIndex","AnimatorTempValue","vector2","vector3","vector4","quaternion","_floatArrayPool","floatArray","Animator","_animatorController","play","stateName","normalizedTimeOffset","_controllerUpdateFlag","_clearPlayData","animatorInfo","_getAnimatorStateInfo","_animatorInfo","animatorLayerData","_getAnimatorLayerData","curState","_revertDefaultValue","animatorStateData","_getAnimatorStateData","_saveDefaultValues","_reset","animatorController","layers","states","stateMachine","crossFade","normalizedTransitionDuration","_crossFadeByTransition","speed","_updateLayer","getCurrentAnimatorState","_animatorLayersData","findStateByName","animatorState","animatorStateDataCollection","_saveAnimatorStateData","_saveAnimatorEventHandlers","animationCureOwners","_animationCurveOwners","curves","targetEntity","propertyOwners","eventHandlerPool","_animationEventHandlerPool","scriptCount","eventHandler","funcName","handler","_clearCrossData","_crossCurveDataCollection","_crossCurveDataPool","_addCrossCurveData","crossCurveData","owner","curCurveIndex","nextCurveIndex","dataItem","_prepareCrossFading","_prepareSrcCrossData","_prepareDestCrossData","_prepareStandbyCrossFading","_prepareFixedPoseCrossFading","saveFixed","_evaluateCurve","additive","tempValue","baseValue","_valueType","_valueSize","_evaluate","divide","tempQuat","_tempQuat","conjugate","firstLayer","blendingMode","animLayerData","crossFadeTransitionInfo","layerAdditive","layerWeight","FixedCrossFading","_checkTransition","_updatePlayingState","_updateCrossFadeFromPose","CrossFading","_updateCrossFade","playData","layerData","lastPlayState","lastClipTime","_fireAnimationEvents","_baseTempValue","_applyClipValueAdditive","_applyClipValue","_callAnimatorScriptOnEnter","_callAnimatorScriptOnExit","_callAnimatorScriptOnUpdate","crossCurveDataCollection","srcCurves","srcState","srcStateData","lastSrcPlayState","srcEventHandler","destState","destStateData","lastDstPlayState","destEventHandler","destCurves","lastSrcClipTime","lastDestClipTime","crossWeight","srcPlayState","destPlayState","_updateCrossFadeData","srcClipTime","destClipTime","srcValue","destValue","_crossTempValue","_applyCrossClipValue","fixed","lerp","slerp","additiveValue","transitions","transition","animatorStateInfo","crossState","clipDuration","_fireSubAnimationEvents","_fireBackwardSubAnimationEvents","curClipTime","eventIndex","_onStateEnterScripts","onStateEnter","_onStateUpdateScripts","onStateUpdate","_onStateExitScripts","onStateExit","_speed","_registerChangeFlag","AnimatorController","_layers","_layersMap","findLayerByName","_distributeUpdateFlag","removeLayer","theLayer","clearLayers","AnimatorControllerLayer","Override","StateMachineScript","_state","animator","_removeStateMachineScript","AnimatorState","_clipStartTime","_clipEndTime","_clip","_transitions","addTransition","removeTransition","addStateMachineScript","scriptType","clearTransitions","AnimatorStateMachine","_statesMap","addState","removeState","makeUniqueStateName","originName","InterpolationType","AnimationCurve","interpolation","_tempValue","_currentIndex","addKey","moveKey","removeKey","newLength","curIndex","nextIndex","_evaluateStep","curFrameTime","dur","_evaluateLinear","Step","CubicSpine","Hermite","_evaluateHermite","frameIndex","nextFrameIndex","nextValue","curKey","nextKey","t0","outTangent","t1","inTangent","p0","isFinite","t2","t3","tan0","tan1","Keyframe","InterpolableKeyframe","AnimatorConditionMode","SkyBoxMaterial","_decodeParam","DirtyFlagType","ParticleRendererBlendMode","ParticleRenderer","_getRandom","random","props","_vertexStride","_vertexBuffer","_maxCount","_positionRandomness","_positionArray","_velocity","_velocityRandomness","_acceleration","_accelerationRandomness","_colorRandomness","_sizeRandomness","_alpha","_alphaRandomness","_startAngle","_startAngleRandomness","_rotateVelocity","_rotateVelocityRandomness","_lifetime","_startTimeRandomness","_isOnce","_onceTime","_isInit","_isStart","_updateDirtyFlag","_isRotateToVelocity","_isUseOriginColor","_isScaleByLifetime","_is2d","_isFadeIn","_isFadeOut","_playOnEnable","spriteSheet","_createMaterial","_updateBuffer","isUseOriginColor","is2d","isFadeOut","useUint32","_uint16VertexLimit","startIndex","_updateSingleBuffer","getRandom","k0","k1","k2","k3","pos","Velocity","Acceleration","StartTime","LifeTime","Size","StartAngle","RotateVelocity","_updateSingleUv","q","ratio","VERT_SHADER","FRAG_SHADER","TrailMaterial","_tempVector3","TrailRenderer","_stroke","_minSeg","_maxPointNum","_points","_pointStates","_strapPoints","_curPointNum","_prePointsNum","stroke","minSeg","lifetime","targetFrameRate","_initGeometry","mov","newIdx","appendNewPoint","lastPoint","_updateStrapVertices","_updateStrapCoords","TriangleStrip","points","vx","vy","vz","down","dy","perpVector","_projectOnPlane","acos","texDelta","_projectOnVector","n_p","cosine","Fog","EXP2Fog","_density","density","_densityProperty","LinearFog","_near","_far","near","far","_nearProperty","_farProperty","Probe","probeLayer","_isCube","_oriCameraRenderTarget","_renderTargetSwap","_activeRenderTarget","_oriCameraCullingMask","onTextureChange","renderColorTexture","cacheTarget","cacheUp","cacheDir","CubeProbe","oriViewMatrix","_oriFieldOfView","_storeCamera","_setCamera","_restoreCamera","fieldOfView","LightShadow","_viewMatFromLightProperty","_projMatFromLightProperty","_shadowBiasProperty","bias","_shadowIntensityProperty","_shadowRadiusProperty","_shadowMapSizeProperty","mapSize","_shadowMapsProperty","clearMap","_mapSize","initShadowProjectionMatrix","fov","sqrt","appendData","viewStart","projectionStart","biasStart","intensityStart","radiusStart","mapSizeStart","mapStart","defineProperty","_enableShadow","shadow","_receiveShadow","_castShadow","ShadowMapMaterial","ShadowMapPass","queue","ShadowMaterial","ShadowPass","lightMgr","defaultRenderPass","shadowMapCount","lgt","enableShadow","ShadowFeature","_shadowPass","_shadowMapMaterial","addShadowPass","shadowMapPass","addShadowMapPass","updatePassRenderFlag","shadowMaterial","Layer30","Layer31","renderQueue","receiveShadow","castShadow"],"mappings":"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A,IAAI,CAAA,MAAA,CAAA,GAAA,EAAA,CAAA,GAAA,MAAA,CAAA;AAAJA,EAAAA,IAAI,CAAJA,IAAI,CAAA,MAAA,CAAA,GAAA,EAAA,CAAA,GAAA,MAAA,CAAA;AAAJA,EAAAA,IAAI,CAAJA,IAAI,CAAA,MAAA,CAAA,GAAA,EAAA,CAAA,GAAA,MAAA,CAAA;AAAJA,EAAAA,IAAI,CAAJA,IAAI,CAAA,MAAA,CAAA,GAAA,EAAA,CAAA,GAAA,MAAA,CAAA;AAAJA,EAAAA,IAAI,CAAJA,IAAI,CAAA,MAAA,CAAA,GAAA,EAAA,CAAA,GAAA,MAAA,CAAA;AAAJA,EAAAA,IAAI,CAAJA,IAAI,CAAA,MAAA,CAAA,GAAA,EAAA,CAAA,GAAA,MAAA,CAAA;AAAJA,EAAAA,IAAI,CAAJA,IAAI,CAAA,MAAA,CAAA,GAAA,EAAA,CAAA,GAAA,MAAA,CAAA;AAAJA,EAAAA,IAAI,CAAJA,IAAI,CAAA,MAAA,CAAA,GAAA,EAAA,CAAA,GAAA,MAAA,CAAA;AAAJA,EAAAA,IAAI,CAAJA,IAAI,CAAA,MAAA,CAAA,GAAA,EAAA,CAAA,GAAA,MAAA,CAAA;AAAJA,EAAAA,IAAI,CAAJA,IAAI,CAAA,MAAA,CAAA,GAAA,EAAA,CAAA,GAAA,MAAA,CAAA;AAAJA,EAAAA,IAAI,CAAJA,IAAI,CAAA,MAAA,CAAA,GAAA,EAAA,CAAA,GAAA,MAAA,CAAA;AAAJA,EAAAA,IAAI,CAAJA,IAAI,CAAA,MAAA,CAAA,GAAA,EAAA,CAAA,GAAA,MAAA,CAAA;AAAJA,EAAAA,IAAI,CAAJA,IAAI,CAAA,MAAA,CAAA,GAAA,EAAA,CAAA,GAAA,MAAA,CAAA;AAAJA,EAAAA,IAAI,CAAJA,IAAI,CAAA,MAAA,CAAA,GAAA,EAAA,CAAA,GAAA,MAAA,CAAA;AAAJA,EAAAA,IAAI,CAAJA,IAAI,CAAA,MAAA,CAAA,GAAA,EAAA,CAAA,GAAA,MAAA,CAAA;AAAJA,EAAAA,IAAI,CAAJA,IAAI,CAAA,MAAA,CAAA,GAAA,EAAA,CAAA,GAAA,MAAA,CAAA;AAAJA,EAAAA,IAAI,CAAJA,IAAI,CAAA,MAAA,CAAA,GAAA,EAAA,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"}